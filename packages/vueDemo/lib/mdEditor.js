(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('punycode'), require('vue')) :
    typeof define === 'function' && define.amd ? define(['punycode', 'vue'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.MdEditorVueComp = factory(global.require$$8, global.Vue));
 })(this, (function (require$$8, Vue) { 'use strict';
 
    /**
    The data structure for documents. @nonabstract
    */
    class Text {
        /**
        Get the line description around the given position.
        */
        lineAt(pos) {
            if (pos < 0 || pos > this.length)
                throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
            return this.lineInner(pos, false, 1, 0);
        }
        /**
        Get the description for the given (1-based) line number.
        */
        line(n) {
            if (n < 1 || n > this.lines)
                throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
            return this.lineInner(n, true, 1, 0);
        }
        /**
        Replace a range of the text with the given content.
        */
        replace(from, to, text) {
            let parts = [];
            this.decompose(0, from, parts, 2 /* Open.To */);
            if (text.length)
                text.decompose(0, text.length, parts, 1 /* Open.From */ | 2 /* Open.To */);
            this.decompose(to, this.length, parts, 1 /* Open.From */);
            return TextNode.from(parts, this.length - (to - from) + text.length);
        }
        /**
        Append another document to this one.
        */
        append(other) {
            return this.replace(this.length, this.length, other);
        }
        /**
        Retrieve the text between the given points.
        */
        slice(from, to = this.length) {
            let parts = [];
            this.decompose(from, to, parts, 0);
            return TextNode.from(parts, to - from);
        }
        /**
        Test whether this text is equal to another instance.
        */
        eq(other) {
            if (other == this)
                return true;
            if (other.length != this.length || other.lines != this.lines)
                return false;
            let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
            let a = new RawTextCursor(this), b = new RawTextCursor(other);
            for (let skip = start, pos = start;;) {
                a.next(skip);
                b.next(skip);
                skip = 0;
                if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
                    return false;
                pos += a.value.length;
                if (a.done || pos >= end)
                    return true;
            }
        }
        /**
        Iterate over the text. When `dir` is `-1`, iteration happens
        from end to start. This will return lines and the breaks between
        them as separate strings.
        */
        iter(dir = 1) { return new RawTextCursor(this, dir); }
        /**
        Iterate over a range of the text. When `from` > `to`, the
        iterator will run in reverse.
        */
        iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
        /**
        Return a cursor that iterates over the given range of lines,
        _without_ returning the line breaks between, and yielding empty
        strings for empty lines.
        
        When `from` and `to` are given, they should be 1-based line numbers.
        */
        iterLines(from, to) {
            let inner;
            if (from == null) {
                inner = this.iter();
            }
            else {
                if (to == null)
                    to = this.lines + 1;
                let start = this.line(from).from;
                inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
            }
            return new LineCursor(inner);
        }
        /**
        Return the document as a string, using newline characters to
        separate lines.
        */
        toString() { return this.sliceString(0); }
        /**
        Convert the document to an array of lines (which can be
        deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#state.Text^of)).
        */
        toJSON() {
            let lines = [];
            this.flatten(lines);
            return lines;
        }
        /**
        @internal
        */
        constructor() { }
        /**
        Create a `Text` instance for the given array of lines.
        */
        static of(text) {
            if (text.length == 0)
                throw new RangeError("A document must have at least one line");
            if (text.length == 1 && !text[0])
                return Text.empty;
            return text.length <= 32 /* Tree.Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
        }
    }
    // Leaves store an array of line strings. There are always line breaks
    // between these strings. Leaves are limited in size and have to be
    // contained in TextNode instances for bigger documents.
    class TextLeaf extends Text {
        constructor(text, length = textLength(text)) {
            super();
            this.text = text;
            this.length = length;
        }
        get lines() { return this.text.length; }
        get children() { return null; }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let string = this.text[i], end = offset + string.length;
                if ((isLine ? line : end) >= target)
                    return new Line(offset, end, line, string);
                offset = end + 1;
                line++;
            }
        }
        decompose(from, to, target, open) {
            let text = from <= 0 && to >= this.length ? this
                : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
            if (open & 1 /* Open.From */) {
                let prev = target.pop();
                let joined = appendText(text.text, prev.text.slice(), 0, text.length);
                if (joined.length <= 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(joined, prev.length + text.length));
                }
                else {
                    let mid = joined.length >> 1;
                    target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
                }
            }
            else {
                target.push(text);
            }
        }
        replace(from, to, text) {
            if (!(text instanceof TextLeaf))
                return super.replace(from, to, text);
            let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
            let newLen = this.length + text.length - (to - from);
            if (lines.length <= 32 /* Tree.Branch */)
                return new TextLeaf(lines, newLen);
            return TextNode.from(TextLeaf.split(lines, []), newLen);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
                let line = this.text[i], end = pos + line.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += line.slice(Math.max(0, from - pos), to - pos);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let line of this.text)
                target.push(line);
        }
        scanIdentical() { return 0; }
        static split(text, target) {
            let part = [], len = -1;
            for (let line of text) {
                part.push(line);
                len += line.length + 1;
                if (part.length == 32 /* Tree.Branch */) {
                    target.push(new TextLeaf(part, len));
                    part = [];
                    len = -1;
                }
            }
            if (len > -1)
                target.push(new TextLeaf(part, len));
            return target;
        }
    }
    // Nodes provide the tree structure of the `Text` type. They store a
    // number of other nodes or leaves, taking care to balance themselves
    // on changes. There are implied line breaks _between_ the children of
    // a node (but not before the first or after the last child).
    class TextNode extends Text {
        constructor(children, length) {
            super();
            this.children = children;
            this.length = length;
            this.lines = 0;
            for (let child of children)
                this.lines += child.lines;
        }
        lineInner(target, isLine, line, offset) {
            for (let i = 0;; i++) {
                let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
                if ((isLine ? endLine : end) >= target)
                    return child.lineInner(target, isLine, line, offset);
                offset = end + 1;
                line = endLine + 1;
            }
        }
        decompose(from, to, target, open) {
            for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (from <= end && to >= pos) {
                    let childOpen = open & ((pos <= from ? 1 /* Open.From */ : 0) | (end >= to ? 2 /* Open.To */ : 0));
                    if (pos >= from && end <= to && !childOpen)
                        target.push(child);
                    else
                        child.decompose(from - pos, to - pos, target, childOpen);
                }
                pos = end + 1;
            }
        }
        replace(from, to, text) {
            if (text.lines < this.lines)
                for (let i = 0, pos = 0; i < this.children.length; i++) {
                    let child = this.children[i], end = pos + child.length;
                    // Fast path: if the change only affects one child and the
                    // child's size remains in the acceptable range, only update
                    // that child
                    if (from >= pos && to <= end) {
                        let updated = child.replace(from - pos, to - pos, text);
                        let totalLines = this.lines - child.lines + updated.lines;
                        if (updated.lines < (totalLines >> (5 /* Tree.BranchShift */ - 1)) &&
                            updated.lines > (totalLines >> (5 /* Tree.BranchShift */ + 1))) {
                            let copy = this.children.slice();
                            copy[i] = updated;
                            return new TextNode(copy, this.length - (to - from) + text.length);
                        }
                        return super.replace(pos, end, updated);
                    }
                    pos = end + 1;
                }
            return super.replace(from, to, text);
        }
        sliceString(from, to = this.length, lineSep = "\n") {
            let result = "";
            for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos > from && i)
                    result += lineSep;
                if (from < end && to > pos)
                    result += child.sliceString(from - pos, to - pos, lineSep);
                pos = end + 1;
            }
            return result;
        }
        flatten(target) {
            for (let child of this.children)
                child.flatten(target);
        }
        scanIdentical(other, dir) {
            if (!(other instanceof TextNode))
                return 0;
            let length = 0;
            let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
                : [this.children.length - 1, other.children.length - 1, -1, -1];
            for (;; iA += dir, iB += dir) {
                if (iA == eA || iB == eB)
                    return length;
                let chA = this.children[iA], chB = other.children[iB];
                if (chA != chB)
                    return length + chA.scanIdentical(chB, dir);
                length += chA.length + 1;
            }
        }
        static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
            let lines = 0;
            for (let ch of children)
                lines += ch.lines;
            if (lines < 32 /* Tree.Branch */) {
                let flat = [];
                for (let ch of children)
                    ch.flatten(flat);
                return new TextLeaf(flat, length);
            }
            let chunk = Math.max(32 /* Tree.Branch */, lines >> 5 /* Tree.BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
            let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
            function add(child) {
                let last;
                if (child.lines > maxChunk && child instanceof TextNode) {
                    for (let node of child.children)
                        add(node);
                }
                else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
                    flush();
                    chunked.push(child);
                }
                else if (child instanceof TextLeaf && currentLines &&
                    (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
                    child.lines + last.lines <= 32 /* Tree.Branch */) {
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
                }
                else {
                    if (currentLines + child.lines > chunk)
                        flush();
                    currentLines += child.lines;
                    currentLen += child.length + 1;
                    currentChunk.push(child);
                }
            }
            function flush() {
                if (currentLines == 0)
                    return;
                chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
                currentLen = -1;
                currentLines = currentChunk.length = 0;
            }
            for (let child of children)
                add(child);
            flush();
            return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
        }
    }
    Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
    function textLength(text) {
        let length = -1;
        for (let line of text)
            length += line.length + 1;
        return length;
    }
    function appendText(text, target, from = 0, to = 1e9) {
        for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
            let line = text[i], end = pos + line.length;
            if (end >= from) {
                if (end > to)
                    line = line.slice(0, to - pos);
                if (pos < from)
                    line = line.slice(from - pos);
                if (first) {
                    target[target.length - 1] += line;
                    first = false;
                }
                else
                    target.push(line);
            }
            pos = end + 1;
        }
        return target;
    }
    function sliceText(text, from, to) {
        return appendText(text, [""], from, to);
    }
    class RawTextCursor {
        constructor(text, dir = 1) {
            this.dir = dir;
            this.done = false;
            this.lineBreak = false;
            this.value = "";
            this.nodes = [text];
            this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
        }
        nextInner(skip, dir) {
            this.done = this.lineBreak = false;
            for (;;) {
                let last = this.nodes.length - 1;
                let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
                let size = top instanceof TextLeaf ? top.text.length : top.children.length;
                if (offset == (dir > 0 ? size : 0)) {
                    if (last == 0) {
                        this.done = true;
                        this.value = "";
                        return this;
                    }
                    if (dir > 0)
                        this.offsets[last - 1]++;
                    this.nodes.pop();
                    this.offsets.pop();
                }
                else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
                    this.offsets[last] += dir;
                    if (skip == 0) {
                        this.lineBreak = true;
                        this.value = "\n";
                        return this;
                    }
                    skip--;
                }
                else if (top instanceof TextLeaf) {
                    // Move to the next string
                    let next = top.text[offset + (dir < 0 ? -1 : 0)];
                    this.offsets[last] += dir;
                    if (next.length > Math.max(0, skip)) {
                        this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
                        return this;
                    }
                    skip -= next.length;
                }
                else {
                    let next = top.children[offset + (dir < 0 ? -1 : 0)];
                    if (skip > next.length) {
                        skip -= next.length;
                        this.offsets[last] += dir;
                    }
                    else {
                        if (dir < 0)
                            this.offsets[last]--;
                        this.nodes.push(next);
                        this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
                    }
                }
            }
        }
        next(skip = 0) {
            if (skip < 0) {
                this.nextInner(-skip, (-this.dir));
                skip = this.value.length;
            }
            return this.nextInner(skip, this.dir);
        }
    }
    class PartialTextCursor {
        constructor(text, start, end) {
            this.value = "";
            this.done = false;
            this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
            this.pos = start > end ? text.length : 0;
            this.from = Math.min(start, end);
            this.to = Math.max(start, end);
        }
        nextInner(skip, dir) {
            if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
                this.value = "";
                this.done = true;
                return this;
            }
            skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
            let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
            if (skip > limit)
                skip = limit;
            limit -= skip;
            let { value } = this.cursor.next(skip);
            this.pos += (value.length + skip) * dir;
            this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
            this.done = !this.value;
            return this;
        }
        next(skip = 0) {
            if (skip < 0)
                skip = Math.max(skip, this.from - this.pos);
            else if (skip > 0)
                skip = Math.min(skip, this.to - this.pos);
            return this.nextInner(skip, this.cursor.dir);
        }
        get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
    }
    class LineCursor {
        constructor(inner) {
            this.inner = inner;
            this.afterBreak = true;
            this.value = "";
            this.done = false;
        }
        next(skip = 0) {
            let { done, lineBreak, value } = this.inner.next(skip);
            if (done) {
                this.done = true;
                this.value = "";
            }
            else if (lineBreak) {
                if (this.afterBreak) {
                    this.value = "";
                }
                else {
                    this.afterBreak = true;
                    this.next();
                }
            }
            else {
                this.value = value;
                this.afterBreak = false;
            }
            return this;
        }
        get lineBreak() { return false; }
    }
    if (typeof Symbol != "undefined") {
        Text.prototype[Symbol.iterator] = function () { return this.iter(); };
        RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
            LineCursor.prototype[Symbol.iterator] = function () { return this; };
    }
    /**
    This type describes a line in the document. It is created
    on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#state.Text.lineAt).
    */
    class Line {
        /**
        @internal
        */
        constructor(
        /**
        The position of the start of the line.
        */
        from, 
        /**
        The position at the end of the line (_before_ the line break,
        or at the end of document for the last line).
        */
        to, 
        /**
        This line's line number (1-based).
        */
        number, 
        /**
        The line's content.
        */
        text) {
            this.from = from;
            this.to = to;
            this.number = number;
            this.text = text;
        }
        /**
        The length of the line (not including any line break after it).
        */
        get length() { return this.to - this.from; }
    }
 
    // Compressed representation of the Grapheme_Cluster_Break=Extend
    // information from
    // http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
    // Each pair of elements represents a range, as an offet from the
    // previous range and a length. Numbers are in base-36, with the empty
    // string being a shorthand for 1.
    let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
    // Convert offsets into absolute values
    for (let i = 1; i < extend.length; i++)
        extend[i] += extend[i - 1];
    function isExtendingChar(code) {
        for (let i = 1; i < extend.length; i += 2)
            if (extend[i] > code)
                return extend[i - 1] <= code;
        return false;
    }
    function isRegionalIndicator(code) {
        return code >= 0x1F1E6 && code <= 0x1F1FF;
    }
    const ZWJ = 0x200d;
    /**
    Returns a next grapheme cluster break _after_ (not equal to)
    `pos`, if `forward` is true, or before otherwise. Returns `pos`
    itself if no further cluster break is available in the string.
    Moves across surrogate pairs, extending characters (when
    `includeExtending` is true), characters joined with zero-width
    joiners, and flag emoji.
    */
    function findClusterBreak(str, pos, forward = true, includeExtending = true) {
        return (forward ? nextClusterBreak : prevClusterBreak)(str, pos, includeExtending);
    }
    function nextClusterBreak(str, pos, includeExtending) {
        if (pos == str.length)
            return pos;
        // If pos is in the middle of a surrogate pair, move to its start
        if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
            pos--;
        let prev = codePointAt(str, pos);
        pos += codePointSize(prev);
        while (pos < str.length) {
            let next = codePointAt(str, pos);
            if (prev == ZWJ || next == ZWJ || includeExtending && isExtendingChar(next)) {
                pos += codePointSize(next);
                prev = next;
            }
            else if (isRegionalIndicator(next)) {
                let countBefore = 0, i = pos - 2;
                while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
                    countBefore++;
                    i -= 2;
                }
                if (countBefore % 2 == 0)
                    break;
                else
                    pos += 2;
            }
            else {
                break;
            }
        }
        return pos;
    }
    function prevClusterBreak(str, pos, includeExtending) {
        while (pos > 0) {
            let found = nextClusterBreak(str, pos - 2, includeExtending);
            if (found < pos)
                return found;
            pos--;
        }
        return 0;
    }
    function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
    function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
    /**
    Find the code point at the given position in a string (like the
    [`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
    string method).
    */
    function codePointAt(str, pos) {
        let code0 = str.charCodeAt(pos);
        if (!surrogateHigh(code0) || pos + 1 == str.length)
            return code0;
        let code1 = str.charCodeAt(pos + 1);
        if (!surrogateLow(code1))
            return code0;
        return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
    }
    /**
    The amount of positions a character takes up a JavaScript string.
    */
    function codePointSize(code) { return code < 0x10000 ? 1 : 2; }
 
    const DefaultSplit = /\r\n?|\n/;
    /**
    Distinguishes different ways in which positions can be mapped.
    */
    var MapMode = /*@__PURE__*/(function (MapMode) {
        /**
        Map a position to a valid new position, even when its context
        was deleted.
        */
        MapMode[MapMode["Simple"] = 0] = "Simple";
        /**
        Return null if deletion happens across the position.
        */
        MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
        /**
        Return null if the character _before_ the position is deleted.
        */
        MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
        /**
        Return null if the character _after_ the position is deleted.
        */
        MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
    return MapMode})(MapMode || (MapMode = {}));
    /**
    A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
    that doesn't store the inserted text. As such, it can't be
    applied, but is cheaper to store and manipulate.
    */
    class ChangeDesc {
        // Sections are encoded as pairs of integers. The first is the
        // length in the current document, and the second is -1 for
        // unaffected sections, and the length of the replacement content
        // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
        // 0), and a replacement two positive numbers.
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        sections) {
            this.sections = sections;
        }
        /**
        The length of the document before the change.
        */
        get length() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2)
                result += this.sections[i];
            return result;
        }
        /**
        The length of the document after the change.
        */
        get newLength() {
            let result = 0;
            for (let i = 0; i < this.sections.length; i += 2) {
                let ins = this.sections[i + 1];
                result += ins < 0 ? this.sections[i] : ins;
            }
            return result;
        }
        /**
        False when there are actual changes in this set.
        */
        get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
        /**
        Iterate over the unchanged parts left by these changes. `posA`
        provides the position of the range in the old document, `posB`
        the new position in the changed document.
        */
        iterGaps(f) {
            for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0) {
                    f(posA, posB, len);
                    posB += len;
                }
                else {
                    posB += ins;
                }
                posA += len;
            }
        }
        /**
        Iterate over the ranges changed by these changes. (See
        [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
        variant that also provides you with the inserted text.)
        `fromA`/`toA` provides the extent of the change in the starting
        document, `fromB`/`toB` the extent of the replacement in the
        changed document.
        
        When `individual` is true, adjacent changes (which are kept
        separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
        reported separately.
        */
        iterChangedRanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a description of the inverted form of these changes.
        */
        get invertedDesc() {
            let sections = [];
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                if (ins < 0)
                    sections.push(len, ins);
                else
                    sections.push(ins, len);
            }
            return new ChangeDesc(sections);
        }
        /**
        Compute the combined effect of applying another set of changes
        after this one. The length of the document after this set should
        match the length before `other`.
        */
        composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
        /**
        Map this description, which should start with the same document
        as `other`, over another set of changes, so that it can be
        applied after it. When `before` is true, map as if the changes
        in `other` happened before the ones in `this`.
        */
        mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
        mapPos(pos, assoc = -1, mode = MapMode.Simple) {
            let posA = 0, posB = 0;
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
                if (ins < 0) {
                    if (endA > pos)
                        return posB + (pos - posA);
                    posB += len;
                }
                else {
                    if (mode != MapMode.Simple && endA >= pos &&
                        (mode == MapMode.TrackDel && posA < pos && endA > pos ||
                            mode == MapMode.TrackBefore && posA < pos ||
                            mode == MapMode.TrackAfter && endA > pos))
                        return null;
                    if (endA > pos || endA == pos && assoc < 0 && !len)
                        return pos == posA || assoc < 0 ? posB : posB + ins;
                    posB += ins;
                }
                posA = endA;
            }
            if (pos > posA)
                throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
            return posB;
        }
        /**
        Check whether these changes touch a given range. When one of the
        changes entirely covers the range, the string `"cover"` is
        returned.
        */
        touchesRange(from, to = from) {
            for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
                let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
                if (ins >= 0 && pos <= to && end >= from)
                    return pos < from && end > to ? "cover" : true;
                pos = end;
            }
            return false;
        }
        /**
        @internal
        */
        toString() {
            let result = "";
            for (let i = 0; i < this.sections.length;) {
                let len = this.sections[i++], ins = this.sections[i++];
                result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
            }
            return result;
        }
        /**
        Serialize this change desc to a JSON-representable value.
        */
        toJSON() { return this.sections; }
        /**
        Create a change desc from its JSON representation (as produced
        by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
                throw new RangeError("Invalid JSON representation of ChangeDesc");
            return new ChangeDesc(json);
        }
        /**
        @internal
        */
        static create(sections) { return new ChangeDesc(sections); }
    }
    /**
    A change set represents a group of modifications to a document. It
    stores the document length, and can only be applied to documents
    with exactly that length.
    */
    class ChangeSet extends ChangeDesc {
        constructor(sections, 
        /**
        @internal
        */
        inserted) {
            super(sections);
            this.inserted = inserted;
        }
        /**
        Apply the changes to a document, returning the modified
        document.
        */
        apply(doc) {
            if (this.length != doc.length)
                throw new RangeError("Applying change set to a document with the wrong length");
            iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
            return doc;
        }
        mapDesc(other, before = false) { return mapSet(this, other, before, true); }
        /**
        Given the document as it existed _before_ the changes, return a
        change set that represents the inverse of this set, which could
        be used to go from the document created by the changes back to
        the document as it existed before the changes.
        */
        invert(doc) {
            let sections = this.sections.slice(), inserted = [];
            for (let i = 0, pos = 0; i < sections.length; i += 2) {
                let len = sections[i], ins = sections[i + 1];
                if (ins >= 0) {
                    sections[i] = ins;
                    sections[i + 1] = len;
                    let index = i >> 1;
                    while (inserted.length < index)
                        inserted.push(Text.empty);
                    inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
                }
                pos += len;
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        Combine two subsequent change sets into a single set. `other`
        must start in the document produced by `this`. If `this` goes
        `docA` → `docB` and `other` represents `docB` → `docC`, the
        returned value will represent the change `docA` → `docC`.
        */
        compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
        /**
        Given another change set starting in the same document, maps this
        change set over the other, producing a new change set that can be
        applied to the document produced by applying `other`. When
        `before` is `true`, order changes as if `this` comes before
        `other`, otherwise (the default) treat `other` as coming first.
        
        Given two changes `A` and `B`, `A.compose(B.map(A))` and
        `B.compose(A.map(B, true))` will produce the same document. This
        provides a basic form of [operational
        transformation](https://en.wikipedia.org/wiki/Operational_transformation),
        and can be used for collaborative editing.
        */
        map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
        /**
        Iterate over the changed ranges in the document, calling `f` for
        each, with the range in the original document (`fromA`-`toA`)
        and the range that replaces it in the new document
        (`fromB`-`toB`).
        
        When `individual` is true, adjacent changes are reported
        separately.
        */
        iterChanges(f, individual = false) {
            iterChanges(this, f, individual);
        }
        /**
        Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
        set.
        */
        get desc() { return ChangeDesc.create(this.sections); }
        /**
        @internal
        */
        filter(ranges) {
            let resultSections = [], resultInserted = [], filteredSections = [];
            let iter = new SectionIter(this);
            done: for (let i = 0, pos = 0;;) {
                let next = i == ranges.length ? 1e9 : ranges[i++];
                while (pos < next || pos == next && iter.len == 0) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, next - pos);
                    addSection(filteredSections, len, -1);
                    let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
                    addSection(resultSections, len, ins);
                    if (ins > 0)
                        addInsert(resultInserted, resultSections, iter.text);
                    iter.forward(len);
                    pos += len;
                }
                let end = ranges[i++];
                while (pos < end) {
                    if (iter.done)
                        break done;
                    let len = Math.min(iter.len, end - pos);
                    addSection(resultSections, len, -1);
                    addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
                    iter.forward(len);
                    pos += len;
                }
            }
            return { changes: new ChangeSet(resultSections, resultInserted),
                filtered: ChangeDesc.create(filteredSections) };
        }
        /**
        Serialize this change set to a JSON-representable value.
        */
        toJSON() {
            let parts = [];
            for (let i = 0; i < this.sections.length; i += 2) {
                let len = this.sections[i], ins = this.sections[i + 1];
                if (ins < 0)
                    parts.push(len);
                else if (ins == 0)
                    parts.push([len]);
                else
                    parts.push([len].concat(this.inserted[i >> 1].toJSON()));
            }
            return parts;
        }
        /**
        Create a change set for the given changes, for a document of the
        given length, using `lineSep` as line separator.
        */
        static of(changes, length, lineSep) {
            let sections = [], inserted = [], pos = 0;
            let total = null;
            function flush(force = false) {
                if (!force && !sections.length)
                    return;
                if (pos < length)
                    addSection(sections, length - pos, -1);
                let set = new ChangeSet(sections, inserted);
                total = total ? total.compose(set.map(total)) : set;
                sections = [];
                inserted = [];
                pos = 0;
            }
            function process(spec) {
                if (Array.isArray(spec)) {
                    for (let sub of spec)
                        process(sub);
                }
                else if (spec instanceof ChangeSet) {
                    if (spec.length != length)
                        throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
                    flush();
                    total = total ? total.compose(spec.map(total)) : spec;
                }
                else {
                    let { from, to = from, insert } = spec;
                    if (from > to || from < 0 || to > length)
                        throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
                    let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
                    let insLen = insText.length;
                    if (from == to && insLen == 0)
                        return;
                    if (from < pos)
                        flush();
                    if (from > pos)
                        addSection(sections, from - pos, -1);
                    addSection(sections, to - from, insLen);
                    addInsert(inserted, sections, insText);
                    pos = to;
                }
            }
            process(changes);
            flush(!total);
            return total;
        }
        /**
        Create an empty changeset of the given length.
        */
        static empty(length) {
            return new ChangeSet(length ? [length, -1] : [], []);
        }
        /**
        Create a changeset from its JSON representation (as produced by
        [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
        */
        static fromJSON(json) {
            if (!Array.isArray(json))
                throw new RangeError("Invalid JSON representation of ChangeSet");
            let sections = [], inserted = [];
            for (let i = 0; i < json.length; i++) {
                let part = json[i];
                if (typeof part == "number") {
                    sections.push(part, -1);
                }
                else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
                    throw new RangeError("Invalid JSON representation of ChangeSet");
                }
                else if (part.length == 1) {
                    sections.push(part[0], 0);
                }
                else {
                    while (inserted.length < i)
                        inserted.push(Text.empty);
                    inserted[i] = Text.of(part.slice(1));
                    sections.push(part[0], inserted[i].length);
                }
            }
            return new ChangeSet(sections, inserted);
        }
        /**
        @internal
        */
        static createSet(sections, inserted) {
            return new ChangeSet(sections, inserted);
        }
    }
    function addSection(sections, len, ins, forceJoin = false) {
        if (len == 0 && ins <= 0)
            return;
        let last = sections.length - 2;
        if (last >= 0 && ins <= 0 && ins == sections[last + 1])
            sections[last] += len;
        else if (len == 0 && sections[last] == 0)
            sections[last + 1] += ins;
        else if (forceJoin) {
            sections[last] += len;
            sections[last + 1] += ins;
        }
        else
            sections.push(len, ins);
    }
    function addInsert(values, sections, value) {
        if (value.length == 0)
            return;
        let index = (sections.length - 2) >> 1;
        if (index < values.length) {
            values[values.length - 1] = values[values.length - 1].append(value);
        }
        else {
            while (values.length < index)
                values.push(Text.empty);
            values.push(value);
        }
    }
    function iterChanges(desc, f, individual) {
        let inserted = desc.inserted;
        for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
            let len = desc.sections[i++], ins = desc.sections[i++];
            if (ins < 0) {
                posA += len;
                posB += len;
            }
            else {
                let endA = posA, endB = posB, text = Text.empty;
                for (;;) {
                    endA += len;
                    endB += ins;
                    if (ins && inserted)
                        text = text.append(inserted[(i - 2) >> 1]);
                    if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
                        break;
                    len = desc.sections[i++];
                    ins = desc.sections[i++];
                }
                f(posA, endA, posB, endB, text);
                posA = endA;
                posB = endB;
            }
        }
    }
    function mapSet(setA, setB, before, mkSet = false) {
        // Produce a copy of setA that applies to the document after setB
        // has been applied (assuming both start at the same document).
        let sections = [], insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        // Iterate over both sets in parallel. inserted tracks, for changes
        // in A that have to be processed piece-by-piece, whether their
        // content has been inserted already, and refers to the section
        // index.
        for (let inserted = -1;;) {
            if (a.ins == -1 && b.ins == -1) {
                // Move across ranges skipped by both sets.
                let len = Math.min(a.len, b.len);
                addSection(sections, len, -1);
                a.forward(len);
                b.forward(len);
            }
            else if (b.ins >= 0 && (a.ins < 0 || inserted == a.i || a.off == 0 && (b.len < a.len || b.len == a.len && !before))) {
                // If there's a change in B that comes before the next change in
                // A (ordered by start pos, then len, then before flag), skip
                // that (and process any changes in A it covers).
                let len = b.len;
                addSection(sections, b.ins, -1);
                while (len) {
                    let piece = Math.min(a.len, len);
                    if (a.ins >= 0 && inserted < a.i && a.len <= piece) {
                        addSection(sections, 0, a.ins);
                        if (insert)
                            addInsert(insert, sections, a.text);
                        inserted = a.i;
                    }
                    a.forward(piece);
                    len -= piece;
                }
                b.next();
            }
            else if (a.ins >= 0) {
                // Process the part of a change in A up to the start of the next
                // non-deletion change in B (if overlapping).
                let len = 0, left = a.len;
                while (left) {
                    if (b.ins == -1) {
                        let piece = Math.min(left, b.len);
                        len += piece;
                        left -= piece;
                        b.forward(piece);
                    }
                    else if (b.ins == 0 && b.len < left) {
                        left -= b.len;
                        b.next();
                    }
                    else {
                        break;
                    }
                }
                addSection(sections, len, inserted < a.i ? a.ins : 0);
                if (insert && inserted < a.i)
                    addInsert(insert, sections, a.text);
                inserted = a.i;
                a.forward(a.len - left);
            }
            else if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else {
                throw new Error("Mismatched change set lengths");
            }
        }
    }
    function composeSets(setA, setB, mkSet = false) {
        let sections = [];
        let insert = mkSet ? [] : null;
        let a = new SectionIter(setA), b = new SectionIter(setB);
        for (let open = false;;) {
            if (a.done && b.done) {
                return insert ? ChangeSet.createSet(sections, insert) : ChangeDesc.create(sections);
            }
            else if (a.ins == 0) { // Deletion in A
                addSection(sections, a.len, 0, open);
                a.next();
            }
            else if (b.len == 0 && !b.done) { // Insertion in B
                addSection(sections, 0, b.ins, open);
                if (insert)
                    addInsert(insert, sections, b.text);
                b.next();
            }
            else if (a.done || b.done) {
                throw new Error("Mismatched change set lengths");
            }
            else {
                let len = Math.min(a.len2, b.len), sectionLen = sections.length;
                if (a.ins == -1) {
                    let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
                    addSection(sections, len, insB, open);
                    if (insert && insB)
                        addInsert(insert, sections, b.text);
                }
                else if (b.ins == -1) {
                    addSection(sections, a.off ? 0 : a.len, len, open);
                    if (insert)
                        addInsert(insert, sections, a.textBit(len));
                }
                else {
                    addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
                    if (insert && !b.off)
                        addInsert(insert, sections, b.text);
                }
                open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
                a.forward2(len);
                b.forward(len);
            }
        }
    }
    class SectionIter {
        constructor(set) {
            this.set = set;
            this.i = 0;
            this.next();
        }
        next() {
            let { sections } = this.set;
            if (this.i < sections.length) {
                this.len = sections[this.i++];
                this.ins = sections[this.i++];
            }
            else {
                this.len = 0;
                this.ins = -2;
            }
            this.off = 0;
        }
        get done() { return this.ins == -2; }
        get len2() { return this.ins < 0 ? this.len : this.ins; }
        get text() {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length ? Text.empty : inserted[index];
        }
        textBit(len) {
            let { inserted } = this.set, index = (this.i - 2) >> 1;
            return index >= inserted.length && !len ? Text.empty
                : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
        }
        forward(len) {
            if (len == this.len)
                this.next();
            else {
                this.len -= len;
                this.off += len;
            }
        }
        forward2(len) {
            if (this.ins == -1)
                this.forward(len);
            else if (len == this.ins)
                this.next();
            else {
                this.ins -= len;
                this.off += len;
            }
        }
    }
 
    /**
    A single selection range. When
    [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
    is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
    multiple ranges. By default, selections hold exactly one range.
    */
    class SelectionRange {
        constructor(
        /**
        The lower boundary of the range.
        */
        from, 
        /**
        The upper boundary of the range.
        */
        to, flags) {
            this.from = from;
            this.to = to;
            this.flags = flags;
        }
        /**
        The anchor of the range—the side that doesn't move when you
        extend it.
        */
        get anchor() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.to : this.from; }
        /**
        The head of the range, which is moved when the range is
        [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
        */
        get head() { return this.flags & 16 /* RangeFlag.Inverted */ ? this.from : this.to; }
        /**
        True when `anchor` and `head` are at the same position.
        */
        get empty() { return this.from == this.to; }
        /**
        If this is a cursor that is explicitly associated with the
        character on one of its sides, this returns the side. -1 means
        the character before its position, 1 the character after, and 0
        means no association.
        */
        get assoc() { return this.flags & 4 /* RangeFlag.AssocBefore */ ? -1 : this.flags & 8 /* RangeFlag.AssocAfter */ ? 1 : 0; }
        /**
        The bidirectional text level associated with this cursor, if
        any.
        */
        get bidiLevel() {
            let level = this.flags & 3 /* RangeFlag.BidiLevelMask */;
            return level == 3 ? null : level;
        }
        /**
        The goal column (stored vertical offset) associated with a
        cursor. This is used to preserve the vertical position when
        [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
        lines of different length.
        */
        get goalColumn() {
            let value = this.flags >> 5 /* RangeFlag.GoalColumnOffset */;
            return value == 33554431 /* RangeFlag.NoGoalColumn */ ? undefined : value;
        }
        /**
        Map this range through a change, producing a valid range in the
        updated document.
        */
        map(change, assoc = -1) {
            let from, to;
            if (this.empty) {
                from = to = change.mapPos(this.from, assoc);
            }
            else {
                from = change.mapPos(this.from, 1);
                to = change.mapPos(this.to, -1);
            }
            return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
        }
        /**
        Extend this range to cover at least `from` to `to`.
        */
        extend(from, to = from) {
            if (from <= this.anchor && to >= this.anchor)
                return EditorSelection.range(from, to);
            let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
            return EditorSelection.range(this.anchor, head);
        }
        /**
        Compare this range to another range.
        */
        eq(other) {
            return this.anchor == other.anchor && this.head == other.head;
        }
        /**
        Return a JSON-serializable object representing the range.
        */
        toJSON() { return { anchor: this.anchor, head: this.head }; }
        /**
        Convert a JSON representation of a range to a `SelectionRange`
        instance.
        */
        static fromJSON(json) {
            if (!json || typeof json.anchor != "number" || typeof json.head != "number")
                throw new RangeError("Invalid JSON representation for SelectionRange");
            return EditorSelection.range(json.anchor, json.head);
        }
        /**
        @internal
        */
        static create(from, to, flags) {
            return new SelectionRange(from, to, flags);
        }
    }
    /**
    An editor selection holds one or more selection ranges.
    */
    class EditorSelection {
        constructor(
        /**
        The ranges in the selection, sorted by position. Ranges cannot
        overlap (but they may touch, if they aren't empty).
        */
        ranges, 
        /**
        The index of the _main_ range in the selection (which is
        usually the range that was added last).
        */
        mainIndex) {
            this.ranges = ranges;
            this.mainIndex = mainIndex;
        }
        /**
        Map a selection through a change. Used to adjust the selection
        position for changes.
        */
        map(change, assoc = -1) {
            if (change.empty)
                return this;
            return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
        }
        /**
        Compare this selection to another selection.
        */
        eq(other) {
            if (this.ranges.length != other.ranges.length ||
                this.mainIndex != other.mainIndex)
                return false;
            for (let i = 0; i < this.ranges.length; i++)
                if (!this.ranges[i].eq(other.ranges[i]))
                    return false;
            return true;
        }
        /**
        Get the primary selection range. Usually, you should make sure
        your code applies to _all_ ranges, by using methods like
        [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
        */
        get main() { return this.ranges[this.mainIndex]; }
        /**
        Make sure the selection only has one range. Returns a selection
        holding only the main range from this selection.
        */
        asSingle() {
            return this.ranges.length == 1 ? this : new EditorSelection([this.main], 0);
        }
        /**
        Extend this selection with an extra range.
        */
        addRange(range, main = true) {
            return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
        }
        /**
        Replace a given range with another range, and then normalize the
        selection to merge and sort ranges if necessary.
        */
        replaceRange(range, which = this.mainIndex) {
            let ranges = this.ranges.slice();
            ranges[which] = range;
            return EditorSelection.create(ranges, this.mainIndex);
        }
        /**
        Convert this selection to an object that can be serialized to
        JSON.
        */
        toJSON() {
            return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
        }
        /**
        Create a selection from a JSON representation.
        */
        static fromJSON(json) {
            if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
                throw new RangeError("Invalid JSON representation for EditorSelection");
            return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
        }
        /**
        Create a selection holding a single range.
        */
        static single(anchor, head = anchor) {
            return new EditorSelection([EditorSelection.range(anchor, head)], 0);
        }
        /**
        Sort and merge the given set of ranges, creating a valid
        selection.
        */
        static create(ranges, mainIndex = 0) {
            if (ranges.length == 0)
                throw new RangeError("A selection needs at least one range");
            for (let pos = 0, i = 0; i < ranges.length; i++) {
                let range = ranges[i];
                if (range.empty ? range.from <= pos : range.from < pos)
                    return EditorSelection.normalized(ranges.slice(), mainIndex);
                pos = range.to;
            }
            return new EditorSelection(ranges, mainIndex);
        }
        /**
        Create a cursor selection range at the given position. You can
        safely ignore the optional arguments in most situations.
        */
        static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
            return SelectionRange.create(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* RangeFlag.AssocBefore */ : 8 /* RangeFlag.AssocAfter */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
                ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */));
        }
        /**
        Create a selection range.
        */
        static range(anchor, head, goalColumn, bidiLevel) {
            let flags = ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* RangeFlag.NoGoalColumn */) << 5 /* RangeFlag.GoalColumnOffset */) |
                (bidiLevel == null ? 3 : Math.min(2, bidiLevel));
            return head < anchor ? SelectionRange.create(head, anchor, 16 /* RangeFlag.Inverted */ | 8 /* RangeFlag.AssocAfter */ | flags)
                : SelectionRange.create(anchor, head, (head > anchor ? 4 /* RangeFlag.AssocBefore */ : 0) | flags);
        }
        /**
        @internal
        */
        static normalized(ranges, mainIndex = 0) {
            let main = ranges[mainIndex];
            ranges.sort((a, b) => a.from - b.from);
            mainIndex = ranges.indexOf(main);
            for (let i = 1; i < ranges.length; i++) {
                let range = ranges[i], prev = ranges[i - 1];
                if (range.empty ? range.from <= prev.to : range.from < prev.to) {
                    let from = prev.from, to = Math.max(range.to, prev.to);
                    if (i <= mainIndex)
                        mainIndex--;
                    ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
                }
            }
            return new EditorSelection(ranges, mainIndex);
        }
    }
    function checkSelection(selection, docLength) {
        for (let range of selection.ranges)
            if (range.to > docLength)
                throw new RangeError("Selection points outside of document");
    }
 
    let nextID = 0;
    /**
    A facet is a labeled value that is associated with an editor
    state. It takes inputs from any number of extensions, and combines
    those into a single output value.
 
    Examples of uses of facets are the [tab
    size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize), [editor
    attributes](https://codemirror.net/6/docs/ref/#view.EditorView^editorAttributes), and [update
    listeners](https://codemirror.net/6/docs/ref/#view.EditorView^updateListener).
    */
    class Facet {
        constructor(
        /**
        @internal
        */
        combine, 
        /**
        @internal
        */
        compareInput, 
        /**
        @internal
        */
        compare, isStatic, enables) {
            this.combine = combine;
            this.compareInput = compareInput;
            this.compare = compare;
            this.isStatic = isStatic;
            /**
            @internal
            */
            this.id = nextID++;
            this.default = combine([]);
            this.extensions = typeof enables == "function" ? enables(this) : enables;
        }
        /**
        Define a new facet.
        */
        static define(config = {}) {
            return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
        }
        /**
        Returns an extension that adds the given value to this facet.
        */
        of(value) {
            return new FacetProvider([], this, 0 /* Provider.Static */, value);
        }
        /**
        Create an extension that computes a value for the facet from a
        state. You must take care to declare the parts of the state that
        this value depends on, since your function is only called again
        for a new state when one of those parts changed.
        
        In cases where your value depends only on a single field, you'll
        want to use the [`from`](https://codemirror.net/6/docs/ref/#state.Facet.from) method instead.
        */
        compute(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 1 /* Provider.Single */, get);
        }
        /**
        Create an extension that computes zero or more values for this
        facet from a state.
        */
        computeN(deps, get) {
            if (this.isStatic)
                throw new Error("Can't compute a static facet");
            return new FacetProvider(deps, this, 2 /* Provider.Multi */, get);
        }
        from(field, get) {
            if (!get)
                get = x => x;
            return this.compute([field], state => get(state.field(field)));
        }
    }
    function sameArray$1(a, b) {
        return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
    }
    class FacetProvider {
        constructor(dependencies, facet, type, value) {
            this.dependencies = dependencies;
            this.facet = facet;
            this.type = type;
            this.value = value;
            this.id = nextID++;
        }
        dynamicSlot(addresses) {
            var _a;
            let getter = this.value;
            let compare = this.facet.compareInput;
            let id = this.id, idx = addresses[id] >> 1, multi = this.type == 2 /* Provider.Multi */;
            let depDoc = false, depSel = false, depAddrs = [];
            for (let dep of this.dependencies) {
                if (dep == "doc")
                    depDoc = true;
                else if (dep == "selection")
                    depSel = true;
                else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
                    depAddrs.push(addresses[dep.id]);
            }
            return {
                create(state) {
                    state.values[idx] = getter(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update(state, tr) {
                    if ((depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) || ensureAll(state, depAddrs)) {
                        let newVal = getter(state);
                        if (multi ? !compareArray(newVal, state.values[idx], compare) : !compare(newVal, state.values[idx])) {
                            state.values[idx] = newVal;
                            return 1 /* SlotStatus.Changed */;
                        }
                    }
                    return 0;
                },
                reconfigure: (state, oldState) => {
                    let newVal, oldAddr = oldState.config.address[id];
                    if (oldAddr != null) {
                        let oldVal = getAddr(oldState, oldAddr);
                        if (this.dependencies.every(dep => {
                            return dep instanceof Facet ? oldState.facet(dep) === state.facet(dep) :
                                dep instanceof StateField ? oldState.field(dep, false) == state.field(dep, false) : true;
                        }) || (multi ? compareArray(newVal = getter(state), oldVal, compare) : compare(newVal = getter(state), oldVal))) {
                            state.values[idx] = oldVal;
                            return 0;
                        }
                    }
                    else {
                        newVal = getter(state);
                    }
                    state.values[idx] = newVal;
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
    }
    function compareArray(a, b, compare) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!compare(a[i], b[i]))
                return false;
        return true;
    }
    function ensureAll(state, addrs) {
        let changed = false;
        for (let addr of addrs)
            if (ensureAddr(state, addr) & 1 /* SlotStatus.Changed */)
                changed = true;
        return changed;
    }
    function dynamicFacetSlot(addresses, facet, providers) {
        let providerAddrs = providers.map(p => addresses[p.id]);
        let providerTypes = providers.map(p => p.type);
        let dynamic = providerAddrs.filter(p => !(p & 1));
        let idx = addresses[facet.id] >> 1;
        function get(state) {
            let values = [];
            for (let i = 0; i < providerAddrs.length; i++) {
                let value = getAddr(state, providerAddrs[i]);
                if (providerTypes[i] == 2 /* Provider.Multi */)
                    for (let val of value)
                        values.push(val);
                else
                    values.push(value);
            }
            return facet.combine(values);
        }
        return {
            create(state) {
                for (let addr of providerAddrs)
                    ensureAddr(state, addr);
                state.values[idx] = get(state);
                return 1 /* SlotStatus.Changed */;
            },
            update(state, tr) {
                if (!ensureAll(state, dynamic))
                    return 0;
                let value = get(state);
                if (facet.compare(value, state.values[idx]))
                    return 0;
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            },
            reconfigure(state, oldState) {
                let depChanged = ensureAll(state, providerAddrs);
                let oldProviders = oldState.config.facets[facet.id], oldValue = oldState.facet(facet);
                if (oldProviders && !depChanged && sameArray$1(providers, oldProviders)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                let value = get(state);
                if (facet.compare(value, oldValue)) {
                    state.values[idx] = oldValue;
                    return 0;
                }
                state.values[idx] = value;
                return 1 /* SlotStatus.Changed */;
            }
        };
    }
    const initField = /*@__PURE__*/Facet.define({ static: true });
    /**
    Fields can store additional information in an editor state, and
    keep it in sync with the rest of the state.
    */
    class StateField {
        constructor(
        /**
        @internal
        */
        id, createF, updateF, compareF, 
        /**
        @internal
        */
        spec) {
            this.id = id;
            this.createF = createF;
            this.updateF = updateF;
            this.compareF = compareF;
            this.spec = spec;
            /**
            @internal
            */
            this.provides = undefined;
        }
        /**
        Define a state field.
        */
        static define(config) {
            let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
            if (config.provide)
                field.provides = config.provide(field);
            return field;
        }
        create(state) {
            let init = state.facet(initField).find(i => i.field == this);
            return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
        }
        /**
        @internal
        */
        slot(addresses) {
            let idx = addresses[this.id] >> 1;
            return {
                create: (state) => {
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                },
                update: (state, tr) => {
                    let oldVal = state.values[idx];
                    let value = this.updateF(oldVal, tr);
                    if (this.compareF(oldVal, value))
                        return 0;
                    state.values[idx] = value;
                    return 1 /* SlotStatus.Changed */;
                },
                reconfigure: (state, oldState) => {
                    if (oldState.config.address[this.id] != null) {
                        state.values[idx] = oldState.field(this);
                        return 0;
                    }
                    state.values[idx] = this.create(state);
                    return 1 /* SlotStatus.Changed */;
                }
            };
        }
        /**
        Returns an extension that enables this field and overrides the
        way it is initialized. Can be useful when you need to provide a
        non-default starting value for the field.
        */
        init(create) {
            return [this, initField.of({ field: this, create })];
        }
        /**
        State field instances can be used as
        [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
        given state.
        */
        get extension() { return this; }
    }
    const Prec_ = { lowest: 4, low: 3, default: 2, high: 1, highest: 0 };
    function prec$1(value) {
        return (ext) => new PrecExtension(ext, value);
    }
    /**
    By default extensions are registered in the order they are found
    in the flattened form of nested array that was provided.
    Individual extension values can be assigned a precedence to
    override this. Extensions that do not have a precedence set get
    the precedence of the nearest parent with a precedence, or
    [`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
    final ordering of extensions is determined by first sorting by
    precedence and then by order within each precedence.
    */
    const Prec = {
        /**
        The highest precedence level, for extensions that should end up
        near the start of the precedence ordering.
        */
        highest: /*@__PURE__*/prec$1(Prec_.highest),
        /**
        A higher-than-default precedence, for extensions that should
        come before those with default precedence.
        */
        high: /*@__PURE__*/prec$1(Prec_.high),
        /**
        The default precedence, which is also used for extensions
        without an explicit precedence.
        */
        default: /*@__PURE__*/prec$1(Prec_.default),
        /**
        A lower-than-default precedence.
        */
        low: /*@__PURE__*/prec$1(Prec_.low),
        /**
        The lowest precedence level. Meant for things that should end up
        near the end of the extension order.
        */
        lowest: /*@__PURE__*/prec$1(Prec_.lowest)
    };
    class PrecExtension {
        constructor(inner, prec) {
            this.inner = inner;
            this.prec = prec;
        }
    }
    /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
    class Compartment {
        /**
        Create an instance of this compartment to add to your [state
        configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
        */
        of(ext) { return new CompartmentInstance(this, ext); }
        /**
        Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
        reconfigures this compartment.
        */
        reconfigure(content) {
            return Compartment.reconfigure.of({ compartment: this, extension: content });
        }
        /**
        Get the current content of the compartment in the state, or
        `undefined` if it isn't present.
        */
        get(state) {
            return state.config.compartments.get(this);
        }
    }
    class CompartmentInstance {
        constructor(compartment, inner) {
            this.compartment = compartment;
            this.inner = inner;
        }
    }
    class Configuration {
        constructor(base, compartments, dynamicSlots, address, staticValues, facets) {
            this.base = base;
            this.compartments = compartments;
            this.dynamicSlots = dynamicSlots;
            this.address = address;
            this.staticValues = staticValues;
            this.facets = facets;
            this.statusTemplate = [];
            while (this.statusTemplate.length < dynamicSlots.length)
                this.statusTemplate.push(0 /* SlotStatus.Unresolved */);
        }
        staticFacet(facet) {
            let addr = this.address[facet.id];
            return addr == null ? facet.default : this.staticValues[addr >> 1];
        }
        static resolve(base, compartments, oldState) {
            let fields = [];
            let facets = Object.create(null);
            let newCompartments = new Map();
            for (let ext of flatten(base, compartments, newCompartments)) {
                if (ext instanceof StateField)
                    fields.push(ext);
                else
                    (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
            }
            let address = Object.create(null);
            let staticValues = [];
            let dynamicSlots = [];
            for (let field of fields) {
                address[field.id] = dynamicSlots.length << 1;
                dynamicSlots.push(a => field.slot(a));
            }
            let oldFacets = oldState === null || oldState === void 0 ? void 0 : oldState.config.facets;
            for (let id in facets) {
                let providers = facets[id], facet = providers[0].facet;
                let oldProviders = oldFacets && oldFacets[id] || [];
                if (providers.every(p => p.type == 0 /* Provider.Static */)) {
                    address[facet.id] = (staticValues.length << 1) | 1;
                    if (sameArray$1(oldProviders, providers)) {
                        staticValues.push(oldState.facet(facet));
                    }
                    else {
                        let value = facet.combine(providers.map(p => p.value));
                        staticValues.push(oldState && facet.compare(value, oldState.facet(facet)) ? oldState.facet(facet) : value);
                    }
                }
                else {
                    for (let p of providers) {
                        if (p.type == 0 /* Provider.Static */) {
                            address[p.id] = (staticValues.length << 1) | 1;
                            staticValues.push(p.value);
                        }
                        else {
                            address[p.id] = dynamicSlots.length << 1;
                            dynamicSlots.push(a => p.dynamicSlot(a));
                        }
                    }
                    address[facet.id] = dynamicSlots.length << 1;
                    dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
                }
            }
            let dynamic = dynamicSlots.map(f => f(address));
            return new Configuration(base, newCompartments, dynamic, address, staticValues, facets);
        }
    }
    function flatten(extension, compartments, newCompartments) {
        let result = [[], [], [], [], []];
        let seen = new Map();
        function inner(ext, prec) {
            let known = seen.get(ext);
            if (known != null) {
                if (known <= prec)
                    return;
                let found = result[known].indexOf(ext);
                if (found > -1)
                    result[known].splice(found, 1);
                if (ext instanceof CompartmentInstance)
                    newCompartments.delete(ext.compartment);
            }
            seen.set(ext, prec);
            if (Array.isArray(ext)) {
                for (let e of ext)
                    inner(e, prec);
            }
            else if (ext instanceof CompartmentInstance) {
                if (newCompartments.has(ext.compartment))
                    throw new RangeError(`Duplicate use of compartment in extensions`);
                let content = compartments.get(ext.compartment) || ext.inner;
                newCompartments.set(ext.compartment, content);
                inner(content, prec);
            }
            else if (ext instanceof PrecExtension) {
                inner(ext.inner, ext.prec);
            }
            else if (ext instanceof StateField) {
                result[prec].push(ext);
                if (ext.provides)
                    inner(ext.provides, prec);
            }
            else if (ext instanceof FacetProvider) {
                result[prec].push(ext);
                if (ext.facet.extensions)
                    inner(ext.facet.extensions, Prec_.default);
            }
            else {
                let content = ext.extension;
                if (!content)
                    throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
                inner(content, prec);
            }
        }
        inner(extension, Prec_.default);
        return result.reduce((a, b) => a.concat(b));
    }
    function ensureAddr(state, addr) {
        if (addr & 1)
            return 2 /* SlotStatus.Computed */;
        let idx = addr >> 1;
        let status = state.status[idx];
        if (status == 4 /* SlotStatus.Computing */)
            throw new Error("Cyclic dependency between fields and/or facets");
        if (status & 2 /* SlotStatus.Computed */)
            return status;
        state.status[idx] = 4 /* SlotStatus.Computing */;
        let changed = state.computeSlot(state, state.config.dynamicSlots[idx]);
        return state.status[idx] = 2 /* SlotStatus.Computed */ | changed;
    }
    function getAddr(state, addr) {
        return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
    }
 
    const languageData = /*@__PURE__*/Facet.define();
    const allowMultipleSelections = /*@__PURE__*/Facet.define({
        combine: values => values.some(v => v),
        static: true
    });
    const lineSeparator = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : undefined,
        static: true
    });
    const changeFilter = /*@__PURE__*/Facet.define();
    const transactionFilter = /*@__PURE__*/Facet.define();
    const transactionExtender = /*@__PURE__*/Facet.define();
    const readOnly = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : false
    });
 
    /**
    Annotations are tagged values that are used to add metadata to
    transactions in an extensible way. They should be used to model
    things that effect the entire transaction (such as its [time
    stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
    [origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
    _alongside_ the other changes made by the transaction, [state
    effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
    */
    class Annotation {
        /**
        @internal
        */
        constructor(
        /**
        The annotation type.
        */
        type, 
        /**
        The value of this annotation.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Define a new type of annotation.
        */
        static define() { return new AnnotationType(); }
    }
    /**
    Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
    */
    class AnnotationType {
        /**
        Create an instance of this annotation.
        */
        of(value) { return new Annotation(this, value); }
    }
    /**
    Representation of a type of state effect. Defined with
    [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
    */
    class StateEffectType {
        /**
        @internal
        */
        constructor(
        // The `any` types in these function types are there to work
        // around TypeScript issue #37631, where the type guard on
        // `StateEffect.is` mysteriously stops working when these properly
        // have type `Value`.
        /**
        @internal
        */
        map) {
            this.map = map;
        }
        /**
        Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
        type.
        */
        of(value) { return new StateEffect(this, value); }
    }
    /**
    State effects can be used to represent additional effects
    associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
    are often useful to model changes to custom [state
    fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
    document or selection changes.
    */
    class StateEffect {
        /**
        @internal
        */
        constructor(
        /**
        @internal
        */
        type, 
        /**
        The value of this effect.
        */
        value) {
            this.type = type;
            this.value = value;
        }
        /**
        Map this effect through a position mapping. Will return
        `undefined` when that ends up deleting the effect.
        */
        map(mapping) {
            let mapped = this.type.map(this.value, mapping);
            return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
        }
        /**
        Tells you whether this effect object is of a given
        [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
        */
        is(type) { return this.type == type; }
        /**
        Define a new effect type. The type parameter indicates the type
        of values that his effect holds. It should be a type that
        doesn't include `undefined`, since that is used in
        [mapping](https://codemirror.net/6/docs/ref/#state.StateEffect.map) to indicate that an effect is
        removed.
        */
        static define(spec = {}) {
            return new StateEffectType(spec.map || (v => v));
        }
        /**
        Map an array of effects through a change set.
        */
        static mapEffects(effects, mapping) {
            if (!effects.length)
                return effects;
            let result = [];
            for (let effect of effects) {
                let mapped = effect.map(mapping);
                if (mapped)
                    result.push(mapped);
            }
            return result;
        }
    }
    /**
    This effect can be used to reconfigure the root extensions of
    the editor. Doing this will discard any extensions
    [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
    the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
    compartments.
    */
    StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
    /**
    Append extensions to the top-level configuration of the editor.
    */
    StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
    /**
    Changes to the editor state are grouped into transactions.
    Typically, a user action creates a single transaction, which may
    contain any number of document changes, may change the selection,
    or have other effects. Create a transaction by calling
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update), or immediately
    dispatch one by calling
    [`EditorView.dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch).
    */
    class Transaction {
        constructor(
        /**
        The state from which the transaction starts.
        */
        startState, 
        /**
        The document changes made by this transaction.
        */
        changes, 
        /**
        The selection set by this transaction, or undefined if it
        doesn't explicitly set a selection.
        */
        selection, 
        /**
        The effects added to the transaction.
        */
        effects, 
        /**
        @internal
        */
        annotations, 
        /**
        Whether the selection should be scrolled into view after this
        transaction is dispatched.
        */
        scrollIntoView) {
            this.startState = startState;
            this.changes = changes;
            this.selection = selection;
            this.effects = effects;
            this.annotations = annotations;
            this.scrollIntoView = scrollIntoView;
            /**
            @internal
            */
            this._doc = null;
            /**
            @internal
            */
            this._state = null;
            if (selection)
                checkSelection(selection, changes.newLength);
            if (!annotations.some((a) => a.type == Transaction.time))
                this.annotations = annotations.concat(Transaction.time.of(Date.now()));
        }
        /**
        @internal
        */
        static create(startState, changes, selection, effects, annotations, scrollIntoView) {
            return new Transaction(startState, changes, selection, effects, annotations, scrollIntoView);
        }
        /**
        The new document produced by the transaction. Contrary to
        [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
        force the entire new state to be computed right away, so it is
        recommended that [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
        when they need to look at the new document.
        */
        get newDoc() {
            return this._doc || (this._doc = this.changes.apply(this.startState.doc));
        }
        /**
        The new selection produced by the transaction. If
        [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
        this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
        current selection through the changes made by the transaction.
        */
        get newSelection() {
            return this.selection || this.startState.selection.map(this.changes);
        }
        /**
        The new state created by the transaction. Computed on demand
        (but retained for subsequent access), so it is recommended not to
        access it in [transaction
        filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
        */
        get state() {
            if (!this._state)
                this.startState.applyTransaction(this);
            return this._state;
        }
        /**
        Get the value of the given annotation type, if any.
        */
        annotation(type) {
            for (let ann of this.annotations)
                if (ann.type == type)
                    return ann.value;
            return undefined;
        }
        /**
        Indicates whether the transaction changed the document.
        */
        get docChanged() { return !this.changes.empty; }
        /**
        Indicates whether this transaction reconfigures the state
        (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
        with a top-level configuration
        [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
        */
        get reconfigured() { return this.startState.config != this.state.config; }
        /**
        Returns true if the transaction has a [user
        event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
        or more specific than `event`. For example, if the transaction
        has `"select.pointer"` as user event, `"select"` and
        `"select.pointer"` will match it.
        */
        isUserEvent(event) {
            let e = this.annotation(Transaction.userEvent);
            return !!(e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == "."));
        }
    }
    /**
    Annotation used to store transaction timestamps. Automatically
    added to every transaction, holding `Date.now()`.
    */
    Transaction.time = /*@__PURE__*/Annotation.define();
    /**
    Annotation used to associate a transaction with a user interface
    event. Holds a string identifying the event, using a
    dot-separated format to support attaching more specific
    information. The events used by the core libraries are:
 
     - `"input"` when content is entered
       - `"input.type"` for typed input
         - `"input.type.compose"` for composition
       - `"input.paste"` for pasted input
       - `"input.drop"` when adding content with drag-and-drop
       - `"input.complete"` when autocompleting
     - `"delete"` when the user deletes content
       - `"delete.selection"` when deleting the selection
       - `"delete.forward"` when deleting forward from the selection
       - `"delete.backward"` when deleting backward from the selection
       - `"delete.cut"` when cutting to the clipboard
     - `"move"` when content is moved
       - `"move.drop"` when content is moved within the editor through drag-and-drop
     - `"select"` when explicitly changing the selection
       - `"select.pointer"` when selecting with a mouse or other pointing device
     - `"undo"` and `"redo"` for history actions
 
    Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
    whether the annotation matches a given event.
    */
    Transaction.userEvent = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating whether a transaction should be added to
    the undo history or not.
    */
    Transaction.addToHistory = /*@__PURE__*/Annotation.define();
    /**
    Annotation indicating (when present and true) that a transaction
    represents a change made by some other actor, not the user. This
    is used, for example, to tag other people's changes in
    collaborative editing.
    */
    Transaction.remote = /*@__PURE__*/Annotation.define();
    function joinRanges(a, b) {
        let result = [];
        for (let iA = 0, iB = 0;;) {
            let from, to;
            if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
                from = a[iA++];
                to = a[iA++];
            }
            else if (iB < b.length) {
                from = b[iB++];
                to = b[iB++];
            }
            else
                return result;
            if (!result.length || result[result.length - 1] < from)
                result.push(from, to);
            else if (result[result.length - 1] < to)
                result[result.length - 1] = to;
        }
    }
    function mergeTransaction(a, b, sequential) {
        var _a;
        let mapForA, mapForB, changes;
        if (sequential) {
            mapForA = b.changes;
            mapForB = ChangeSet.empty(b.changes.length);
            changes = a.changes.compose(b.changes);
        }
        else {
            mapForA = b.changes.map(a.changes);
            mapForB = a.changes.mapDesc(b.changes, true);
            changes = a.changes.compose(mapForA);
        }
        return {
            changes,
            selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
            effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
            annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
            scrollIntoView: a.scrollIntoView || b.scrollIntoView
        };
    }
    function resolveTransactionInner(state, spec, docSize) {
        let sel = spec.selection, annotations = asArray$1(spec.annotations);
        if (spec.userEvent)
            annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
        return {
            changes: spec.changes instanceof ChangeSet ? spec.changes
                : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
            selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
            effects: asArray$1(spec.effects),
            annotations,
            scrollIntoView: !!spec.scrollIntoView
        };
    }
    function resolveTransaction(state, specs, filter) {
        let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
        if (specs.length && specs[0].filter === false)
            filter = false;
        for (let i = 1; i < specs.length; i++) {
            if (specs[i].filter === false)
                filter = false;
            let seq = !!specs[i].sequential;
            s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
        }
        let tr = Transaction.create(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
        return extendTransaction(filter ? filterTransaction(tr) : tr);
    }
    // Finish a transaction by applying filters if necessary.
    function filterTransaction(tr) {
        let state = tr.startState;
        // Change filters
        let result = true;
        for (let filter of state.facet(changeFilter)) {
            let value = filter(tr);
            if (value === false) {
                result = false;
                break;
            }
            if (Array.isArray(value))
                result = result === true ? value : joinRanges(result, value);
        }
        if (result !== true) {
            let changes, back;
            if (result === false) {
                back = tr.changes.invertedDesc;
                changes = ChangeSet.empty(state.doc.length);
            }
            else {
                let filtered = tr.changes.filter(result);
                changes = filtered.changes;
                back = filtered.filtered.mapDesc(filtered.changes).invertedDesc;
            }
            tr = Transaction.create(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
        }
        // Transaction filters
        let filters = state.facet(transactionFilter);
        for (let i = filters.length - 1; i >= 0; i--) {
            let filtered = filters[i](tr);
            if (filtered instanceof Transaction)
                tr = filtered;
            else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
                tr = filtered[0];
            else
                tr = resolveTransaction(state, asArray$1(filtered), false);
        }
        return tr;
    }
    function extendTransaction(tr) {
        let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
        for (let i = extenders.length - 1; i >= 0; i--) {
            let extension = extenders[i](tr);
            if (extension && Object.keys(extension).length)
                spec = mergeTransaction(spec, resolveTransactionInner(state, extension, tr.changes.newLength), true);
        }
        return spec == tr ? tr : Transaction.create(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
    }
    const none = [];
    function asArray$1(value) {
        return value == null ? none : Array.isArray(value) ? value : [value];
    }
 
    /**
    The categories produced by a [character
    categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
    do things like selecting by word.
    */
    var CharCategory = /*@__PURE__*/(function (CharCategory) {
        /**
        Word characters.
        */
        CharCategory[CharCategory["Word"] = 0] = "Word";
        /**
        Whitespace.
        */
        CharCategory[CharCategory["Space"] = 1] = "Space";
        /**
        Anything else.
        */
        CharCategory[CharCategory["Other"] = 2] = "Other";
    return CharCategory})(CharCategory || (CharCategory = {}));
    const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
    let wordChar;
    try {
        wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
    }
    catch (_) { }
    function hasWordChar(str) {
        if (wordChar)
            return wordChar.test(str);
        for (let i = 0; i < str.length; i++) {
            let ch = str[i];
            if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
                return true;
        }
        return false;
    }
    function makeCategorizer(wordChars) {
        return (char) => {
            if (!/\S/.test(char))
                return CharCategory.Space;
            if (hasWordChar(char))
                return CharCategory.Word;
            for (let i = 0; i < wordChars.length; i++)
                if (char.indexOf(wordChars[i]) > -1)
                    return CharCategory.Word;
            return CharCategory.Other;
        };
    }
 
    /**
    The editor state class is a persistent (immutable) data structure.
    To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
    [transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
    instance, without modifying the original object.
 
    As such, _never_ mutate properties of a state directly. That'll
    just break things.
    */
    class EditorState {
        constructor(
        /**
        @internal
        */
        config, 
        /**
        The current document.
        */
        doc, 
        /**
        The current selection.
        */
        selection, 
        /**
        @internal
        */
        values, computeSlot, tr) {
            this.config = config;
            this.doc = doc;
            this.selection = selection;
            this.values = values;
            this.status = config.statusTemplate.slice();
            this.computeSlot = computeSlot;
            // Fill in the computed state immediately, so that further queries
            // for it made during the update return this state
            if (tr)
                tr._state = this;
            for (let i = 0; i < this.config.dynamicSlots.length; i++)
                ensureAddr(this, i << 1);
            this.computeSlot = null;
        }
        field(field, require = true) {
            let addr = this.config.address[field.id];
            if (addr == null) {
                if (require)
                    throw new RangeError("Field is not present in this state");
                return undefined;
            }
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
        state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
        can be passed. Unless
        [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
        [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
        are assumed to start in the _current_ document (not the document
        produced by previous specs), and its
        [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
        [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
        to the document created by its _own_ changes. The resulting
        transaction contains the combined effect of all the different
        specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
        specs take precedence over earlier ones.
        */
        update(...specs) {
            return resolveTransaction(this, specs, true);
        }
        /**
        @internal
        */
        applyTransaction(tr) {
            let conf = this.config, { base, compartments } = conf;
            for (let effect of tr.effects) {
                if (effect.is(Compartment.reconfigure)) {
                    if (conf) {
                        compartments = new Map;
                        conf.compartments.forEach((val, key) => compartments.set(key, val));
                        conf = null;
                    }
                    compartments.set(effect.value.compartment, effect.value.extension);
                }
                else if (effect.is(StateEffect.reconfigure)) {
                    conf = null;
                    base = effect.value;
                }
                else if (effect.is(StateEffect.appendConfig)) {
                    conf = null;
                    base = asArray$1(base).concat(effect.value);
                }
            }
            let startValues;
            if (!conf) {
                conf = Configuration.resolve(base, compartments, this);
                let intermediateState = new EditorState(conf, this.doc, this.selection, conf.dynamicSlots.map(() => null), (state, slot) => slot.reconfigure(state, this), null);
                startValues = intermediateState.values;
            }
            else {
                startValues = tr.startState.values.slice();
            }
            new EditorState(conf, tr.newDoc, tr.newSelection, startValues, (state, slot) => slot.update(state, tr), tr);
        }
        /**
        Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
        replaces every selection range with the given content.
        */
        replaceSelection(text) {
            if (typeof text == "string")
                text = this.toText(text);
            return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
                range: EditorSelection.cursor(range.from + text.length) }));
        }
        /**
        Create a set of changes and a new selection by running the given
        function for each range in the active selection. The function
        can return an optional set of changes (in the coordinate space
        of the start document), plus an updated range (in the coordinate
        space of the document produced by the call's own changes). This
        method will merge all the changes and ranges into a single
        changeset and selection, and return it as a [transaction
        spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
        [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
        */
        changeByRange(f) {
            let sel = this.selection;
            let result1 = f(sel.ranges[0]);
            let changes = this.changes(result1.changes), ranges = [result1.range];
            let effects = asArray$1(result1.effects);
            for (let i = 1; i < sel.ranges.length; i++) {
                let result = f(sel.ranges[i]);
                let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
                for (let j = 0; j < i; j++)
                    ranges[j] = ranges[j].map(newMapped);
                let mapBy = changes.mapDesc(newChanges, true);
                ranges.push(result.range.map(mapBy));
                changes = changes.compose(newMapped);
                effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
            }
            return {
                changes,
                selection: EditorSelection.create(ranges, sel.mainIndex),
                effects
            };
        }
        /**
        Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
        description, taking the state's document length and line
        separator into account.
        */
        changes(spec = []) {
            if (spec instanceof ChangeSet)
                return spec;
            return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
        }
        /**
        Using the state's [line
        separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
        [`Text`](https://codemirror.net/6/docs/ref/#state.Text) instance from the given string.
        */
        toText(string) {
            return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
        }
        /**
        Return the given range of the document as a string.
        */
        sliceDoc(from = 0, to = this.doc.length) {
            return this.doc.sliceString(from, to, this.lineBreak);
        }
        /**
        Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
        */
        facet(facet) {
            let addr = this.config.address[facet.id];
            if (addr == null)
                return facet.default;
            ensureAddr(this, addr);
            return getAddr(this, addr);
        }
        /**
        Convert this state to a JSON-serializable object. When custom
        fields should be serialized, you can pass them in as an object
        mapping property names (in the resulting object, which should
        not use `doc` or `selection`) to fields.
        */
        toJSON(fields) {
            let result = {
                doc: this.sliceDoc(),
                selection: this.selection.toJSON()
            };
            if (fields)
                for (let prop in fields) {
                    let value = fields[prop];
                    if (value instanceof StateField && this.config.address[value.id] != null)
                        result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
                }
            return result;
        }
        /**
        Deserialize a state from its JSON representation. When custom
        fields should be deserialized, pass the same object you passed
        to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
        third argument.
        */
        static fromJSON(json, config = {}, fields) {
            if (!json || typeof json.doc != "string")
                throw new RangeError("Invalid JSON representation for EditorState");
            let fieldInit = [];
            if (fields)
                for (let prop in fields) {
                    if (Object.prototype.hasOwnProperty.call(json, prop)) {
                        let field = fields[prop], value = json[prop];
                        fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
                    }
                }
            return EditorState.create({
                doc: json.doc,
                selection: EditorSelection.fromJSON(json.selection),
                extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
            });
        }
        /**
        Create a new state. You'll usually only need this when
        initializing an editor—updated states are created by applying
        transactions.
        */
        static create(config = {}) {
            let configuration = Configuration.resolve(config.extensions || [], new Map);
            let doc = config.doc instanceof Text ? config.doc
                : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
            let selection = !config.selection ? EditorSelection.single(0)
                : config.selection instanceof EditorSelection ? config.selection
                    : EditorSelection.single(config.selection.anchor, config.selection.head);
            checkSelection(selection, doc.length);
            if (!configuration.staticFacet(allowMultipleSelections))
                selection = selection.asSingle();
            return new EditorState(configuration, doc, selection, configuration.dynamicSlots.map(() => null), (state, slot) => slot.create(state), null);
        }
        /**
        The size (in columns) of a tab in the document, determined by
        the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
        */
        get tabSize() { return this.facet(EditorState.tabSize); }
        /**
        Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
        string for this state.
        */
        get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
        /**
        Returns true when the editor is
        [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
        */
        get readOnly() { return this.facet(readOnly); }
        /**
        Look up a translation for the given phrase (via the
        [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
        original string if no translation is found.
        
        If additional arguments are passed, they will be inserted in
        place of markers like `$1` (for the first value) and `$2`, etc.
        A single `$` is equivalent to `$1`, and `$$` will produce a
        literal dollar sign.
        */
        phrase(phrase, ...insert) {
            for (let map of this.facet(EditorState.phrases))
                if (Object.prototype.hasOwnProperty.call(map, phrase)) {
                    phrase = map[phrase];
                    break;
                }
            if (insert.length)
                phrase = phrase.replace(/\$(\$|\d*)/g, (m, i) => {
                    if (i == "$")
                        return "$";
                    let n = +(i || 1);
                    return !n || n > insert.length ? m : insert[n - 1];
                });
            return phrase;
        }
        /**
        Find the values for a given language data field, provided by the
        the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
        
        Examples of language data fields are...
        
        - [`"commentTokens"`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) for specifying
          comment syntax.
        - [`"autocomplete"`](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion^config.override)
          for providing language-specific completion sources.
        - [`"wordChars"`](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) for adding
          characters that should be considered part of words in this
          language.
        - [`"closeBrackets"`](https://codemirror.net/6/docs/ref/#autocomplete.CloseBracketConfig) controls
          bracket closing behavior.
        */
        languageDataAt(name, pos, side = -1) {
            let values = [];
            for (let provider of this.facet(languageData)) {
                for (let result of provider(this, pos, side)) {
                    if (Object.prototype.hasOwnProperty.call(result, name))
                        values.push(result[name]);
                }
            }
            return values;
        }
        /**
        Return a function that can categorize strings (expected to
        represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak))
        into one of:
        
         - Word (contains an alphanumeric character or a character
           explicitly listed in the local language's `"wordChars"`
           language data, which should be a string)
         - Space (contains only whitespace)
         - Other (anything else)
        */
        charCategorizer(at) {
            return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
        }
        /**
        Find the word at the given position, meaning the range
        containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
        around it. If no word characters are adjacent to the position,
        this returns null.
        */
        wordAt(pos) {
            let { text, from, length } = this.doc.lineAt(pos);
            let cat = this.charCategorizer(pos);
            let start = pos - from, end = pos - from;
            while (start > 0) {
                let prev = findClusterBreak(text, start, false);
                if (cat(text.slice(prev, start)) != CharCategory.Word)
                    break;
                start = prev;
            }
            while (end < length) {
                let next = findClusterBreak(text, end);
                if (cat(text.slice(end, next)) != CharCategory.Word)
                    break;
                end = next;
            }
            return start == end ? null : EditorSelection.range(start + from, end + from);
        }
    }
    /**
    A facet that, when enabled, causes the editor to allow multiple
    ranges to be selected. Be careful though, because by default the
    editor relies on the native DOM selection, which cannot handle
    multiple selections. An extension like
    [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
    secondary selections visible to the user.
    */
    EditorState.allowMultipleSelections = allowMultipleSelections;
    /**
    Configures the tab size to use in this state. The first
    (highest-precedence) value of the facet is used. If no value is
    given, this defaults to 4.
    */
    EditorState.tabSize = /*@__PURE__*/Facet.define({
        combine: values => values.length ? values[0] : 4
    });
    /**
    The line separator to use. By default, any of `"\n"`, `"\r\n"`
    and `"\r"` is treated as a separator when splitting lines, and
    lines are joined with `"\n"`.
 
    When you configure a value here, only that precise separator
    will be used, allowing you to round-trip documents through the
    editor without normalizing line separators.
    */
    EditorState.lineSeparator = lineSeparator;
    /**
    This facet controls the value of the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
    consulted by commands and extensions that implement editing
    functionality to determine whether they should apply. It
    defaults to false, but when its highest-precedence value is
    `true`, such functionality disables itself.
 
    Not to be confused with
    [`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
    controls whether the editor's DOM is set to be editable (and
    thus focusable).
    */
    EditorState.readOnly = readOnly;
    /**
    Registers translation phrases. The
    [`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
    all objects registered with this facet to find translations for
    its argument.
    */
    EditorState.phrases = /*@__PURE__*/Facet.define({
        compare(a, b) {
            let kA = Object.keys(a), kB = Object.keys(b);
            return kA.length == kB.length && kA.every(k => a[k] == b[k]);
        }
    });
    /**
    A facet used to register [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
    */
    EditorState.languageData = languageData;
    /**
    Facet used to register change filters, which are called for each
    transaction (unless explicitly
    [disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
    part of the transaction's changes.
 
    Such a function can return `true` to indicate that it doesn't
    want to do anything, `false` to completely stop the changes in
    the transaction, or a set of ranges in which changes should be
    suppressed. Such ranges are represented as an array of numbers,
    with each pair of two numbers indicating the start and end of a
    range. So for example `[10, 20, 100, 110]` suppresses changes
    between 10 and 20, and between 100 and 110.
    */
    EditorState.changeFilter = changeFilter;
    /**
    Facet used to register a hook that gets a chance to update or
    replace transaction specs before they are applied. This will
    only be applied for transactions that don't have
    [`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
    can either return a single transaction spec (possibly the input
    transaction), or an array of specs (which will be combined in
    the same way as the arguments to
    [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).
 
    When possible, it is recommended to avoid accessing
    [`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
    since it will force creation of a state that will then be
    discarded again, if the transaction is actually filtered.
 
    (This functionality should be used with care. Indiscriminately
    modifying transaction is likely to break something or degrade
    the user experience.)
    */
    EditorState.transactionFilter = transactionFilter;
    /**
    This is a more limited form of
    [`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
    which can only add
    [annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
    of filter runs even if the transaction has disabled regular
    [filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
    for effects that don't need to touch the changes or selection,
    but do want to process every transaction.
 
    Extenders run _after_ filters, when both are present.
    */
    EditorState.transactionExtender = transactionExtender;
    Compartment.reconfigure = /*@__PURE__*/StateEffect.define();
 
    /**
    Utility function for combining behaviors to fill in a config
    object from an array of provided configs. `defaults` should hold
    default values for all optional fields in `Config`.
 
    The function will, by default, error
    when a field gets two values that aren't `===`-equal, but you can
    provide combine functions per field to do something else.
    */
    function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
    combine = {}) {
        let result = {};
        for (let config of configs)
            for (let key of Object.keys(config)) {
                let value = config[key], current = result[key];
                if (current === undefined)
                    result[key] = value;
                else if (current === value || value === undefined) ; // No conflict
                else if (Object.hasOwnProperty.call(combine, key))
                    result[key] = combine[key](current, value);
                else
                    throw new Error("Config merge conflict for field " + key);
            }
        for (let key in defaults)
            if (result[key] === undefined)
                result[key] = defaults[key];
        return result;
    }
 
    /**
    Each range is associated with a value, which must inherit from
    this class.
    */
    class RangeValue {
        /**
        Compare this value with another value. Used when comparing
        rangesets. The default implementation compares by identity.
        Unless you are only creating a fixed number of unique instances
        of your value type, it is a good idea to implement this
        properly.
        */
        eq(other) { return this == other; }
        /**
        Create a [range](https://codemirror.net/6/docs/ref/#state.Range) with this value.
        */
        range(from, to = from) { return Range$1.create(from, to, this); }
    }
    RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
    RangeValue.prototype.point = false;
    RangeValue.prototype.mapMode = MapMode.TrackDel;
    /**
    A range associates a value with a range of positions.
    */
    let Range$1 = class Range {
        constructor(
        /**
        The range's start position.
        */
        from, 
        /**
        Its end position.
        */
        to, 
        /**
        The value associated with this range.
        */
        value) {
            this.from = from;
            this.to = to;
            this.value = value;
        }
        /**
        @internal
        */
        static create(from, to, value) {
            return new Range(from, to, value);
        }
    };
    function cmpRange(a, b) {
        return a.from - b.from || a.value.startSide - b.value.startSide;
    }
    class Chunk {
        constructor(from, to, value, 
        // Chunks are marked with the largest point that occurs
        // in them (or -1 for no points), so that scans that are
        // only interested in points (such as the
        // heightmap-related logic) can skip range-only chunks.
        maxPoint) {
            this.from = from;
            this.to = to;
            this.value = value;
            this.maxPoint = maxPoint;
        }
        get length() { return this.to[this.to.length - 1]; }
        // Find the index of the given position and side. Use the ranges'
        // `from` pos when `end == false`, `to` when `end == true`.
        findIndex(pos, side, end, startAt = 0) {
            let arr = end ? this.to : this.from;
            for (let lo = startAt, hi = arr.length;;) {
                if (lo == hi)
                    return lo;
                let mid = (lo + hi) >> 1;
                let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
                if (mid == lo)
                    return diff >= 0 ? lo : hi;
                if (diff >= 0)
                    hi = mid;
                else
                    lo = mid + 1;
            }
        }
        between(offset, from, to, f) {
            for (let i = this.findIndex(from, -1000000000 /* C.Far */, true), e = this.findIndex(to, 1000000000 /* C.Far */, false, i); i < e; i++)
                if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
                    return false;
        }
        map(offset, changes) {
            let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
            for (let i = 0; i < this.value.length; i++) {
                let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
                if (curFrom == curTo) {
                    let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
                    if (mapped == null)
                        continue;
                    newFrom = newTo = mapped;
                    if (val.startSide != val.endSide) {
                        newTo = changes.mapPos(curFrom, val.endSide);
                        if (newTo < newFrom)
                            continue;
                    }
                }
                else {
                    newFrom = changes.mapPos(curFrom, val.startSide);
                    newTo = changes.mapPos(curTo, val.endSide);
                    if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
                        continue;
                }
                if ((newTo - newFrom || val.endSide - val.startSide) < 0)
                    continue;
                if (newPos < 0)
                    newPos = newFrom;
                if (val.point)
                    maxPoint = Math.max(maxPoint, newTo - newFrom);
                value.push(val);
                from.push(newFrom - newPos);
                to.push(newTo - newPos);
            }
            return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
        }
    }
    /**
    A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#state.Range) in a
    way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#state.RangeSet.map) and
    [update](https://codemirror.net/6/docs/ref/#state.RangeSet.update). This is an immutable data
    structure.
    */
    class RangeSet {
        constructor(
        /**
        @internal
        */
        chunkPos, 
        /**
        @internal
        */
        chunk, 
        /**
        @internal
        */
        nextLayer, 
        /**
        @internal
        */
        maxPoint) {
            this.chunkPos = chunkPos;
            this.chunk = chunk;
            this.nextLayer = nextLayer;
            this.maxPoint = maxPoint;
        }
        /**
        @internal
        */
        static create(chunkPos, chunk, nextLayer, maxPoint) {
            return new RangeSet(chunkPos, chunk, nextLayer, maxPoint);
        }
        /**
        @internal
        */
        get length() {
            let last = this.chunk.length - 1;
            return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
        }
        /**
        The number of ranges in the set.
        */
        get size() {
            if (this.isEmpty)
                return 0;
            let size = this.nextLayer.size;
            for (let chunk of this.chunk)
                size += chunk.value.length;
            return size;
        }
        /**
        @internal
        */
        chunkEnd(index) {
            return this.chunkPos[index] + this.chunk[index].length;
        }
        /**
        Update the range set, optionally adding new ranges or filtering
        out existing ones.
        
        (Note: The type parameter is just there as a kludge to work
        around TypeScript variance issues that prevented `RangeSet<X>`
        from being a subtype of `RangeSet<Y>` when `X` is a subtype of
        `Y`.)
        */
        update(updateSpec) {
            let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
            let filter = updateSpec.filter;
            if (add.length == 0 && !filter)
                return this;
            if (sort)
                add = add.slice().sort(cmpRange);
            if (this.isEmpty)
                return add.length ? RangeSet.of(add) : this;
            let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
            let builder = new RangeSetBuilder();
            while (cur.value || i < add.length) {
                if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
                    let range = add[i++];
                    if (!builder.addInner(range.from, range.to, range.value))
                        spill.push(range);
                }
                else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
                    (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
                    (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
                    builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
                    cur.nextChunk();
                }
                else {
                    if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
                        if (!builder.addInner(cur.from, cur.to, cur.value))
                            spill.push(Range$1.create(cur.from, cur.to, cur.value));
                    }
                    cur.next();
                }
            }
            return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
                : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
        }
        /**
        Map this range set through a set of changes, return the new set.
        */
        map(changes) {
            if (changes.empty || this.isEmpty)
                return this;
            let chunks = [], chunkPos = [], maxPoint = -1;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                let touch = changes.touchesRange(start, start + chunk.length);
                if (touch === false) {
                    maxPoint = Math.max(maxPoint, chunk.maxPoint);
                    chunks.push(chunk);
                    chunkPos.push(changes.mapPos(start));
                }
                else if (touch === true) {
                    let { mapped, pos } = chunk.map(start, changes);
                    if (mapped) {
                        maxPoint = Math.max(maxPoint, mapped.maxPoint);
                        chunks.push(mapped);
                        chunkPos.push(pos);
                    }
                }
            }
            let next = this.nextLayer.map(changes);
            return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next || RangeSet.empty, maxPoint);
        }
        /**
        Iterate over the ranges that touch the region `from` to `to`,
        calling `f` for each. There is no guarantee that the ranges will
        be reported in any specific order. When the callback returns
        `false`, iteration stops.
        */
        between(from, to, f) {
            if (this.isEmpty)
                return;
            for (let i = 0; i < this.chunk.length; i++) {
                let start = this.chunkPos[i], chunk = this.chunk[i];
                if (to >= start && from <= start + chunk.length &&
                    chunk.between(start, from - start, to - start, f) === false)
                    return;
            }
            this.nextLayer.between(from, to, f);
        }
        /**
        Iterate over the ranges in this set, in order, including all
        ranges that end at or after `from`.
        */
        iter(from = 0) {
            return HeapCursor.from([this]).goto(from);
        }
        /**
        @internal
        */
        get isEmpty() { return this.nextLayer == this; }
        /**
        Iterate over the ranges in a collection of sets, in order,
        starting from `from`.
        */
        static iter(sets, from = 0) {
            return HeapCursor.from(sets).goto(from);
        }
        /**
        Iterate over two groups of sets, calling methods on `comparator`
        to notify it of possible differences.
        */
        static compare(oldSets, newSets, 
        /**
        This indicates how the underlying data changed between these
        ranges, and is needed to synchronize the iteration.
        */
        textDiff, comparator, 
        /**
        Can be used to ignore all non-point ranges, and points below
        the given size. When -1, all ranges are compared.
        */
        minPointSize = -1) {
            let a = oldSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let b = newSets.filter(set => set.maxPoint > 0 || !set.isEmpty && set.maxPoint >= minPointSize);
            let sharedChunks = findSharedChunks(a, b, textDiff);
            let sideA = new SpanCursor(a, sharedChunks, minPointSize);
            let sideB = new SpanCursor(b, sharedChunks, minPointSize);
            textDiff.iterGaps((fromA, fromB, length) => compare(sideA, fromA, sideB, fromB, length, comparator));
            if (textDiff.empty && textDiff.length == 0)
                compare(sideA, 0, sideB, 0, 0, comparator);
        }
        /**
        Compare the contents of two groups of range sets, returning true
        if they are equivalent in the given range.
        */
        static eq(oldSets, newSets, from = 0, to) {
            if (to == null)
                to = 1000000000 /* C.Far */ - 1;
            let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
            let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
            if (a.length != b.length)
                return false;
            if (!a.length)
                return true;
            let sharedChunks = findSharedChunks(a, b);
            let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
            for (;;) {
                if (sideA.to != sideB.to ||
                    !sameValues(sideA.active, sideB.active) ||
                    sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
                    return false;
                if (sideA.to > to)
                    return true;
                sideA.next();
                sideB.next();
            }
        }
        /**
        Iterate over a group of range sets at the same time, notifying
        the iterator about the ranges covering every given piece of
        content. Returns the open count (see
        [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#state.SpanIterator.span)) at the end
        of the iteration.
        */
        static spans(sets, from, to, iterator, 
        /**
        When given and greater than -1, only points of at least this
        size are taken into account.
        */
        minPointSize = -1) {
            let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
            let openRanges = cursor.openStart;
            for (;;) {
                let curTo = Math.min(cursor.to, to);
                if (cursor.point) {
                    let active = cursor.activeForPoint(cursor.to);
                    let openCount = cursor.pointFrom < from ? active.length + 1 : Math.min(active.length, openRanges);
                    iterator.point(pos, curTo, cursor.point, active, openCount, cursor.pointRank);
                    openRanges = Math.min(cursor.openEnd(curTo), active.length);
                }
                else if (curTo > pos) {
                    iterator.span(pos, curTo, cursor.active, openRanges);
                    openRanges = cursor.openEnd(curTo);
                }
                if (cursor.to > to)
                    return openRanges + (cursor.point && cursor.to > to ? 1 : 0);
                pos = cursor.to;
                cursor.next();
            }
        }
        /**
        Create a range set for the given range or array of ranges. By
        default, this expects the ranges to be _sorted_ (by start
        position and, if two start at the same position,
        `value.startSide`). You can pass `true` as second argument to
        cause the method to sort them.
        */
        static of(ranges, sort = false) {
            let build = new RangeSetBuilder();
            for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
                build.add(range.from, range.to, range.value);
            return build.finish();
        }
    }
    /**
    The empty set of ranges.
    */
    RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
    function lazySort(ranges) {
        if (ranges.length > 1)
            for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
                let cur = ranges[i];
                if (cmpRange(prev, cur) > 0)
                    return ranges.slice().sort(cmpRange);
                prev = cur;
            }
        return ranges;
    }
    RangeSet.empty.nextLayer = RangeSet.empty;
    /**
    A range set builder is a data structure that helps build up a
    [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) directly, without first allocating
    an array of [`Range`](https://codemirror.net/6/docs/ref/#state.Range) objects.
    */
    class RangeSetBuilder {
        finishChunk(newArrays) {
            this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
            this.chunkPos.push(this.chunkStart);
            this.chunkStart = -1;
            this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
            this.maxPoint = -1;
            if (newArrays) {
                this.from = [];
                this.to = [];
                this.value = [];
            }
        }
        /**
        Create an empty builder.
        */
        constructor() {
            this.chunks = [];
            this.chunkPos = [];
            this.chunkStart = -1;
            this.last = null;
            this.lastFrom = -1000000000 /* C.Far */;
            this.lastTo = -1000000000 /* C.Far */;
            this.from = [];
            this.to = [];
            this.value = [];
            this.maxPoint = -1;
            this.setMaxPoint = -1;
            this.nextLayer = null;
        }
        /**
        Add a range. Ranges should be added in sorted (by `from` and
        `value.startSide`) order.
        */
        add(from, to, value) {
            if (!this.addInner(from, to, value))
                (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
        }
        /**
        @internal
        */
        addInner(from, to, value) {
            let diff = from - this.lastTo || value.startSide - this.last.endSide;
            if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
                throw new Error("Ranges must be added sorted by `from` position and `startSide`");
            if (diff < 0)
                return false;
            if (this.from.length == 250 /* C.ChunkSize */)
                this.finishChunk(true);
            if (this.chunkStart < 0)
                this.chunkStart = from;
            this.from.push(from - this.chunkStart);
            this.to.push(to - this.chunkStart);
            this.last = value;
            this.lastFrom = from;
            this.lastTo = to;
            this.value.push(value);
            if (value.point)
                this.maxPoint = Math.max(this.maxPoint, to - from);
            return true;
        }
        /**
        @internal
        */
        addChunk(from, chunk) {
            if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
                return false;
            if (this.from.length)
                this.finishChunk(true);
            this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
            this.chunks.push(chunk);
            this.chunkPos.push(from);
            let last = chunk.value.length - 1;
            this.last = chunk.value[last];
            this.lastFrom = chunk.from[last] + from;
            this.lastTo = chunk.to[last] + from;
            return true;
        }
        /**
        Finish the range set. Returns the new set. The builder can't be
        used anymore after this has been called.
        */
        finish() { return this.finishInner(RangeSet.empty); }
        /**
        @internal
        */
        finishInner(next) {
            if (this.from.length)
                this.finishChunk(false);
            if (this.chunks.length == 0)
                return next;
            let result = RangeSet.create(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
            this.from = null; // Make sure further `add` calls produce errors
            return result;
        }
    }
    function findSharedChunks(a, b, textDiff) {
        let inA = new Map();
        for (let set of a)
            for (let i = 0; i < set.chunk.length; i++)
                if (set.chunk[i].maxPoint <= 0)
                    inA.set(set.chunk[i], set.chunkPos[i]);
        let shared = new Set();
        for (let set of b)
            for (let i = 0; i < set.chunk.length; i++) {
                let known = inA.get(set.chunk[i]);
                if (known != null && (textDiff ? textDiff.mapPos(known) : known) == set.chunkPos[i] &&
                    !(textDiff === null || textDiff === void 0 ? void 0 : textDiff.touchesRange(known, known + set.chunk[i].length)))
                    shared.add(set.chunk[i]);
            }
        return shared;
    }
    class LayerCursor {
        constructor(layer, skip, minPoint, rank = 0) {
            this.layer = layer;
            this.skip = skip;
            this.minPoint = minPoint;
            this.rank = rank;
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        get endSide() { return this.value ? this.value.endSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.chunkIndex = this.rangeIndex = 0;
            this.gotoInner(pos, side, false);
            return this;
        }
        gotoInner(pos, side, forward) {
            while (this.chunkIndex < this.layer.chunk.length) {
                let next = this.layer.chunk[this.chunkIndex];
                if (!(this.skip && this.skip.has(next) ||
                    this.layer.chunkEnd(this.chunkIndex) < pos ||
                    next.maxPoint < this.minPoint))
                    break;
                this.chunkIndex++;
                forward = false;
            }
            if (this.chunkIndex < this.layer.chunk.length) {
                let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
                if (!forward || this.rangeIndex < rangeIndex)
                    this.setRangeIndex(rangeIndex);
            }
            this.next();
        }
        forward(pos, side) {
            if ((this.to - pos || this.endSide - side) < 0)
                this.gotoInner(pos, side, true);
        }
        next() {
            for (;;) {
                if (this.chunkIndex == this.layer.chunk.length) {
                    this.from = this.to = 1000000000 /* C.Far */;
                    this.value = null;
                    break;
                }
                else {
                    let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
                    let from = chunkPos + chunk.from[this.rangeIndex];
                    this.from = from;
                    this.to = chunkPos + chunk.to[this.rangeIndex];
                    this.value = chunk.value[this.rangeIndex];
                    this.setRangeIndex(this.rangeIndex + 1);
                    if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
                        break;
                }
            }
        }
        setRangeIndex(index) {
            if (index == this.layer.chunk[this.chunkIndex].value.length) {
                this.chunkIndex++;
                if (this.skip) {
                    while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
                        this.chunkIndex++;
                }
                this.rangeIndex = 0;
            }
            else {
                this.rangeIndex = index;
            }
        }
        nextChunk() {
            this.chunkIndex++;
            this.rangeIndex = 0;
            this.next();
        }
        compare(other) {
            return this.from - other.from || this.startSide - other.startSide || this.rank - other.rank ||
                this.to - other.to || this.endSide - other.endSide;
        }
    }
    class HeapCursor {
        constructor(heap) {
            this.heap = heap;
        }
        static from(sets, skip = null, minPoint = -1) {
            let heap = [];
            for (let i = 0; i < sets.length; i++) {
                for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
                    if (cur.maxPoint >= minPoint)
                        heap.push(new LayerCursor(cur, skip, minPoint, i));
                }
            }
            return heap.length == 1 ? heap[0] : new HeapCursor(heap);
        }
        get startSide() { return this.value ? this.value.startSide : 0; }
        goto(pos, side = -1000000000 /* C.Far */) {
            for (let cur of this.heap)
                cur.goto(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            this.next();
            return this;
        }
        forward(pos, side) {
            for (let cur of this.heap)
                cur.forward(pos, side);
            for (let i = this.heap.length >> 1; i >= 0; i--)
                heapBubble(this.heap, i);
            if ((this.to - pos || this.value.endSide - side) < 0)
                this.next();
        }
        next() {
            if (this.heap.length == 0) {
                this.from = this.to = 1000000000 /* C.Far */;
                this.value = null;
                this.rank = -1;
            }
            else {
                let top = this.heap[0];
                this.from = top.from;
                this.to = top.to;
                this.value = top.value;
                this.rank = top.rank;
                if (top.value)
                    top.next();
                heapBubble(this.heap, 0);
            }
        }
    }
    function heapBubble(heap, index) {
        for (let cur = heap[index];;) {
            let childIndex = (index << 1) + 1;
            if (childIndex >= heap.length)
                break;
            let child = heap[childIndex];
            if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
                child = heap[childIndex + 1];
                childIndex++;
            }
            if (cur.compare(child) < 0)
                break;
            heap[childIndex] = cur;
            heap[index] = child;
            index = childIndex;
        }
    }
    class SpanCursor {
        constructor(sets, skip, minPoint) {
            this.minPoint = minPoint;
            this.active = [];
            this.activeTo = [];
            this.activeRank = [];
            this.minActive = -1;
            // A currently active point range, if any
            this.point = null;
            this.pointFrom = 0;
            this.pointRank = 0;
            this.to = -1000000000 /* C.Far */;
            this.endSide = 0;
            // The amount of open active ranges at the start of the iterator.
            // Not including points.
            this.openStart = -1;
            this.cursor = HeapCursor.from(sets, skip, minPoint);
        }
        goto(pos, side = -1000000000 /* C.Far */) {
            this.cursor.goto(pos, side);
            this.active.length = this.activeTo.length = this.activeRank.length = 0;
            this.minActive = -1;
            this.to = pos;
            this.endSide = side;
            this.openStart = -1;
            this.next();
            return this;
        }
        forward(pos, side) {
            while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
                this.removeActive(this.minActive);
            this.cursor.forward(pos, side);
        }
        removeActive(index) {
            remove(this.active, index);
            remove(this.activeTo, index);
            remove(this.activeRank, index);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        addActive(trackOpen) {
            let i = 0, { value, to, rank } = this.cursor;
            while (i < this.activeRank.length && this.activeRank[i] <= rank)
                i++;
            insert(this.active, i, value);
            insert(this.activeTo, i, to);
            insert(this.activeRank, i, rank);
            if (trackOpen)
                insert(trackOpen, i, this.cursor.from);
            this.minActive = findMinIndex(this.active, this.activeTo);
        }
        // After calling this, if `this.point` != null, the next range is a
        // point. Otherwise, it's a regular range, covered by `this.active`.
        next() {
            let from = this.to, wasPoint = this.point;
            this.point = null;
            let trackOpen = this.openStart < 0 ? [] : null;
            for (;;) {
                let a = this.minActive;
                if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
                    if (this.activeTo[a] > from) {
                        this.to = this.activeTo[a];
                        this.endSide = this.active[a].endSide;
                        break;
                    }
                    this.removeActive(a);
                    if (trackOpen)
                        remove(trackOpen, a);
                }
                else if (!this.cursor.value) {
                    this.to = this.endSide = 1000000000 /* C.Far */;
                    break;
                }
                else if (this.cursor.from > from) {
                    this.to = this.cursor.from;
                    this.endSide = this.cursor.startSide;
                    break;
                }
                else {
                    let nextVal = this.cursor.value;
                    if (!nextVal.point) { // Opening a range
                        this.addActive(trackOpen);
                        this.cursor.next();
                    }
                    else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to) {
                        // Ignore any non-empty points that end precisely at the end of the prev point
                        this.cursor.next();
                    }
                    else { // New point
                        this.point = nextVal;
                        this.pointFrom = this.cursor.from;
                        this.pointRank = this.cursor.rank;
                        this.to = this.cursor.to;
                        this.endSide = nextVal.endSide;
                        this.cursor.next();
                        this.forward(this.to, this.endSide);
                        break;
                    }
                }
            }
            if (trackOpen) {
                this.openStart = 0;
                for (let i = trackOpen.length - 1; i >= 0 && trackOpen[i] < from; i--)
                    this.openStart++;
            }
        }
        activeForPoint(to) {
            if (!this.active.length)
                return this.active;
            let active = [];
            for (let i = this.active.length - 1; i >= 0; i--) {
                if (this.activeRank[i] < this.pointRank)
                    break;
                if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
                    active.push(this.active[i]);
            }
            return active.reverse();
        }
        openEnd(to) {
            let open = 0;
            for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
                open++;
            return open;
        }
    }
    function compare(a, startA, b, startB, length, comparator) {
        a.goto(startA);
        b.goto(startB);
        let endB = startB + length;
        let pos = startB, dPos = startB - startA;
        for (;;) {
            let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
            let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
            if (a.point || b.point) {
                if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
                    sameValues(a.activeForPoint(a.to), b.activeForPoint(b.to))))
                    comparator.comparePoint(pos, clipEnd, a.point, b.point);
            }
            else {
                if (clipEnd > pos && !sameValues(a.active, b.active))
                    comparator.compareRange(pos, clipEnd, a.active, b.active);
            }
            if (end > endB)
                break;
            pos = end;
            if (diff <= 0)
                a.next();
            if (diff >= 0)
                b.next();
        }
    }
    function sameValues(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (a[i] != b[i] && !a[i].eq(b[i]))
                return false;
        return true;
    }
    function remove(array, index) {
        for (let i = index, e = array.length - 1; i < e; i++)
            array[i] = array[i + 1];
        array.pop();
    }
    function insert(array, index, value) {
        for (let i = array.length - 1; i >= index; i--)
            array[i + 1] = array[i];
        array[index] = value;
    }
    function findMinIndex(value, array) {
        let found = -1, foundPos = 1000000000 /* C.Far */;
        for (let i = 0; i < array.length; i++)
            if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
                found = i;
                foundPos = array[i];
            }
        return found;
    }
 
    /**
    Count the column position at the given offset into the string,
    taking extending characters and tab size into account.
    */
    function countColumn(string, tabSize, to = string.length) {
        let n = 0;
        for (let i = 0; i < to;) {
            if (string.charCodeAt(i) == 9) {
                n += tabSize - (n % tabSize);
                i++;
            }
            else {
                n++;
                i = findClusterBreak(string, i);
            }
        }
        return n;
    }
    /**
    Find the offset that corresponds to the given column position in a
    string, taking extending characters and tab size into account. By
    default, the string length is returned when it is too short to
    reach the column. Pass `strict` true to make it return -1 in that
    situation.
    */
    function findColumn(string, col, tabSize, strict) {
        for (let i = 0, n = 0;;) {
            if (n >= col)
                return i;
            if (i == string.length)
                break;
            n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
            i = findClusterBreak(string, i);
        }
        return strict === true ? -1 : string.length;
    }
 
    const C = "\u037c";
    const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
    const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
    const top$1 = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};
 
    // :: - Style modules encapsulate a set of CSS rules defined from
    // JavaScript. Their definitions are only available in a given DOM
    // root after it has been _mounted_ there with `StyleModule.mount`.
    //
    // Style modules should be created once and stored somewhere, as
    // opposed to re-creating them every time you need them. The amount of
    // CSS rules generated for a given DOM root is bounded by the amount
    // of style modules that were used. So to avoid leaking rules, don't
    // create these dynamically, but treat them as one-time allocations.
    class StyleModule {
      // :: (Object<Style>, ?{finish: ?(string) → string})
      // Create a style module from the given spec.
      //
      // When `finish` is given, it is called on regular (non-`@`)
      // selectors (after `&` expansion) to compute the final selector.
      constructor(spec, options) {
        this.rules = [];
        let {finish} = options || {};
 
        function splitSelector(selector) {
          return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
        }
 
        function render(selectors, spec, target, isKeyframes) {
          let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
          if (isAt && spec == null) return target.push(selectors[0] + ";")
          for (let prop in spec) {
            let value = spec[prop];
            if (/&/.test(prop)) {
              render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
                     value, target);
            } else if (value && typeof value == "object") {
              if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
              render(splitSelector(prop), value, local, keyframes);
            } else if (value != null) {
              local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
            }
          }
          if (local.length || keyframes) {
            target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
                        " {" + local.join(" ") + "}");
          }
        }
 
        for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
      }
 
      // :: () → string
      // Returns a string containing the module's CSS rules.
      getRules() { return this.rules.join("\n") }
 
      // :: () → string
      // Generate a new unique CSS class name.
      static newName() {
        let id = top$1[COUNT] || 1;
        top$1[COUNT] = id + 1;
        return C + id.toString(36)
      }
 
      // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>, ?{nonce: ?string})
      //
      // Mount the given set of modules in the given DOM root, which ensures
      // that the CSS rules defined by the module are available in that
      // context.
      //
      // Rules are only added to the document once per root.
      //
      // Rule order will follow the order of the modules, so that rules from
      // modules later in the array take precedence of those from earlier
      // modules. If you call this function multiple times for the same root
      // in a way that changes the order of already mounted modules, the old
      // order will be changed.
      //
      // If a Content Security Policy nonce is provided, it is added to
      // the `<style>` tag generated by the library.
      static mount(root, modules, options) {
        let set = root[SET], nonce = options && options.nonce;
        if (!set) set = new StyleSet(root, nonce);
        else if (nonce) set.setNonce(nonce);
        set.mount(Array.isArray(modules) ? modules : [modules]);
      }
    }
 
    let adoptedSet = new Map; //<Document, StyleSet>
 
    class StyleSet {
      constructor(root, nonce) {
        let doc = root.ownerDocument || root, win = doc.defaultView;
        if (!root.head && root.adoptedStyleSheets && win.CSSStyleSheet) {
          let adopted = adoptedSet.get(doc);
          if (adopted) {
            root.adoptedStyleSheets = [adopted.sheet, ...root.adoptedStyleSheets];
            return root[SET] = adopted
          }
          this.sheet = new win.CSSStyleSheet;
          root.adoptedStyleSheets = [this.sheet, ...root.adoptedStyleSheets];
          adoptedSet.set(doc, this);
        } else {
          this.styleTag = doc.createElement("style");
          if (nonce) this.styleTag.setAttribute("nonce", nonce);
          let target = root.head || root;
          target.insertBefore(this.styleTag, target.firstChild);
        }
        this.modules = [];
        root[SET] = this;
      }
 
      mount(modules) {
        let sheet = this.sheet;
        let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
        for (let i = 0; i < modules.length; i++) {
          let mod = modules[i], index = this.modules.indexOf(mod);
          if (index < j && index > -1) { // Ordering conflict
            this.modules.splice(index, 1);
            j--;
            index = -1;
          }
          if (index == -1) {
            this.modules.splice(j++, 0, mod);
            if (sheet) for (let k = 0; k < mod.rules.length; k++)
              sheet.insertRule(mod.rules[k], pos++);
          } else {
            while (j < index) pos += this.modules[j++].rules.length;
            pos += mod.rules.length;
            j++;
          }
        }
 
        if (!sheet) {
          let text = "";
          for (let i = 0; i < this.modules.length; i++)
            text += this.modules[i].getRules() + "\n";
          this.styleTag.textContent = text;
        }
      }
 
      setNonce(nonce) {
        if (this.styleTag && this.styleTag.getAttribute("nonce") != nonce)
          this.styleTag.setAttribute("nonce", nonce);
      }
    }
 
    // Style::Object<union<Style,string>>
    //
    // A style is an object that, in the simple case, maps CSS property
    // names to strings holding their values, as in `{color: "red",
    // fontWeight: "bold"}`. The property names can be given in
    // camel-case—the library will insert a dash before capital letters
    // when converting them to CSS.
    //
    // If you include an underscore in a property name, it and everything
    // after it will be removed from the output, which can be useful when
    // providing a property multiple times, for browser compatibility
    // reasons.
    //
    // A property in a style object can also be a sub-selector, which
    // extends the current context to add a pseudo-selector or a child
    // selector. Such a property should contain a `&` character, which
    // will be replaced by the current selector. For example `{"&:before":
    // {content: '"hi"'}}`. Sub-selectors and regular properties can
    // freely be mixed in a given object. Any property containing a `&` is
    // assumed to be a sub-selector.
    //
    // Finally, a property can specify an @-block to be wrapped around the
    // styles defined inside the object that's the property's value. For
    // example to create a media query you can do `{"@media screen and
    // (min-width: 400px)": {...}}`.
 
    var base = {
      8: "Backspace",
      9: "Tab",
      10: "Enter",
      12: "NumLock",
      13: "Enter",
      16: "Shift",
      17: "Control",
      18: "Alt",
      20: "CapsLock",
      27: "Escape",
      32: " ",
      33: "PageUp",
      34: "PageDown",
      35: "End",
      36: "Home",
      37: "ArrowLeft",
      38: "ArrowUp",
      39: "ArrowRight",
      40: "ArrowDown",
      44: "PrintScreen",
      45: "Insert",
      46: "Delete",
      59: ";",
      61: "=",
      91: "Meta",
      92: "Meta",
      106: "*",
      107: "+",
      108: ",",
      109: "-",
      110: ".",
      111: "/",
      144: "NumLock",
      145: "ScrollLock",
      160: "Shift",
      161: "Shift",
      162: "Control",
      163: "Control",
      164: "Alt",
      165: "Alt",
      173: "-",
      186: ";",
      187: "=",
      188: ",",
      189: "-",
      190: ".",
      191: "/",
      192: "`",
      219: "[",
      220: "\\",
      221: "]",
      222: "'"
    };
 
    var shift = {
      48: ")",
      49: "!",
      50: "@",
      51: "#",
      52: "$",
      53: "%",
      54: "^",
      55: "&",
      56: "*",
      57: "(",
      59: ":",
      61: "+",
      173: "_",
      186: ":",
      187: "+",
      188: "<",
      189: "_",
      190: ">",
      191: "?",
      192: "~",
      219: "{",
      220: "|",
      221: "}",
      222: "\""
    };
 
    var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
    var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
 
    // Fill in the digit keys
    for (var i$1 = 0; i$1 < 10; i$1++) base[48 + i$1] = base[96 + i$1] = String(i$1);
 
    // The function keys
    for (var i$1 = 1; i$1 <= 24; i$1++) base[i$1 + 111] = "F" + i$1;
 
    // And the alphabetic keys
    for (var i$1 = 65; i$1 <= 90; i$1++) {
      base[i$1] = String.fromCharCode(i$1 + 32);
      shift[i$1] = String.fromCharCode(i$1);
    }
 
    // For each code that doesn't have a shift-equivalent, copy the base name
    for (var code$1 in base) if (!shift.hasOwnProperty(code$1)) shift[code$1] = base[code$1];
 
    function keyName(event) {
      // On macOS, keys held with Shift and Cmd don't reflect the effect of Shift in `.key`.
      // On IE, shift effect is never included in `.key`.
      var ignoreKey = mac && event.metaKey && event.shiftKey && !event.ctrlKey && !event.altKey ||
          ie$1 && event.shiftKey && event.key && event.key.length == 1 ||
          event.key == "Unidentified";
      var name = (!ignoreKey && event.key) ||
        (event.shiftKey ? shift : base)[event.keyCode] ||
        event.key || "Unidentified";
      // Edge sometimes produces wrong names (Issue #3)
      if (name == "Esc") name = "Escape";
      if (name == "Del") name = "Delete";
      // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
      if (name == "Left") name = "ArrowLeft";
      if (name == "Up") name = "ArrowUp";
      if (name == "Right") name = "ArrowRight";
      if (name == "Down") name = "ArrowDown";
      return name
    }
 
    function getSelection(root) {
        let target;
        // Browsers differ on whether shadow roots have a getSelection
        // method. If it exists, use that, otherwise, call it on the
        // document.
        if (root.nodeType == 11) { // Shadow root
            target = root.getSelection ? root : root.ownerDocument;
        }
        else {
            target = root;
        }
        return target.getSelection();
    }
    function contains(dom, node) {
        return node ? dom == node || dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
    }
    function deepActiveElement(doc) {
        let elt = doc.activeElement;
        while (elt && elt.shadowRoot)
            elt = elt.shadowRoot.activeElement;
        return elt;
    }
    function hasSelection(dom, selection) {
        if (!selection.anchorNode)
            return false;
        try {
            // Firefox will raise 'permission denied' errors when accessing
            // properties of `sel.anchorNode` when it's in a generated CSS
            // element.
            return contains(dom, selection.anchorNode);
        }
        catch (_) {
            return false;
        }
    }
    function clientRectsFor(dom) {
        if (dom.nodeType == 3)
            return textRange(dom, 0, dom.nodeValue.length).getClientRects();
        else if (dom.nodeType == 1)
            return dom.getClientRects();
        else
            return [];
    }
    // Scans forward and backward through DOM positions equivalent to the
    // given one to see if the two are in the same place (i.e. after a
    // text node vs at the end of that text node)
    function isEquivalentPosition(node, off, targetNode, targetOff) {
        return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
            scanFor(node, off, targetNode, targetOff, 1)) : false;
    }
    function domIndex(node) {
        for (var index = 0;; index++) {
            node = node.previousSibling;
            if (!node)
                return index;
        }
    }
    function scanFor(node, off, targetNode, targetOff, dir) {
        for (;;) {
            if (node == targetNode && off == targetOff)
                return true;
            if (off == (dir < 0 ? 0 : maxOffset(node))) {
                if (node.nodeName == "DIV")
                    return false;
                let parent = node.parentNode;
                if (!parent || parent.nodeType != 1)
                    return false;
                off = domIndex(node) + (dir < 0 ? 0 : 1);
                node = parent;
            }
            else if (node.nodeType == 1) {
                node = node.childNodes[off + (dir < 0 ? -1 : 0)];
                if (node.nodeType == 1 && node.contentEditable == "false")
                    return false;
                off = dir < 0 ? maxOffset(node) : 0;
            }
            else {
                return false;
            }
        }
    }
    function maxOffset(node) {
        return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
    }
    function flattenRect(rect, left) {
        let x = left ? rect.left : rect.right;
        return { left: x, right: x, top: rect.top, bottom: rect.bottom };
    }
    function windowRect(win) {
        return { left: 0, right: win.innerWidth,
            top: 0, bottom: win.innerHeight };
    }
    function scrollRectIntoView(dom, rect, side, x, y, xMargin, yMargin, ltr) {
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        for (let cur = dom, stop = false; cur && !stop;) {
            if (cur.nodeType == 1) { // Element
                let bounding, top = cur == doc.body;
                let scaleX = 1, scaleY = 1;
                if (top) {
                    bounding = windowRect(win);
                }
                else {
                    if (/^(fixed|sticky)$/.test(getComputedStyle(cur).position))
                        stop = true;
                    if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
                        cur = cur.assignedSlot || cur.parentNode;
                        continue;
                    }
                    let rect = cur.getBoundingClientRect();
                    scaleX = rect.width / cur.offsetWidth;
                    scaleY = rect.height / cur.offsetHeight;
                    // Make sure scrollbar width isn't included in the rectangle
                    bounding = { left: rect.left, right: rect.left + cur.clientWidth * scaleX,
                        top: rect.top, bottom: rect.top + cur.clientHeight * scaleY };
                }
                let moveX = 0, moveY = 0;
                if (y == "nearest") {
                    if (rect.top < bounding.top) {
                        moveY = -(bounding.top - rect.top + yMargin);
                        if (side > 0 && rect.bottom > bounding.bottom + moveY)
                            moveY = rect.bottom - bounding.bottom + moveY + yMargin;
                    }
                    else if (rect.bottom > bounding.bottom) {
                        moveY = rect.bottom - bounding.bottom + yMargin;
                        if (side < 0 && (rect.top - moveY) < bounding.top)
                            moveY = -(bounding.top + moveY - rect.top + yMargin);
                    }
                }
                else {
                    let rectHeight = rect.bottom - rect.top, boundingHeight = bounding.bottom - bounding.top;
                    let targetTop = y == "center" && rectHeight <= boundingHeight ? rect.top + rectHeight / 2 - boundingHeight / 2 :
                        y == "start" || y == "center" && side < 0 ? rect.top - yMargin :
                            rect.bottom - boundingHeight + yMargin;
                    moveY = targetTop - bounding.top;
                }
                if (x == "nearest") {
                    if (rect.left < bounding.left) {
                        moveX = -(bounding.left - rect.left + xMargin);
                        if (side > 0 && rect.right > bounding.right + moveX)
                            moveX = rect.right - bounding.right + moveX + xMargin;
                    }
                    else if (rect.right > bounding.right) {
                        moveX = rect.right - bounding.right + xMargin;
                        if (side < 0 && rect.left < bounding.left + moveX)
                            moveX = -(bounding.left + moveX - rect.left + xMargin);
                    }
                }
                else {
                    let targetLeft = x == "center" ? rect.left + (rect.right - rect.left) / 2 - (bounding.right - bounding.left) / 2 :
                        (x == "start") == ltr ? rect.left - xMargin :
                            rect.right - (bounding.right - bounding.left) + xMargin;
                    moveX = targetLeft - bounding.left;
                }
                if (moveX || moveY) {
                    if (top) {
                        win.scrollBy(moveX, moveY);
                    }
                    else {
                        let movedX = 0, movedY = 0;
                        if (moveY) {
                            let start = cur.scrollTop;
                            cur.scrollTop += moveY / scaleY;
                            movedY = (cur.scrollTop - start) * scaleY;
                        }
                        if (moveX) {
                            let start = cur.scrollLeft;
                            cur.scrollLeft += moveX / scaleX;
                            movedX = (cur.scrollLeft - start) * scaleX;
                        }
                        rect = { left: rect.left - movedX, top: rect.top - movedY,
                            right: rect.right - movedX, bottom: rect.bottom - movedY };
                        if (movedX && Math.abs(movedX - moveX) < 1)
                            x = "nearest";
                        if (movedY && Math.abs(movedY - moveY) < 1)
                            y = "nearest";
                    }
                }
                if (top)
                    break;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) { // A shadow root
                cur = cur.host;
            }
            else {
                break;
            }
        }
    }
    function scrollableParent(dom) {
        let doc = dom.ownerDocument;
        for (let cur = dom.parentNode; cur;) {
            if (cur == doc.body) {
                break;
            }
            else if (cur.nodeType == 1) {
                if (cur.scrollHeight > cur.clientHeight || cur.scrollWidth > cur.clientWidth)
                    return cur;
                cur = cur.assignedSlot || cur.parentNode;
            }
            else if (cur.nodeType == 11) {
                cur = cur.host;
            }
            else {
                break;
            }
        }
        return null;
    }
    class DOMSelectionState {
        constructor() {
            this.anchorNode = null;
            this.anchorOffset = 0;
            this.focusNode = null;
            this.focusOffset = 0;
        }
        eq(domSel) {
            return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
                this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
        }
        setRange(range) {
            let { anchorNode, focusNode } = range;
            // Clip offsets to node size to avoid crashes when Safari reports bogus offsets (#1152)
            this.set(anchorNode, Math.min(range.anchorOffset, anchorNode ? maxOffset(anchorNode) : 0), focusNode, Math.min(range.focusOffset, focusNode ? maxOffset(focusNode) : 0));
        }
        set(anchorNode, anchorOffset, focusNode, focusOffset) {
            this.anchorNode = anchorNode;
            this.anchorOffset = anchorOffset;
            this.focusNode = focusNode;
            this.focusOffset = focusOffset;
        }
    }
    let preventScrollSupported = null;
    // Feature-detects support for .focus({preventScroll: true}), and uses
    // a fallback kludge when not supported.
    function focusPreventScroll(dom) {
        if (dom.setActive)
            return dom.setActive(); // in IE
        if (preventScrollSupported)
            return dom.focus(preventScrollSupported);
        let stack = [];
        for (let cur = dom; cur; cur = cur.parentNode) {
            stack.push(cur, cur.scrollTop, cur.scrollLeft);
            if (cur == cur.ownerDocument)
                break;
        }
        dom.focus(preventScrollSupported == null ? {
            get preventScroll() {
                preventScrollSupported = { preventScroll: true };
                return true;
            }
        } : undefined);
        if (!preventScrollSupported) {
            preventScrollSupported = false;
            for (let i = 0; i < stack.length;) {
                let elt = stack[i++], top = stack[i++], left = stack[i++];
                if (elt.scrollTop != top)
                    elt.scrollTop = top;
                if (elt.scrollLeft != left)
                    elt.scrollLeft = left;
            }
        }
    }
    let scratchRange;
    function textRange(node, from, to = from) {
        let range = scratchRange || (scratchRange = document.createRange());
        range.setEnd(node, to);
        range.setStart(node, from);
        return range;
    }
    function dispatchKey(elt, name, code) {
        let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
        let down = new KeyboardEvent("keydown", options);
        down.synthetic = true;
        elt.dispatchEvent(down);
        let up = new KeyboardEvent("keyup", options);
        up.synthetic = true;
        elt.dispatchEvent(up);
        return down.defaultPrevented || up.defaultPrevented;
    }
    function getRoot(node) {
        while (node) {
            if (node && (node.nodeType == 9 || node.nodeType == 11 && node.host))
                return node;
            node = node.assignedSlot || node.parentNode;
        }
        return null;
    }
    function clearAttributes(node) {
        while (node.attributes.length)
            node.removeAttributeNode(node.attributes[0]);
    }
    function atElementStart(doc, selection) {
        let node = selection.focusNode, offset = selection.focusOffset;
        if (!node || selection.anchorNode != node || selection.anchorOffset != offset)
            return false;
        // Safari can report bogus offsets (#1152)
        offset = Math.min(offset, maxOffset(node));
        for (;;) {
            if (offset) {
                if (node.nodeType != 1)
                    return false;
                let prev = node.childNodes[offset - 1];
                if (prev.contentEditable == "false")
                    offset--;
                else {
                    node = prev;
                    offset = maxOffset(node);
                }
            }
            else if (node == doc) {
                return true;
            }
            else {
                offset = domIndex(node);
                node = node.parentNode;
            }
        }
    }
    function isScrolledToBottom(elt) {
        return elt.scrollTop > Math.max(1, elt.scrollHeight - elt.clientHeight - 4);
    }
 
    class DOMPos {
        constructor(node, offset, precise = true) {
            this.node = node;
            this.offset = offset;
            this.precise = precise;
        }
        static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
        static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
    }
    const noChildren = [];
    class ContentView {
        constructor() {
            this.parent = null;
            this.dom = null;
            this.flags = 2 /* ViewFlag.NodeDirty */;
        }
        get overrideDOMText() { return null; }
        get posAtStart() {
            return this.parent ? this.parent.posBefore(this) : 0;
        }
        get posAtEnd() {
            return this.posAtStart + this.length;
        }
        posBefore(view) {
            let pos = this.posAtStart;
            for (let child of this.children) {
                if (child == view)
                    return pos;
                pos += child.length + child.breakAfter;
            }
            throw new RangeError("Invalid child in posBefore");
        }
        posAfter(view) {
            return this.posBefore(view) + view.length;
        }
        sync(view, track) {
            if (this.flags & 2 /* ViewFlag.NodeDirty */) {
                let parent = this.dom;
                let prev = null, next;
                for (let child of this.children) {
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        if (!child.dom && (next = prev ? prev.nextSibling : parent.firstChild)) {
                            let contentView = ContentView.get(next);
                            if (!contentView || !contentView.parent && contentView.canReuseDOM(child))
                                child.reuseDOM(next);
                        }
                        child.sync(view, track);
                        child.flags &= ~7 /* ViewFlag.Dirty */;
                    }
                    next = prev ? prev.nextSibling : parent.firstChild;
                    if (track && !track.written && track.node == parent && next != child.dom)
                        track.written = true;
                    if (child.dom.parentNode == parent) {
                        while (next && next != child.dom)
                            next = rm$1(next);
                    }
                    else {
                        parent.insertBefore(child.dom, next);
                    }
                    prev = child.dom;
                }
                next = prev ? prev.nextSibling : parent.firstChild;
                if (next && track && track.node == parent)
                    track.written = true;
                while (next)
                    next = rm$1(next);
            }
            else if (this.flags & 1 /* ViewFlag.ChildDirty */) {
                for (let child of this.children)
                    if (child.flags & 7 /* ViewFlag.Dirty */) {
                        child.sync(view, track);
                        child.flags &= ~7 /* ViewFlag.Dirty */;
                    }
            }
        }
        reuseDOM(_dom) { }
        localPosFromDOM(node, offset) {
            let after;
            if (node == this.dom) {
                after = this.dom.childNodes[offset];
            }
            else {
                let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
                for (;;) {
                    let parent = node.parentNode;
                    if (parent == this.dom)
                        break;
                    if (bias == 0 && parent.firstChild != parent.lastChild) {
                        if (node == parent.firstChild)
                            bias = -1;
                        else
                            bias = 1;
                    }
                    node = parent;
                }
                if (bias < 0)
                    after = node;
                else
                    after = node.nextSibling;
            }
            if (after == this.dom.firstChild)
                return 0;
            while (after && !ContentView.get(after))
                after = after.nextSibling;
            if (!after)
                return this.length;
            for (let i = 0, pos = 0;; i++) {
                let child = this.children[i];
                if (child.dom == after)
                    return pos;
                pos += child.length + child.breakAfter;
            }
        }
        domBoundsAround(from, to, offset = 0) {
            let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
            for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (pos < from && end > to)
                    return child.domBoundsAround(from, to, pos);
                if (end >= from && fromI == -1) {
                    fromI = i;
                    fromStart = pos;
                }
                if (pos > to && child.dom.parentNode == this.dom) {
                    toI = i;
                    toEnd = prevEnd;
                    break;
                }
                prevEnd = end;
                pos = end + child.breakAfter;
            }
            return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
                startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
                endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
        }
        markDirty(andParent = false) {
            this.flags |= 2 /* ViewFlag.NodeDirty */;
            this.markParentsDirty(andParent);
        }
        markParentsDirty(childList) {
            for (let parent = this.parent; parent; parent = parent.parent) {
                if (childList)
                    parent.flags |= 2 /* ViewFlag.NodeDirty */;
                if (parent.flags & 1 /* ViewFlag.ChildDirty */)
                    return;
                parent.flags |= 1 /* ViewFlag.ChildDirty */;
                childList = false;
            }
        }
        setParent(parent) {
            if (this.parent != parent) {
                this.parent = parent;
                if (this.flags & 7 /* ViewFlag.Dirty */)
                    this.markParentsDirty(true);
            }
        }
        setDOM(dom) {
            if (this.dom)
                this.dom.cmView = null;
            this.dom = dom;
            dom.cmView = this;
        }
        get rootView() {
            for (let v = this;;) {
                let parent = v.parent;
                if (!parent)
                    return v;
                v = parent;
            }
        }
        replaceChildren(from, to, children = noChildren) {
            this.markDirty();
            for (let i = from; i < to; i++) {
                let child = this.children[i];
                if (child.parent == this)
                    child.destroy();
            }
            this.children.splice(from, to - from, ...children);
            for (let i = 0; i < children.length; i++)
                children[i].setParent(this);
        }
        ignoreMutation(_rec) { return false; }
        ignoreEvent(_event) { return false; }
        childCursor(pos = this.length) {
            return new ChildCursor(this.children, pos, this.children.length);
        }
        childPos(pos, bias = 1) {
            return this.childCursor().findPos(pos, bias);
        }
        toString() {
            let name = this.constructor.name.replace("View", "");
            return name + (this.children.length ? "(" + this.children.join() + ")" :
                this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
                (this.breakAfter ? "#" : "");
        }
        static get(node) { return node.cmView; }
        get isEditable() { return true; }
        get isWidget() { return false; }
        get isHidden() { return false; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            return false;
        }
        become(other) { return false; }
        canReuseDOM(other) {
            return other.constructor == this.constructor && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        // When this is a zero-length view with a side, this should return a
        // number <= 0 to indicate it is before its position, or a
        // number > 0 when after its position.
        getSide() { return 0; }
        destroy() {
            this.parent = null;
        }
    }
    ContentView.prototype.breakAfter = 0;
    // Remove a DOM node and return its next sibling.
    function rm$1(dom) {
        let next = dom.nextSibling;
        dom.parentNode.removeChild(dom);
        return next;
    }
    class ChildCursor {
        constructor(children, pos, i) {
            this.children = children;
            this.pos = pos;
            this.i = i;
            this.off = 0;
        }
        findPos(pos, bias = 1) {
            for (;;) {
                if (pos > this.pos || pos == this.pos &&
                    (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
                    this.off = pos - this.pos;
                    return this;
                }
                let next = this.children[--this.i];
                this.pos -= next.length + next.breakAfter;
            }
        }
    }
    function replaceRange(parent, fromI, fromOff, toI, toOff, insert, breakAtStart, openStart, openEnd) {
        let { children } = parent;
        let before = children.length ? children[fromI] : null;
        let last = insert.length ? insert[insert.length - 1] : null;
        let breakAtEnd = last ? last.breakAfter : breakAtStart;
        // Change within a single child
        if (fromI == toI && before && !breakAtStart && !breakAtEnd && insert.length < 2 &&
            before.merge(fromOff, toOff, insert.length ? last : null, fromOff == 0, openStart, openEnd))
            return;
        if (toI < children.length) {
            let after = children[toI];
            // Make sure the end of the child after the update is preserved in `after`
            if (after && toOff < after.length) {
                // If we're splitting a child, separate part of it to avoid that
                // being mangled when updating the child before the update.
                if (fromI == toI) {
                    after = after.split(toOff);
                    toOff = 0;
                }
                // If the element after the replacement should be merged with
                // the last replacing element, update `content`
                if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
                    insert[insert.length - 1] = after;
                }
                else {
                    // Remove the start of the after element, if necessary, and
                    // add it to `content`.
                    if (toOff)
                        after.merge(0, toOff, null, false, 0, openEnd);
                    insert.push(after);
                }
            }
            else if (after === null || after === void 0 ? void 0 : after.breakAfter) {
                // The element at `toI` is entirely covered by this range.
                // Preserve its line break, if any.
                if (last)
                    last.breakAfter = 1;
                else
                    breakAtStart = 1;
            }
            // Since we've handled the next element from the current elements
            // now, make sure `toI` points after that.
            toI++;
        }
        if (before) {
            before.breakAfter = breakAtStart;
            if (fromOff > 0) {
                if (!breakAtStart && insert.length && before.merge(fromOff, before.length, insert[0], false, openStart, 0)) {
                    before.breakAfter = insert.shift().breakAfter;
                }
                else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
                    before.merge(fromOff, before.length, null, false, openStart, 0);
                }
                fromI++;
            }
        }
        // Try to merge widgets on the boundaries of the replacement
        while (fromI < toI && insert.length) {
            if (children[toI - 1].become(insert[insert.length - 1])) {
                toI--;
                insert.pop();
                openEnd = insert.length ? 0 : openStart;
            }
            else if (children[fromI].become(insert[0])) {
                fromI++;
                insert.shift();
                openStart = insert.length ? 0 : openEnd;
            }
            else {
                break;
            }
        }
        if (!insert.length && fromI && toI < children.length && !children[fromI - 1].breakAfter &&
            children[toI].merge(0, 0, children[fromI - 1], false, openStart, openEnd))
            fromI--;
        if (fromI < toI || insert.length)
            parent.replaceChildren(fromI, toI, insert);
    }
    function mergeChildrenInto(parent, from, to, insert, openStart, openEnd) {
        let cur = parent.childCursor();
        let { i: toI, off: toOff } = cur.findPos(to, 1);
        let { i: fromI, off: fromOff } = cur.findPos(from, -1);
        let dLen = from - to;
        for (let view of insert)
            dLen += view.length;
        parent.length += dLen;
        replaceRange(parent, fromI, fromOff, toI, toOff, insert, 0, openStart, openEnd);
    }
 
    const LineBreakPlaceholder = "\uffff";
    class DOMReader {
        constructor(points, state) {
            this.points = points;
            this.text = "";
            this.lineSeparator = state.facet(EditorState.lineSeparator);
        }
        append(text) {
            this.text += text;
        }
        lineBreak() {
            this.text += LineBreakPlaceholder;
        }
        readRange(start, end) {
            if (!start)
                return this;
            let parent = start.parentNode;
            for (let cur = start;;) {
                this.findPointBefore(parent, cur);
                let oldLen = this.text.length;
                this.readNode(cur);
                let next = cur.nextSibling;
                if (next == end)
                    break;
                let view = ContentView.get(cur), nextView = ContentView.get(next);
                if (view && nextView ? view.breakAfter :
                    (view ? view.breakAfter : isBlockElement(cur)) ||
                        (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore) && this.text.length > oldLen))
                    this.lineBreak();
                cur = next;
            }
            this.findPointBefore(parent, end);
            return this;
        }
        readTextNode(node) {
            let text = node.nodeValue;
            for (let point of this.points)
                if (point.node == node)
                    point.pos = this.text.length + Math.min(point.offset, text.length);
            for (let off = 0, re = this.lineSeparator ? null : /\r\n?|\n/g;;) {
                let nextBreak = -1, breakSize = 1, m;
                if (this.lineSeparator) {
                    nextBreak = text.indexOf(this.lineSeparator, off);
                    breakSize = this.lineSeparator.length;
                }
                else if (m = re.exec(text)) {
                    nextBreak = m.index;
                    breakSize = m[0].length;
                }
                this.append(text.slice(off, nextBreak < 0 ? text.length : nextBreak));
                if (nextBreak < 0)
                    break;
                this.lineBreak();
                if (breakSize > 1)
                    for (let point of this.points)
                        if (point.node == node && point.pos > this.text.length)
                            point.pos -= breakSize - 1;
                off = nextBreak + breakSize;
            }
        }
        readNode(node) {
            if (node.cmIgnore)
                return;
            let view = ContentView.get(node);
            let fromView = view && view.overrideDOMText;
            if (fromView != null) {
                this.findPointInside(node, fromView.length);
                for (let i = fromView.iter(); !i.next().done;) {
                    if (i.lineBreak)
                        this.lineBreak();
                    else
                        this.append(i.value);
                }
            }
            else if (node.nodeType == 3) {
                this.readTextNode(node);
            }
            else if (node.nodeName == "BR") {
                if (node.nextSibling)
                    this.lineBreak();
            }
            else if (node.nodeType == 1) {
                this.readRange(node.firstChild, null);
            }
        }
        findPointBefore(node, next) {
            for (let point of this.points)
                if (point.node == node && node.childNodes[point.offset] == next)
                    point.pos = this.text.length;
        }
        findPointInside(node, maxLen) {
            for (let point of this.points)
                if (node.nodeType == 3 ? point.node == node : node.contains(point.node))
                    point.pos = this.text.length + Math.min(maxLen, point.offset);
        }
    }
    function isBlockElement(node) {
        return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
    }
    class DOMPoint {
        constructor(node, offset) {
            this.node = node;
            this.offset = offset;
            this.pos = -1;
        }
    }
 
    let nav = typeof navigator != "undefined" ? navigator : { userAgent: "", vendor: "", platform: "" };
    let doc = typeof document != "undefined" ? document : { documentElement: { style: {} } };
    const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
    const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
    const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
    const ie = !!(ie_upto10 || ie_11up || ie_edge);
    const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
    const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
    const webkit = "webkitFontSmoothing" in doc.documentElement.style;
    const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
    const ios = safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2);
    var browser = {
        mac: ios || /*@__PURE__*//Mac/.test(nav.platform),
        windows: /*@__PURE__*//Win/.test(nav.platform),
        linux: /*@__PURE__*//Linux|X11/.test(nav.platform),
        ie,
        ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
        gecko,
        gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
        chrome: !!chrome,
        chrome_version: chrome ? +chrome[1] : 0,
        ios,
        android: /*@__PURE__*//Android\b/.test(nav.userAgent),
        webkit,
        safari,
        webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
        tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
    };
 
    const MaxJoinLen = 256;
    class TextView extends ContentView {
        constructor(text) {
            super();
            this.text = text;
        }
        get length() { return this.text.length; }
        createDOM(textDOM) {
            this.setDOM(textDOM || document.createTextNode(this.text));
        }
        sync(view, track) {
            if (!this.dom)
                this.createDOM();
            if (this.dom.nodeValue != this.text) {
                if (track && track.node == this.dom)
                    track.written = true;
                this.dom.nodeValue = this.text;
            }
        }
        reuseDOM(dom) {
            if (dom.nodeType == 3)
                this.createDOM(dom);
        }
        merge(from, to, source) {
            if ((this.flags & 8 /* ViewFlag.Composition */) ||
                source && (!(source instanceof TextView) ||
                    this.length - (to - from) + source.length > MaxJoinLen ||
                    (source.flags & 8 /* ViewFlag.Composition */)))
                return false;
            this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = new TextView(this.text.slice(from));
            this.text = this.text.slice(0, from);
            this.markDirty();
            result.flags |= this.flags & 8 /* ViewFlag.Composition */;
            return result;
        }
        localPosFromDOM(node, offset) {
            return node == this.dom ? offset : offset ? this.text.length : 0;
        }
        domAtPos(pos) { return new DOMPos(this.dom, pos); }
        domBoundsAround(_from, _to, offset) {
            return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
        }
        coordsAt(pos, side) {
            return textCoords(this.dom, pos, side);
        }
    }
    class MarkView extends ContentView {
        constructor(mark, children = [], length = 0) {
            super();
            this.mark = mark;
            this.children = children;
            this.length = length;
            for (let ch of children)
                ch.setParent(this);
        }
        setAttrs(dom) {
            clearAttributes(dom);
            if (this.mark.class)
                dom.className = this.mark.class;
            if (this.mark.attrs)
                for (let name in this.mark.attrs)
                    dom.setAttribute(name, this.mark.attrs[name]);
            return dom;
        }
        canReuseDOM(other) {
            return super.canReuseDOM(other) && !((this.flags | other.flags) & 8 /* ViewFlag.Composition */);
        }
        reuseDOM(node) {
            if (node.nodeName == this.mark.tagName.toUpperCase()) {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            if (!this.dom)
                this.setDOM(this.setAttrs(document.createElement(this.mark.tagName)));
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */)
                this.setAttrs(this.dom);
            super.sync(view, track);
        }
        merge(from, to, source, _hasStart, openStart, openEnd) {
            if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
                (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
                return false;
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart - 1, openEnd - 1);
            this.markDirty();
            return true;
        }
        split(from) {
            let result = [], off = 0, detachFrom = -1, i = 0;
            for (let elt of this.children) {
                let end = off + elt.length;
                if (end > from)
                    result.push(off < from ? elt.split(from - off) : elt);
                if (detachFrom < 0 && off >= from)
                    detachFrom = i;
                off = end;
                i++;
            }
            let length = this.length - from;
            this.length = from;
            if (detachFrom > -1) {
                this.children.length = detachFrom;
                this.markDirty();
            }
            return new MarkView(this.mark, result, length);
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        coordsAt(pos, side) {
            return coordsInChildren(this, pos, side);
        }
    }
    function textCoords(text, pos, side) {
        let length = text.nodeValue.length;
        if (pos > length)
            pos = length;
        let from = pos, to = pos, flatten = 0;
        if (pos == 0 && side < 0 || pos == length && side >= 0) {
            if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
                if (pos) {
                    from--;
                    flatten = 1;
                } // FIXME this is wrong in RTL text
                else if (to < length) {
                    to++;
                    flatten = -1;
                }
            }
        }
        else {
            if (side < 0)
                from--;
            else if (to < length)
                to++;
        }
        let rects = textRange(text, from, to).getClientRects();
        if (!rects.length)
            return null;
        let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
        if (browser.safari && !flatten && rect.width == 0)
            rect = Array.prototype.find.call(rects, r => r.width) || rect;
        return flatten ? flattenRect(rect, flatten < 0) : rect || null;
    }
    // Also used for collapsed ranges that don't have a placeholder widget!
    class WidgetView extends ContentView {
        static create(widget, length, side) {
            return new WidgetView(widget, length, side);
        }
        constructor(widget, length, side) {
            super();
            this.widget = widget;
            this.length = length;
            this.side = side;
            this.prevWidget = null;
        }
        split(from) {
            let result = WidgetView.create(this.widget, this.length - from, this.side);
            this.length -= from;
            return result;
        }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                this.dom.contentEditable = "false";
            }
        }
        getSide() { return this.side; }
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        become(other) {
            if (other instanceof WidgetView && other.side == this.side &&
                this.widget.constructor == other.widget.constructor) {
                if (!this.widget.compare(other.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get overrideDOMText() {
            if (this.length == 0)
                return Text.empty;
            let top = this;
            while (top.parent)
                top = top.parent;
            let { view } = top, text = view && view.state.doc, start = this.posAtStart;
            return text ? text.slice(start, start + this.length) : Text.empty;
        }
        domAtPos(pos) {
            return (this.length ? pos == 0 : this.side > 0)
                ? DOMPos.before(this.dom)
                : DOMPos.after(this.dom, pos == this.length);
        }
        domBoundsAround() { return null; }
        coordsAt(pos, side) {
            let custom = this.widget.coordsAt(this.dom, pos, side);
            if (custom)
                return custom;
            let rects = this.dom.getClientRects(), rect = null;
            if (!rects.length)
                return null;
            let fromBack = this.side ? this.side < 0 : pos > 0;
            for (let i = fromBack ? rects.length - 1 : 0;; i += (fromBack ? -1 : 1)) {
                rect = rects[i];
                if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
                    break;
            }
            return flattenRect(rect, !fromBack);
        }
        get isEditable() { return false; }
        get isWidget() { return true; }
        get isHidden() { return this.widget.isHidden; }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
    // These are drawn around uneditable widgets to avoid a number of
    // browser bugs that show up when the cursor is directly next to
    // uneditable inline content.
    class WidgetBufferView extends ContentView {
        constructor(side) {
            super();
            this.side = side;
        }
        get length() { return 0; }
        merge() { return false; }
        become(other) {
            return other instanceof WidgetBufferView && other.side == this.side;
        }
        split() { return new WidgetBufferView(this.side); }
        sync() {
            if (!this.dom) {
                let dom = document.createElement("img");
                dom.className = "cm-widgetBuffer";
                dom.setAttribute("aria-hidden", "true");
                this.setDOM(dom);
            }
        }
        getSide() { return this.side; }
        domAtPos(pos) { return this.side > 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom); }
        localPosFromDOM() { return 0; }
        domBoundsAround() { return null; }
        coordsAt(pos) {
            return this.dom.getBoundingClientRect();
        }
        get overrideDOMText() {
            return Text.empty;
        }
        get isHidden() { return true; }
    }
    TextView.prototype.children = WidgetView.prototype.children = WidgetBufferView.prototype.children = noChildren;
    function inlineDOMAtPos(parent, pos) {
        let dom = parent.dom, { children } = parent, i = 0;
        for (let off = 0; i < children.length; i++) {
            let child = children[i], end = off + child.length;
            if (end == off && child.getSide() <= 0)
                continue;
            if (pos > off && pos < end && child.dom.parentNode == dom)
                return child.domAtPos(pos - off);
            if (pos <= off)
                break;
            off = end;
        }
        for (let j = i; j > 0; j--) {
            let prev = children[j - 1];
            if (prev.dom.parentNode == dom)
                return prev.domAtPos(prev.length);
        }
        for (let j = i; j < children.length; j++) {
            let next = children[j];
            if (next.dom.parentNode == dom)
                return next.domAtPos(0);
        }
        return new DOMPos(dom, 0);
    }
    // Assumes `view`, if a mark view, has precisely 1 child.
    function joinInlineInto(parent, view, open) {
        let last, { children } = parent;
        if (open > 0 && view instanceof MarkView && children.length &&
            (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
            joinInlineInto(last, view.children[0], open - 1);
        }
        else {
            children.push(view);
            view.setParent(parent);
        }
        parent.length += view.length;
    }
    function coordsInChildren(view, pos, side) {
        let before = null, beforePos = -1, after = null, afterPos = -1;
        function scan(view, pos) {
            for (let i = 0, off = 0; i < view.children.length && off <= pos; i++) {
                let child = view.children[i], end = off + child.length;
                if (end >= pos) {
                    if (child.children.length) {
                        scan(child, pos - off);
                    }
                    else if ((!after || after.isHidden && side > 0) &&
                        (end > pos || off == end && child.getSide() > 0)) {
                        after = child;
                        afterPos = pos - off;
                    }
                    else if (off < pos || (off == end && child.getSide() < 0) && !child.isHidden) {
                        before = child;
                        beforePos = pos - off;
                    }
                }
                off = end;
            }
        }
        scan(view, pos);
        let target = (side < 0 ? before : after) || before || after;
        if (target)
            return target.coordsAt(Math.max(0, target == before ? beforePos : afterPos), side);
        return fallbackRect(view);
    }
    function fallbackRect(view) {
        let last = view.dom.lastChild;
        if (!last)
            return view.dom.getBoundingClientRect();
        let rects = clientRectsFor(last);
        return rects[rects.length - 1] || null;
    }
 
    function combineAttrs(source, target) {
        for (let name in source) {
            if (name == "class" && target.class)
                target.class += " " + source.class;
            else if (name == "style" && target.style)
                target.style += ";" + source.style;
            else
                target[name] = source[name];
        }
        return target;
    }
    const noAttrs = /*@__PURE__*/Object.create(null);
    function attrsEq(a, b, ignore) {
        if (a == b)
            return true;
        if (!a)
            a = noAttrs;
        if (!b)
            b = noAttrs;
        let keysA = Object.keys(a), keysB = Object.keys(b);
        if (keysA.length - (ignore && keysA.indexOf(ignore) > -1 ? 1 : 0) !=
            keysB.length - (ignore && keysB.indexOf(ignore) > -1 ? 1 : 0))
            return false;
        for (let key of keysA) {
            if (key != ignore && (keysB.indexOf(key) == -1 || a[key] !== b[key]))
                return false;
        }
        return true;
    }
    function updateAttrs(dom, prev, attrs) {
        let changed = false;
        if (prev)
            for (let name in prev)
                if (!(attrs && name in attrs)) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = "";
                    else
                        dom.removeAttribute(name);
                }
        if (attrs)
            for (let name in attrs)
                if (!(prev && prev[name] == attrs[name])) {
                    changed = true;
                    if (name == "style")
                        dom.style.cssText = attrs[name];
                    else
                        dom.setAttribute(name, attrs[name]);
                }
        return changed;
    }
    function getAttrs(dom) {
        let attrs = Object.create(null);
        for (let i = 0; i < dom.attributes.length; i++) {
            let attr = dom.attributes[i];
            attrs[attr.name] = attr.value;
        }
        return attrs;
    }
 
    /**
    Widgets added to the content are described by subclasses of this
    class. Using a description object like that makes it possible to
    delay creating of the DOM structure for a widget until it is
    needed, and to avoid redrawing widgets even if the decorations
    that define them are recreated.
    */
    class WidgetType {
        /**
        Compare this instance to another instance of the same type.
        (TypeScript can't express this, but only instances of the same
        specific class will be passed to this method.) This is used to
        avoid redrawing widgets when they are replaced by a new
        decoration of the same type. The default implementation just
        returns `false`, which will cause new instances of the widget to
        always be redrawn.
        */
        eq(widget) { return false; }
        /**
        Update a DOM element created by a widget of the same type (but
        different, non-`eq` content) to reflect this widget. May return
        true to indicate that it could update, false to indicate it
        couldn't (in which case the widget will be redrawn). The default
        implementation just returns false.
        */
        updateDOM(dom, view) { return false; }
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        The estimated height this widget will have, to be used when
        estimating the height of content that hasn't been drawn. May
        return -1 to indicate you don't know. The default implementation
        returns -1.
        */
        get estimatedHeight() { return -1; }
        /**
        For inline widgets that are displayed inline (as opposed to
        `inline-block`) and introduce line breaks (through `<br>` tags
        or textual newlines), this must indicate the amount of line
        breaks they introduce. Defaults to 0.
        */
        get lineBreaks() { return 0; }
        /**
        Can be used to configure which kinds of events inside the widget
        should be ignored by the editor. The default is to ignore all
        events.
        */
        ignoreEvent(event) { return true; }
        /**
        Override the way screen coordinates for positions at/in the
        widget are found. `pos` will be the offset into the widget, and
        `side` the side of the position that is being queried—less than
        zero for before, greater than zero for after, and zero for
        directly at that position.
        */
        coordsAt(dom, pos, side) { return null; }
        /**
        @internal
        */
        get isHidden() { return false; }
        /**
        This is called when the an instance of the widget is removed
        from the editor view.
        */
        destroy(dom) { }
    }
    /**
    The different types of blocks that can occur in an editor view.
    */
    var BlockType = /*@__PURE__*/(function (BlockType) {
        /**
        A line of text.
        */
        BlockType[BlockType["Text"] = 0] = "Text";
        /**
        A block widget associated with the position after it.
        */
        BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
        /**
        A block widget associated with the position before it.
        */
        BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
        /**
        A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
        */
        BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
    return BlockType})(BlockType || (BlockType = {}));
    /**
    A decoration provides information on how to draw or style a piece
    of content. You'll usually use it wrapped in a
    [`Range`](https://codemirror.net/6/docs/ref/#state.Range), which adds a start and end position.
    @nonabstract
    */
    class Decoration extends RangeValue {
        constructor(
        /**
        @internal
        */
        startSide, 
        /**
        @internal
        */
        endSide, 
        /**
        @internal
        */
        widget, 
        /**
        The config object used to create this decoration. You can
        include additional properties in there to store metadata about
        your decoration.
        */
        spec) {
            super();
            this.startSide = startSide;
            this.endSide = endSide;
            this.widget = widget;
            this.spec = spec;
        }
        /**
        @internal
        */
        get heightRelevant() { return false; }
        /**
        Create a mark decoration, which influences the styling of the
        content in its range. Nested mark decorations will cause nested
        DOM elements to be created. Nesting order is determined by
        precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), with
        the higher-precedence decorations creating the inner DOM nodes.
        Such elements are split on line boundaries and on the boundaries
        of lower-precedence decorations.
        */
        static mark(spec) {
            return new MarkDecoration(spec);
        }
        /**
        Create a widget decoration, which displays a DOM element at the
        given position.
        */
        static widget(spec) {
            let side = Math.max(-10000, Math.min(10000, spec.side || 0)), block = !!spec.block;
            side += (block && !spec.inlineOrder)
                ? (side > 0 ? 300000000 /* Side.BlockAfter */ : -400000000 /* Side.BlockBefore */)
                : (side > 0 ? 100000000 /* Side.InlineAfter */ : -100000000 /* Side.InlineBefore */);
            return new PointDecoration(spec, side, side, block, spec.widget || null, false);
        }
        /**
        Create a replace decoration which replaces the given range with
        a widget, or simply hides it.
        */
        static replace(spec) {
            let block = !!spec.block, startSide, endSide;
            if (spec.isBlockGap) {
                startSide = -500000000 /* Side.GapStart */;
                endSide = 400000000 /* Side.GapEnd */;
            }
            else {
                let { start, end } = getInclusive(spec, block);
                startSide = (start ? (block ? -300000000 /* Side.BlockIncStart */ : -1 /* Side.InlineIncStart */) : 500000000 /* Side.NonIncStart */) - 1;
                endSide = (end ? (block ? 200000000 /* Side.BlockIncEnd */ : 1 /* Side.InlineIncEnd */) : -600000000 /* Side.NonIncEnd */) + 1;
            }
            return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
        }
        /**
        Create a line decoration, which can add DOM attributes to the
        line starting at the given position.
        */
        static line(spec) {
            return new LineDecoration(spec);
        }
        /**
        Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
        decorated range or ranges. If the ranges aren't already sorted,
        pass `true` for `sort` to make the library sort them for you.
        */
        static set(of, sort = false) {
            return RangeSet.of(of, sort);
        }
        /**
        @internal
        */
        hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
    }
    /**
    The empty set of decorations.
    */
    Decoration.none = RangeSet.empty;
    class MarkDecoration extends Decoration {
        constructor(spec) {
            let { start, end } = getInclusive(spec);
            super(start ? -1 /* Side.InlineIncStart */ : 500000000 /* Side.NonIncStart */, end ? 1 /* Side.InlineIncEnd */ : -600000000 /* Side.NonIncEnd */, null, spec);
            this.tagName = spec.tagName || "span";
            this.class = spec.class || "";
            this.attrs = spec.attributes || null;
        }
        eq(other) {
            var _a, _b;
            return this == other ||
                other instanceof MarkDecoration &&
                    this.tagName == other.tagName &&
                    (this.class || ((_a = this.attrs) === null || _a === void 0 ? void 0 : _a.class)) == (other.class || ((_b = other.attrs) === null || _b === void 0 ? void 0 : _b.class)) &&
                    attrsEq(this.attrs, other.attrs, "class");
        }
        range(from, to = from) {
            if (from >= to)
                throw new RangeError("Mark decorations may not be empty");
            return super.range(from, to);
        }
    }
    MarkDecoration.prototype.point = false;
    class LineDecoration extends Decoration {
        constructor(spec) {
            super(-200000000 /* Side.Line */, -200000000 /* Side.Line */, null, spec);
        }
        eq(other) {
            return other instanceof LineDecoration &&
                this.spec.class == other.spec.class &&
                attrsEq(this.spec.attributes, other.spec.attributes);
        }
        range(from, to = from) {
            if (to != from)
                throw new RangeError("Line decoration ranges must be zero-length");
            return super.range(from, to);
        }
    }
    LineDecoration.prototype.mapMode = MapMode.TrackBefore;
    LineDecoration.prototype.point = true;
    class PointDecoration extends Decoration {
        constructor(spec, startSide, endSide, block, widget, isReplace) {
            super(startSide, endSide, widget, spec);
            this.block = block;
            this.isReplace = isReplace;
            this.mapMode = !block ? MapMode.TrackDel : startSide <= 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
        }
        // Only relevant when this.block == true
        get type() {
            return this.startSide < this.endSide ? BlockType.WidgetRange
                : this.startSide <= 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
        }
        get heightRelevant() {
            return this.block || !!this.widget && (this.widget.estimatedHeight >= 5 || this.widget.lineBreaks > 0);
        }
        eq(other) {
            return other instanceof PointDecoration &&
                widgetsEq(this.widget, other.widget) &&
                this.block == other.block &&
                this.startSide == other.startSide && this.endSide == other.endSide;
        }
        range(from, to = from) {
            if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide <= 0)))
                throw new RangeError("Invalid range for replacement decoration");
            if (!this.isReplace && to != from)
                throw new RangeError("Widget decorations can only have zero-length ranges");
            return super.range(from, to);
        }
    }
    PointDecoration.prototype.point = true;
    function getInclusive(spec, block = false) {
        let { inclusiveStart: start, inclusiveEnd: end } = spec;
        if (start == null)
            start = spec.inclusive;
        if (end == null)
            end = spec.inclusive;
        return { start: start !== null && start !== void 0 ? start : block, end: end !== null && end !== void 0 ? end : block };
    }
    function widgetsEq(a, b) {
        return a == b || !!(a && b && a.compare(b));
    }
    function addRange(from, to, ranges, margin = 0) {
        let last = ranges.length - 1;
        if (last >= 0 && ranges[last] + margin >= from)
            ranges[last] = Math.max(ranges[last], to);
        else
            ranges.push(from, to);
    }
 
    class LineView extends ContentView {
        constructor() {
            super(...arguments);
            this.children = [];
            this.length = 0;
            this.prevAttrs = undefined;
            this.attrs = null;
            this.breakAfter = 0;
        }
        // Consumes source
        merge(from, to, source, hasStart, openStart, openEnd) {
            if (source) {
                if (!(source instanceof LineView))
                    return false;
                if (!this.dom)
                    source.transferDOM(this); // Reuse source.dom when appropriate
            }
            if (hasStart)
                this.setDeco(source ? source.attrs : null);
            mergeChildrenInto(this, from, to, source ? source.children : [], openStart, openEnd);
            return true;
        }
        split(at) {
            let end = new LineView;
            end.breakAfter = this.breakAfter;
            if (this.length == 0)
                return end;
            let { i, off } = this.childPos(at);
            if (off) {
                end.append(this.children[i].split(off), 0);
                this.children[i].merge(off, this.children[i].length, null, false, 0, 0);
                i++;
            }
            for (let j = i; j < this.children.length; j++)
                end.append(this.children[j], 0);
            while (i > 0 && this.children[i - 1].length == 0)
                this.children[--i].destroy();
            this.children.length = i;
            this.markDirty();
            this.length = at;
            return end;
        }
        transferDOM(other) {
            if (!this.dom)
                return;
            this.markDirty();
            other.setDOM(this.dom);
            other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
            this.prevAttrs = undefined;
            this.dom = null;
        }
        setDeco(attrs) {
            if (!attrsEq(this.attrs, attrs)) {
                if (this.dom) {
                    this.prevAttrs = this.attrs;
                    this.markDirty();
                }
                this.attrs = attrs;
            }
        }
        append(child, openStart) {
            joinInlineInto(this, child, openStart);
        }
        // Only called when building a line view in ContentBuilder
        addLineDeco(deco) {
            let attrs = deco.spec.attributes, cls = deco.spec.class;
            if (attrs)
                this.attrs = combineAttrs(attrs, this.attrs || {});
            if (cls)
                this.attrs = combineAttrs({ class: cls }, this.attrs || {});
        }
        domAtPos(pos) {
            return inlineDOMAtPos(this, pos);
        }
        reuseDOM(node) {
            if (node.nodeName == "DIV") {
                this.setDOM(node);
                this.flags |= 4 /* ViewFlag.AttrsDirty */ | 2 /* ViewFlag.NodeDirty */;
            }
        }
        sync(view, track) {
            var _a;
            if (!this.dom) {
                this.setDOM(document.createElement("div"));
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            else if (this.flags & 4 /* ViewFlag.AttrsDirty */) {
                clearAttributes(this.dom);
                this.dom.className = "cm-line";
                this.prevAttrs = this.attrs ? null : undefined;
            }
            if (this.prevAttrs !== undefined) {
                updateAttrs(this.dom, this.prevAttrs, this.attrs);
                this.dom.classList.add("cm-line");
                this.prevAttrs = undefined;
            }
            super.sync(view, track);
            let last = this.dom.lastChild;
            while (last && ContentView.get(last) instanceof MarkView)
                last = last.lastChild;
            if (!last || !this.length ||
                last.nodeName != "BR" && ((_a = ContentView.get(last)) === null || _a === void 0 ? void 0 : _a.isEditable) == false &&
                    (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
                let hack = document.createElement("BR");
                hack.cmIgnore = true;
                this.dom.appendChild(hack);
            }
        }
        measureTextSize() {
            if (this.children.length == 0 || this.length > 20)
                return null;
            let totalWidth = 0, textHeight;
            for (let child of this.children) {
                if (!(child instanceof TextView) || /[^ -~]/.test(child.text))
                    return null;
                let rects = clientRectsFor(child.dom);
                if (rects.length != 1)
                    return null;
                totalWidth += rects[0].width;
                textHeight = rects[0].height;
            }
            return !totalWidth ? null : {
                lineHeight: this.dom.getBoundingClientRect().height,
                charWidth: totalWidth / this.length,
                textHeight
            };
        }
        coordsAt(pos, side) {
            let rect = coordsInChildren(this, pos, side);
            // Correct rectangle height for empty lines when the returned
            // height is larger than the text height.
            if (!this.children.length && rect && this.parent) {
                let { heightOracle } = this.parent.view.viewState, height = rect.bottom - rect.top;
                if (Math.abs(height - heightOracle.lineHeight) < 2 && heightOracle.textHeight < height) {
                    let dist = (height - heightOracle.textHeight) / 2;
                    return { top: rect.top + dist, bottom: rect.bottom - dist, left: rect.left, right: rect.left };
                }
            }
            return rect;
        }
        become(_other) { return false; }
        get type() { return BlockType.Text; }
        static find(docView, pos) {
            for (let i = 0, off = 0; i < docView.children.length; i++) {
                let block = docView.children[i], end = off + block.length;
                if (end >= pos) {
                    if (block instanceof LineView)
                        return block;
                    if (end > pos)
                        break;
                }
                off = end + block.breakAfter;
            }
            return null;
        }
    }
    class BlockWidgetView extends ContentView {
        constructor(widget, length, type) {
            super();
            this.widget = widget;
            this.length = length;
            this.type = type;
            this.breakAfter = 0;
            this.prevWidget = null;
        }
        merge(from, to, source, _takeDeco, openStart, openEnd) {
            if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
                from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
                return false;
            this.length = from + (source ? source.length : 0) + (this.length - to);
            return true;
        }
        domAtPos(pos) {
            return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
        }
        split(at) {
            let len = this.length - at;
            this.length = at;
            let end = new BlockWidgetView(this.widget, len, this.type);
            end.breakAfter = this.breakAfter;
            return end;
        }
        get children() { return noChildren; }
        sync(view) {
            if (!this.dom || !this.widget.updateDOM(this.dom, view)) {
                if (this.dom && this.prevWidget)
                    this.prevWidget.destroy(this.dom);
                this.prevWidget = null;
                this.setDOM(this.widget.toDOM(view));
                this.dom.contentEditable = "false";
            }
        }
        get overrideDOMText() {
            return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
        }
        domBoundsAround() { return null; }
        become(other) {
            if (other instanceof BlockWidgetView &&
                other.widget.constructor == this.widget.constructor) {
                if (!other.widget.compare(this.widget))
                    this.markDirty(true);
                if (this.dom && !this.prevWidget)
                    this.prevWidget = this.widget;
                this.widget = other.widget;
                this.length = other.length;
                this.type = other.type;
                this.breakAfter = other.breakAfter;
                return true;
            }
            return false;
        }
        ignoreMutation() { return true; }
        ignoreEvent(event) { return this.widget.ignoreEvent(event); }
        get isEditable() { return false; }
        get isWidget() { return true; }
        coordsAt(pos, side) {
            return this.widget.coordsAt(this.dom, pos, side);
        }
        destroy() {
            super.destroy();
            if (this.dom)
                this.widget.destroy(this.dom);
        }
    }
 
    class ContentBuilder {
        constructor(doc, pos, end, disallowBlockEffectsFor) {
            this.doc = doc;
            this.pos = pos;
            this.end = end;
            this.disallowBlockEffectsFor = disallowBlockEffectsFor;
            this.content = [];
            this.curLine = null;
            this.breakAtStart = 0;
            this.pendingBuffer = 0 /* Buf.No */;
            this.bufferMarks = [];
            // Set to false directly after a widget that covers the position after it
            this.atCursorPos = true;
            this.openStart = -1;
            this.openEnd = -1;
            this.text = "";
            this.textOff = 0;
            this.cursor = doc.iter();
            this.skip = pos;
        }
        posCovered() {
            if (this.content.length == 0)
                return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
            let last = this.content[this.content.length - 1];
            return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
        }
        getLine() {
            if (!this.curLine) {
                this.content.push(this.curLine = new LineView);
                this.atCursorPos = true;
            }
            return this.curLine;
        }
        flushBuffer(active = this.bufferMarks) {
            if (this.pendingBuffer) {
                this.curLine.append(wrapMarks(new WidgetBufferView(-1), active), active.length);
                this.pendingBuffer = 0 /* Buf.No */;
            }
        }
        addBlockWidget(view) {
            this.flushBuffer();
            this.curLine = null;
            this.content.push(view);
        }
        finish(openEnd) {
            if (this.pendingBuffer && openEnd <= this.bufferMarks.length)
                this.flushBuffer();
            else
                this.pendingBuffer = 0 /* Buf.No */;
            if (!this.posCovered())
                this.getLine();
        }
        buildText(length, active, openStart) {
            while (length > 0) {
                if (this.textOff == this.text.length) {
                    let { value, lineBreak, done } = this.cursor.next(this.skip);
                    this.skip = 0;
                    if (done)
                        throw new Error("Ran out of text content when drawing inline views");
                    if (lineBreak) {
                        if (!this.posCovered())
                            this.getLine();
                        if (this.content.length)
                            this.content[this.content.length - 1].breakAfter = 1;
                        else
                            this.breakAtStart = 1;
                        this.flushBuffer();
                        this.curLine = null;
                        this.atCursorPos = true;
                        length--;
                        continue;
                    }
                    else {
                        this.text = value;
                        this.textOff = 0;
                    }
                }
                let take = Math.min(this.text.length - this.textOff, length, 512 /* T.Chunk */);
                this.flushBuffer(active.slice(active.length - openStart));
                this.getLine().append(wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
                this.atCursorPos = true;
                this.textOff += take;
                length -= take;
                openStart = 0;
            }
        }
        span(from, to, active, openStart) {
            this.buildText(to - from, active, openStart);
            this.pos = to;
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        point(from, to, deco, active, openStart, index) {
            if (this.disallowBlockEffectsFor[index] && deco instanceof PointDecoration) {
                if (deco.block)
                    throw new RangeError("Block decorations may not be specified via plugins");
                if (to > this.doc.lineAt(this.pos).to)
                    throw new RangeError("Decorations that replace line breaks may not be specified via plugins");
            }
            let len = to - from;
            if (deco instanceof PointDecoration) {
                if (deco.block) {
                    let { type } = deco;
                    if (type == BlockType.WidgetAfter && !this.posCovered())
                        this.getLine();
                    this.addBlockWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
                }
                else {
                    let view = WidgetView.create(deco.widget || new NullWidget("span"), len, len ? 0 : deco.startSide);
                    let cursorBefore = this.atCursorPos && !view.isEditable && openStart <= active.length &&
                        (from < to || deco.startSide > 0);
                    let cursorAfter = !view.isEditable && (from < to || openStart > active.length || deco.startSide <= 0);
                    let line = this.getLine();
                    if (this.pendingBuffer == 2 /* Buf.IfCursor */ && !cursorBefore && !view.isEditable)
                        this.pendingBuffer = 0 /* Buf.No */;
                    this.flushBuffer(active);
                    if (cursorBefore) {
                        line.append(wrapMarks(new WidgetBufferView(1), active), openStart);
                        openStart = active.length + Math.max(0, openStart - active.length);
                    }
                    line.append(wrapMarks(view, active), openStart);
                    this.atCursorPos = cursorAfter;
                    this.pendingBuffer = !cursorAfter ? 0 /* Buf.No */ : from < to || openStart > active.length ? 1 /* Buf.Yes */ : 2 /* Buf.IfCursor */;
                    if (this.pendingBuffer)
                        this.bufferMarks = active.slice();
                }
            }
            else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
                this.getLine().addLineDeco(deco);
            }
            if (len) {
                // Advance the iterator past the replaced content
                if (this.textOff + len <= this.text.length) {
                    this.textOff += len;
                }
                else {
                    this.skip += len - (this.text.length - this.textOff);
                    this.text = "";
                    this.textOff = 0;
                }
                this.pos = to;
            }
            if (this.openStart < 0)
                this.openStart = openStart;
        }
        static build(text, from, to, decorations, dynamicDecorationMap) {
            let builder = new ContentBuilder(text, from, to, dynamicDecorationMap);
            builder.openEnd = RangeSet.spans(decorations, from, to, builder);
            if (builder.openStart < 0)
                builder.openStart = builder.openEnd;
            builder.finish(builder.openEnd);
            return builder;
        }
    }
    function wrapMarks(view, active) {
        for (let mark of active)
            view = new MarkView(mark, [view], view.length);
        return view;
    }
    class NullWidget extends WidgetType {
        constructor(tag) {
            super();
            this.tag = tag;
        }
        eq(other) { return other.tag == this.tag; }
        toDOM() { return document.createElement(this.tag); }
        updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
        get isHidden() { return true; }
    }
 
    const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
    const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
    const mouseSelectionStyle = /*@__PURE__*/Facet.define();
    const exceptionSink = /*@__PURE__*/Facet.define();
    const updateListener = /*@__PURE__*/Facet.define();
    const inputHandler = /*@__PURE__*/Facet.define();
    const focusChangeEffect = /*@__PURE__*/Facet.define();
    const perLineTextDirection = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    const nativeSelectionHidden = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    class ScrollTarget {
        constructor(range, y = "nearest", x = "nearest", yMargin = 5, xMargin = 5) {
            this.range = range;
            this.y = y;
            this.x = x;
            this.yMargin = yMargin;
            this.xMargin = xMargin;
        }
        map(changes) {
            return changes.empty ? this : new ScrollTarget(this.range.map(changes), this.y, this.x, this.yMargin, this.xMargin);
        }
    }
    const scrollIntoView = /*@__PURE__*/StateEffect.define({ map: (t, ch) => t.map(ch) });
    /**
    Log or report an unhandled exception in client code. Should
    probably only be used by extension code that allows client code to
    provide functions, and calls those functions in a context where an
    exception can't be propagated to calling code in a reasonable way
    (for example when in an event handler).
 
    Either calls a handler registered with
    [`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
    `window.onerror`, if defined, or `console.error` (in which case
    it'll pass `context`, when given, as first argument).
    */
    function logException(state, exception, context) {
        let handler = state.facet(exceptionSink);
        if (handler.length)
            handler[0](exception);
        else if (window.onerror)
            window.onerror(String(exception), context, undefined, undefined, exception);
        else if (context)
            console.error(context + ":", exception);
        else
            console.error(exception);
    }
    const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
    let nextPluginID = 0;
    const viewPlugin = /*@__PURE__*/Facet.define();
    /**
    View plugins associate stateful values with a view. They can
    influence the way the content is drawn, and are notified of things
    that happen in the view.
    */
    class ViewPlugin {
        constructor(
        /**
        @internal
        */
        id, 
        /**
        @internal
        */
        create, 
        /**
        @internal
        */
        domEventHandlers, buildExtensions) {
            this.id = id;
            this.create = create;
            this.domEventHandlers = domEventHandlers;
            this.extension = buildExtensions(this);
        }
        /**
        Define a plugin from a constructor function that creates the
        plugin's value, given an editor view.
        */
        static define(create, spec) {
            const { eventHandlers, provide, decorations: deco } = spec || {};
            return new ViewPlugin(nextPluginID++, create, eventHandlers, plugin => {
                let ext = [viewPlugin.of(plugin)];
                if (deco)
                    ext.push(decorations.of(view => {
                        let pluginInst = view.plugin(plugin);
                        return pluginInst ? deco(pluginInst) : Decoration.none;
                    }));
                if (provide)
                    ext.push(provide(plugin));
                return ext;
            });
        }
        /**
        Create a plugin for a class whose constructor takes a single
        editor view as argument.
        */
        static fromClass(cls, spec) {
            return ViewPlugin.define(view => new cls(view), spec);
        }
    }
    class PluginInstance {
        constructor(spec) {
            this.spec = spec;
            // When starting an update, all plugins have this field set to the
            // update object, indicating they need to be updated. When finished
            // updating, it is set to `false`. Retrieving a plugin that needs to
            // be updated with `view.plugin` forces an eager update.
            this.mustUpdate = null;
            // This is null when the plugin is initially created, but
            // initialized on the first update.
            this.value = null;
        }
        update(view) {
            if (!this.value) {
                if (this.spec) {
                    try {
                        this.value = this.spec.create(view);
                    }
                    catch (e) {
                        logException(view.state, e, "CodeMirror plugin crashed");
                        this.deactivate();
                    }
                }
            }
            else if (this.mustUpdate) {
                let update = this.mustUpdate;
                this.mustUpdate = null;
                if (this.value.update) {
                    try {
                        this.value.update(update);
                    }
                    catch (e) {
                        logException(update.state, e, "CodeMirror plugin crashed");
                        if (this.value.destroy)
                            try {
                                this.value.destroy();
                            }
                            catch (_) { }
                        this.deactivate();
                    }
                }
            }
            return this;
        }
        destroy(view) {
            var _a;
            if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
                try {
                    this.value.destroy();
                }
                catch (e) {
                    logException(view.state, e, "CodeMirror plugin crashed");
                }
            }
        }
        deactivate() {
            this.spec = this.value = null;
        }
    }
    const editorAttributes = /*@__PURE__*/Facet.define();
    const contentAttributes = /*@__PURE__*/Facet.define();
    // Provide decorations
    const decorations = /*@__PURE__*/Facet.define();
    const atomicRanges = /*@__PURE__*/Facet.define();
    const bidiIsolatedRanges = /*@__PURE__*/Facet.define();
    function getIsolatedRanges(view, from, to) {
        let isolates = view.state.facet(bidiIsolatedRanges);
        if (!isolates.length)
            return isolates;
        let sets = isolates.map(i => i instanceof Function ? i(view) : i);
        let result = [];
        RangeSet.spans(sets, from, to, {
            point() { },
            span(from, to, active, open) {
                let level = result;
                for (let i = active.length - 1; i >= 0; i--, open--) {
                    let iso = active[i].spec.bidiIsolate, update;
                    if (iso == null)
                        continue;
                    if (open > 0 && level.length &&
                        (update = level[level.length - 1]).to == from && update.direction == iso) {
                        update.to = to;
                        level = update.inner;
                    }
                    else {
                        let add = { from, to, direction: iso, inner: [] };
                        level.push(add);
                        level = add.inner;
                    }
                }
            }
        });
        return result;
    }
    const scrollMargins = /*@__PURE__*/Facet.define();
    function getScrollMargins(view) {
        let left = 0, right = 0, top = 0, bottom = 0;
        for (let source of view.state.facet(scrollMargins)) {
            let m = source(view);
            if (m) {
                if (m.left != null)
                    left = Math.max(left, m.left);
                if (m.right != null)
                    right = Math.max(right, m.right);
                if (m.top != null)
                    top = Math.max(top, m.top);
                if (m.bottom != null)
                    bottom = Math.max(bottom, m.bottom);
            }
        }
        return { left, right, top, bottom };
    }
    const styleModule = /*@__PURE__*/Facet.define();
    class ChangedRange {
        constructor(fromA, toA, fromB, toB) {
            this.fromA = fromA;
            this.toA = toA;
            this.fromB = fromB;
            this.toB = toB;
        }
        join(other) {
            return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
        }
        addToSet(set) {
            let i = set.length, me = this;
            for (; i > 0; i--) {
                let range = set[i - 1];
                if (range.fromA > me.toA)
                    continue;
                if (range.toA < me.fromA)
                    break;
                me = me.join(range);
                set.splice(i - 1, 1);
            }
            set.splice(i, 0, me);
            return set;
        }
        static extendWithRanges(diff, ranges) {
            if (ranges.length == 0)
                return diff;
            let result = [];
            for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
                let next = dI == diff.length ? null : diff[dI], off = posA - posB;
                let end = next ? next.fromB : 1e9;
                while (rI < ranges.length && ranges[rI] < end) {
                    let from = ranges[rI], to = ranges[rI + 1];
                    let fromB = Math.max(posB, from), toB = Math.min(end, to);
                    if (fromB <= toB)
                        new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
                    if (to > end)
                        break;
                    else
                        rI += 2;
                }
                if (!next)
                    return result;
                new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
                posA = next.toA;
                posB = next.toB;
            }
        }
    }
    /**
    View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
    class, which describe what happened, whenever the view is updated.
    */
    class ViewUpdate {
        constructor(
        /**
        The editor view that the update is associated with.
        */
        view, 
        /**
        The new editor state.
        */
        state, 
        /**
        The transactions involved in the update. May be empty.
        */
        transactions) {
            this.view = view;
            this.state = state;
            this.transactions = transactions;
            /**
            @internal
            */
            this.flags = 0;
            this.startState = view.state;
            this.changes = ChangeSet.empty(this.startState.doc.length);
            for (let tr of transactions)
                this.changes = this.changes.compose(tr.changes);
            let changedRanges = [];
            this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
            this.changedRanges = changedRanges;
        }
        /**
        @internal
        */
        static create(view, state, transactions) {
            return new ViewUpdate(view, state, transactions);
        }
        /**
        Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
        [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
        update.
        */
        get viewportChanged() {
            return (this.flags & 4 /* UpdateFlag.Viewport */) > 0;
        }
        /**
        Indicates whether the height of a block element in the editor
        changed in this update.
        */
        get heightChanged() {
            return (this.flags & 2 /* UpdateFlag.Height */) > 0;
        }
        /**
        Returns true when the document was modified or the size of the
        editor, or elements within the editor, changed.
        */
        get geometryChanged() {
            return this.docChanged || (this.flags & (8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */)) > 0;
        }
        /**
        True when this update indicates a focus change.
        */
        get focusChanged() {
            return (this.flags & 1 /* UpdateFlag.Focus */) > 0;
        }
        /**
        Whether the document changed in this update.
        */
        get docChanged() {
            return !this.changes.empty;
        }
        /**
        Whether the selection was explicitly set in this update.
        */
        get selectionSet() {
            return this.transactions.some(tr => tr.selection);
        }
        /**
        @internal
        */
        get empty() { return this.flags == 0 && this.transactions.length == 0; }
    }
 
    /**
    Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
    */
    var Direction = /*@__PURE__*/(function (Direction) {
        // (These are chosen to match the base levels, in bidi algorithm
        // terms, of spans in that direction.)
        /**
        Left-to-right.
        */
        Direction[Direction["LTR"] = 0] = "LTR";
        /**
        Right-to-left.
        */
        Direction[Direction["RTL"] = 1] = "RTL";
    return Direction})(Direction || (Direction = {}));
    const LTR = Direction.LTR, RTL = Direction.RTL;
    // Decode a string with each type encoded as log2(type)
    function dec(str) {
        let result = [];
        for (let i = 0; i < str.length; i++)
            result.push(1 << +str[i]);
        return result;
    }
    // Character types for codepoints 0 to 0xf8
    const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
    // Character types for codepoints 0x600 to 0x6f9
    const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
    const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
    // There's a lot more in
    // https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
    // which are left out to keep code size down.
    for (let p of ["()", "[]", "{}"]) {
        let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
        Brackets[l] = r;
        Brackets[r] = -l;
    }
    function charType(ch) {
        return ch <= 0xf7 ? LowTypes[ch] :
            0x590 <= ch && ch <= 0x5f4 ? 2 /* T.R */ :
                0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
                    0x6ee <= ch && ch <= 0x8ac ? 4 /* T.AL */ :
                        0x2000 <= ch && ch <= 0x200b ? 256 /* T.NI */ :
                            0xfb50 <= ch && ch <= 0xfdff ? 4 /* T.AL */ :
                                ch == 0x200c ? 256 /* T.NI */ : 1 /* T.L */;
    }
    const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac\ufb50-\ufdff]/;
    /**
    Represents a contiguous range of text that has a single direction
    (as in left-to-right or right-to-left).
    */
    class BidiSpan {
        /**
        The direction of this span.
        */
        get dir() { return this.level % 2 ? RTL : LTR; }
        /**
        @internal
        */
        constructor(
        /**
        The start of the span (relative to the start of the line).
        */
        from, 
        /**
        The end of the span.
        */
        to, 
        /**
        The ["bidi
        level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
        of the span (in this context, 0 means
        left-to-right, 1 means right-to-left, 2 means left-to-right
        number inside right-to-left text).
        */
        level) {
            this.from = from;
            this.to = to;
            this.level = level;
        }
        /**
        @internal
        */
        side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
        /**
        @internal
        */
        static find(order, index, level, assoc) {
            let maybe = -1;
            for (let i = 0; i < order.length; i++) {
                let span = order[i];
                if (span.from <= index && span.to >= index) {
                    if (span.level == level)
                        return i;
                    // When multiple spans match, if assoc != 0, take the one that
                    // covers that side, otherwise take the one with the minimum
                    // level.
                    if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
                        maybe = i;
                }
            }
            if (maybe < 0)
                throw new RangeError("Index out of range");
            return maybe;
        }
    }
    function isolatesEq(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++) {
            let iA = a[i], iB = b[i];
            if (iA.from != iB.from || iA.to != iB.to || iA.direction != iB.direction || !isolatesEq(iA.inner, iB.inner))
                return false;
        }
        return true;
    }
    // Reused array of character types
    const types = [];
    // Fill in the character types (in `types`) from `from` to `to` and
    // apply W normalization rules.
    function computeCharTypes(line, rFrom, rTo, isolates, outerType) {
        for (let iI = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            let prevType = iI ? 256 /* T.NI */ : outerType;
            // W1. Examine each non-spacing mark (NSM) in the level run, and
            // change the type of the NSM to the type of the previous
            // character. If the NSM is at the start of the level run, it will
            // get the type of sor.
            // W2. Search backwards from each instance of a European number
            // until the first strong type (R, L, AL, or sor) is found. If an
            // AL is found, change the type of the European number to Arabic
            // number.
            // W3. Change all ALs to R.
            // (Left after this: L, R, EN, AN, ET, CS, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = charType(line.charCodeAt(i));
                if (type == 512 /* T.NSM */)
                    type = prev;
                else if (type == 8 /* T.EN */ && prevStrong == 4 /* T.AL */)
                    type = 16 /* T.AN */;
                types[i] = type == 4 /* T.AL */ ? 2 /* T.R */ : type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
                prev = type;
            }
            // W5. A sequence of European terminators adjacent to European
            // numbers changes to all European numbers.
            // W6. Otherwise, separators and terminators change to Other
            // Neutral.
            // W7. Search backwards from each instance of a European number
            // until the first strong type (R, L, or sor) is found. If an L is
            // found, then change the type of the European number to L.
            // (Left after this: L, R, EN+AN, NI)
            for (let i = from, prev = prevType, prevStrong = prevType; i < to; i++) {
                let type = types[i];
                if (type == 128 /* T.CS */) {
                    if (i < to - 1 && prev == types[i + 1] && (prev & 24 /* T.Num */))
                        type = types[i] = prev;
                    else
                        types[i] = 256 /* T.NI */;
                }
                else if (type == 64 /* T.ET */) {
                    let end = i + 1;
                    while (end < to && types[end] == 64 /* T.ET */)
                        end++;
                    let replace = (i && prev == 8 /* T.EN */) || (end < rTo && types[end] == 8 /* T.EN */) ? (prevStrong == 1 /* T.L */ ? 1 /* T.L */ : 8 /* T.EN */) : 256 /* T.NI */;
                    for (let j = i; j < end; j++)
                        types[j] = replace;
                    i = end - 1;
                }
                else if (type == 8 /* T.EN */ && prevStrong == 1 /* T.L */) {
                    types[i] = 1 /* T.L */;
                }
                prev = type;
                if (type & 7 /* T.Strong */)
                    prevStrong = type;
            }
        }
    }
    // Process brackets throughout a run sequence.
    function processBracketPairs(line, rFrom, rTo, isolates, outerType) {
        let oppositeType = outerType == 1 /* T.L */ ? 2 /* T.R */ : 1 /* T.L */;
        for (let iI = 0, sI = 0, context = 0; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N0. Process bracket pairs in an isolating run sequence
            // sequentially in the logical order of the text positions of the
            // opening paired brackets using the logic given below. Within this
            // scope, bidirectional types EN and AN are treated as R.
            for (let i = from, ch, br, type; i < to; i++) {
                // Keeps [startIndex, type, strongSeen] triples for each open
                // bracket on BracketStack.
                if (br = Brackets[ch = line.charCodeAt(i)]) {
                    if (br < 0) { // Closing bracket
                        for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                            if (BracketStack[sJ + 1] == -br) {
                                let flags = BracketStack[sJ + 2];
                                let type = (flags & 2 /* Bracketed.EmbedInside */) ? outerType :
                                    !(flags & 4 /* Bracketed.OppositeInside */) ? 0 :
                                        (flags & 1 /* Bracketed.OppositeBefore */) ? oppositeType : outerType;
                                if (type)
                                    types[i] = types[BracketStack[sJ]] = type;
                                sI = sJ;
                                break;
                            }
                        }
                    }
                    else if (BracketStack.length == 189 /* Bracketed.MaxDepth */) {
                        break;
                    }
                    else {
                        BracketStack[sI++] = i;
                        BracketStack[sI++] = ch;
                        BracketStack[sI++] = context;
                    }
                }
                else if ((type = types[i]) == 2 /* T.R */ || type == 1 /* T.L */) {
                    let embed = type == outerType;
                    context = embed ? 0 : 1 /* Bracketed.OppositeBefore */;
                    for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
                        let cur = BracketStack[sJ + 2];
                        if (cur & 2 /* Bracketed.EmbedInside */)
                            break;
                        if (embed) {
                            BracketStack[sJ + 2] |= 2 /* Bracketed.EmbedInside */;
                        }
                        else {
                            if (cur & 4 /* Bracketed.OppositeInside */)
                                break;
                            BracketStack[sJ + 2] |= 4 /* Bracketed.OppositeInside */;
                        }
                    }
                }
            }
        }
    }
    function processNeutrals(rFrom, rTo, isolates, outerType) {
        for (let iI = 0, prev = outerType; iI <= isolates.length; iI++) {
            let from = iI ? isolates[iI - 1].to : rFrom, to = iI < isolates.length ? isolates[iI].from : rTo;
            // N1. A sequence of neutrals takes the direction of the
            // surrounding strong text if the text on both sides has the same
            // direction. European and Arabic numbers act as if they were R in
            // terms of their influence on neutrals. Start-of-level-run (sor)
            // and end-of-level-run (eor) are used at level run boundaries.
            // N2. Any remaining neutrals take the embedding direction.
            // (Left after this: L, R, EN+AN)
            for (let i = from; i < to;) {
                let type = types[i];
                if (type == 256 /* T.NI */) {
                    let end = i + 1;
                    for (;;) {
                        if (end == to) {
                            if (iI == isolates.length)
                                break;
                            end = isolates[iI++].to;
                            to = iI < isolates.length ? isolates[iI].from : rTo;
                        }
                        else if (types[end] == 256 /* T.NI */) {
                            end++;
                        }
                        else {
                            break;
                        }
                    }
                    let beforeL = prev == 1 /* T.L */;
                    let afterL = (end < rTo ? types[end] : outerType) == 1 /* T.L */;
                    let replace = beforeL == afterL ? (beforeL ? 1 /* T.L */ : 2 /* T.R */) : outerType;
                    for (let j = end, jI = iI, fromJ = jI ? isolates[jI - 1].to : rFrom; j > i;) {
                        if (j == fromJ) {
                            j = isolates[--jI].from;
                            fromJ = jI ? isolates[jI - 1].to : rFrom;
                        }
                        types[--j] = replace;
                    }
                    i = end;
                }
                else {
                    prev = type;
                    i++;
                }
            }
        }
    }
    // Find the contiguous ranges of character types in a given range, and
    // emit spans for them. Flip the order of the spans as appropriate
    // based on the level, and call through to compute the spans for
    // isolates at the proper point.
    function emitSpans(line, from, to, level, baseLevel, isolates, order) {
        let ourType = level % 2 ? 2 /* T.R */ : 1 /* T.L */;
        if ((level % 2) == (baseLevel % 2)) { // Same dir as base direction, don't flip
            for (let iCh = from, iI = 0; iCh < to;) {
                // Scan a section of characters in direction ourType, unless
                // there's another type of char right after iCh, in which case
                // we scan a section of other characters (which, if ourType ==
                // T.L, may contain both T.R and T.AN chars).
                let sameDir = true, isNum = false;
                if (iI == isolates.length || iCh < isolates[iI].from) {
                    let next = types[iCh];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                // Holds an array of isolates to pass to a recursive call if we
                // must recurse (to distinguish T.AN inside an RTL section in
                // LTR text), null if we can emit directly
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI < isolates.length && iScan == isolates[iI].from) {
                        if (isNum)
                            break run;
                        let iso = isolates[iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.to, jI = iI + 1;;) {
                                if (upto == to)
                                    break run;
                                if (jI < isolates.length && isolates[jI].from == upto)
                                    upto = isolates[jI++].to;
                                else if (types[upto] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        iI++;
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.from > iCh)
                                order.push(new BidiSpan(iCh, iso.from, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.to;
                        }
                        iScan = iso.to;
                    }
                    else if (iScan == to || (sameDir ? types[iScan] != ourType : types[iScan] == ourType)) {
                        break;
                    }
                    else {
                        iScan++;
                    }
                }
                if (recurse)
                    emitSpans(line, iCh, iScan, level + 1, baseLevel, recurse, order);
                else if (iCh < iScan)
                    order.push(new BidiSpan(iCh, iScan, localLevel));
                iCh = iScan;
            }
        }
        else {
            // Iterate in reverse to flip the span order. Same code again, but
            // going from the back of the section to the front
            for (let iCh = to, iI = isolates.length; iCh > from;) {
                let sameDir = true, isNum = false;
                if (!iI || iCh > isolates[iI - 1].to) {
                    let next = types[iCh - 1];
                    if (next != ourType) {
                        sameDir = false;
                        isNum = next == 16 /* T.AN */;
                    }
                }
                let recurse = !sameDir && ourType == 1 /* T.L */ ? [] : null;
                let localLevel = sameDir ? level : level + 1;
                let iScan = iCh;
                run: for (;;) {
                    if (iI && iScan == isolates[iI - 1].to) {
                        if (isNum)
                            break run;
                        let iso = isolates[--iI];
                        // Scan ahead to verify that there is another char in this dir after the isolate(s)
                        if (!sameDir)
                            for (let upto = iso.from, jI = iI;;) {
                                if (upto == from)
                                    break run;
                                if (jI && isolates[jI - 1].to == upto)
                                    upto = isolates[--jI].from;
                                else if (types[upto - 1] == ourType)
                                    break run;
                                else
                                    break;
                            }
                        if (recurse) {
                            recurse.push(iso);
                        }
                        else {
                            if (iso.to < iCh)
                                order.push(new BidiSpan(iso.to, iCh, localLevel));
                            let dirSwap = (iso.direction == LTR) != !(localLevel % 2);
                            computeSectionOrder(line, dirSwap ? level + 1 : level, baseLevel, iso.inner, iso.from, iso.to, order);
                            iCh = iso.from;
                        }
                        iScan = iso.from;
                    }
                    else if (iScan == from || (sameDir ? types[iScan - 1] != ourType : types[iScan - 1] == ourType)) {
                        break;
                    }
                    else {
                        iScan--;
                    }
                }
                if (recurse)
                    emitSpans(line, iScan, iCh, level + 1, baseLevel, recurse, order);
                else if (iScan < iCh)
                    order.push(new BidiSpan(iScan, iCh, localLevel));
                iCh = iScan;
            }
        }
    }
    function computeSectionOrder(line, level, baseLevel, isolates, from, to, order) {
        let outerType = (level % 2 ? 2 /* T.R */ : 1 /* T.L */);
        computeCharTypes(line, from, to, isolates, outerType);
        processBracketPairs(line, from, to, isolates, outerType);
        processNeutrals(from, to, isolates, outerType);
        emitSpans(line, from, to, level, baseLevel, isolates, order);
    }
    function computeOrder(line, direction, isolates) {
        if (!line)
            return [new BidiSpan(0, 0, direction == RTL ? 1 : 0)];
        if (direction == LTR && !isolates.length && !BidiRE.test(line))
            return trivialOrder(line.length);
        if (isolates.length)
            while (line.length > types.length)
                types[types.length] = 256 /* T.NI */; // Make sure types array has no gaps
        let order = [], level = direction == LTR ? 0 : 1;
        computeSectionOrder(line, level, level, isolates, 0, line.length, order);
        return order;
    }
    function trivialOrder(length) {
        return [new BidiSpan(0, length, 0)];
    }
    let movedOver = "";
    function moveVisually(line, order, dir, start, forward) {
        var _a;
        let startIndex = start.head - line.from, spanI = -1;
        if (startIndex == 0) {
            if (!forward || !line.length)
                return null;
            if (order[0].level != dir) {
                startIndex = order[0].side(false, dir);
                spanI = 0;
            }
        }
        else if (startIndex == line.length) {
            if (forward)
                return null;
            let last = order[order.length - 1];
            if (last.level != dir) {
                startIndex = last.side(true, dir);
                spanI = order.length - 1;
            }
        }
        if (spanI < 0)
            spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
        let span = order[spanI];
        // End of span. (But not end of line--that was checked for above.)
        if (startIndex == span.side(forward, dir)) {
            span = order[spanI += forward ? 1 : -1];
            startIndex = span.side(!forward, dir);
        }
        let indexForward = forward == (span.dir == dir);
        let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
        movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
        if (nextIndex != span.side(forward, dir))
            return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
        let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
        if (!nextSpan && span.level != dir)
            return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
        if (nextSpan && nextSpan.level < span.level)
            return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
        return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
    }
 
    class DocView extends ContentView {
        get length() { return this.view.state.doc.length; }
        constructor(view) {
            super();
            this.view = view;
            this.decorations = [];
            this.dynamicDecorationMap = [];
            this.hasComposition = null;
            this.markedForComposition = new Set;
            // Track a minimum width for the editor. When measuring sizes in
            // measureVisibleLineHeights, this is updated to point at the width
            // of a given element and its extent in the document. When a change
            // happens in that range, these are reset. That way, once we've seen
            // a line/element of a given length, we keep the editor wide enough
            // to fit at least that element, until it is changed, at which point
            // we forget it again.
            this.minWidth = 0;
            this.minWidthFrom = 0;
            this.minWidthTo = 0;
            // Track whether the DOM selection was set in a lossy way, so that
            // we don't mess it up when reading it back it
            this.impreciseAnchor = null;
            this.impreciseHead = null;
            this.forceSelection = false;
            // Used by the resize observer to ignore resizes that we caused
            // ourselves
            this.lastUpdate = Date.now();
            this.setDOM(view.contentDOM);
            this.children = [new LineView];
            this.children[0].setParent(this);
            this.updateDeco();
            this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], 0, null);
        }
        // Update the document view to a given state.
        update(update) {
            let changedRanges = update.changedRanges;
            if (this.minWidth > 0 && changedRanges.length) {
                if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
                    this.minWidth = this.minWidthFrom = this.minWidthTo = 0;
                }
                else {
                    this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
                    this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
                }
            }
            let composition = this.view.inputState.composing < 0 ? null : findCompositionRange(this.view, update.changes);
            if (this.hasComposition) {
                this.markedForComposition.clear();
                let { from, to } = this.hasComposition;
                changedRanges = new ChangedRange(from, to, update.changes.mapPos(from, -1), update.changes.mapPos(to, 1))
                    .addToSet(changedRanges.slice());
            }
            this.hasComposition = composition ? { from: composition.range.fromB, to: composition.range.toB } : null;
            // When the DOM nodes around the selection are moved to another
            // parent, Chrome sometimes reports a different selection through
            // getSelection than the one that it actually shows to the user.
            // This forces a selection update when lines are joined to work
            // around that. Issue #54
            if ((browser.ie || browser.chrome) && !composition && update &&
                update.state.doc.lines != update.startState.doc.lines)
                this.forceSelection = true;
            let prevDeco = this.decorations, deco = this.updateDeco();
            let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
            changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
            if (!(this.flags & 7 /* ViewFlag.Dirty */) && changedRanges.length == 0) {
                return false;
            }
            else {
                this.updateInner(changedRanges, update.startState.doc.length, composition);
                if (update.transactions.length)
                    this.lastUpdate = Date.now();
                return true;
            }
        }
        // Used by update and the constructor do perform the actual DOM
        // update
        updateInner(changes, oldLength, composition) {
            this.view.viewState.mustMeasureContent = true;
            this.updateChildren(changes, oldLength, composition);
            let { observer } = this.view;
            observer.ignore(() => {
                // Lock the height during redrawing, since Chrome sometimes
                // messes with the scroll position during DOM mutation (though
                // no relayout is triggered and I cannot imagine how it can
                // recompute the scroll position without a layout)
                this.dom.style.height = this.view.viewState.contentHeight / this.view.scaleY + "px";
                this.dom.style.flexBasis = this.minWidth ? this.minWidth + "px" : "";
                // Chrome will sometimes, when DOM mutations occur directly
                // around the selection, get confused and report a different
                // selection from the one it displays (issue #218). This tries
                // to detect that situation.
                let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
                this.sync(this.view, track);
                this.flags &= ~7 /* ViewFlag.Dirty */;
                if (track && (track.written || observer.selectionRange.focusNode != track.node))
                    this.forceSelection = true;
                this.dom.style.height = "";
            });
            this.markedForComposition.forEach(cView => cView.flags &= ~8 /* ViewFlag.Composition */);
            let gaps = [];
            if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
                for (let child of this.children)
                    if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
                        gaps.push(child.dom);
            observer.updateGaps(gaps);
        }
        updateChildren(changes, oldLength, composition) {
            let ranges = composition ? composition.range.addToSet(changes.slice()) : changes;
            let cursor = this.childCursor(oldLength);
            for (let i = ranges.length - 1;; i--) {
                let next = i >= 0 ? ranges[i] : null;
                if (!next)
                    break;
                let { fromA, toA, fromB, toB } = next, content, breakAtStart, openStart, openEnd;
                if (composition && composition.range.fromB < toB && composition.range.toB > fromB) {
                    let before = ContentBuilder.build(this.view.state.doc, fromB, composition.range.fromB, this.decorations, this.dynamicDecorationMap);
                    let after = ContentBuilder.build(this.view.state.doc, composition.range.toB, toB, this.decorations, this.dynamicDecorationMap);
                    breakAtStart = before.breakAtStart;
                    openStart = before.openStart;
                    openEnd = after.openEnd;
                    let compLine = this.compositionView(composition);
                    if (after.breakAtStart) {
                        compLine.breakAfter = 1;
                    }
                    else if (after.content.length &&
                        compLine.merge(compLine.length, compLine.length, after.content[0], false, after.openStart, 0)) {
                        compLine.breakAfter = after.content[0].breakAfter;
                        after.content.shift();
                    }
                    if (before.content.length &&
                        compLine.merge(0, 0, before.content[before.content.length - 1], true, 0, before.openEnd)) {
                        before.content.pop();
                    }
                    content = before.content.concat(compLine).concat(after.content);
                }
                else {
                    ({ content, breakAtStart, openStart, openEnd } =
                        ContentBuilder.build(this.view.state.doc, fromB, toB, this.decorations, this.dynamicDecorationMap));
                }
                let { i: toI, off: toOff } = cursor.findPos(toA, 1);
                let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
                replaceRange(this, fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
            }
            if (composition)
                this.fixCompositionDOM(composition);
        }
        compositionView(composition) {
            let cur = new TextView(composition.text.nodeValue);
            cur.flags |= 8 /* ViewFlag.Composition */;
            for (let { deco } of composition.marks)
                cur = new MarkView(deco, [cur], cur.length);
            let line = new LineView;
            line.append(cur, 0);
            return line;
        }
        fixCompositionDOM(composition) {
            let fix = (dom, cView) => {
                cView.flags |= 8 /* ViewFlag.Composition */ | (cView.children.some(c => c.flags & 7 /* ViewFlag.Dirty */) ? 1 /* ViewFlag.ChildDirty */ : 0);
                this.markedForComposition.add(cView);
                let prev = ContentView.get(dom);
                if (prev != cView) {
                    if (prev)
                        prev.dom = null;
                    cView.setDOM(dom);
                }
            };
            let pos = this.childPos(composition.range.fromB, 1);
            let cView = this.children[pos.i];
            fix(composition.line, cView);
            for (let i = composition.marks.length - 1; i >= -1; i--) {
                pos = cView.childPos(pos.off, 1);
                cView = cView.children[pos.i];
                fix(i >= 0 ? composition.marks[i].node : composition.text, cView);
            }
        }
        // Sync the DOM selection to this.state.selection
        updateSelection(mustRead = false, fromPointer = false) {
            if (mustRead || !this.view.observer.selectionRange.focusNode)
                this.view.observer.readSelectionRange();
            let activeElt = this.view.root.activeElement, focused = activeElt == this.dom;
            let selectionNotFocus = !focused &&
                hasSelection(this.dom, this.view.observer.selectionRange) && !(activeElt && this.dom.contains(activeElt));
            if (!(focused || fromPointer || selectionNotFocus))
                return;
            let force = this.forceSelection;
            this.forceSelection = false;
            let main = this.view.state.selection.main;
            // FIXME need to handle the case where the selection falls inside a block range
            let anchor = this.domAtPos(main.anchor);
            let head = main.empty ? anchor : this.domAtPos(main.head);
            // Always reset on Firefox when next to an uneditable node to
            // avoid invisible cursor bugs (#111)
            if (browser.gecko && main.empty && !this.hasComposition && betweenUneditable(anchor)) {
                let dummy = document.createTextNode("");
                this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
                anchor = head = new DOMPos(dummy, 0);
                force = true;
            }
            let domSel = this.view.observer.selectionRange;
            // If the selection is already here, or in an equivalent position, don't touch it
            if (force || !domSel.focusNode ||
                !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
                !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
                this.view.observer.ignore(() => {
                    // Chrome Android will hide the virtual keyboard when tapping
                    // inside an uneditable node, and not bring it back when we
                    // move the cursor to its proper position. This tries to
                    // restore the keyboard by cycling focus.
                    if (browser.android && browser.chrome && this.dom.contains(domSel.focusNode) &&
                        inUneditable(domSel.focusNode, this.dom)) {
                        this.dom.blur();
                        this.dom.focus({ preventScroll: true });
                    }
                    let rawSel = getSelection(this.view.root);
                    if (!rawSel) ;
                    else if (main.empty) {
                        // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
                        if (browser.gecko) {
                            let nextTo = nextToUneditable(anchor.node, anchor.offset);
                            if (nextTo && nextTo != (1 /* NextTo.Before */ | 2 /* NextTo.After */)) {
                                let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* NextTo.Before */ ? 1 : -1);
                                if (text)
                                    anchor = new DOMPos(text, nextTo == 1 /* NextTo.Before */ ? 0 : text.nodeValue.length);
                            }
                        }
                        rawSel.collapse(anchor.node, anchor.offset);
                        if (main.bidiLevel != null && domSel.caretBidiLevel != null)
                            domSel.caretBidiLevel = main.bidiLevel;
                    }
                    else if (rawSel.extend) {
                        // Selection.extend can be used to create an 'inverted' selection
                        // (one where the focus is before the anchor), but not all
                        // browsers support it yet.
                        rawSel.collapse(anchor.node, anchor.offset);
                        // Safari will ignore the call above when the editor is
                        // hidden, and then raise an error on the call to extend
                        // (#940).
                        try {
                            rawSel.extend(head.node, head.offset);
                        }
                        catch (_) { }
                    }
                    else {
                        // Primitive (IE) way
                        let range = document.createRange();
                        if (main.anchor > main.head)
                            [anchor, head] = [head, anchor];
                        range.setEnd(head.node, head.offset);
                        range.setStart(anchor.node, anchor.offset);
                        rawSel.removeAllRanges();
                        rawSel.addRange(range);
                    }
                    if (selectionNotFocus && this.view.root.activeElement == this.dom) {
                        this.dom.blur();
                        if (activeElt)
                            activeElt.focus();
                    }
                });
                this.view.observer.setSelectionRange(anchor, head);
            }
            this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
            this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
        }
        enforceCursorAssoc() {
            if (this.hasComposition)
                return;
            let { view } = this, cursor = view.state.selection.main;
            let sel = getSelection(view.root);
            let { anchorNode, anchorOffset } = view.observer.selectionRange;
            if (!sel || !cursor.empty || !cursor.assoc || !sel.modify)
                return;
            let line = LineView.find(this, cursor.head);
            if (!line)
                return;
            let lineStart = line.posAtStart;
            if (cursor.head == lineStart || cursor.head == lineStart + line.length)
                return;
            let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
            if (!before || !after || before.bottom > after.top)
                return;
            let dom = this.domAtPos(cursor.head + cursor.assoc);
            sel.collapse(dom.node, dom.offset);
            sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
            // This can go wrong in corner cases like single-character lines,
            // so check and reset if necessary.
            view.observer.readSelectionRange();
            let newRange = view.observer.selectionRange;
            if (view.docView.posFromDOM(newRange.anchorNode, newRange.anchorOffset) != cursor.from)
                sel.collapse(anchorNode, anchorOffset);
        }
        nearest(dom) {
            for (let cur = dom; cur;) {
                let domView = ContentView.get(cur);
                if (domView && domView.rootView == this)
                    return domView;
                cur = cur.parentNode;
            }
            return null;
        }
        posFromDOM(node, offset) {
            let view = this.nearest(node);
            if (!view)
                throw new RangeError("Trying to find position for a DOM position outside of the document");
            return view.localPosFromDOM(node, offset) + view.posAtStart;
        }
        domAtPos(pos) {
            let { i, off } = this.childCursor().findPos(pos, -1);
            for (; i < this.children.length - 1;) {
                let child = this.children[i];
                if (off < child.length || child instanceof LineView)
                    break;
                i++;
                off = 0;
            }
            return this.children[i].domAtPos(off);
        }
        coordsAt(pos, side) {
            for (let off = this.length, i = this.children.length - 1;; i--) {
                let child = this.children[i], start = off - child.breakAfter - child.length;
                if (pos > start ||
                    (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
                        (!i || side == 2 || this.children[i - 1].breakAfter ||
                            (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
                    return child.coordsAt(pos - start, side);
                off = start;
            }
        }
        coordsForChar(pos) {
            let { i, off } = this.childPos(pos, 1), child = this.children[i];
            if (!(child instanceof LineView))
                return null;
            while (child.children.length) {
                let { i, off: childOff } = child.childPos(off, 1);
                for (;; i++) {
                    if (i == child.children.length)
                        return null;
                    if ((child = child.children[i]).length)
                        break;
                }
                off = childOff;
            }
            if (!(child instanceof TextView))
                return null;
            let end = findClusterBreak(child.text, off);
            if (end == off)
                return null;
            let rects = textRange(child.dom, off, end).getClientRects();
            return !rects.length || rects[0].top >= rects[0].bottom ? null : rects[0];
        }
        measureVisibleLineHeights(viewport) {
            let result = [], { from, to } = viewport;
            let contentWidth = this.view.contentDOM.clientWidth;
            let isWider = contentWidth > Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
            let widest = -1, ltr = this.view.textDirection == Direction.LTR;
            for (let pos = 0, i = 0; i < this.children.length; i++) {
                let child = this.children[i], end = pos + child.length;
                if (end > to)
                    break;
                if (pos >= from) {
                    let childRect = child.dom.getBoundingClientRect();
                    result.push(childRect.height);
                    if (isWider) {
                        let last = child.dom.lastChild;
                        let rects = last ? clientRectsFor(last) : [];
                        if (rects.length) {
                            let rect = rects[rects.length - 1];
                            let width = ltr ? rect.right - childRect.left : childRect.right - rect.left;
                            if (width > widest) {
                                widest = width;
                                this.minWidth = contentWidth;
                                this.minWidthFrom = pos;
                                this.minWidthTo = end;
                            }
                        }
                    }
                }
                pos = end + child.breakAfter;
            }
            return result;
        }
        textDirectionAt(pos) {
            let { i } = this.childPos(pos, 1);
            return getComputedStyle(this.children[i].dom).direction == "rtl" ? Direction.RTL : Direction.LTR;
        }
        measureTextSize() {
            for (let child of this.children) {
                if (child instanceof LineView) {
                    let measure = child.measureTextSize();
                    if (measure)
                        return measure;
                }
            }
            // If no workable line exists, force a layout of a measurable element
            let dummy = document.createElement("div"), lineHeight, charWidth, textHeight;
            dummy.className = "cm-line";
            dummy.style.width = "99999px";
            dummy.style.position = "absolute";
            dummy.textContent = "abc def ghi jkl mno pqr stu";
            this.view.observer.ignore(() => {
                this.dom.appendChild(dummy);
                let rect = clientRectsFor(dummy.firstChild)[0];
                lineHeight = dummy.getBoundingClientRect().height;
                charWidth = rect ? rect.width / 27 : 7;
                textHeight = rect ? rect.height : lineHeight;
                dummy.remove();
            });
            return { lineHeight, charWidth, textHeight };
        }
        childCursor(pos = this.length) {
            // Move back to start of last element when possible, so that
            // `ChildCursor.findPos` doesn't have to deal with the edge case
            // of being after the last element.
            let i = this.children.length;
            if (i)
                pos -= this.children[--i].length;
            return new ChildCursor(this.children, pos, i);
        }
        computeBlockGapDeco() {
            let deco = [], vs = this.view.viewState;
            for (let pos = 0, i = 0;; i++) {
                let next = i == vs.viewports.length ? null : vs.viewports[i];
                let end = next ? next.from - 1 : this.length;
                if (end > pos) {
                    let height = (vs.lineBlockAt(end).bottom - vs.lineBlockAt(pos).top) / this.view.scaleY;
                    deco.push(Decoration.replace({
                        widget: new BlockGapWidget(height),
                        block: true,
                        inclusive: true,
                        isBlockGap: true,
                    }).range(pos, end));
                }
                if (!next)
                    break;
                pos = next.to + 1;
            }
            return Decoration.set(deco);
        }
        updateDeco() {
            let allDeco = this.view.state.facet(decorations).map((d, i) => {
                let dynamic = this.dynamicDecorationMap[i] = typeof d == "function";
                return dynamic ? d(this.view) : d;
            });
            for (let i = allDeco.length; i < allDeco.length + 3; i++)
                this.dynamicDecorationMap[i] = false;
            return this.decorations = [
                ...allDeco,
                this.computeBlockGapDeco(),
                this.view.viewState.lineGapDeco
            ];
        }
        scrollIntoView(target) {
            let { range } = target;
            let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
            if (!rect)
                return;
            if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
                rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
                    right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
            let margins = getScrollMargins(this.view);
            let targetRect = {
                left: rect.left - margins.left, top: rect.top - margins.top,
                right: rect.right + margins.right, bottom: rect.bottom + margins.bottom
            };
            scrollRectIntoView(this.view.scrollDOM, targetRect, range.head < range.anchor ? -1 : 1, target.x, target.y, target.xMargin, target.yMargin, this.view.textDirection == Direction.LTR);
        }
    }
    function betweenUneditable(pos) {
        return pos.node.nodeType == 1 && pos.node.firstChild &&
            (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
            (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
    }
    class BlockGapWidget extends WidgetType {
        constructor(height) {
            super();
            this.height = height;
        }
        toDOM() {
            let elt = document.createElement("div");
            this.updateDOM(elt);
            return elt;
        }
        eq(other) { return other.height == this.height; }
        updateDOM(elt) {
            elt.style.height = this.height + "px";
            return true;
        }
        get estimatedHeight() { return this.height; }
    }
    function findCompositionNode(view, dLen) {
        let sel = view.observer.selectionRange;
        let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
        if (!textNode)
            return null;
        let cView = ContentView.get(textNode);
        let from, to;
        if (cView instanceof TextView) {
            from = cView.posAtStart;
            to = from + cView.length;
        }
        else {
            let oldLen = Math.max(0, textNode.nodeValue.length - dLen);
            up: for (let offset = 0, node = textNode;;) {
                for (let sibling = node.previousSibling, cView; sibling; sibling = sibling.previousSibling) {
                    if (cView = ContentView.get(sibling)) {
                        to = cView.posAtEnd + offset;
                        from = Math.max(0, to - oldLen);
                        break up;
                    }
                    let reader = new DOMReader([], view.state);
                    reader.readNode(sibling);
                    if (reader.text.indexOf(LineBreakPlaceholder) > -1)
                        return null;
                    offset += reader.text.length;
                }
                node = node.parentNode;
                if (!node)
                    return null;
                let parentView = ContentView.get(node);
                if (parentView) {
                    from = parentView.posAtStart + offset;
                    to = from + oldLen;
                    break;
                }
            }
        }
        return { from, to: to, node: textNode };
    }
    function findCompositionRange(view, changes) {
        let found = findCompositionNode(view, changes.newLength - changes.length);
        if (!found)
            return null;
        let { from: fromA, to: toA, node: textNode } = found;
        let fromB = changes.mapPos(fromA, -1), toB = changes.mapPos(toA, 1);
        let text = textNode.nodeValue;
        // Don't try to preserve multi-line compositions
        if (/[\n\r]/.test(text))
            return null;
        if (toB - fromB != text.length) {
            // If there is a length mismatch, see if mapping non-inclusively helps
            let fromB2 = changes.mapPos(fromA, 1), toB2 = changes.mapPos(toA, -1);
            if (toB2 - fromB2 == text.length)
                fromB = fromB2, toB = toB2;
            // See if we can find an instance of the text at either side
            else if (view.state.doc.sliceString(toB - text.length, toB) == text)
                fromB = toB - text.length;
            else if (view.state.doc.sliceString(fromB, fromB + text.length) == text)
                toB = fromB + text.length;
            // Not found
            else
                return null;
        }
        let { main } = view.state.selection;
        if (view.state.doc.sliceString(fromB, toB) != text || fromB > main.head || toB < main.head)
            return null;
        let marks = [];
        let range = new ChangedRange(fromA, toA, fromB, toB);
        for (let parent = textNode.parentNode;; parent = parent.parentNode) {
            let parentView = ContentView.get(parent);
            if (parentView instanceof MarkView)
                marks.push({ node: parent, deco: parentView.mark });
            else if (parentView instanceof LineView || parent.nodeName == "DIV" && parent.parentNode == view.contentDOM)
                return { range, text: textNode, marks, line: parent };
            else if (parent != view.contentDOM)
                marks.push({ node: parent, deco: new MarkDecoration({
                        inclusive: true,
                        attributes: getAttrs(parent),
                        tagName: parent.tagName.toLowerCase()
                    }) });
            else
                return null;
        }
    }
    function nearbyTextNode(startNode, startOffset, side) {
        if (side <= 0)
            for (let node = startNode, offset = startOffset;;) {
                if (node.nodeType == 3)
                    return node;
                if (node.nodeType == 1 && offset > 0) {
                    node = node.childNodes[offset - 1];
                    offset = maxOffset(node);
                }
                else {
                    break;
                }
            }
        if (side >= 0)
            for (let node = startNode, offset = startOffset;;) {
                if (node.nodeType == 3)
                    return node;
                if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
                    node = node.childNodes[offset];
                    offset = 0;
                }
                else {
                    break;
                }
            }
        return null;
    }
    function nextToUneditable(node, offset) {
        if (node.nodeType != 1)
            return 0;
        return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* NextTo.Before */ : 0) |
            (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* NextTo.After */ : 0);
    }
    let DecorationComparator$1 = class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange(from, to) { addRange(from, to, this.changes); }
        comparePoint(from, to) { addRange(from, to, this.changes); }
    };
    function findChangedDeco(a, b, diff) {
        let comp = new DecorationComparator$1;
        RangeSet.compare(a, b, diff, comp);
        return comp.changes;
    }
    function inUneditable(node, inside) {
        for (let cur = node; cur && cur != inside; cur = cur.assignedSlot || cur.parentNode) {
            if (cur.nodeType == 1 && cur.contentEditable == 'false') {
                return true;
            }
        }
        return false;
    }
 
    function groupAt(state, pos, bias = 1) {
        let categorize = state.charCategorizer(pos);
        let line = state.doc.lineAt(pos), linePos = pos - line.from;
        if (line.length == 0)
            return EditorSelection.cursor(pos);
        if (linePos == 0)
            bias = 1;
        else if (linePos == line.length)
            bias = -1;
        let from = linePos, to = linePos;
        if (bias < 0)
            from = findClusterBreak(line.text, linePos, false);
        else
            to = findClusterBreak(line.text, linePos);
        let cat = categorize(line.text.slice(from, to));
        while (from > 0) {
            let prev = findClusterBreak(line.text, from, false);
            if (categorize(line.text.slice(prev, from)) != cat)
                break;
            from = prev;
        }
        while (to < line.length) {
            let next = findClusterBreak(line.text, to);
            if (categorize(line.text.slice(to, next)) != cat)
                break;
            to = next;
        }
        return EditorSelection.range(from + line.from, to + line.from);
    }
    // Search the DOM for the {node, offset} position closest to the given
    // coordinates. Very inefficient and crude, but can usually be avoided
    // by calling caret(Position|Range)FromPoint instead.
    function getdx(x, rect) {
        return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
    }
    function getdy(y, rect) {
        return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
    }
    function yOverlap(a, b) {
        return a.top < b.bottom - 1 && a.bottom > b.top + 1;
    }
    function upTop(rect, top) {
        return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
    }
    function upBot(rect, bottom) {
        return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
    }
    function domPosAtCoords(parent, x, y) {
        let closest, closestRect, closestX, closestY, closestOverlap = false;
        let above, below, aboveRect, belowRect;
        for (let child = parent.firstChild; child; child = child.nextSibling) {
            let rects = clientRectsFor(child);
            for (let i = 0; i < rects.length; i++) {
                let rect = rects[i];
                if (closestRect && yOverlap(closestRect, rect))
                    rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
                let dx = getdx(x, rect), dy = getdy(y, rect);
                if (dx == 0 && dy == 0)
                    return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
                if (!closest || closestY > dy || closestY == dy && closestX > dx) {
                    closest = child;
                    closestRect = rect;
                    closestX = dx;
                    closestY = dy;
                    let side = dy ? (y < rect.top ? -1 : 1) : dx ? (x < rect.left ? -1 : 1) : 0;
                    closestOverlap = !side || (side > 0 ? i < rects.length - 1 : i > 0);
                }
                if (dx == 0) {
                    if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
                        above = child;
                        aboveRect = rect;
                    }
                    else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
                        below = child;
                        belowRect = rect;
                    }
                }
                else if (aboveRect && yOverlap(aboveRect, rect)) {
                    aboveRect = upBot(aboveRect, rect.bottom);
                }
                else if (belowRect && yOverlap(belowRect, rect)) {
                    belowRect = upTop(belowRect, rect.top);
                }
            }
        }
        if (aboveRect && aboveRect.bottom >= y) {
            closest = above;
            closestRect = aboveRect;
        }
        else if (belowRect && belowRect.top <= y) {
            closest = below;
            closestRect = belowRect;
        }
        if (!closest)
            return { node: parent, offset: 0 };
        let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
        if (closest.nodeType == 3)
            return domPosInText(closest, clipX, y);
        if (closestOverlap && closest.contentEditable != "false")
            return domPosAtCoords(closest, clipX, y);
        let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
            (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
        return { node: parent, offset };
    }
    function domPosInText(node, x, y) {
        let len = node.nodeValue.length;
        let closestOffset = -1, closestDY = 1e9, generalSide = 0;
        for (let i = 0; i < len; i++) {
            let rects = textRange(node, i, i + 1).getClientRects();
            for (let j = 0; j < rects.length; j++) {
                let rect = rects[j];
                if (rect.top == rect.bottom)
                    continue;
                if (!generalSide)
                    generalSide = x - rect.left;
                let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
                if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
                    let right = x >= (rect.left + rect.right) / 2, after = right;
                    if (browser.chrome || browser.gecko) {
                        // Check for RTL on browsers that support getting client
                        // rects for empty ranges.
                        let rectBefore = textRange(node, i).getBoundingClientRect();
                        if (rectBefore.left == rect.right)
                            after = !right;
                    }
                    if (dy <= 0)
                        return { node, offset: i + (after ? 1 : 0) };
                    closestOffset = i + (after ? 1 : 0);
                    closestDY = dy;
                }
            }
        }
        return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
    }
    function posAtCoords(view, coords, precise, bias = -1) {
        var _a, _b;
        let content = view.contentDOM.getBoundingClientRect(), docTop = content.top + view.viewState.paddingTop;
        let block, { docHeight } = view.viewState;
        let { x, y } = coords, yOffset = y - docTop;
        if (yOffset < 0)
            return 0;
        if (yOffset > docHeight)
            return view.state.doc.length;
        // Scan for a text block near the queried y position
        for (let halfLine = view.viewState.heightOracle.textHeight / 2, bounced = false;;) {
            block = view.elementAtHeight(yOffset);
            if (block.type == BlockType.Text)
                break;
            for (;;) {
                // Move the y position out of this block
                yOffset = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
                if (yOffset >= 0 && yOffset <= docHeight)
                    break;
                // If the document consists entirely of replaced widgets, we
                // won't find a text block, so return 0
                if (bounced)
                    return precise ? null : 0;
                bounced = true;
                bias = -bias;
            }
        }
        y = docTop + yOffset;
        let lineStart = block.from;
        // If this is outside of the rendered viewport, we can't determine a position
        if (lineStart < view.viewport.from)
            return view.viewport.from == 0 ? 0 : precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        if (lineStart > view.viewport.to)
            return view.viewport.to == view.state.doc.length ? view.state.doc.length :
                precise ? null : posAtCoordsImprecise(view, content, block, x, y);
        // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
        let doc = view.dom.ownerDocument;
        let root = view.root.elementFromPoint ? view.root : doc;
        let element = root.elementFromPoint(x, y);
        if (element && !view.contentDOM.contains(element))
            element = null;
        // If the element is unexpected, clip x at the sides of the content area and try again
        if (!element) {
            x = Math.max(content.left + 1, Math.min(content.right - 1, x));
            element = root.elementFromPoint(x, y);
            if (element && !view.contentDOM.contains(element))
                element = null;
        }
        // There's visible editor content under the point, so we can try
        // using caret(Position|Range)FromPoint as a shortcut
        let node, offset = -1;
        if (element && ((_a = view.docView.nearest(element)) === null || _a === void 0 ? void 0 : _a.isEditable) != false) {
            if (doc.caretPositionFromPoint) {
                let pos = doc.caretPositionFromPoint(x, y);
                if (pos)
                    ({ offsetNode: node, offset } = pos);
            }
            else if (doc.caretRangeFromPoint) {
                let range = doc.caretRangeFromPoint(x, y);
                if (range) {
                    ({ startContainer: node, startOffset: offset } = range);
                    if (!view.contentDOM.contains(node) ||
                        browser.safari && isSuspiciousSafariCaretResult(node, offset, x) ||
                        browser.chrome && isSuspiciousChromeCaretResult(node, offset, x))
                        node = undefined;
                }
            }
        }
        // No luck, do our own (potentially expensive) search
        if (!node || !view.docView.dom.contains(node)) {
            let line = LineView.find(view.docView, lineStart);
            if (!line)
                return yOffset > block.top + block.height / 2 ? block.to : block.from;
            ({ node, offset } = domPosAtCoords(line.dom, x, y));
        }
        let nearest = view.docView.nearest(node);
        if (!nearest)
            return null;
        if (nearest.isWidget && ((_b = nearest.dom) === null || _b === void 0 ? void 0 : _b.nodeType) == 1) {
            let rect = nearest.dom.getBoundingClientRect();
            return coords.y < rect.top || coords.y <= rect.bottom && coords.x <= (rect.left + rect.right) / 2
                ? nearest.posAtStart : nearest.posAtEnd;
        }
        else {
            return nearest.localPosFromDOM(node, offset) + nearest.posAtStart;
        }
    }
    function posAtCoordsImprecise(view, contentRect, block, x, y) {
        let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
        if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
            let textHeight = view.viewState.heightOracle.textHeight;
            let line = Math.floor((y - block.top - (view.defaultLineHeight - textHeight) * 0.5) / textHeight);
            into += line * view.viewState.heightOracle.lineLength;
        }
        let content = view.state.sliceDoc(block.from, block.to);
        return block.from + findColumn(content, into, view.state.tabSize);
    }
    // In case of a high line height, Safari's caretRangeFromPoint treats
    // the space between lines as belonging to the last character of the
    // line before. This is used to detect such a result so that it can be
    // ignored (issue #401).
    function isSuspiciousSafariCaretResult(node, offset, x) {
        let len;
        if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
            return false;
        for (let next = node.nextSibling; next; next = next.nextSibling)
            if (next.nodeType != 1 || next.nodeName != "BR")
                return false;
        return textRange(node, len - 1, len).getBoundingClientRect().left > x;
    }
    // Chrome will move positions between lines to the start of the next line
    function isSuspiciousChromeCaretResult(node, offset, x) {
        if (offset != 0)
            return false;
        for (let cur = node;;) {
            let parent = cur.parentNode;
            if (!parent || parent.nodeType != 1 || parent.firstChild != cur)
                return false;
            if (parent.classList.contains("cm-line"))
                break;
            cur = parent;
        }
        let rect = node.nodeType == 1 ? node.getBoundingClientRect()
            : textRange(node, 0, Math.max(node.nodeValue.length, 1)).getBoundingClientRect();
        return x - rect.left > 5;
    }
    function blockAt(view, pos) {
        let line = view.lineBlockAt(pos);
        if (Array.isArray(line.type))
            for (let l of line.type) {
                if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
                    return l;
            }
        return line;
    }
    function moveToLineBoundary(view, start, forward, includeWrap) {
        let line = blockAt(view, start.head);
        let coords = !includeWrap || line.type != BlockType.Text || !(view.lineWrapping || line.widgetLineBreaks) ? null
            : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
        if (coords) {
            let editorRect = view.dom.getBoundingClientRect();
            let direction = view.textDirectionAt(line.from);
            let pos = view.posAtCoords({ x: forward == (direction == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
                y: (coords.top + coords.bottom) / 2 });
            if (pos != null)
                return EditorSelection.cursor(pos, forward ? -1 : 1);
        }
        return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1);
    }
    function moveByChar(view, start, forward, by) {
        let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
        let direction = view.textDirectionAt(line.from);
        for (let cur = start, check = null;;) {
            let next = moveVisually(line, spans, direction, cur, forward), char = movedOver;
            if (!next) {
                if (line.number == (forward ? view.state.doc.lines : 1))
                    return cur;
                char = "\n";
                line = view.state.doc.line(line.number + (forward ? 1 : -1));
                spans = view.bidiSpans(line);
                next = EditorSelection.cursor(forward ? line.from : line.to);
            }
            if (!check) {
                if (!by)
                    return next;
                check = by(char);
            }
            else if (!check(char)) {
                return cur;
            }
            cur = next;
        }
    }
    function byGroup(view, pos, start) {
        let categorize = view.state.charCategorizer(pos);
        let cat = categorize(start);
        return (next) => {
            let nextCat = categorize(next);
            if (cat == CharCategory.Space)
                cat = nextCat;
            return cat == nextCat;
        };
    }
    function moveVertically(view, start, forward, distance) {
        let startPos = start.head, dir = forward ? 1 : -1;
        if (startPos == (forward ? view.state.doc.length : 0))
            return EditorSelection.cursor(startPos, start.assoc);
        let goal = start.goalColumn, startY;
        let rect = view.contentDOM.getBoundingClientRect();
        let startCoords = view.coordsAtPos(startPos), docTop = view.documentTop;
        if (startCoords) {
            if (goal == null)
                goal = startCoords.left - rect.left;
            startY = dir < 0 ? startCoords.top : startCoords.bottom;
        }
        else {
            let line = view.viewState.lineBlockAt(startPos);
            if (goal == null)
                goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
            startY = (dir < 0 ? line.top : line.bottom) + docTop;
        }
        let resolvedGoal = rect.left + goal;
        let dist = distance !== null && distance !== void 0 ? distance : (view.viewState.heightOracle.textHeight >> 1);
        for (let extra = 0;; extra += 10) {
            let curY = startY + (dist + extra) * dir;
            let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
            if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
                return EditorSelection.cursor(pos, start.assoc, undefined, goal);
        }
    }
    function skipAtomicRanges(atoms, pos, bias) {
        for (;;) {
            let moved = 0;
            for (let set of atoms) {
                set.between(pos - 1, pos + 1, (from, to, value) => {
                    if (pos > from && pos < to) {
                        let side = moved || bias || (pos - from < to - pos ? -1 : 1);
                        pos = side < 0 ? from : to;
                        moved = side;
                    }
                });
            }
            if (!moved)
                return pos;
        }
    }
    function skipAtoms(view, oldPos, pos) {
        let newPos = skipAtomicRanges(view.state.facet(atomicRanges).map(f => f(view)), pos.from, oldPos.head > pos.from ? -1 : 1);
        return newPos == pos.from ? pos : EditorSelection.cursor(newPos, newPos < pos.from ? 1 : -1);
    }
 
    // This will also be where dragging info and such goes
    class InputState {
        setSelectionOrigin(origin) {
            this.lastSelectionOrigin = origin;
            this.lastSelectionTime = Date.now();
        }
        constructor(view) {
            this.lastKeyCode = 0;
            this.lastKeyTime = 0;
            this.lastTouchTime = 0;
            this.lastFocusTime = 0;
            this.lastScrollTop = 0;
            this.lastScrollLeft = 0;
            this.chromeScrollHack = -1;
            // On iOS, some keys need to have their default behavior happen
            // (after which we retroactively handle them and reset the DOM) to
            // avoid messing up the virtual keyboard state.
            this.pendingIOSKey = undefined;
            this.lastSelectionOrigin = null;
            this.lastSelectionTime = 0;
            this.lastEscPress = 0;
            this.lastContextMenu = 0;
            this.scrollHandlers = [];
            this.registeredEvents = [];
            this.customHandlers = [];
            // -1 means not in a composition. Otherwise, this counts the number
            // of changes made during the composition. The count is used to
            // avoid treating the start state of the composition, before any
            // changes have been made, as part of the composition.
            this.composing = -1;
            // Tracks whether the next change should be marked as starting the
            // composition (null means no composition, true means next is the
            // first, false means first has already been marked for this
            // composition)
            this.compositionFirstChange = null;
            // End time of the previous composition
            this.compositionEndedAt = 0;
            // Used in a kludge to detect when an Enter keypress should be
            // considered part of the composition on Safari, which fires events
            // in the wrong order
            this.compositionPendingKey = false;
            // Used to categorize changes as part of a composition, even when
            // the mutation events fire shortly after the compositionend event
            this.compositionPendingChange = false;
            this.mouseSelection = null;
            let handleEvent = (handler, event) => {
                if (this.ignoreDuringComposition(event))
                    return;
                if (event.type == "keydown" && this.keydown(view, event))
                    return;
                if (this.mustFlushObserver(event))
                    view.observer.forceFlush();
                if (this.runCustomHandlers(event.type, view, event))
                    event.preventDefault();
                else
                    handler(view, event);
            };
            for (let type in handlers) {
                let handler = handlers[type];
                view.contentDOM.addEventListener(type, event => {
                    if (eventBelongsToEditor(view, event))
                        handleEvent(handler, event);
                }, handlerOptions[type]);
                this.registeredEvents.push(type);
            }
            view.scrollDOM.addEventListener("mousedown", (event) => {
                if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom) {
                    handleEvent(handlers.mousedown, event);
                    if (!event.defaultPrevented && event.button == 2) {
                        // Make sure the content covers the entire scroller height, in order
                        // to catch a native context menu click below it
                        let start = view.contentDOM.style.minHeight;
                        view.contentDOM.style.minHeight = "100%";
                        setTimeout(() => view.contentDOM.style.minHeight = start, 200);
                    }
                }
            });
            view.scrollDOM.addEventListener("drop", (event) => {
                if (event.target == view.scrollDOM && event.clientY > view.contentDOM.getBoundingClientRect().bottom)
                    handleEvent(handlers.drop, event);
            });
            if (browser.chrome && browser.chrome_version == 102) { // FIXME remove at some point
                // On Chrome 102, viewport updates somehow stop wheel-based
                // scrolling. Turning off pointer events during the scroll seems
                // to avoid the issue.
                view.scrollDOM.addEventListener("wheel", () => {
                    if (this.chromeScrollHack < 0)
                        view.contentDOM.style.pointerEvents = "none";
                    else
                        window.clearTimeout(this.chromeScrollHack);
                    this.chromeScrollHack = setTimeout(() => {
                        this.chromeScrollHack = -1;
                        view.contentDOM.style.pointerEvents = "";
                    }, 100);
                }, { passive: true });
            }
            this.notifiedFocused = view.hasFocus;
            // On Safari adding an input event handler somehow prevents an
            // issue where the composition vanishes when you press enter.
            if (browser.safari)
                view.contentDOM.addEventListener("input", () => null);
            if (browser.gecko)
                firefoxCopyCutHack(view.contentDOM.ownerDocument);
        }
        ensureHandlers(view, plugins) {
            var _a;
            let handlers;
            this.customHandlers = [];
            for (let plugin of plugins)
                if (handlers = (_a = plugin.update(view).spec) === null || _a === void 0 ? void 0 : _a.domEventHandlers) {
                    this.customHandlers.push({ plugin: plugin.value, handlers });
                    for (let type in handlers)
                        if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
                            this.registeredEvents.push(type);
                            view.contentDOM.addEventListener(type, (event) => {
                                if (!eventBelongsToEditor(view, event))
                                    return;
                                if (this.runCustomHandlers(type, view, event))
                                    event.preventDefault();
                            });
                        }
                }
        }
        runCustomHandlers(type, view, event) {
            for (let set of this.customHandlers) {
                let handler = set.handlers[type];
                if (handler) {
                    try {
                        if (handler.call(set.plugin, event, view) || event.defaultPrevented)
                            return true;
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
            return false;
        }
        runScrollHandlers(view, event) {
            this.lastScrollTop = view.scrollDOM.scrollTop;
            this.lastScrollLeft = view.scrollDOM.scrollLeft;
            for (let set of this.customHandlers) {
                let handler = set.handlers.scroll;
                if (handler) {
                    try {
                        handler.call(set.plugin, event, view);
                    }
                    catch (e) {
                        logException(view.state, e);
                    }
                }
            }
        }
        keydown(view, event) {
            // Must always run, even if a custom handler handled the event
            this.lastKeyCode = event.keyCode;
            this.lastKeyTime = Date.now();
            if (event.keyCode == 9 && Date.now() < this.lastEscPress + 2000)
                return true;
            if (event.keyCode != 27 && modifierCodes.indexOf(event.keyCode) < 0)
                view.inputState.lastEscPress = 0;
            // Chrome for Android usually doesn't fire proper key events, but
            // occasionally does, usually surrounded by a bunch of complicated
            // composition changes. When an enter or backspace key event is
            // seen, hold off on handling DOM events for a bit, and then
            // dispatch it.
            if (browser.android && browser.chrome && !event.synthetic &&
                (event.keyCode == 13 || event.keyCode == 8)) {
                view.observer.delayAndroidKey(event.key, event.keyCode);
                return true;
            }
            // Prevent the default behavior of Enter on iOS makes the
            // virtual keyboard get stuck in the wrong (lowercase)
            // state. So we let it go through, and then, in
            // applyDOMChange, notify key handlers of it and reset to
            // the state they produce.
            let pending;
            if (browser.ios && !event.synthetic && !event.altKey && !event.metaKey &&
                ((pending = PendingKeys.find(key => key.keyCode == event.keyCode)) && !event.ctrlKey ||
                    EmacsyPendingKeys.indexOf(event.key) > -1 && event.ctrlKey && !event.shiftKey)) {
                this.pendingIOSKey = pending || event;
                setTimeout(() => this.flushIOSKey(view), 250);
                return true;
            }
            return false;
        }
        flushIOSKey(view) {
            let key = this.pendingIOSKey;
            if (!key)
                return false;
            this.pendingIOSKey = undefined;
            return dispatchKey(view.contentDOM, key.key, key.keyCode);
        }
        ignoreDuringComposition(event) {
            if (!/^key/.test(event.type))
                return false;
            if (this.composing > 0)
                return true;
            // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
            // On some input method editors (IMEs), the Enter key is used to
            // confirm character selection. On Safari, when Enter is pressed,
            // compositionend and keydown events are sometimes emitted in the
            // wrong order. The key event should still be ignored, even when
            // it happens after the compositionend event.
            if (browser.safari && !browser.ios && this.compositionPendingKey && Date.now() - this.compositionEndedAt < 100) {
                this.compositionPendingKey = false;
                return true;
            }
            return false;
        }
        mustFlushObserver(event) {
            return event.type == "keydown" && event.keyCode != 229;
        }
        startMouseSelection(mouseSelection) {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
            this.mouseSelection = mouseSelection;
        }
        update(update) {
            if (this.mouseSelection)
                this.mouseSelection.update(update);
            if (update.transactions.length)
                this.lastKeyCode = this.lastSelectionTime = 0;
        }
        destroy() {
            if (this.mouseSelection)
                this.mouseSelection.destroy();
        }
    }
    const PendingKeys = [
        { key: "Backspace", keyCode: 8, inputType: "deleteContentBackward" },
        { key: "Enter", keyCode: 13, inputType: "insertParagraph" },
        { key: "Enter", keyCode: 13, inputType: "insertLineBreak" },
        { key: "Delete", keyCode: 46, inputType: "deleteContentForward" }
    ];
    const EmacsyPendingKeys = "dthko";
    // Key codes for modifier keys
    const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
    const dragScrollMargin = 6;
    function dragScrollSpeed(dist) {
        return Math.max(0, dist) * 0.7 + 8;
    }
    function dist(a, b) {
        return Math.max(Math.abs(a.clientX - b.clientX), Math.abs(a.clientY - b.clientY));
    }
    class MouseSelection {
        constructor(view, startEvent, style, mustSelect) {
            this.view = view;
            this.startEvent = startEvent;
            this.style = style;
            this.mustSelect = mustSelect;
            this.scrollSpeed = { x: 0, y: 0 };
            this.scrolling = -1;
            this.lastEvent = startEvent;
            this.scrollParent = scrollableParent(view.contentDOM);
            this.atoms = view.state.facet(atomicRanges).map(f => f(view));
            let doc = view.contentDOM.ownerDocument;
            doc.addEventListener("mousemove", this.move = this.move.bind(this));
            doc.addEventListener("mouseup", this.up = this.up.bind(this));
            this.extend = startEvent.shiftKey;
            this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
            this.dragging = isInPrimarySelection(view, startEvent) && getClickType(startEvent) == 1 ? null : false;
        }
        start(event) {
            // When clicking outside of the selection, immediately apply the
            // effect of starting the selection
            if (this.dragging === false) {
                event.preventDefault();
                this.select(event);
            }
        }
        move(event) {
            var _a;
            if (event.buttons == 0)
                return this.destroy();
            if (this.dragging || this.dragging == null && dist(this.startEvent, event) < 10)
                return;
            this.select(this.lastEvent = event);
            let sx = 0, sy = 0;
            let rect = ((_a = this.scrollParent) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect())
                || { left: 0, top: 0, right: this.view.win.innerWidth, bottom: this.view.win.innerHeight };
            let margins = getScrollMargins(this.view);
            if (event.clientX - margins.left <= rect.left + dragScrollMargin)
                sx = -dragScrollSpeed(rect.left - event.clientX);
            else if (event.clientX + margins.right >= rect.right - dragScrollMargin)
                sx = dragScrollSpeed(event.clientX - rect.right);
            if (event.clientY - margins.top <= rect.top + dragScrollMargin)
                sy = -dragScrollSpeed(rect.top - event.clientY);
            else if (event.clientY + margins.bottom >= rect.bottom - dragScrollMargin)
                sy = dragScrollSpeed(event.clientY - rect.bottom);
            this.setScrollSpeed(sx, sy);
        }
        up(event) {
            if (this.dragging == null)
                this.select(this.lastEvent);
            if (!this.dragging)
                event.preventDefault();
            this.destroy();
        }
        destroy() {
            this.setScrollSpeed(0, 0);
            let doc = this.view.contentDOM.ownerDocument;
            doc.removeEventListener("mousemove", this.move);
            doc.removeEventListener("mouseup", this.up);
            this.view.inputState.mouseSelection = null;
        }
        setScrollSpeed(sx, sy) {
            this.scrollSpeed = { x: sx, y: sy };
            if (sx || sy) {
                if (this.scrolling < 0)
                    this.scrolling = setInterval(() => this.scroll(), 50);
            }
            else if (this.scrolling > -1) {
                clearInterval(this.scrolling);
                this.scrolling = -1;
            }
        }
        scroll() {
            if (this.scrollParent) {
                this.scrollParent.scrollLeft += this.scrollSpeed.x;
                this.scrollParent.scrollTop += this.scrollSpeed.y;
            }
            else {
                this.view.win.scrollBy(this.scrollSpeed.x, this.scrollSpeed.y);
            }
            if (this.dragging === false)
                this.select(this.lastEvent);
        }
        skipAtoms(sel) {
            let ranges = null;
            for (let i = 0; i < sel.ranges.length; i++) {
                let range = sel.ranges[i], updated = null;
                if (range.empty) {
                    let pos = skipAtomicRanges(this.atoms, range.from, 0);
                    if (pos != range.from)
                        updated = EditorSelection.cursor(pos, -1);
                }
                else {
                    let from = skipAtomicRanges(this.atoms, range.from, -1);
                    let to = skipAtomicRanges(this.atoms, range.to, 1);
                    if (from != range.from || to != range.to)
                        updated = EditorSelection.range(range.from == range.anchor ? from : to, range.from == range.head ? from : to);
                }
                if (updated) {
                    if (!ranges)
                        ranges = sel.ranges.slice();
                    ranges[i] = updated;
                }
            }
            return ranges ? EditorSelection.create(ranges, sel.mainIndex) : sel;
        }
        select(event) {
            let { view } = this, selection = this.skipAtoms(this.style.get(event, this.extend, this.multiple));
            if (this.mustSelect || !selection.eq(view.state.selection) ||
                selection.main.assoc != view.state.selection.main.assoc && this.dragging === false)
                this.view.dispatch({
                    selection,
                    userEvent: "select.pointer"
                });
            this.mustSelect = false;
        }
        update(update) {
            if (update.docChanged && this.dragging)
                this.dragging = this.dragging.map(update.changes);
            if (this.style.update(update))
                setTimeout(() => this.select(this.lastEvent), 20);
        }
    }
    function addsSelectionRange(view, event) {
        let facet = view.state.facet(clickAddsSelectionRange);
        return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
    }
    function dragMovesSelection(view, event) {
        let facet = view.state.facet(dragMovesSelection$1);
        return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
    }
    function isInPrimarySelection(view, event) {
        let { main } = view.state.selection;
        if (main.empty)
            return false;
        // On boundary clicks, check whether the coordinates are inside the
        // selection's client rectangles
        let sel = getSelection(view.root);
        if (!sel || sel.rangeCount == 0)
            return true;
        let rects = sel.getRangeAt(0).getClientRects();
        for (let i = 0; i < rects.length; i++) {
            let rect = rects[i];
            if (rect.left <= event.clientX && rect.right >= event.clientX &&
                rect.top <= event.clientY && rect.bottom >= event.clientY)
                return true;
        }
        return false;
    }
    function eventBelongsToEditor(view, event) {
        if (!event.bubbles)
            return true;
        if (event.defaultPrevented)
            return false;
        for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
            if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
                return false;
        return true;
    }
    const handlers = /*@__PURE__*/Object.create(null);
    const handlerOptions = /*@__PURE__*/Object.create(null);
    // This is very crude, but unfortunately both these browsers _pretend_
    // that they have a clipboard API—all the objects and methods are
    // there, they just don't work, and they are hard to test.
    const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
        (browser.ios && browser.webkit_version < 604);
    function capturePaste(view) {
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.focus();
        setTimeout(() => {
            view.focus();
            target.remove();
            doPaste(view, target.value);
        }, 50);
    }
    function doPaste(view, input) {
        let { state } = view, changes, i = 1, text = state.toText(input);
        let byLine = text.lines == state.selection.ranges.length;
        let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
        if (linewise) {
            let lastLine = -1;
            changes = state.changeByRange(range => {
                let line = state.doc.lineAt(range.from);
                if (line.from == lastLine)
                    return { range };
                lastLine = line.from;
                let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
                return { changes: { from: line.from, insert },
                    range: EditorSelection.cursor(range.from + insert.length) };
            });
        }
        else if (byLine) {
            changes = state.changeByRange(range => {
                let line = text.line(i++);
                return { changes: { from: range.from, to: range.to, insert: line.text },
                    range: EditorSelection.cursor(range.from + line.length) };
            });
        }
        else {
            changes = state.replaceSelection(text);
        }
        view.dispatch(changes, {
            userEvent: "input.paste",
            scrollIntoView: true
        });
    }
    handlers.keydown = (view, event) => {
        view.inputState.setSelectionOrigin("select");
        if (event.keyCode == 27)
            view.inputState.lastEscPress = Date.now();
    };
    handlers.touchstart = (view, e) => {
        view.inputState.lastTouchTime = Date.now();
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlers.touchmove = view => {
        view.inputState.setSelectionOrigin("select.pointer");
    };
    handlerOptions.touchstart = handlerOptions.touchmove = { passive: true };
    handlers.mousedown = (view, event) => {
        view.observer.flush();
        if (view.inputState.lastTouchTime > Date.now() - 2000)
            return; // Ignore touch interaction
        let style = null;
        for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
            style = makeStyle(view, event);
            if (style)
                break;
        }
        if (!style && event.button == 0)
            style = basicMouseSelection(view, event);
        if (style) {
            let mustFocus = !view.hasFocus;
            view.inputState.startMouseSelection(new MouseSelection(view, event, style, mustFocus));
            if (mustFocus)
                view.observer.ignore(() => focusPreventScroll(view.contentDOM));
            if (view.inputState.mouseSelection)
                view.inputState.mouseSelection.start(event);
        }
    };
    function rangeForClick(view, pos, bias, type) {
        if (type == 1) { // Single click
            return EditorSelection.cursor(pos, bias);
        }
        else if (type == 2) { // Double click
            return groupAt(view.state, pos, bias);
        }
        else { // Triple click
            let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
            let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
            if (to < view.state.doc.length && to == line.to)
                to++;
            return EditorSelection.range(from, to);
        }
    }
    let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
    let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
    // Try to determine, for the given coordinates, associated with the
    // given position, whether they are related to the element before or
    // the element after the position.
    function findPositionSide(view, pos, x, y) {
        let line = LineView.find(view.docView, pos);
        if (!line)
            return 1;
        let off = pos - line.posAtStart;
        // Line boundaries point into the line
        if (off == 0)
            return 1;
        if (off == line.length)
            return -1;
        // Positions on top of an element point at that element
        let before = line.coordsAt(off, -1);
        if (before && inside(x, y, before))
            return -1;
        let after = line.coordsAt(off, 1);
        if (after && inside(x, y, after))
            return 1;
        // This is probably a line wrap point. Pick before if the point is
        // beside it.
        return before && insideY(y, before) ? -1 : 1;
    }
    function queryPos(view, event) {
        let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
    }
    const BadMouseDetail = browser.ie && browser.ie_version <= 11;
    let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
    function getClickType(event) {
        if (!BadMouseDetail)
            return event.detail;
        let last = lastMouseDown, lastTime = lastMouseDownTime;
        lastMouseDown = event;
        lastMouseDownTime = Date.now();
        return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
            Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
    }
    function basicMouseSelection(view, event) {
        let start = queryPos(view, event), type = getClickType(event);
        let startSel = view.state.selection;
        return {
            update(update) {
                if (update.docChanged) {
                    start.pos = update.changes.mapPos(start.pos);
                    startSel = startSel.map(update.changes);
                }
            },
            get(event, extend, multiple) {
                let cur = queryPos(view, event), removed;
                let range = rangeForClick(view, cur.pos, cur.bias, type);
                if (start.pos != cur.pos && !extend) {
                    let startRange = rangeForClick(view, start.pos, start.bias, type);
                    let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
                    range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
                }
                if (extend)
                    return startSel.replaceRange(startSel.main.extend(range.from, range.to));
                else if (multiple && type == 1 && startSel.ranges.length > 1 && (removed = removeRangeAround(startSel, cur.pos)))
                    return removed;
                else if (multiple)
                    return startSel.addRange(range);
                else
                    return EditorSelection.create([range]);
            }
        };
    }
    function removeRangeAround(sel, pos) {
        for (let i = 0; i < sel.ranges.length; i++) {
            let { from, to } = sel.ranges[i];
            if (from <= pos && to >= pos)
                return EditorSelection.create(sel.ranges.slice(0, i).concat(sel.ranges.slice(i + 1)), sel.mainIndex == i ? 0 : sel.mainIndex - (sel.mainIndex > i ? 1 : 0));
        }
        return null;
    }
    handlers.dragstart = (view, event) => {
        let { selection: { main } } = view.state;
        let { mouseSelection } = view.inputState;
        if (mouseSelection)
            mouseSelection.dragging = main;
        if (event.dataTransfer) {
            event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
            event.dataTransfer.effectAllowed = "copyMove";
        }
    };
    function dropText(view, event, text, direct) {
        if (!text)
            return;
        let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
        event.preventDefault();
        let { mouseSelection } = view.inputState;
        let del = direct && mouseSelection && mouseSelection.dragging && dragMovesSelection(view, event) ?
            { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
        let ins = { from: dropPos, insert: text };
        let changes = view.state.changes(del ? [del, ins] : ins);
        view.focus();
        view.dispatch({
            changes,
            selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
            userEvent: del ? "move.drop" : "input.drop"
        });
    }
    handlers.drop = (view, event) => {
        if (!event.dataTransfer)
            return;
        if (view.state.readOnly)
            return event.preventDefault();
        let files = event.dataTransfer.files;
        if (files && files.length) { // For a file drop, read the file's text.
            event.preventDefault();
            let text = Array(files.length), read = 0;
            let finishFile = () => {
                if (++read == files.length)
                    dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
            };
            for (let i = 0; i < files.length; i++) {
                let reader = new FileReader;
                reader.onerror = finishFile;
                reader.onload = () => {
                    if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
                        text[i] = reader.result;
                    finishFile();
                };
                reader.readAsText(files[i]);
            }
        }
        else {
            dropText(view, event, event.dataTransfer.getData("Text"), true);
        }
    };
    handlers.paste = (view, event) => {
        if (view.state.readOnly)
            return event.preventDefault();
        view.observer.flush();
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            doPaste(view, data.getData("text/plain") || data.getData("text/uri-text"));
            event.preventDefault();
        }
        else {
            capturePaste(view);
        }
    };
    function captureCopy(view, text) {
        // The extra wrapper is somehow necessary on IE/Edge to prevent the
        // content from being mangled when it is put onto the clipboard
        let parent = view.dom.parentNode;
        if (!parent)
            return;
        let target = parent.appendChild(document.createElement("textarea"));
        target.style.cssText = "position: fixed; left: -10000px; top: 10px";
        target.value = text;
        target.focus();
        target.selectionEnd = text.length;
        target.selectionStart = 0;
        setTimeout(() => {
            target.remove();
            view.focus();
        }, 50);
    }
    function copiedRange(state) {
        let content = [], ranges = [], linewise = false;
        for (let range of state.selection.ranges)
            if (!range.empty) {
                content.push(state.sliceDoc(range.from, range.to));
                ranges.push(range);
            }
        if (!content.length) {
            // Nothing selected, do a line-wise copy
            let upto = -1;
            for (let { from } of state.selection.ranges) {
                let line = state.doc.lineAt(from);
                if (line.number > upto) {
                    content.push(line.text);
                    ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
                }
                upto = line.number;
            }
            linewise = true;
        }
        return { text: content.join(state.lineBreak), ranges, linewise };
    }
    let lastLinewiseCopy = null;
    handlers.copy = handlers.cut = (view, event) => {
        let { text, ranges, linewise } = copiedRange(view.state);
        if (!text && !linewise)
            return;
        lastLinewiseCopy = linewise ? text : null;
        let data = brokenClipboardAPI ? null : event.clipboardData;
        if (data) {
            event.preventDefault();
            data.clearData();
            data.setData("text/plain", text);
        }
        else {
            captureCopy(view, text);
        }
        if (event.type == "cut" && !view.state.readOnly)
            view.dispatch({
                changes: ranges,
                scrollIntoView: true,
                userEvent: "delete.cut"
            });
    };
    const isFocusChange = /*@__PURE__*/Annotation.define();
    function focusChangeTransaction(state, focus) {
        let effects = [];
        for (let getEffect of state.facet(focusChangeEffect)) {
            let effect = getEffect(state, focus);
            if (effect)
                effects.push(effect);
        }
        return effects ? state.update({ effects, annotations: isFocusChange.of(true) }) : null;
    }
    function updateForFocusChange(view) {
        setTimeout(() => {
            let focus = view.hasFocus;
            if (focus != view.inputState.notifiedFocused) {
                let tr = focusChangeTransaction(view.state, focus);
                if (tr)
                    view.dispatch(tr);
                else
                    view.update([]);
            }
        }, 10);
    }
    handlers.focus = view => {
        view.inputState.lastFocusTime = Date.now();
        // When focusing reset the scroll position, move it back to where it was
        if (!view.scrollDOM.scrollTop && (view.inputState.lastScrollTop || view.inputState.lastScrollLeft)) {
            view.scrollDOM.scrollTop = view.inputState.lastScrollTop;
            view.scrollDOM.scrollLeft = view.inputState.lastScrollLeft;
        }
        updateForFocusChange(view);
    };
    handlers.blur = view => {
        view.observer.clearSelectionRange();
        updateForFocusChange(view);
    };
    handlers.compositionstart = handlers.compositionupdate = view => {
        if (view.inputState.compositionFirstChange == null)
            view.inputState.compositionFirstChange = true;
        if (view.inputState.composing < 0) {
            // FIXME possibly set a timeout to clear it again on Android
            view.inputState.composing = 0;
        }
    };
    handlers.compositionend = view => {
        view.inputState.composing = -1;
        view.inputState.compositionEndedAt = Date.now();
        view.inputState.compositionPendingKey = true;
        view.inputState.compositionPendingChange = view.observer.pendingRecords().length > 0;
        view.inputState.compositionFirstChange = null;
        if (browser.chrome && browser.android) {
            // Delay flushing for a bit on Android because it'll often fire a
            // bunch of contradictory changes in a row at end of compositon
            view.observer.flushSoon();
        }
        else if (view.inputState.compositionPendingChange) {
            // If we found pending records, schedule a flush.
            Promise.resolve().then(() => view.observer.flush());
        }
        else {
            // Otherwise, make sure that, if no changes come in soon, the
            // composition view is cleared.
            setTimeout(() => {
                if (view.inputState.composing < 0 && view.docView.hasComposition)
                    view.update([]);
            }, 50);
        }
    };
    handlers.contextmenu = view => {
        view.inputState.lastContextMenu = Date.now();
    };
    handlers.beforeinput = (view, event) => {
        var _a;
        // Because Chrome Android doesn't fire useful key events, use
        // beforeinput to detect backspace (and possibly enter and delete,
        // but those usually don't even seem to fire beforeinput events at
        // the moment) and fake a key event for it.
        //
        // (preventDefault on beforeinput, though supported in the spec,
        // seems to do nothing at all on Chrome).
        let pending;
        if (browser.chrome && browser.android && (pending = PendingKeys.find(key => key.inputType == event.inputType))) {
            view.observer.delayAndroidKey(pending.key, pending.keyCode);
            if (pending.key == "Backspace" || pending.key == "Delete") {
                let startViewHeight = ((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0;
                setTimeout(() => {
                    var _a;
                    // Backspacing near uneditable nodes on Chrome Android sometimes
                    // closes the virtual keyboard. This tries to crudely detect
                    // that and refocus to get it back.
                    if ((((_a = window.visualViewport) === null || _a === void 0 ? void 0 : _a.height) || 0) > startViewHeight + 10 && view.hasFocus) {
                        view.contentDOM.blur();
                        view.focus();
                    }
                }, 100);
            }
        }
    };
    const appliedFirefoxHack = /*@__PURE__*/new Set;
    // In Firefox, when cut/copy handlers are added to the document, that
    // somehow avoids a bug where those events aren't fired when the
    // selection is empty. See https://github.com/codemirror/dev/issues/1082
    // and https://bugzilla.mozilla.org/show_bug.cgi?id=995961
    function firefoxCopyCutHack(doc) {
        if (!appliedFirefoxHack.has(doc)) {
            appliedFirefoxHack.add(doc);
            doc.addEventListener("copy", () => { });
            doc.addEventListener("cut", () => { });
        }
    }
 
    const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line", "break-spaces"];
    class HeightOracle {
        constructor(lineWrapping) {
            this.lineWrapping = lineWrapping;
            this.doc = Text.empty;
            this.heightSamples = {};
            this.lineHeight = 14; // The height of an entire line (line-height)
            this.charWidth = 7;
            this.textHeight = 14; // The height of the actual font (font-size)
            this.lineLength = 30;
            // Used to track, during updateHeight, if any actual heights changed
            this.heightChanged = false;
        }
        heightForGap(from, to) {
            let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
            if (this.lineWrapping)
                lines += Math.max(0, Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength));
            return this.lineHeight * lines;
        }
        heightForLine(length) {
            if (!this.lineWrapping)
                return this.lineHeight;
            let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
            return lines * this.lineHeight;
        }
        setDoc(doc) { this.doc = doc; return this; }
        mustRefreshForWrapping(whiteSpace) {
            return (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping;
        }
        mustRefreshForHeights(lineHeights) {
            let newHeight = false;
            for (let i = 0; i < lineHeights.length; i++) {
                let h = lineHeights[i];
                if (h < 0) {
                    i++;
                }
                else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
                    newHeight = true;
                    this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return newHeight;
        }
        refresh(whiteSpace, lineHeight, charWidth, textHeight, lineLength, knownHeights) {
            let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
            let changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping;
            this.lineWrapping = lineWrapping;
            this.lineHeight = lineHeight;
            this.charWidth = charWidth;
            this.textHeight = textHeight;
            this.lineLength = lineLength;
            if (changed) {
                this.heightSamples = {};
                for (let i = 0; i < knownHeights.length; i++) {
                    let h = knownHeights[i];
                    if (h < 0)
                        i++;
                    else
                        this.heightSamples[Math.floor(h * 10)] = true;
                }
            }
            return changed;
        }
    }
    // This object is used by `updateHeight` to make DOM measurements
    // arrive at the right nides. The `heights` array is a sequence of
    // block heights, starting from position `from`.
    class MeasuredHeights {
        constructor(from, heights) {
            this.from = from;
            this.heights = heights;
            this.index = 0;
        }
        get more() { return this.index < this.heights.length; }
    }
    /**
    Record used to represent information about a block-level element
    in the editor view.
    */
    class BlockInfo {
        /**
        @internal
        */
        constructor(
        /**
        The start of the element in the document.
        */
        from, 
        /**
        The length of the element.
        */
        length, 
        /**
        The top position of the element (relative to the top of the
        document).
        */
        top, 
        /**
        Its height.
        */
        height, 
        /**
        @internal Weird packed field that holds an array of children
        for composite blocks, a decoration for block widgets, and a
        number indicating the amount of widget-create line breaks for
        text blocks.
        */
        _content) {
            this.from = from;
            this.length = length;
            this.top = top;
            this.height = height;
            this._content = _content;
        }
        /**
        The type of element this is. When querying lines, this may be
        an array of all the blocks that make up the line.
        */
        get type() {
            return typeof this._content == "number" ? BlockType.Text :
                Array.isArray(this._content) ? this._content : this._content.type;
        }
        /**
        The end of the element as a document position.
        */
        get to() { return this.from + this.length; }
        /**
        The bottom position of the element.
        */
        get bottom() { return this.top + this.height; }
        /**
        If this is a widget block, this will return the widget
        associated with it.
        */
        get widget() {
            return this._content instanceof PointDecoration ? this._content.widget : null;
        }
        /**
        If this is a textblock, this holds the number of line breaks
        that appear in widgets inside the block.
        */
        get widgetLineBreaks() {
            return typeof this._content == "number" ? this._content : 0;
        }
        /**
        @internal
        */
        join(other) {
            let content = (Array.isArray(this._content) ? this._content : [this])
                .concat(Array.isArray(other._content) ? other._content : [other]);
            return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, content);
        }
    }
    var QueryType = /*@__PURE__*/(function (QueryType) {
        QueryType[QueryType["ByPos"] = 0] = "ByPos";
        QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
        QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
    return QueryType})(QueryType || (QueryType = {}));
    const Epsilon$1 = 1e-3;
    class HeightMap {
        constructor(length, // The number of characters covered
        height, // Height of this part of the document
        flags = 2 /* Flag.Outdated */) {
            this.length = length;
            this.height = height;
            this.flags = flags;
        }
        get outdated() { return (this.flags & 2 /* Flag.Outdated */) > 0; }
        set outdated(value) { this.flags = (value ? 2 /* Flag.Outdated */ : 0) | (this.flags & ~2 /* Flag.Outdated */); }
        setHeight(oracle, height) {
            if (this.height != height) {
                if (Math.abs(this.height - height) > Epsilon$1)
                    oracle.heightChanged = true;
                this.height = height;
            }
        }
        // Base case is to replace a leaf node, which simply builds a tree
        // from the new nodes and returns that (HeightMapBranch and
        // HeightMapGap override this to actually use from/to)
        replace(_from, _to, nodes) {
            return HeightMap.of(nodes);
        }
        // Again, these are base cases, and are overridden for branch and gap nodes.
        decomposeLeft(_to, result) { result.push(this); }
        decomposeRight(_from, result) { result.push(this); }
        applyChanges(decorations, oldDoc, oracle, changes) {
            let me = this, doc = oracle.doc;
            for (let i = changes.length - 1; i >= 0; i--) {
                let { fromA, toA, fromB, toB } = changes[i];
                let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle.setDoc(oldDoc), 0, 0);
                let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oracle, 0, 0);
                toB += end.to - toA;
                toA = end.to;
                while (i > 0 && start.from <= changes[i - 1].toA) {
                    fromA = changes[i - 1].fromA;
                    fromB = changes[i - 1].fromB;
                    i--;
                    if (fromA < start.from)
                        start = me.lineAt(fromA, QueryType.ByPosNoHeight, oracle, 0, 0);
                }
                fromB += start.from - fromA;
                fromA = start.from;
                let nodes = NodeBuilder.build(oracle.setDoc(doc), decorations, fromB, toB);
                me = me.replace(fromA, toA, nodes);
            }
            return me.updateHeight(oracle, 0);
        }
        static empty() { return new HeightMapText(0, 0); }
        // nodes uses null values to indicate the position of line breaks.
        // There are never line breaks at the start or end of the array, or
        // two line breaks next to each other, and the array isn't allowed
        // to be empty (same restrictions as return value from the builder).
        static of(nodes) {
            if (nodes.length == 1)
                return nodes[0];
            let i = 0, j = nodes.length, before = 0, after = 0;
            for (;;) {
                if (i == j) {
                    if (before > after * 2) {
                        let split = nodes[i - 1];
                        if (split.break)
                            nodes.splice(--i, 1, split.left, null, split.right);
                        else
                            nodes.splice(--i, 1, split.left, split.right);
                        j += 1 + split.break;
                        before -= split.size;
                    }
                    else if (after > before * 2) {
                        let split = nodes[j];
                        if (split.break)
                            nodes.splice(j, 1, split.left, null, split.right);
                        else
                            nodes.splice(j, 1, split.left, split.right);
                        j += 2 + split.break;
                        after -= split.size;
                    }
                    else {
                        break;
                    }
                }
                else if (before < after) {
                    let next = nodes[i++];
                    if (next)
                        before += next.size;
                }
                else {
                    let next = nodes[--j];
                    if (next)
                        after += next.size;
                }
            }
            let brk = 0;
            if (nodes[i - 1] == null) {
                brk = 1;
                i--;
            }
            else if (nodes[i] == null) {
                brk = 1;
                j++;
            }
            return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
        }
    }
    HeightMap.prototype.size = 1;
    class HeightMapBlock extends HeightMap {
        constructor(length, height, deco) {
            super(length, height);
            this.deco = deco;
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.deco || 0);
        }
        lineAt(_value, _type, oracle, top, offset) {
            return this.blockAt(0, oracle, top, offset);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            if (from <= offset + this.length && to >= offset)
                f(this.blockAt(0, oracle, top, offset));
        }
        updateHeight(oracle, offset = 0, _force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            this.outdated = false;
            return this;
        }
        toString() { return `block(${this.length})`; }
    }
    class HeightMapText extends HeightMapBlock {
        constructor(length, height) {
            super(length, height, null);
            this.collapsed = 0; // Amount of collapsed content in the line
            this.widgetHeight = 0; // Maximum inline widget height
            this.breaks = 0; // Number of widget-introduced line breaks on the line
        }
        blockAt(_height, _oracle, top, offset) {
            return new BlockInfo(offset, this.length, top, this.height, this.breaks);
        }
        replace(_from, _to, nodes) {
            let node = nodes[0];
            if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* Flag.SingleLine */)) &&
                Math.abs(this.length - node.length) < 10) {
                if (node instanceof HeightMapGap)
                    node = new HeightMapText(node.length, this.height);
                else
                    node.height = this.height;
                if (!this.outdated)
                    node.outdated = false;
                return node;
            }
            else {
                return HeightMap.of(nodes);
            }
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            if (measured && measured.from <= offset && measured.more)
                this.setHeight(oracle, measured.heights[measured.index++]);
            else if (force || this.outdated)
                this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)) +
                    this.breaks * oracle.lineHeight);
            this.outdated = false;
            return this;
        }
        toString() {
            return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
        }
    }
    class HeightMapGap extends HeightMap {
        constructor(length) { super(length, 0); }
        heightMetrics(oracle, offset) {
            let firstLine = oracle.doc.lineAt(offset).number, lastLine = oracle.doc.lineAt(offset + this.length).number;
            let lines = lastLine - firstLine + 1;
            let perLine, perChar = 0;
            if (oracle.lineWrapping) {
                let totalPerLine = Math.min(this.height, oracle.lineHeight * lines);
                perLine = totalPerLine / lines;
                if (this.length > lines + 1)
                    perChar = (this.height - totalPerLine) / (this.length - lines - 1);
            }
            else {
                perLine = this.height / lines;
            }
            return { firstLine, lastLine, perLine, perChar };
        }
        blockAt(height, oracle, top, offset) {
            let { firstLine, lastLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            if (oracle.lineWrapping) {
                let guess = offset + Math.round(Math.max(0, Math.min(1, (height - top) / this.height)) * this.length);
                let line = oracle.doc.lineAt(guess), lineHeight = perLine + line.length * perChar;
                let lineTop = Math.max(top, height - lineHeight / 2);
                return new BlockInfo(line.from, line.length, lineTop, lineHeight, 0);
            }
            else {
                let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / perLine)));
                let { from, length } = oracle.doc.line(firstLine + line);
                return new BlockInfo(from, length, top + perLine * line, perLine, 0);
            }
        }
        lineAt(value, type, oracle, top, offset) {
            if (type == QueryType.ByHeight)
                return this.blockAt(value, oracle, top, offset);
            if (type == QueryType.ByPosNoHeight) {
                let { from, to } = oracle.doc.lineAt(value);
                return new BlockInfo(from, to - from, 0, 0, 0);
            }
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            let line = oracle.doc.lineAt(value), lineHeight = perLine + line.length * perChar;
            let linesAbove = line.number - firstLine;
            let lineTop = top + perLine * linesAbove + perChar * (line.from - offset - linesAbove);
            return new BlockInfo(line.from, line.length, Math.max(top, Math.min(lineTop, top + this.height - lineHeight)), lineHeight, 0);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            from = Math.max(from, offset);
            to = Math.min(to, offset + this.length);
            let { firstLine, perLine, perChar } = this.heightMetrics(oracle, offset);
            for (let pos = from, lineTop = top; pos <= to;) {
                let line = oracle.doc.lineAt(pos);
                if (pos == from) {
                    let linesAbove = line.number - firstLine;
                    lineTop += perLine * linesAbove + perChar * (from - offset - linesAbove);
                }
                let lineHeight = perLine + perChar * line.length;
                f(new BlockInfo(line.from, line.length, lineTop, lineHeight, 0));
                lineTop += lineHeight;
                pos = line.to + 1;
            }
        }
        replace(from, to, nodes) {
            let after = this.length - to;
            if (after > 0) {
                let last = nodes[nodes.length - 1];
                if (last instanceof HeightMapGap)
                    nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
                else
                    nodes.push(null, new HeightMapGap(after - 1));
            }
            if (from > 0) {
                let first = nodes[0];
                if (first instanceof HeightMapGap)
                    nodes[0] = new HeightMapGap(from + first.length);
                else
                    nodes.unshift(new HeightMapGap(from - 1), null);
            }
            return HeightMap.of(nodes);
        }
        decomposeLeft(to, result) {
            result.push(new HeightMapGap(to - 1), null);
        }
        decomposeRight(from, result) {
            result.push(null, new HeightMapGap(this.length - from - 1));
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let end = offset + this.length;
            if (measured && measured.from <= offset + this.length && measured.more) {
                // Fill in part of this gap with measured lines. We know there
                // can't be widgets or collapsed ranges in those lines, because
                // they would already have been added to the heightmap (gaps
                // only contain plain text).
                let nodes = [], pos = Math.max(offset, measured.from), singleHeight = -1;
                if (measured.from > offset)
                    nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
                while (pos <= end && measured.more) {
                    let len = oracle.doc.lineAt(pos).length;
                    if (nodes.length)
                        nodes.push(null);
                    let height = measured.heights[measured.index++];
                    if (singleHeight == -1)
                        singleHeight = height;
                    else if (Math.abs(height - singleHeight) >= Epsilon$1)
                        singleHeight = -2;
                    let line = new HeightMapText(len, height);
                    line.outdated = false;
                    nodes.push(line);
                    pos += len + 1;
                }
                if (pos <= end)
                    nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
                let result = HeightMap.of(nodes);
                if (singleHeight < 0 || Math.abs(result.height - this.height) >= Epsilon$1 ||
                    Math.abs(singleHeight - this.heightMetrics(oracle, offset).perLine) >= Epsilon$1)
                    oracle.heightChanged = true;
                return result;
            }
            else if (force || this.outdated) {
                this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
                this.outdated = false;
            }
            return this;
        }
        toString() { return `gap(${this.length})`; }
    }
    class HeightMapBranch extends HeightMap {
        constructor(left, brk, right) {
            super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Flag.Outdated */ : 0));
            this.left = left;
            this.right = right;
            this.size = left.size + right.size;
        }
        get break() { return this.flags & 1 /* Flag.Break */; }
        blockAt(height, oracle, top, offset) {
            let mid = top + this.left.height;
            return height < mid ? this.left.blockAt(height, oracle, top, offset)
                : this.right.blockAt(height, oracle, mid, offset + this.left.length + this.break);
        }
        lineAt(value, type, oracle, top, offset) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            let left = type == QueryType.ByHeight ? value < rightTop : value < rightOffset;
            let base = left ? this.left.lineAt(value, type, oracle, top, offset)
                : this.right.lineAt(value, type, oracle, rightTop, rightOffset);
            if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
                return base;
            let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
            if (left)
                return base.join(this.right.lineAt(rightOffset, subQuery, oracle, rightTop, rightOffset));
            else
                return this.left.lineAt(rightOffset, subQuery, oracle, top, offset).join(base);
        }
        forEachLine(from, to, oracle, top, offset, f) {
            let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
            if (this.break) {
                if (from < rightOffset)
                    this.left.forEachLine(from, to, oracle, top, offset, f);
                if (to >= rightOffset)
                    this.right.forEachLine(from, to, oracle, rightTop, rightOffset, f);
            }
            else {
                let mid = this.lineAt(rightOffset, QueryType.ByPos, oracle, top, offset);
                if (from < mid.from)
                    this.left.forEachLine(from, mid.from - 1, oracle, top, offset, f);
                if (mid.to >= from && mid.from <= to)
                    f(mid);
                if (to > mid.to)
                    this.right.forEachLine(mid.to + 1, to, oracle, rightTop, rightOffset, f);
            }
        }
        replace(from, to, nodes) {
            let rightStart = this.left.length + this.break;
            if (to < rightStart)
                return this.balanced(this.left.replace(from, to, nodes), this.right);
            if (from > this.left.length)
                return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
            let result = [];
            if (from > 0)
                this.decomposeLeft(from, result);
            let left = result.length;
            for (let node of nodes)
                result.push(node);
            if (from > 0)
                mergeGaps(result, left - 1);
            if (to < this.length) {
                let right = result.length;
                this.decomposeRight(to, result);
                mergeGaps(result, right);
            }
            return HeightMap.of(result);
        }
        decomposeLeft(to, result) {
            let left = this.left.length;
            if (to <= left)
                return this.left.decomposeLeft(to, result);
            result.push(this.left);
            if (this.break) {
                left++;
                if (to >= left)
                    result.push(null);
            }
            if (to > left)
                this.right.decomposeLeft(to - left, result);
        }
        decomposeRight(from, result) {
            let left = this.left.length, right = left + this.break;
            if (from >= right)
                return this.right.decomposeRight(from - right, result);
            if (from < left)
                this.left.decomposeRight(from, result);
            if (this.break && from < right)
                result.push(null);
            result.push(this.right);
        }
        balanced(left, right) {
            if (left.size > 2 * right.size || right.size > 2 * left.size)
                return HeightMap.of(this.break ? [left, null, right] : [left, right]);
            this.left = left;
            this.right = right;
            this.height = left.height + right.height;
            this.outdated = left.outdated || right.outdated;
            this.size = left.size + right.size;
            this.length = left.length + this.break + right.length;
            return this;
        }
        updateHeight(oracle, offset = 0, force = false, measured) {
            let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
            if (measured && measured.from <= offset + left.length && measured.more)
                rebalance = left = left.updateHeight(oracle, offset, force, measured);
            else
                left.updateHeight(oracle, offset, force);
            if (measured && measured.from <= rightStart + right.length && measured.more)
                rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
            else
                right.updateHeight(oracle, rightStart, force);
            if (rebalance)
                return this.balanced(left, right);
            this.height = this.left.height + this.right.height;
            this.outdated = false;
            return this;
        }
        toString() { return this.left + (this.break ? " " : "-") + this.right; }
    }
    function mergeGaps(nodes, around) {
        let before, after;
        if (nodes[around] == null &&
            (before = nodes[around - 1]) instanceof HeightMapGap &&
            (after = nodes[around + 1]) instanceof HeightMapGap)
            nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
    }
    const relevantWidgetHeight = 5;
    class NodeBuilder {
        constructor(pos, oracle) {
            this.pos = pos;
            this.oracle = oracle;
            this.nodes = [];
            this.lineStart = -1;
            this.lineEnd = -1;
            this.covering = null;
            this.writtenTo = pos;
        }
        get isCovered() {
            return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
        }
        span(_from, to) {
            if (this.lineStart > -1) {
                let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
                if (last instanceof HeightMapText)
                    last.length += end - this.pos;
                else if (end > this.pos || !this.isCovered)
                    this.nodes.push(new HeightMapText(end - this.pos, -1));
                this.writtenTo = end;
                if (to > end) {
                    this.nodes.push(null);
                    this.writtenTo++;
                    this.lineStart = -1;
                }
            }
            this.pos = to;
        }
        point(from, to, deco) {
            if (from < to || deco.heightRelevant) {
                let height = deco.widget ? deco.widget.estimatedHeight : 0;
                let breaks = deco.widget ? deco.widget.lineBreaks : 0;
                if (height < 0)
                    height = this.oracle.lineHeight;
                let len = to - from;
                if (deco.block) {
                    this.addBlock(new HeightMapBlock(len, height, deco));
                }
                else if (len || breaks || height >= relevantWidgetHeight) {
                    this.addLineDeco(height, breaks, len);
                }
            }
            else if (to > from) {
                this.span(from, to);
            }
            if (this.lineEnd > -1 && this.lineEnd < this.pos)
                this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
        }
        enterLine() {
            if (this.lineStart > -1)
                return;
            let { from, to } = this.oracle.doc.lineAt(this.pos);
            this.lineStart = from;
            this.lineEnd = to;
            if (this.writtenTo < from) {
                if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
                    this.nodes.push(this.blankContent(this.writtenTo, from - 1));
                this.nodes.push(null);
            }
            if (this.pos > from)
                this.nodes.push(new HeightMapText(this.pos - from, -1));
            this.writtenTo = this.pos;
        }
        blankContent(from, to) {
            let gap = new HeightMapGap(to - from);
            if (this.oracle.doc.lineAt(from).to == to)
                gap.flags |= 4 /* Flag.SingleLine */;
            return gap;
        }
        ensureLine() {
            this.enterLine();
            let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
            if (last instanceof HeightMapText)
                return last;
            let line = new HeightMapText(0, -1);
            this.nodes.push(line);
            return line;
        }
        addBlock(block) {
            var _a;
            this.enterLine();
            let type = (_a = block.deco) === null || _a === void 0 ? void 0 : _a.type;
            if (type == BlockType.WidgetAfter && !this.isCovered)
                this.ensureLine();
            this.nodes.push(block);
            this.writtenTo = this.pos = this.pos + block.length;
            if (type != BlockType.WidgetBefore)
                this.covering = block;
        }
        addLineDeco(height, breaks, length) {
            let line = this.ensureLine();
            line.length += length;
            line.collapsed += length;
            line.widgetHeight = Math.max(line.widgetHeight, height);
            line.breaks += breaks;
            this.writtenTo = this.pos = this.pos + length;
        }
        finish(from) {
            let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
            if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
                this.nodes.push(new HeightMapText(0, -1));
            else if (this.writtenTo < this.pos || last == null)
                this.nodes.push(this.blankContent(this.writtenTo, this.pos));
            let pos = from;
            for (let node of this.nodes) {
                if (node instanceof HeightMapText)
                    node.updateHeight(this.oracle, pos);
                pos += node ? node.length : 1;
            }
            return this.nodes;
        }
        // Always called with a region that on both sides either stretches
        // to a line break or the end of the document.
        // The returned array uses null to indicate line breaks, but never
        // starts or ends in a line break, or has multiple line breaks next
        // to each other.
        static build(oracle, decorations, from, to) {
            let builder = new NodeBuilder(from, oracle);
            RangeSet.spans(decorations, from, to, builder, 0);
            return builder.finish(from);
        }
    }
    function heightRelevantDecoChanges(a, b, diff) {
        let comp = new DecorationComparator;
        RangeSet.compare(a, b, diff, comp, 0);
        return comp.changes;
    }
    class DecorationComparator {
        constructor() {
            this.changes = [];
        }
        compareRange() { }
        comparePoint(from, to, a, b) {
            if (from < to || a && a.heightRelevant || b && b.heightRelevant)
                addRange(from, to, this.changes, 5);
        }
    }
 
    function visiblePixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        let doc = dom.ownerDocument, win = doc.defaultView || window;
        let left = Math.max(0, rect.left), right = Math.min(win.innerWidth, rect.right);
        let top = Math.max(0, rect.top), bottom = Math.min(win.innerHeight, rect.bottom);
        for (let parent = dom.parentNode; parent && parent != doc.body;) {
            if (parent.nodeType == 1) {
                let elt = parent;
                let style = window.getComputedStyle(elt);
                if ((elt.scrollHeight > elt.clientHeight || elt.scrollWidth > elt.clientWidth) &&
                    style.overflow != "visible") {
                    let parentRect = elt.getBoundingClientRect();
                    left = Math.max(left, parentRect.left);
                    right = Math.min(right, parentRect.right);
                    top = Math.max(top, parentRect.top);
                    bottom = parent == dom.parentNode ? parentRect.bottom : Math.min(bottom, parentRect.bottom);
                }
                parent = style.position == "absolute" || style.position == "fixed" ? elt.offsetParent : elt.parentNode;
            }
            else if (parent.nodeType == 11) { // Shadow root
                parent = parent.host;
            }
            else {
                break;
            }
        }
        return { left: left - rect.left, right: Math.max(left, right) - rect.left,
            top: top - (rect.top + paddingTop), bottom: Math.max(top, bottom) - (rect.top + paddingTop) };
    }
    function fullPixelRange(dom, paddingTop) {
        let rect = dom.getBoundingClientRect();
        return { left: 0, right: rect.right - rect.left,
            top: paddingTop, bottom: rect.bottom - (rect.top + paddingTop) };
    }
    // Line gaps are placeholder widgets used to hide pieces of overlong
    // lines within the viewport, as a kludge to keep the editor
    // responsive when a ridiculously long line is loaded into it.
    class LineGap {
        constructor(from, to, size) {
            this.from = from;
            this.to = to;
            this.size = size;
        }
        static same(a, b) {
            if (a.length != b.length)
                return false;
            for (let i = 0; i < a.length; i++) {
                let gA = a[i], gB = b[i];
                if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
                    return false;
            }
            return true;
        }
        draw(viewState, wrapping) {
            return Decoration.replace({
                widget: new LineGapWidget(this.size * (wrapping ? viewState.scaleY : viewState.scaleX), wrapping)
            }).range(this.from, this.to);
        }
    }
    class LineGapWidget extends WidgetType {
        constructor(size, vertical) {
            super();
            this.size = size;
            this.vertical = vertical;
        }
        eq(other) { return other.size == this.size && other.vertical == this.vertical; }
        toDOM() {
            let elt = document.createElement("div");
            if (this.vertical) {
                elt.style.height = this.size + "px";
            }
            else {
                elt.style.width = this.size + "px";
                elt.style.height = "2px";
                elt.style.display = "inline-block";
            }
            return elt;
        }
        get estimatedHeight() { return this.vertical ? this.size : -1; }
    }
    class ViewState {
        constructor(state) {
            this.state = state;
            // These are contentDOM-local coordinates
            this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
            this.inView = true;
            this.paddingTop = 0; // Padding above the document, scaled
            this.paddingBottom = 0; // Padding below the document, scaled
            this.contentDOMWidth = 0; // contentDOM.getBoundingClientRect().width
            this.contentDOMHeight = 0; // contentDOM.getBoundingClientRect().height
            this.editorHeight = 0; // scrollDOM.clientHeight, unscaled
            this.editorWidth = 0; // scrollDOM.clientWidth, unscaled
            this.scrollTop = 0; // Last seen scrollDOM.scrollTop, scaled
            this.scrolledToBottom = true;
            // The CSS-transformation scale of the editor (transformed size /
            // concrete size)
            this.scaleX = 1;
            this.scaleY = 1;
            // The vertical position (document-relative) to which to anchor the
            // scroll position. -1 means anchor to the end of the document.
            this.scrollAnchorPos = 0;
            // The height at the anchor position. Set by the DOM update phase.
            // -1 means no height available.
            this.scrollAnchorHeight = -1;
            // See VP.MaxDOMHeight
            this.scaler = IdScaler;
            this.scrollTarget = null;
            // Briefly set to true when printing, to disable viewport limiting
            this.printing = false;
            // Flag set when editor content was redrawn, so that the next
            // measure stage knows it must read DOM layout
            this.mustMeasureContent = true;
            this.defaultTextDirection = Direction.LTR;
            this.visibleRanges = [];
            // Cursor 'assoc' is only significant when the cursor is on a line
            // wrap point, where it must stick to the character that it is
            // associated with. Since browsers don't provide a reasonable
            // interface to set or query this, when a selection is set that
            // might cause this to be significant, this flag is set. The next
            // measure phase will check whether the cursor is on a line-wrapping
            // boundary and, if so, reset it to make sure it is positioned in
            // the right place.
            this.mustEnforceCursorAssoc = false;
            let guessWrapping = state.facet(contentAttributes).some(v => typeof v != "function" && v.class == "cm-lineWrapping");
            this.heightOracle = new HeightOracle(guessWrapping);
            this.stateDeco = state.facet(decorations).filter(d => typeof d != "function");
            this.heightMap = HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
            this.viewport = this.getViewport(0, null);
            this.updateViewportLines();
            this.updateForViewport();
            this.lineGaps = this.ensureLineGaps([]);
            this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(this, false)));
            this.computeVisibleRanges();
        }
        updateForViewport() {
            let viewports = [this.viewport], { main } = this.state.selection;
            for (let i = 0; i <= 1; i++) {
                let pos = i ? main.head : main.anchor;
                if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
                    let { from, to } = this.lineBlockAt(pos);
                    viewports.push(new Viewport(from, to));
                }
            }
            this.viewports = viewports.sort((a, b) => a.from - b.from);
            this.scaler = this.heightMap.height <= 7000000 /* VP.MaxDOMHeight */ ? IdScaler :
                new BigScaler(this.heightOracle, this.heightMap, this.viewports);
        }
        updateViewportLines() {
            this.viewportLines = [];
            this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.heightOracle.setDoc(this.state.doc), 0, 0, block => {
                this.viewportLines.push(this.scaler.scale == 1 ? block : scaleBlock(block, this.scaler));
            });
        }
        update(update, scrollTarget = null) {
            this.state = update.state;
            let prevDeco = this.stateDeco;
            this.stateDeco = this.state.facet(decorations).filter(d => typeof d != "function");
            let contentChanges = update.changedRanges;
            let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(prevDeco, this.stateDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
            let prevHeight = this.heightMap.height;
            let scrollAnchor = this.scrolledToBottom ? null : this.scrollAnchorAt(this.scrollTop);
            this.heightMap = this.heightMap.applyChanges(this.stateDeco, update.startState.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
            if (this.heightMap.height != prevHeight)
                update.flags |= 2 /* UpdateFlag.Height */;
            if (scrollAnchor) {
                this.scrollAnchorPos = update.changes.mapPos(scrollAnchor.from, -1);
                this.scrollAnchorHeight = scrollAnchor.top;
            }
            else {
                this.scrollAnchorPos = -1;
                this.scrollAnchorHeight = this.heightMap.height;
            }
            let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
            if (scrollTarget && (scrollTarget.range.head < viewport.from || scrollTarget.range.head > viewport.to) ||
                !this.viewportIsAppropriate(viewport))
                viewport = this.getViewport(0, scrollTarget);
            let updateLines = !update.changes.empty || (update.flags & 2 /* UpdateFlag.Height */) ||
                viewport.from != this.viewport.from || viewport.to != this.viewport.to;
            this.viewport = viewport;
            this.updateForViewport();
            if (updateLines)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
            update.flags |= this.computeVisibleRanges();
            if (scrollTarget)
                this.scrollTarget = scrollTarget;
            if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
                update.state.selection.main.empty && update.state.selection.main.assoc &&
                !update.state.facet(nativeSelectionHidden))
                this.mustEnforceCursorAssoc = true;
        }
        measure(view) {
            let dom = view.contentDOM, style = window.getComputedStyle(dom);
            let oracle = this.heightOracle;
            let whiteSpace = style.whiteSpace;
            this.defaultTextDirection = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
            let refresh = this.heightOracle.mustRefreshForWrapping(whiteSpace);
            let domRect = dom.getBoundingClientRect();
            let measureContent = refresh || this.mustMeasureContent || this.contentDOMHeight != domRect.height;
            this.contentDOMHeight = domRect.height;
            this.mustMeasureContent = false;
            let result = 0, bias = 0;
            if (domRect.width && domRect.height) {
                let scaleX = domRect.width / dom.offsetWidth;
                let scaleY = domRect.height / dom.offsetHeight;
                if (scaleX > 0.995 && scaleX < 1.005)
                    scaleX = 1;
                if (scaleY > 0.995 && scaleY < 1.005)
                    scaleY = 1;
                if (this.scaleX != scaleX || this.scaleY != scaleY) {
                    this.scaleX = scaleX;
                    this.scaleY = scaleY;
                    result |= 8 /* UpdateFlag.Geometry */;
                    refresh = measureContent = true;
                }
            }
            // Vertical padding
            let paddingTop = (parseInt(style.paddingTop) || 0) * this.scaleY;
            let paddingBottom = (parseInt(style.paddingBottom) || 0) * this.scaleY;
            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
                this.paddingTop = paddingTop;
                this.paddingBottom = paddingBottom;
                result |= 8 /* UpdateFlag.Geometry */ | 2 /* UpdateFlag.Height */;
            }
            if (this.editorWidth != view.scrollDOM.clientWidth) {
                if (oracle.lineWrapping)
                    measureContent = true;
                this.editorWidth = view.scrollDOM.clientWidth;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            let scrollTop = view.scrollDOM.scrollTop * this.scaleY;
            if (this.scrollTop != scrollTop) {
                this.scrollAnchorHeight = -1;
                this.scrollTop = scrollTop;
            }
            this.scrolledToBottom = isScrolledToBottom(view.scrollDOM);
            // Pixel viewport
            let pixelViewport = (this.printing ? fullPixelRange : visiblePixelRange)(dom, this.paddingTop);
            let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
            this.pixelViewport = pixelViewport;
            let inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
            if (inView != this.inView) {
                this.inView = inView;
                if (inView)
                    measureContent = true;
            }
            if (!this.inView && !this.scrollTarget)
                return 0;
            let contentWidth = domRect.width;
            if (this.contentDOMWidth != contentWidth || this.editorHeight != view.scrollDOM.clientHeight) {
                this.contentDOMWidth = domRect.width;
                this.editorHeight = view.scrollDOM.clientHeight;
                result |= 8 /* UpdateFlag.Geometry */;
            }
            if (measureContent) {
                let lineHeights = view.docView.measureVisibleLineHeights(this.viewport);
                if (oracle.mustRefreshForHeights(lineHeights))
                    refresh = true;
                if (refresh || oracle.lineWrapping && Math.abs(contentWidth - this.contentDOMWidth) > oracle.charWidth) {
                    let { lineHeight, charWidth, textHeight } = view.docView.measureTextSize();
                    refresh = lineHeight > 0 && oracle.refresh(whiteSpace, lineHeight, charWidth, textHeight, contentWidth / charWidth, lineHeights);
                    if (refresh) {
                        view.docView.minWidth = 0;
                        result |= 8 /* UpdateFlag.Geometry */;
                    }
                }
                if (dTop > 0 && dBottom > 0)
                    bias = Math.max(dTop, dBottom);
                else if (dTop < 0 && dBottom < 0)
                    bias = Math.min(dTop, dBottom);
                oracle.heightChanged = false;
                for (let vp of this.viewports) {
                    let heights = vp.from == this.viewport.from ? lineHeights : view.docView.measureVisibleLineHeights(vp);
                    this.heightMap = (refresh ? HeightMap.empty().applyChanges(this.stateDeco, Text.empty, this.heightOracle, [new ChangedRange(0, 0, 0, view.state.doc.length)]) : this.heightMap).updateHeight(oracle, 0, refresh, new MeasuredHeights(vp.from, heights));
                }
                if (oracle.heightChanged)
                    result |= 2 /* UpdateFlag.Height */;
            }
            let viewportChange = !this.viewportIsAppropriate(this.viewport, bias) ||
                this.scrollTarget && (this.scrollTarget.range.head < this.viewport.from ||
                    this.scrollTarget.range.head > this.viewport.to);
            if (viewportChange)
                this.viewport = this.getViewport(bias, this.scrollTarget);
            this.updateForViewport();
            if ((result & 2 /* UpdateFlag.Height */) || viewportChange)
                this.updateViewportLines();
            if (this.lineGaps.length || this.viewport.to - this.viewport.from > (2000 /* LG.Margin */ << 1))
                this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps, view));
            result |= this.computeVisibleRanges();
            if (this.mustEnforceCursorAssoc) {
                this.mustEnforceCursorAssoc = false;
                // This is done in the read stage, because moving the selection
                // to a line end is going to trigger a layout anyway, so it
                // can't be a pure write. It should be rare that it does any
                // writing.
                view.docView.enforceCursorAssoc();
            }
            return result;
        }
        get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top); }
        get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom); }
        getViewport(bias, scrollTarget) {
            // This will divide VP.Margin between the top and the
            // bottom, depending on the bias (the change in viewport position
            // since the last update). It'll hold a number between 0 and 1
            let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* VP.Margin */ / 2));
            let map = this.heightMap, oracle = this.heightOracle;
            let { visibleTop, visibleBottom } = this;
            let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* VP.Margin */, QueryType.ByHeight, oracle, 0, 0).to);
            // If scrollTarget is given, make sure the viewport includes that position
            if (scrollTarget) {
                let { head } = scrollTarget.range;
                if (head < viewport.from || head > viewport.to) {
                    let viewHeight = Math.min(this.editorHeight, this.pixelViewport.bottom - this.pixelViewport.top);
                    let block = map.lineAt(head, QueryType.ByPos, oracle, 0, 0), topPos;
                    if (scrollTarget.y == "center")
                        topPos = (block.top + block.bottom) / 2 - viewHeight / 2;
                    else if (scrollTarget.y == "start" || scrollTarget.y == "nearest" && head < viewport.from)
                        topPos = block.top;
                    else
                        topPos = block.bottom - viewHeight;
                    viewport = new Viewport(map.lineAt(topPos - 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).from, map.lineAt(topPos + viewHeight + 1000 /* VP.Margin */ / 2, QueryType.ByHeight, oracle, 0, 0).to);
                }
            }
            return viewport;
        }
        mapViewport(viewport, changes) {
            let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
            return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0).to);
        }
        // Checks if a given viewport covers the visible part of the
        // document and not too much beyond that.
        viewportIsAppropriate({ from, to }, bias = 0) {
            if (!this.inView)
                return true;
            let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.heightOracle, 0, 0);
            let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.heightOracle, 0, 0);
            let { visibleTop, visibleBottom } = this;
            return (from == 0 || top <= visibleTop - Math.max(10 /* VP.MinCoverMargin */, Math.min(-bias, 250 /* VP.MaxCoverMargin */))) &&
                (to == this.state.doc.length ||
                    bottom >= visibleBottom + Math.max(10 /* VP.MinCoverMargin */, Math.min(bias, 250 /* VP.MaxCoverMargin */))) &&
                (top > visibleTop - 2 * 1000 /* VP.Margin */ && bottom < visibleBottom + 2 * 1000 /* VP.Margin */);
        }
        mapLineGaps(gaps, changes) {
            if (!gaps.length || changes.empty)
                return gaps;
            let mapped = [];
            for (let gap of gaps)
                if (!changes.touchesRange(gap.from, gap.to))
                    mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
            return mapped;
        }
        // Computes positions in the viewport where the start or end of a
        // line should be hidden, trying to reuse existing line gaps when
        // appropriate to avoid unneccesary redraws.
        // Uses crude character-counting for the positioning and sizing,
        // since actual DOM coordinates aren't always available and
        // predictable. Relies on generous margins (see LG.Margin) to hide
        // the artifacts this might produce from the user.
        ensureLineGaps(current, mayMeasure) {
            let wrapping = this.heightOracle.lineWrapping;
            let margin = wrapping ? 10000 /* LG.MarginWrap */ : 2000 /* LG.Margin */, halfMargin = margin >> 1, doubleMargin = margin << 1;
            // The non-wrapping logic won't work at all in predominantly right-to-left text.
            if (this.defaultTextDirection != Direction.LTR && !wrapping)
                return [];
            let gaps = [];
            let addGap = (from, to, line, structure) => {
                if (to - from < halfMargin)
                    return;
                let sel = this.state.selection.main, avoid = [sel.from];
                if (!sel.empty)
                    avoid.push(sel.to);
                for (let pos of avoid) {
                    if (pos > from && pos < to) {
                        addGap(from, pos - 10 /* LG.SelectionMargin */, line, structure);
                        addGap(pos + 10 /* LG.SelectionMargin */, to, line, structure);
                        return;
                    }
                }
                let gap = find(current, gap => gap.from >= line.from && gap.to <= line.to &&
                    Math.abs(gap.from - from) < halfMargin && Math.abs(gap.to - to) < halfMargin &&
                    !avoid.some(pos => gap.from < pos && gap.to > pos));
                if (!gap) {
                    // When scrolling down, snap gap ends to line starts to avoid shifts in wrapping
                    if (to < line.to && mayMeasure && wrapping &&
                        mayMeasure.visibleRanges.some(r => r.from <= to && r.to >= to)) {
                        let lineStart = mayMeasure.moveToLineBoundary(EditorSelection.cursor(to), false, true).head;
                        if (lineStart > from)
                            to = lineStart;
                    }
                    gap = new LineGap(from, to, this.gapSize(line, from, to, structure));
                }
                gaps.push(gap);
            };
            for (let line of this.viewportLines) {
                if (line.length < doubleMargin)
                    continue;
                let structure = lineStructure(line.from, line.to, this.stateDeco);
                if (structure.total < doubleMargin)
                    continue;
                let target = this.scrollTarget ? this.scrollTarget.range.head : null;
                let viewFrom, viewTo;
                if (wrapping) {
                    let marginHeight = (margin / this.heightOracle.lineLength) * this.heightOracle.lineHeight;
                    let top, bot;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.visibleBottom - this.visibleTop) / 2 + marginHeight) / line.height;
                        top = targetFrac - spaceFrac;
                        bot = targetFrac + spaceFrac;
                    }
                    else {
                        top = (this.visibleTop - line.top - marginHeight) / line.height;
                        bot = (this.visibleBottom - line.top + marginHeight) / line.height;
                    }
                    viewFrom = findPosition(structure, top);
                    viewTo = findPosition(structure, bot);
                }
                else {
                    let totalWidth = structure.total * this.heightOracle.charWidth;
                    let marginWidth = margin * this.heightOracle.charWidth;
                    let left, right;
                    if (target != null) {
                        let targetFrac = findFraction(structure, target);
                        let spaceFrac = ((this.pixelViewport.right - this.pixelViewport.left) / 2 + marginWidth) / totalWidth;
                        left = targetFrac - spaceFrac;
                        right = targetFrac + spaceFrac;
                    }
                    else {
                        left = (this.pixelViewport.left - marginWidth) / totalWidth;
                        right = (this.pixelViewport.right + marginWidth) / totalWidth;
                    }
                    viewFrom = findPosition(structure, left);
                    viewTo = findPosition(structure, right);
                }
                if (viewFrom > line.from)
                    addGap(line.from, viewFrom, line, structure);
                if (viewTo < line.to)
                    addGap(viewTo, line.to, line, structure);
            }
            return gaps;
        }
        gapSize(line, from, to, structure) {
            let fraction = findFraction(structure, to) - findFraction(structure, from);
            if (this.heightOracle.lineWrapping) {
                return line.height * fraction;
            }
            else {
                return structure.total * this.heightOracle.charWidth * fraction;
            }
        }
        updateLineGaps(gaps) {
            if (!LineGap.same(gaps, this.lineGaps)) {
                this.lineGaps = gaps;
                this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this, this.heightOracle.lineWrapping)));
            }
        }
        computeVisibleRanges() {
            let deco = this.stateDeco;
            if (this.lineGaps.length)
                deco = deco.concat(this.lineGapDeco);
            let ranges = [];
            RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
                span(from, to) { ranges.push({ from, to }); },
                point() { }
            }, 20);
            let changed = ranges.length != this.visibleRanges.length ||
                this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
            this.visibleRanges = ranges;
            return changed ? 4 /* UpdateFlag.Viewport */ : 0;
        }
        lineBlockAt(pos) {
            return (pos >= this.viewport.from && pos <= this.viewport.to && this.viewportLines.find(b => b.from <= pos && b.to >= pos)) ||
                scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.heightOracle, 0, 0), this.scaler);
        }
        lineBlockAtHeight(height) {
            return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height), QueryType.ByHeight, this.heightOracle, 0, 0), this.scaler);
        }
        scrollAnchorAt(scrollTop) {
            let block = this.lineBlockAtHeight(scrollTop + 8);
            return block.from >= this.viewport.from || this.viewportLines[0].top - scrollTop > 200 ? block : this.viewportLines[0];
        }
        elementAtHeight(height) {
            return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height), this.heightOracle, 0, 0), this.scaler);
        }
        get docHeight() {
            return this.scaler.toDOM(this.heightMap.height);
        }
        get contentHeight() {
            return this.docHeight + this.paddingTop + this.paddingBottom;
        }
    }
    class Viewport {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    function lineStructure(from, to, stateDeco) {
        let ranges = [], pos = from, total = 0;
        RangeSet.spans(stateDeco, from, to, {
            span() { },
            point(from, to) {
                if (from > pos) {
                    ranges.push({ from: pos, to: from });
                    total += from - pos;
                }
                pos = to;
            }
        }, 20); // We're only interested in collapsed ranges of a significant size
        if (pos < to) {
            ranges.push({ from: pos, to });
            total += to - pos;
        }
        return { total, ranges };
    }
    function findPosition({ total, ranges }, ratio) {
        if (ratio <= 0)
            return ranges[0].from;
        if (ratio >= 1)
            return ranges[ranges.length - 1].to;
        let dist = Math.floor(total * ratio);
        for (let i = 0;; i++) {
            let { from, to } = ranges[i], size = to - from;
            if (dist <= size)
                return from + dist;
            dist -= size;
        }
    }
    function findFraction(structure, pos) {
        let counted = 0;
        for (let { from, to } of structure.ranges) {
            if (pos <= to) {
                counted += pos - from;
                break;
            }
            counted += to - from;
        }
        return counted / structure.total;
    }
    function find(array, f) {
        for (let val of array)
            if (f(val))
                return val;
        return undefined;
    }
    // Don't scale when the document height is within the range of what
    // the DOM can handle.
    const IdScaler = {
        toDOM(n) { return n; },
        fromDOM(n) { return n; },
        scale: 1
    };
    // When the height is too big (> VP.MaxDOMHeight), scale down the
    // regions outside the viewports so that the total height is
    // VP.MaxDOMHeight.
    class BigScaler {
        constructor(oracle, heightMap, viewports) {
            let vpHeight = 0, base = 0, domBase = 0;
            this.viewports = viewports.map(({ from, to }) => {
                let top = heightMap.lineAt(from, QueryType.ByPos, oracle, 0, 0).top;
                let bottom = heightMap.lineAt(to, QueryType.ByPos, oracle, 0, 0).bottom;
                vpHeight += bottom - top;
                return { from, to, top, bottom, domTop: 0, domBottom: 0 };
            });
            this.scale = (7000000 /* VP.MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
            for (let obj of this.viewports) {
                obj.domTop = domBase + (obj.top - base) * this.scale;
                domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
                base = obj.bottom;
            }
        }
        toDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.top)
                    return domBase + (n - base) * this.scale;
                if (n <= vp.bottom)
                    return vp.domTop + (n - vp.top);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
        fromDOM(n) {
            for (let i = 0, base = 0, domBase = 0;; i++) {
                let vp = i < this.viewports.length ? this.viewports[i] : null;
                if (!vp || n < vp.domTop)
                    return base + (n - domBase) / this.scale;
                if (n <= vp.domBottom)
                    return vp.top + (n - vp.domTop);
                base = vp.bottom;
                domBase = vp.domBottom;
            }
        }
    }
    function scaleBlock(block, scaler) {
        if (scaler.scale == 1)
            return block;
        let bTop = scaler.toDOM(block.top), bBottom = scaler.toDOM(block.bottom);
        return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block._content) ? block._content.map(b => scaleBlock(b, scaler)) : block._content);
    }
 
    const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
    const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
    const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
    const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
    function buildTheme(main, spec, scopes) {
        return new StyleModule(spec, {
            finish(sel) {
                return /&/.test(sel) ? sel.replace(/&\w*/, m => {
                    if (m == "&")
                        return main;
                    if (!scopes || !scopes[m])
                        throw new RangeError(`Unsupported selector: ${m}`);
                    return scopes[m];
                }) : main + " " + sel;
            }
        });
    }
    const baseTheme$1 = /*@__PURE__*/buildTheme("." + baseThemeID, {
        "&": {
            position: "relative !important",
            boxSizing: "border-box",
            "&.cm-focused": {
                // Provide a simple default outline to make sure a focused
                // editor is visually distinct. Can't leave the default behavior
                // because that will apply to the content element, which is
                // inside the scrollable container and doesn't include the
                // gutters. We also can't use an 'auto' outline, since those
                // are, for some reason, drawn behind the element content, which
                // will cause things like the active line background to cover
                // the outline (#297).
                outline: "1px dotted #212121"
            },
            display: "flex !important",
            flexDirection: "column"
        },
        ".cm-scroller": {
            display: "flex !important",
            alignItems: "flex-start !important",
            fontFamily: "monospace",
            lineHeight: 1.4,
            height: "100%",
            overflowX: "auto",
            position: "relative",
            zIndex: 0
        },
        ".cm-content": {
            margin: 0,
            flexGrow: 2,
            flexShrink: 0,
            display: "block",
            whiteSpace: "pre",
            wordWrap: "normal",
            boxSizing: "border-box",
            padding: "4px 0",
            outline: "none",
            "&[contenteditable=true]": {
                WebkitUserModify: "read-write-plaintext-only",
            }
        },
        ".cm-lineWrapping": {
            whiteSpace_fallback: "pre-wrap",
            whiteSpace: "break-spaces",
            wordBreak: "break-word",
            overflowWrap: "anywhere",
            flexShrink: 1
        },
        "&light .cm-content": { caretColor: "black" },
        "&dark .cm-content": { caretColor: "white" },
        ".cm-line": {
            display: "block",
            padding: "0 2px 0 6px"
        },
        ".cm-layer": {
            position: "absolute",
            left: 0,
            top: 0,
            contain: "size style",
            "& > *": {
                position: "absolute"
            }
        },
        "&light .cm-selectionBackground": {
            background: "#d9d9d9"
        },
        "&dark .cm-selectionBackground": {
            background: "#222"
        },
        "&light.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#d7d4f0"
        },
        "&dark.cm-focused > .cm-scroller > .cm-selectionLayer .cm-selectionBackground": {
            background: "#233"
        },
        ".cm-cursorLayer": {
            pointerEvents: "none"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer": {
            animation: "steps(1) cm-blink 1.2s infinite"
        },
        // Two animations defined so that we can switch between them to
        // restart the animation without forcing another style
        // recomputation.
        "@keyframes cm-blink": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        "@keyframes cm-blink2": { "0%": {}, "50%": { opacity: 0 }, "100%": {} },
        ".cm-cursor, .cm-dropCursor": {
            borderLeft: "1.2px solid black",
            marginLeft: "-0.6px",
            pointerEvents: "none",
        },
        ".cm-cursor": {
            display: "none"
        },
        "&dark .cm-cursor": {
            borderLeftColor: "#444"
        },
        ".cm-dropCursor": {
            position: "absolute"
        },
        "&.cm-focused > .cm-scroller > .cm-cursorLayer .cm-cursor": {
            display: "block"
        },
        "&light .cm-activeLine": { backgroundColor: "#cceeff44" },
        "&dark .cm-activeLine": { backgroundColor: "#99eeff33" },
        "&light .cm-specialChar": { color: "red" },
        "&dark .cm-specialChar": { color: "#f78" },
        ".cm-gutters": {
            flexShrink: 0,
            display: "flex",
            height: "100%",
            boxSizing: "border-box",
            insetInlineStart: 0,
            zIndex: 200
        },
        "&light .cm-gutters": {
            backgroundColor: "#f5f5f5",
            color: "#6c6c6c",
            borderRight: "1px solid #ddd"
        },
        "&dark .cm-gutters": {
            backgroundColor: "#333338",
            color: "#ccc"
        },
        ".cm-gutter": {
            display: "flex !important",
            flexDirection: "column",
            flexShrink: 0,
            boxSizing: "border-box",
            minHeight: "100%",
            overflow: "hidden"
        },
        ".cm-gutterElement": {
            boxSizing: "border-box"
        },
        ".cm-lineNumbers .cm-gutterElement": {
            padding: "0 3px 0 5px",
            minWidth: "20px",
            textAlign: "right",
            whiteSpace: "nowrap"
        },
        "&light .cm-activeLineGutter": {
            backgroundColor: "#e2f2ff"
        },
        "&dark .cm-activeLineGutter": {
            backgroundColor: "#222227"
        },
        ".cm-panels": {
            boxSizing: "border-box",
            position: "sticky",
            left: 0,
            right: 0
        },
        "&light .cm-panels": {
            backgroundColor: "#f5f5f5",
            color: "black"
        },
        "&light .cm-panels-top": {
            borderBottom: "1px solid #ddd"
        },
        "&light .cm-panels-bottom": {
            borderTop: "1px solid #ddd"
        },
        "&dark .cm-panels": {
            backgroundColor: "#333338",
            color: "white"
        },
        ".cm-tab": {
            display: "inline-block",
            overflow: "hidden",
            verticalAlign: "bottom"
        },
        ".cm-widgetBuffer": {
            verticalAlign: "text-top",
            height: "1em",
            width: 0,
            display: "inline"
        },
        ".cm-placeholder": {
            color: "#888",
            display: "inline-block",
            verticalAlign: "top",
        },
        ".cm-highlightSpace:before": {
            content: "attr(data-display)",
            position: "absolute",
            pointerEvents: "none",
            color: "#888"
        },
        ".cm-highlightTab": {
            backgroundImage: `url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="200" height="20"><path stroke="%23888" stroke-width="1" fill="none" d="M1 10H196L190 5M190 15L196 10M197 4L197 16"/></svg>')`,
            backgroundSize: "auto 100%",
            backgroundPosition: "right 90%",
            backgroundRepeat: "no-repeat"
        },
        ".cm-trailingSpace": {
            backgroundColor: "#ff332255"
        },
        ".cm-button": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            padding: ".2em 1em",
            borderRadius: "1px"
        },
        "&light .cm-button": {
            backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
            }
        },
        "&dark .cm-button": {
            backgroundImage: "linear-gradient(#393939, #111)",
            border: "1px solid #888",
            "&:active": {
                backgroundImage: "linear-gradient(#111, #333)"
            }
        },
        ".cm-textfield": {
            verticalAlign: "middle",
            color: "inherit",
            fontSize: "70%",
            border: "1px solid silver",
            padding: ".2em .5em"
        },
        "&light .cm-textfield": {
            backgroundColor: "white"
        },
        "&dark .cm-textfield": {
            border: "1px solid #555",
            backgroundColor: "inherit"
        }
    }, lightDarkIDs);
 
    class DOMChange {
        constructor(view, start, end, typeOver) {
            this.typeOver = typeOver;
            this.bounds = null;
            this.text = "";
            let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
            if (view.state.readOnly && start > -1) {
                // Ignore changes when the editor is read-only
                this.newSel = null;
            }
            else if (start > -1 && (this.bounds = view.docView.domBoundsAround(start, end, 0))) {
                let selPoints = iHead || iAnchor ? [] : selectionPoints(view);
                let reader = new DOMReader(selPoints, view.state);
                reader.readRange(this.bounds.startDOM, this.bounds.endDOM);
                this.text = reader.text;
                this.newSel = selectionFromPoints(selPoints, this.bounds.from);
            }
            else {
                let domSel = view.observer.selectionRange;
                let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
                    !contains(view.contentDOM, domSel.focusNode)
                    ? view.state.selection.main.head
                    : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
                let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
                    !contains(view.contentDOM, domSel.anchorNode)
                    ? view.state.selection.main.anchor
                    : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
                this.newSel = EditorSelection.single(anchor, head);
            }
        }
    }
    function applyDOMChange(view, domChange) {
        let change;
        let { newSel } = domChange, sel = view.state.selection.main;
        let lastKey = view.inputState.lastKeyTime > Date.now() - 100 ? view.inputState.lastKeyCode : -1;
        if (domChange.bounds) {
            let { from, to } = domChange.bounds;
            let preferredPos = sel.from, preferredSide = null;
            // Prefer anchoring to end when Backspace is pressed (or, on
            // Android, when something was deleted)
            if (lastKey === 8 || browser.android && domChange.text.length < to - from) {
                preferredPos = sel.to;
                preferredSide = "end";
            }
            let diff = findDiff(view.state.doc.sliceString(from, to, LineBreakPlaceholder), domChange.text, preferredPos - from, preferredSide);
            if (diff) {
                // Chrome inserts two newlines when pressing shift-enter at the
                // end of a line. DomChange drops one of those.
                if (browser.chrome && lastKey == 13 &&
                    diff.toB == diff.from + 2 && domChange.text.slice(diff.from, diff.toB) == LineBreakPlaceholder + LineBreakPlaceholder)
                    diff.toB--;
                change = { from: from + diff.from, to: from + diff.toA,
                    insert: Text.of(domChange.text.slice(diff.from, diff.toB).split(LineBreakPlaceholder)) };
            }
        }
        else if (newSel && (!view.hasFocus && view.state.facet(editable) || newSel.main.eq(sel))) {
            newSel = null;
        }
        if (!change && !newSel)
            return false;
        if (!change && domChange.typeOver && !sel.empty && newSel && newSel.main.empty) {
            // Heuristic to notice typing over a selected character
            change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
        }
        else if (change && change.from >= sel.from && change.to <= sel.to &&
            (change.from != sel.from || change.to != sel.to) &&
            (sel.to - sel.from) - (change.to - change.from) <= 4) {
            // If the change is inside the selection and covers most of it,
            // assume it is a selection replace (with identical characters at
            // the start/end not included in the diff)
            change = {
                from: sel.from, to: sel.to,
                insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
            };
        }
        else if ((browser.mac || browser.android) && change && change.from == change.to && change.from == sel.head - 1 &&
            /^\. ?$/.test(change.insert.toString()) && view.contentDOM.getAttribute("autocorrect") == "off") {
            // Detect insert-period-on-double-space Mac and Android behavior,
            // and transform it into a regular space insert.
            if (newSel && change.insert.length == 2)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        else if (browser.chrome && change && change.from == change.to && change.from == sel.head &&
            change.insert.toString() == "\n " && view.lineWrapping) {
            // In Chrome, if you insert a space at the start of a wrapped
            // line, it will actually insert a newline and a space, causing a
            // bogus new line to be created in CodeMirror (#968)
            if (newSel)
                newSel = EditorSelection.single(newSel.main.anchor - 1, newSel.main.head - 1);
            change = { from: sel.from, to: sel.to, insert: Text.of([" "]) };
        }
        if (change) {
            if (browser.ios && view.inputState.flushIOSKey(view))
                return true;
            // Android browsers don't fire reasonable key events for enter,
            // backspace, or delete. So this detects changes that look like
            // they're caused by those keys, and reinterprets them as key
            // events. (Some of these keys are also handled by beforeinput
            // events and the pendingAndroidKey mechanism, but that's not
            // reliable in all situations.)
            if (browser.android &&
                ((change.from == sel.from && change.to == sel.to &&
                    change.insert.length == 1 && change.insert.lines == 2 &&
                    dispatchKey(view.contentDOM, "Enter", 13)) ||
                    ((change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 ||
                        lastKey == 8 && change.insert.length < change.to - change.from && change.to > sel.head) &&
                        dispatchKey(view.contentDOM, "Backspace", 8)) ||
                    (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
                        dispatchKey(view.contentDOM, "Delete", 46))))
                return true;
            let text = change.insert.toString();
            if (view.inputState.composing >= 0)
                view.inputState.composing++;
            let defaultTr;
            let defaultInsert = () => defaultTr || (defaultTr = applyDefaultInsert(view, change, newSel));
            if (!view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text, defaultInsert)))
                view.dispatch(defaultInsert());
            return true;
        }
        else if (newSel && !newSel.main.eq(sel)) {
            let scrollIntoView = false, userEvent = "select";
            if (view.inputState.lastSelectionTime > Date.now() - 50) {
                if (view.inputState.lastSelectionOrigin == "select")
                    scrollIntoView = true;
                userEvent = view.inputState.lastSelectionOrigin;
            }
            view.dispatch({ selection: newSel, scrollIntoView, userEvent });
            return true;
        }
        else {
            return false;
        }
    }
    function applyDefaultInsert(view, change, newSel) {
        let tr, startState = view.state, sel = startState.selection.main;
        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length) &&
            view.inputState.composing < 0) {
            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
        }
        else {
            let changes = startState.changes(change);
            let mainSel = newSel && newSel.main.to <= changes.newLength ? newSel.main : undefined;
            // Try to apply a composition change to all cursors
            if (startState.selection.ranges.length > 1 && view.inputState.composing >= 0 &&
                change.to <= sel.to && change.to >= sel.to - 10) {
                let replaced = view.state.sliceDoc(change.from, change.to);
                let composition = findCompositionNode(view, change.insert.length - (change.to - change.from)) ||
                    view.state.doc.lineAt(sel.head);
                let offset = sel.to - change.to, size = sel.to - sel.from;
                tr = startState.changeByRange(range => {
                    if (range.from == sel.from && range.to == sel.to)
                        return { changes, range: mainSel || range.map(changes) };
                    let to = range.to - offset, from = to - replaced.length;
                    if (range.to - range.from != size || view.state.sliceDoc(from, to) != replaced ||
                        // Unfortunately, there's no way to make multiple
                        // changes in the same node work without aborting
                        // composition, so cursors in the composition range are
                        // ignored.
                        composition && range.to >= composition.from && range.from <= composition.to)
                        return { range };
                    let rangeChanges = startState.changes({ from, to, insert: change.insert }), selOff = range.to - sel.to;
                    return {
                        changes: rangeChanges,
                        range: !mainSel ? range.map(rangeChanges) :
                            EditorSelection.range(Math.max(0, mainSel.anchor + selOff), Math.max(0, mainSel.head + selOff))
                    };
                });
            }
            else {
                tr = {
                    changes,
                    selection: mainSel && startState.selection.replaceRange(mainSel)
                };
            }
        }
        let userEvent = "input.type";
        if (view.composing ||
            view.inputState.compositionPendingChange && view.inputState.compositionEndedAt > Date.now() - 50) {
            view.inputState.compositionPendingChange = false;
            userEvent += ".compose";
            if (view.inputState.compositionFirstChange) {
                userEvent += ".start";
                view.inputState.compositionFirstChange = false;
            }
        }
        return startState.update(tr, { userEvent, scrollIntoView: true });
    }
    function findDiff(a, b, preferredPos, preferredSide) {
        let minLen = Math.min(a.length, b.length);
        let from = 0;
        while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
            from++;
        if (from == minLen && a.length == b.length)
            return null;
        let toA = a.length, toB = b.length;
        while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
            toA--;
            toB--;
        }
        if (preferredSide == "end") {
            let adjust = Math.max(0, from - Math.min(toA, toB));
            preferredPos -= toA + adjust - from;
        }
        if (toA < from && a.length < b.length) {
            let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
            from -= move;
            toB = from + (toB - toA);
            toA = from;
        }
        else if (toB < from) {
            let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
            from -= move;
            toA = from + (toA - toB);
            toB = from;
        }
        return { from, toA, toB };
    }
    function selectionPoints(view) {
        let result = [];
        if (view.root.activeElement != view.contentDOM)
            return result;
        let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
        if (anchorNode) {
            result.push(new DOMPoint(anchorNode, anchorOffset));
            if (focusNode != anchorNode || focusOffset != anchorOffset)
                result.push(new DOMPoint(focusNode, focusOffset));
        }
        return result;
    }
    function selectionFromPoints(points, base) {
        if (points.length == 0)
            return null;
        let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
        return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
    }
 
    const observeOptions = {
        childList: true,
        characterData: true,
        subtree: true,
        attributes: true,
        characterDataOldValue: true
    };
    // IE11 has very broken mutation observers, so we also listen to
    // DOMCharacterDataModified there
    const useCharData = browser.ie && browser.ie_version <= 11;
    class DOMObserver {
        constructor(view) {
            this.view = view;
            this.active = false;
            // The known selection. Kept in our own object, as opposed to just
            // directly accessing the selection because:
            //  - Safari doesn't report the right selection in shadow DOM
            //  - Reading from the selection forces a DOM layout
            //  - This way, we can ignore selectionchange events if we have
            //    already seen the 'new' selection
            this.selectionRange = new DOMSelectionState;
            // Set when a selection change is detected, cleared on flush
            this.selectionChanged = false;
            this.delayedFlush = -1;
            this.resizeTimeout = -1;
            this.queue = [];
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
            this.lastChange = 0;
            this.scrollTargets = [];
            this.intersection = null;
            this.resizeScroll = null;
            this.resizeContent = null;
            this.intersecting = false;
            this.gapIntersection = null;
            this.gaps = [];
            // Timeout for scheduling check of the parents that need scroll handlers
            this.parentCheck = -1;
            this.dom = view.contentDOM;
            this.observer = new MutationObserver(mutations => {
                for (let mut of mutations)
                    this.queue.push(mut);
                // IE11 will sometimes (on typing over a selection or
                // backspacing out a single character text node) call the
                // observer callback before actually updating the DOM.
                //
                // Unrelatedly, iOS Safari will, when ending a composition,
                // sometimes first clear it, deliver the mutations, and then
                // reinsert the finished text. CodeMirror's handling of the
                // deletion will prevent the reinsertion from happening,
                // breaking composition.
                if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
                    mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                        m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                    this.flushSoon();
                else
                    this.flush();
            });
            if (useCharData)
                this.onCharData = (event) => {
                    this.queue.push({ target: event.target,
                        type: "characterData",
                        oldValue: event.prevValue });
                    this.flushSoon();
                };
            this.onSelectionChange = this.onSelectionChange.bind(this);
            this.onResize = this.onResize.bind(this);
            this.onPrint = this.onPrint.bind(this);
            this.onScroll = this.onScroll.bind(this);
            if (typeof ResizeObserver == "function") {
                this.resizeScroll = new ResizeObserver(() => {
                    var _a;
                    if (((_a = this.view.docView) === null || _a === void 0 ? void 0 : _a.lastUpdate) < Date.now() - 75)
                        this.onResize();
                });
                this.resizeScroll.observe(view.scrollDOM);
                this.resizeContent = new ResizeObserver(() => this.view.requestMeasure());
                this.resizeContent.observe(view.contentDOM);
            }
            this.addWindowListeners(this.win = view.win);
            this.start();
            if (typeof IntersectionObserver == "function") {
                this.intersection = new IntersectionObserver(entries => {
                    if (this.parentCheck < 0)
                        this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
                    if (entries.length > 0 && (entries[entries.length - 1].intersectionRatio > 0) != this.intersecting) {
                        this.intersecting = !this.intersecting;
                        if (this.intersecting != this.view.inView)
                            this.onScrollChanged(document.createEvent("Event"));
                    }
                }, { threshold: [0, .001] });
                this.intersection.observe(this.dom);
                this.gapIntersection = new IntersectionObserver(entries => {
                    if (entries.length > 0 && entries[entries.length - 1].intersectionRatio > 0)
                        this.onScrollChanged(document.createEvent("Event"));
                }, {});
            }
            this.listenForScroll();
            this.readSelectionRange();
        }
        onScrollChanged(e) {
            this.view.inputState.runScrollHandlers(this.view, e);
            if (this.intersecting)
                this.view.measure();
        }
        onScroll(e) {
            if (this.intersecting)
                this.flush(false);
            this.onScrollChanged(e);
        }
        onResize() {
            if (this.resizeTimeout < 0)
                this.resizeTimeout = setTimeout(() => {
                    this.resizeTimeout = -1;
                    this.view.requestMeasure();
                }, 50);
        }
        onPrint() {
            this.view.viewState.printing = true;
            this.view.measure();
            setTimeout(() => {
                this.view.viewState.printing = false;
                this.view.requestMeasure();
            }, 500);
        }
        updateGaps(gaps) {
            if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
                this.gapIntersection.disconnect();
                for (let gap of gaps)
                    this.gapIntersection.observe(gap);
                this.gaps = gaps;
            }
        }
        onSelectionChange(event) {
            let wasChanged = this.selectionChanged;
            if (!this.readSelectionRange() || this.delayedAndroidKey)
                return;
            let { view } = this, sel = this.selectionRange;
            if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
                return;
            let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
            if (context && context.ignoreEvent(event)) {
                if (!wasChanged)
                    this.selectionChanged = false;
                return;
            }
            // Deletions on IE11 fire their events in the wrong order, giving
            // us a selection change event before the DOM changes are
            // reported.
            // Chrome Android has a similar issue when backspacing out a
            // selection (#645).
            if ((browser.ie && browser.ie_version <= 11 || browser.android && browser.chrome) && !view.state.selection.main.empty &&
                // (Selection.isCollapsed isn't reliable on IE)
                sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                this.flushSoon();
            else
                this.flush(false);
        }
        readSelectionRange() {
            let { view } = this;
            // The Selection object is broken in shadow roots in Safari. See
            // https://github.com/codemirror/dev/issues/414
            let range = browser.safari && view.root.nodeType == 11 &&
                deepActiveElement(this.dom.ownerDocument) == this.dom &&
                safariSelectionRangeHack(this.view) || getSelection(view.root);
            if (!range || this.selectionRange.eq(range))
                return false;
            let local = hasSelection(this.dom, range);
            // Detect the situation where the browser has, on focus, moved the
            // selection to the start of the content element. Reset it to the
            // position from the editor state.
            if (local && !this.selectionChanged &&
                view.inputState.lastFocusTime > Date.now() - 200 &&
                view.inputState.lastTouchTime < Date.now() - 300 &&
                atElementStart(this.dom, range)) {
                this.view.inputState.lastFocusTime = 0;
                view.docView.updateSelection();
                return false;
            }
            this.selectionRange.setRange(range);
            if (local)
                this.selectionChanged = true;
            return true;
        }
        setSelectionRange(anchor, head) {
            this.selectionRange.set(anchor.node, anchor.offset, head.node, head.offset);
            this.selectionChanged = false;
        }
        clearSelectionRange() {
            this.selectionRange.set(null, 0, null, 0);
        }
        listenForScroll() {
            this.parentCheck = -1;
            let i = 0, changed = null;
            for (let dom = this.dom; dom;) {
                if (dom.nodeType == 1) {
                    if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
                        i++;
                    else if (!changed)
                        changed = this.scrollTargets.slice(0, i);
                    if (changed)
                        changed.push(dom);
                    dom = dom.assignedSlot || dom.parentNode;
                }
                else if (dom.nodeType == 11) { // Shadow root
                    dom = dom.host;
                }
                else {
                    break;
                }
            }
            if (i < this.scrollTargets.length && !changed)
                changed = this.scrollTargets.slice(0, i);
            if (changed) {
                for (let dom of this.scrollTargets)
                    dom.removeEventListener("scroll", this.onScroll);
                for (let dom of this.scrollTargets = changed)
                    dom.addEventListener("scroll", this.onScroll);
            }
        }
        ignore(f) {
            if (!this.active)
                return f();
            try {
                this.stop();
                return f();
            }
            finally {
                this.start();
                this.clear();
            }
        }
        start() {
            if (this.active)
                return;
            this.observer.observe(this.dom, observeOptions);
            if (useCharData)
                this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
            this.active = true;
        }
        stop() {
            if (!this.active)
                return;
            this.active = false;
            this.observer.disconnect();
            if (useCharData)
                this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
        }
        // Throw away any pending changes
        clear() {
            this.processRecords();
            this.queue.length = 0;
            this.selectionChanged = false;
        }
        // Chrome Android, especially in combination with GBoard, not only
        // doesn't reliably fire regular key events, but also often
        // surrounds the effect of enter or backspace with a bunch of
        // composition events that, when interrupted, cause text duplication
        // or other kinds of corruption. This hack makes the editor back off
        // from handling DOM changes for a moment when such a key is
        // detected (via beforeinput or keydown), and then tries to flush
        // them or, if that has no effect, dispatches the given key.
        delayAndroidKey(key, keyCode) {
            var _a;
            if (!this.delayedAndroidKey) {
                let flush = () => {
                    let key = this.delayedAndroidKey;
                    if (key) {
                        this.clearDelayedAndroidKey();
                        this.view.inputState.lastKeyCode = key.keyCode;
                        this.view.inputState.lastKeyTime = Date.now();
                        let flushed = this.flush();
                        if (!flushed && key.force)
                            dispatchKey(this.dom, key.key, key.keyCode);
                    }
                };
                this.flushingAndroidKey = this.view.win.requestAnimationFrame(flush);
            }
            // Since backspace beforeinput is sometimes signalled spuriously,
            // Enter always takes precedence.
            if (!this.delayedAndroidKey || key == "Enter")
                this.delayedAndroidKey = {
                    key, keyCode,
                    // Only run the key handler when no changes are detected if
                    // this isn't coming right after another change, in which case
                    // it is probably part of a weird chain of updates, and should
                    // be ignored if it returns the DOM to its previous state.
                    force: this.lastChange < Date.now() - 50 || !!((_a = this.delayedAndroidKey) === null || _a === void 0 ? void 0 : _a.force)
                };
        }
        clearDelayedAndroidKey() {
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
            this.delayedAndroidKey = null;
            this.flushingAndroidKey = -1;
        }
        flushSoon() {
            if (this.delayedFlush < 0)
                this.delayedFlush = this.view.win.requestAnimationFrame(() => { this.delayedFlush = -1; this.flush(); });
        }
        forceFlush() {
            if (this.delayedFlush >= 0) {
                this.view.win.cancelAnimationFrame(this.delayedFlush);
                this.delayedFlush = -1;
            }
            this.flush();
        }
        pendingRecords() {
            for (let mut of this.observer.takeRecords())
                this.queue.push(mut);
            return this.queue;
        }
        processRecords() {
            let records = this.pendingRecords();
            if (records.length)
                this.queue = [];
            let from = -1, to = -1, typeOver = false;
            for (let record of records) {
                let range = this.readMutation(record);
                if (!range)
                    continue;
                if (range.typeOver)
                    typeOver = true;
                if (from == -1) {
                    ({ from, to } = range);
                }
                else {
                    from = Math.min(range.from, from);
                    to = Math.max(range.to, to);
                }
            }
            return { from, to, typeOver };
        }
        readChange() {
            let { from, to, typeOver } = this.processRecords();
            let newSel = this.selectionChanged && hasSelection(this.dom, this.selectionRange);
            if (from < 0 && !newSel)
                return null;
            if (from > -1)
                this.lastChange = Date.now();
            this.view.inputState.lastFocusTime = 0;
            this.selectionChanged = false;
            return new DOMChange(this.view, from, to, typeOver);
        }
        // Apply pending changes, if any
        flush(readSelection = true) {
            // Completely hold off flushing when pending keys are set—the code
            // managing those will make sure processRecords is called and the
            // view is resynchronized after
            if (this.delayedFlush >= 0 || this.delayedAndroidKey)
                return false;
            if (readSelection)
                this.readSelectionRange();
            let domChange = this.readChange();
            if (!domChange)
                return false;
            let startState = this.view.state;
            let handled = applyDOMChange(this.view, domChange);
            // The view wasn't updated
            if (this.view.state == startState)
                this.view.update([]);
            return handled;
        }
        readMutation(rec) {
            let cView = this.view.docView.nearest(rec.target);
            if (!cView || cView.ignoreMutation(rec))
                return null;
            cView.markDirty(rec.type == "attributes");
            if (rec.type == "attributes")
                cView.flags |= 4 /* ViewFlag.AttrsDirty */;
            if (rec.type == "childList") {
                let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
                let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
                return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
                    to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
            }
            else if (rec.type == "characterData") {
                return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
            }
            else {
                return null;
            }
        }
        setWindow(win) {
            if (win != this.win) {
                this.removeWindowListeners(this.win);
                this.win = win;
                this.addWindowListeners(this.win);
            }
        }
        addWindowListeners(win) {
            win.addEventListener("resize", this.onResize);
            win.addEventListener("beforeprint", this.onPrint);
            win.addEventListener("scroll", this.onScroll);
            win.document.addEventListener("selectionchange", this.onSelectionChange);
        }
        removeWindowListeners(win) {
            win.removeEventListener("scroll", this.onScroll);
            win.removeEventListener("resize", this.onResize);
            win.removeEventListener("beforeprint", this.onPrint);
            win.document.removeEventListener("selectionchange", this.onSelectionChange);
        }
        destroy() {
            var _a, _b, _c, _d;
            this.stop();
            (_a = this.intersection) === null || _a === void 0 ? void 0 : _a.disconnect();
            (_b = this.gapIntersection) === null || _b === void 0 ? void 0 : _b.disconnect();
            (_c = this.resizeScroll) === null || _c === void 0 ? void 0 : _c.disconnect();
            (_d = this.resizeContent) === null || _d === void 0 ? void 0 : _d.disconnect();
            for (let dom of this.scrollTargets)
                dom.removeEventListener("scroll", this.onScroll);
            this.removeWindowListeners(this.win);
            clearTimeout(this.parentCheck);
            clearTimeout(this.resizeTimeout);
            this.win.cancelAnimationFrame(this.delayedFlush);
            this.win.cancelAnimationFrame(this.flushingAndroidKey);
        }
    }
    function findChild(cView, dom, dir) {
        while (dom) {
            let curView = ContentView.get(dom);
            if (curView && curView.parent == cView)
                return curView;
            let parent = dom.parentNode;
            dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
        }
        return null;
    }
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    function safariSelectionRangeHack(view) {
        let found = null;
        // Because Safari (at least in 2018-2021) doesn't provide regular
        // access to the selection inside a shadowroot, we have to perform a
        // ridiculous hack to get at it—using `execCommand` to trigger a
        // `beforeInput` event so that we can read the target range from the
        // event.
        function read(event) {
            event.preventDefault();
            event.stopImmediatePropagation();
            found = event.getTargetRanges()[0];
        }
        view.contentDOM.addEventListener("beforeinput", read, true);
        view.dom.ownerDocument.execCommand("indent");
        view.contentDOM.removeEventListener("beforeinput", read, true);
        if (!found)
            return null;
        let anchorNode = found.startContainer, anchorOffset = found.startOffset;
        let focusNode = found.endContainer, focusOffset = found.endOffset;
        let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
        // Since such a range doesn't distinguish between anchor and head,
        // use a heuristic that flips it around if its end matches the
        // current anchor.
        if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
            [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
        return { anchorNode, anchorOffset, focusNode, focusOffset };
    }
 
    // The editor's update state machine looks something like this:
    //
    //     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
    //                                         ↑      ↓
    //                                         Updating (measure)
    //
    // The difference between 'Idle' and 'Idle (unchecked)' lies in
    // whether a layout check has been scheduled. A regular update through
    // the `update` method updates the DOM in a write-only fashion, and
    // relies on a check (scheduled with `requestAnimationFrame`) to make
    // sure everything is where it should be and the viewport covers the
    // visible code. That check continues to measure and then optionally
    // update until it reaches a coherent state.
    /**
    An editor view represents the editor's user interface. It holds
    the editable DOM surface, and possibly other elements such as the
    line number gutter. It handles events and dispatches state
    transactions for editing actions.
    */
    class EditorView {
        /**
        The current editor state.
        */
        get state() { return this.viewState.state; }
        /**
        To be able to display large documents without consuming too much
        memory or overloading the browser, CodeMirror only draws the
        code that is visible (plus a margin around it) to the DOM. This
        property tells you the extent of the current drawn viewport, in
        document positions.
        */
        get viewport() { return this.viewState.viewport; }
        /**
        When there are, for example, large collapsed ranges in the
        viewport, its size can be a lot bigger than the actual visible
        content. Thus, if you are doing something like styling the
        content in the viewport, it is preferable to only do so for
        these ranges, which are the subset of the viewport that is
        actually drawn.
        */
        get visibleRanges() { return this.viewState.visibleRanges; }
        /**
        Returns false when the editor is entirely scrolled out of view
        or otherwise hidden.
        */
        get inView() { return this.viewState.inView; }
        /**
        Indicates whether the user is currently composing text via
        [IME](https://en.wikipedia.org/wiki/Input_method), and at least
        one change has been made in the current composition.
        */
        get composing() { return this.inputState.composing > 0; }
        /**
        Indicates whether the user is currently in composing state. Note
        that on some platforms, like Android, this will be the case a
        lot, since just putting the cursor on a word starts a
        composition there.
        */
        get compositionStarted() { return this.inputState.composing >= 0; }
        /**
        The document or shadow root that the view lives in.
        */
        get root() { return this._root; }
        /**
        @internal
        */
        get win() { return this.dom.ownerDocument.defaultView || window; }
        /**
        Construct a new view. You'll want to either provide a `parent`
        option, or put `view.dom` into your document after creating a
        view, so that the user can see the editor.
        */
        constructor(config = {}) {
            this.plugins = [];
            this.pluginMap = new Map;
            this.editorAttrs = {};
            this.contentAttrs = {};
            this.bidiCache = [];
            this.destroyed = false;
            /**
            @internal
            */
            this.updateState = 2 /* UpdateState.Updating */;
            /**
            @internal
            */
            this.measureScheduled = -1;
            /**
            @internal
            */
            this.measureRequests = [];
            this.contentDOM = document.createElement("div");
            this.scrollDOM = document.createElement("div");
            this.scrollDOM.tabIndex = -1;
            this.scrollDOM.className = "cm-scroller";
            this.scrollDOM.appendChild(this.contentDOM);
            this.announceDOM = document.createElement("div");
            this.announceDOM.style.cssText = "position: fixed; top: -10000px";
            this.announceDOM.setAttribute("aria-live", "polite");
            this.dom = document.createElement("div");
            this.dom.appendChild(this.announceDOM);
            this.dom.appendChild(this.scrollDOM);
            let { dispatch } = config;
            this.dispatchTransactions = config.dispatchTransactions ||
                (dispatch && ((trs) => trs.forEach(tr => dispatch(tr, this)))) ||
                ((trs) => this.update(trs));
            this.dispatch = this.dispatch.bind(this);
            this._root = (config.root || getRoot(config.parent) || document);
            this.viewState = new ViewState(config.state || EditorState.create(config));
            this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec));
            for (let plugin of this.plugins)
                plugin.update(this);
            this.observer = new DOMObserver(this);
            this.inputState = new InputState(this);
            this.inputState.ensureHandlers(this, this.plugins);
            this.docView = new DocView(this);
            this.mountStyles();
            this.updateAttrs();
            this.updateState = 0 /* UpdateState.Idle */;
            this.requestMeasure();
            if (config.parent)
                config.parent.appendChild(this.dom);
        }
        dispatch(...input) {
            let trs = input.length == 1 && input[0] instanceof Transaction ? input
                : input.length == 1 && Array.isArray(input[0]) ? input[0]
                    : [this.state.update(...input)];
            this.dispatchTransactions(trs, this);
        }
        /**
        Update the view for the given array of transactions. This will
        update the visible document and selection to match the state
        produced by the transactions, and notify view plugins of the
        change. You should usually call
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
        as a primitive.
        */
        update(transactions) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
            let redrawn = false, attrsChanged = false, update;
            let state = this.state;
            for (let tr of transactions) {
                if (tr.startState != state)
                    throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
                state = tr.state;
            }
            if (this.destroyed) {
                this.viewState.state = state;
                return;
            }
            let focus = this.hasFocus, focusFlag = 0, dispatchFocus = null;
            if (transactions.some(tr => tr.annotation(isFocusChange))) {
                this.inputState.notifiedFocused = focus;
                // If a focus-change transaction is being dispatched, set this update flag.
                focusFlag = 1 /* UpdateFlag.Focus */;
            }
            else if (focus != this.inputState.notifiedFocused) {
                this.inputState.notifiedFocused = focus;
                // Schedule a separate focus transaction if necessary, otherwise
                // add a flag to this update
                dispatchFocus = focusChangeTransaction(state, focus);
                if (!dispatchFocus)
                    focusFlag = 1 /* UpdateFlag.Focus */;
            }
            // If there was a pending DOM change, eagerly read it and try to
            // apply it after the given transactions.
            let pendingKey = this.observer.delayedAndroidKey, domChange = null;
            if (pendingKey) {
                this.observer.clearDelayedAndroidKey();
                domChange = this.observer.readChange();
                // Only try to apply DOM changes if the transactions didn't
                // change the doc or selection.
                if (domChange && !this.state.doc.eq(state.doc) || !this.state.selection.eq(state.selection))
                    domChange = null;
            }
            else {
                this.observer.clear();
            }
            // When the phrases change, redraw the editor
            if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
                return this.setState(state);
            update = ViewUpdate.create(this, state, transactions);
            update.flags |= focusFlag;
            let scrollTarget = this.viewState.scrollTarget;
            try {
                this.updateState = 2 /* UpdateState.Updating */;
                for (let tr of transactions) {
                    if (scrollTarget)
                        scrollTarget = scrollTarget.map(tr.changes);
                    if (tr.scrollIntoView) {
                        let { main } = tr.state.selection;
                        scrollTarget = new ScrollTarget(main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1));
                    }
                    for (let e of tr.effects)
                        if (e.is(scrollIntoView))
                            scrollTarget = e.value;
                }
                this.viewState.update(update, scrollTarget);
                this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
                if (!update.empty) {
                    this.updatePlugins(update);
                    this.inputState.update(update);
                }
                redrawn = this.docView.update(update);
                if (this.state.facet(styleModule) != this.styleModules)
                    this.mountStyles();
                attrsChanged = this.updateAttrs();
                this.showAnnouncements(transactions);
                this.docView.updateSelection(redrawn, transactions.some(tr => tr.isUserEvent("select.pointer")));
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (update.startState.facet(theme) != update.state.facet(theme))
                this.viewState.mustMeasureContent = true;
            if (redrawn || attrsChanged || scrollTarget || this.viewState.mustEnforceCursorAssoc || this.viewState.mustMeasureContent)
                this.requestMeasure();
            if (!update.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(update);
            if (dispatchFocus || domChange)
                Promise.resolve().then(() => {
                    if (dispatchFocus && this.state == dispatchFocus.startState)
                        this.dispatch(dispatchFocus);
                    if (domChange) {
                        if (!applyDOMChange(this, domChange) && pendingKey.force)
                            dispatchKey(this.contentDOM, pendingKey.key, pendingKey.keyCode);
                    }
                });
        }
        /**
        Reset the view to the given state. (This will cause the entire
        document to be redrawn and all view plugins to be reinitialized,
        so you should probably only use it when the new state isn't
        derived from the old state. Otherwise, use
        [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
        */
        setState(newState) {
            if (this.updateState != 0 /* UpdateState.Idle */)
                throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
            if (this.destroyed) {
                this.viewState.state = newState;
                return;
            }
            this.updateState = 2 /* UpdateState.Updating */;
            let hadFocus = this.hasFocus;
            try {
                for (let plugin of this.plugins)
                    plugin.destroy(this);
                this.viewState = new ViewState(newState);
                this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec));
                this.pluginMap.clear();
                for (let plugin of this.plugins)
                    plugin.update(this);
                this.docView = new DocView(this);
                this.inputState.ensureHandlers(this, this.plugins);
                this.mountStyles();
                this.updateAttrs();
                this.bidiCache = [];
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
            }
            if (hadFocus)
                this.focus();
            this.requestMeasure();
        }
        updatePlugins(update) {
            let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
            if (prevSpecs != specs) {
                let newPlugins = [];
                for (let spec of specs) {
                    let found = prevSpecs.indexOf(spec);
                    if (found < 0) {
                        newPlugins.push(new PluginInstance(spec));
                    }
                    else {
                        let plugin = this.plugins[found];
                        plugin.mustUpdate = update;
                        newPlugins.push(plugin);
                    }
                }
                for (let plugin of this.plugins)
                    if (plugin.mustUpdate != update)
                        plugin.destroy(this);
                this.plugins = newPlugins;
                this.pluginMap.clear();
                this.inputState.ensureHandlers(this, this.plugins);
            }
            else {
                for (let p of this.plugins)
                    p.mustUpdate = update;
            }
            for (let i = 0; i < this.plugins.length; i++)
                this.plugins[i].update(this);
        }
        /**
        @internal
        */
        measure(flush = true) {
            if (this.destroyed)
                return;
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            if (this.observer.delayedAndroidKey) {
                this.measureScheduled = -1;
                this.requestMeasure();
                return;
            }
            this.measureScheduled = 0; // Prevent requestMeasure calls from scheduling another animation frame
            if (flush)
                this.observer.forceFlush();
            let updated = null;
            let sDOM = this.scrollDOM, scrollTop = sDOM.scrollTop * this.scaleY;
            let { scrollAnchorPos, scrollAnchorHeight } = this.viewState;
            if (Math.abs(scrollTop - this.viewState.scrollTop) > 1)
                scrollAnchorHeight = -1;
            this.viewState.scrollAnchorHeight = -1;
            try {
                for (let i = 0;; i++) {
                    if (scrollAnchorHeight < 0) {
                        if (isScrolledToBottom(sDOM)) {
                            scrollAnchorPos = -1;
                            scrollAnchorHeight = this.viewState.heightMap.height;
                        }
                        else {
                            let block = this.viewState.scrollAnchorAt(scrollTop);
                            scrollAnchorPos = block.from;
                            scrollAnchorHeight = block.top;
                        }
                    }
                    this.updateState = 1 /* UpdateState.Measuring */;
                    let changed = this.viewState.measure(this);
                    if (!changed && !this.measureRequests.length && this.viewState.scrollTarget == null)
                        break;
                    if (i > 5) {
                        console.warn(this.measureRequests.length
                            ? "Measure loop restarted more than 5 times"
                            : "Viewport failed to stabilize");
                        break;
                    }
                    let measuring = [];
                    // Only run measure requests in this cycle when the viewport didn't change
                    if (!(changed & 4 /* UpdateFlag.Viewport */))
                        [this.measureRequests, measuring] = [measuring, this.measureRequests];
                    let measured = measuring.map(m => {
                        try {
                            return m.read(this);
                        }
                        catch (e) {
                            logException(this.state, e);
                            return BadMeasure;
                        }
                    });
                    let update = ViewUpdate.create(this, this.state, []), redrawn = false;
                    update.flags |= changed;
                    if (!updated)
                        updated = update;
                    else
                        updated.flags |= changed;
                    this.updateState = 2 /* UpdateState.Updating */;
                    if (!update.empty) {
                        this.updatePlugins(update);
                        this.inputState.update(update);
                        this.updateAttrs();
                        redrawn = this.docView.update(update);
                    }
                    for (let i = 0; i < measuring.length; i++)
                        if (measured[i] != BadMeasure) {
                            try {
                                let m = measuring[i];
                                if (m.write)
                                    m.write(measured[i], this);
                            }
                            catch (e) {
                                logException(this.state, e);
                            }
                        }
                    if (redrawn)
                        this.docView.updateSelection(true);
                    if (!update.viewportChanged && this.measureRequests.length == 0) {
                        if (this.viewState.editorHeight) {
                            if (this.viewState.scrollTarget) {
                                this.docView.scrollIntoView(this.viewState.scrollTarget);
                                this.viewState.scrollTarget = null;
                                continue;
                            }
                            else {
                                let newAnchorHeight = scrollAnchorPos < 0 ? this.viewState.heightMap.height :
                                    this.viewState.lineBlockAt(scrollAnchorPos).top;
                                let diff = newAnchorHeight - scrollAnchorHeight;
                                if (diff > 1 || diff < -1) {
                                    scrollTop = scrollTop + diff;
                                    sDOM.scrollTop = scrollTop / this.scaleY;
                                    scrollAnchorHeight = -1;
                                    continue;
                                }
                            }
                        }
                        break;
                    }
                }
            }
            finally {
                this.updateState = 0 /* UpdateState.Idle */;
                this.measureScheduled = -1;
            }
            if (updated && !updated.empty)
                for (let listener of this.state.facet(updateListener))
                    listener(updated);
        }
        /**
        Get the CSS classes for the currently active editor themes.
        */
        get themeClasses() {
            return baseThemeID + " " +
                (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
                this.state.facet(theme);
        }
        updateAttrs() {
            let editorAttrs = attrsFromFacet(this, editorAttributes, {
                class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
            });
            let contentAttrs = {
                spellcheck: "false",
                autocorrect: "off",
                autocapitalize: "off",
                translate: "no",
                contenteditable: !this.state.facet(editable) ? "false" : "true",
                class: "cm-content",
                style: `${browser.tabSize}: ${this.state.tabSize}`,
                role: "textbox",
                "aria-multiline": "true"
            };
            if (this.state.readOnly)
                contentAttrs["aria-readonly"] = "true";
            attrsFromFacet(this, contentAttributes, contentAttrs);
            let changed = this.observer.ignore(() => {
                let changedContent = updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
                let changedEditor = updateAttrs(this.dom, this.editorAttrs, editorAttrs);
                return changedContent || changedEditor;
            });
            this.editorAttrs = editorAttrs;
            this.contentAttrs = contentAttrs;
            return changed;
        }
        showAnnouncements(trs) {
            let first = true;
            for (let tr of trs)
                for (let effect of tr.effects)
                    if (effect.is(EditorView.announce)) {
                        if (first)
                            this.announceDOM.textContent = "";
                        first = false;
                        let div = this.announceDOM.appendChild(document.createElement("div"));
                        div.textContent = effect.value;
                    }
        }
        mountStyles() {
            this.styleModules = this.state.facet(styleModule);
            let nonce = this.state.facet(EditorView.cspNonce);
            StyleModule.mount(this.root, this.styleModules.concat(baseTheme$1).reverse(), nonce ? { nonce } : undefined);
        }
        readMeasured() {
            if (this.updateState == 2 /* UpdateState.Updating */)
                throw new Error("Reading the editor layout isn't allowed during an update");
            if (this.updateState == 0 /* UpdateState.Idle */ && this.measureScheduled > -1)
                this.measure(false);
        }
        /**
        Schedule a layout measurement, optionally providing callbacks to
        do custom DOM measuring followed by a DOM write phase. Using
        this is preferable reading DOM layout directly from, for
        example, an event handler, because it'll make sure measuring and
        drawing done by other components is synchronized, avoiding
        unnecessary DOM layout computations.
        */
        requestMeasure(request) {
            if (this.measureScheduled < 0)
                this.measureScheduled = this.win.requestAnimationFrame(() => this.measure());
            if (request) {
                if (this.measureRequests.indexOf(request) > -1)
                    return;
                if (request.key != null)
                    for (let i = 0; i < this.measureRequests.length; i++) {
                        if (this.measureRequests[i].key === request.key) {
                            this.measureRequests[i] = request;
                            return;
                        }
                    }
                this.measureRequests.push(request);
            }
        }
        /**
        Get the value of a specific plugin, if present. Note that
        plugins that crash can be dropped from a view, so even when you
        know you registered a given plugin, it is recommended to check
        the return value of this method.
        */
        plugin(plugin) {
            let known = this.pluginMap.get(plugin);
            if (known === undefined || known && known.spec != plugin)
                this.pluginMap.set(plugin, known = this.plugins.find(p => p.spec == plugin) || null);
            return known && known.update(this).value;
        }
        /**
        The top position of the document, in screen coordinates. This
        may be negative when the editor is scrolled down. Points
        directly to the top of the first line, not above the padding.
        */
        get documentTop() {
            return this.contentDOM.getBoundingClientRect().top + this.viewState.paddingTop;
        }
        /**
        Reports the padding above and below the document.
        */
        get documentPadding() {
            return { top: this.viewState.paddingTop, bottom: this.viewState.paddingBottom };
        }
        /**
        If the editor is transformed with CSS, this provides the scale
        along the X axis. Otherwise, it will just be 1. Note that
        transforms other than translation and scaling are not supported.
        */
        get scaleX() { return this.viewState.scaleX; }
        /**
        Provide the CSS transformed scale along the Y axis.
        */
        get scaleY() { return this.viewState.scaleY; }
        /**
        Find the text line or block widget at the given vertical
        position (which is interpreted as relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop)).
        */
        elementAtHeight(height) {
            this.readMeasured();
            return this.viewState.elementAtHeight(height);
        }
        /**
        Find the line block (see
        [`lineBlockAt`](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) at the given
        height, again interpreted relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop).
        */
        lineBlockAtHeight(height) {
            this.readMeasured();
            return this.viewState.lineBlockAtHeight(height);
        }
        /**
        Get the extent and vertical position of all [line
        blocks](https://codemirror.net/6/docs/ref/#view.EditorView.lineBlockAt) in the viewport. Positions
        are relative to the [top of the
        document](https://codemirror.net/6/docs/ref/#view.EditorView.documentTop);
        */
        get viewportLineBlocks() {
            return this.viewState.viewportLines;
        }
        /**
        Find the line block around the given document position. A line
        block is a range delimited on both sides by either a
        non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^replace) line breaks, or the
        start/end of the document. It will usually just hold a line of
        text, but may be broken into multiple textblocks by block
        widgets.
        */
        lineBlockAt(pos) {
            return this.viewState.lineBlockAt(pos);
        }
        /**
        The editor's total content height.
        */
        get contentHeight() {
            return this.viewState.contentHeight;
        }
        /**
        Move a cursor position by [grapheme
        cluster](https://codemirror.net/6/docs/ref/#state.findClusterBreak). `forward` determines whether
        the motion is away from the line start, or towards it. In
        bidirectional text, the line is traversed in visual order, using
        the editor's [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
        When the start position was the last one on the line, the
        returned position will be across the line break. If there is no
        further line, the original position is returned.
        
        By default, this method moves over a single cluster. The
        optional `by` argument can be used to move across more. It will
        be called with the first cluster as argument, and should return
        a predicate that determines, for each subsequent cluster,
        whether it should also be moved over.
        */
        moveByChar(start, forward, by) {
            return skipAtoms(this, start, moveByChar(this, start, forward, by));
        }
        /**
        Move a cursor position across the next group of either
        [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
        non-whitespace characters.
        */
        moveByGroup(start, forward) {
            return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
        }
        /**
        Move to the next line boundary in the given direction. If
        `includeWrap` is true, line wrapping is on, and there is a
        further wrap point on the current line, the wrap point will be
        returned. Otherwise this function will return the start or end
        of the line.
        */
        moveToLineBoundary(start, forward, includeWrap = true) {
            return moveToLineBoundary(this, start, forward, includeWrap);
        }
        /**
        Move a cursor position vertically. When `distance` isn't given,
        it defaults to moving to the next line (including wrapped
        lines). Otherwise, `distance` should provide a positive distance
        in pixels.
        
        When `start` has a
        [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
        motion will use that as a target horizontal position. Otherwise,
        the cursor's own horizontal position is used. The returned
        cursor will have its goal column set to whichever column was
        used.
        */
        moveVertically(start, forward, distance) {
            return skipAtoms(this, start, moveVertically(this, start, forward, distance));
        }
        /**
        Find the DOM parent node and offset (child offset if `node` is
        an element, character offset when it is a text node) at the
        given document position.
        
        Note that for positions that aren't currently in
        `visibleRanges`, the resulting DOM position isn't necessarily
        meaningful (it may just point before or after a placeholder
        element).
        */
        domAtPos(pos) {
            return this.docView.domAtPos(pos);
        }
        /**
        Find the document position at the given DOM node. Can be useful
        for associating positions with DOM events. Will raise an error
        when `node` isn't part of the editor content.
        */
        posAtDOM(node, offset = 0) {
            return this.docView.posFromDOM(node, offset);
        }
        posAtCoords(coords, precise = true) {
            this.readMeasured();
            return posAtCoords(this, coords, precise);
        }
        /**
        Get the screen coordinates at the given document position.
        `side` determines whether the coordinates are based on the
        element before (-1) or after (1) the position (if no element is
        available on the given side, the method will transparently use
        another strategy to get reasonable coordinates).
        */
        coordsAtPos(pos, side = 1) {
            this.readMeasured();
            let rect = this.docView.coordsAt(pos, side);
            if (!rect || rect.left == rect.right)
                return rect;
            let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
            let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
            return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
        }
        /**
        Return the rectangle around a given character. If `pos` does not
        point in front of a character that is in the viewport and
        rendered (i.e. not replaced, not a line break), this will return
        null. For space characters that are a line wrap point, this will
        return the position before the line break.
        */
        coordsForChar(pos) {
            this.readMeasured();
            return this.docView.coordsForChar(pos);
        }
        /**
        The default width of a character in the editor. May not
        accurately reflect the width of all characters (given variable
        width fonts or styling of invididual ranges).
        */
        get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
        /**
        The default height of a line in the editor. May not be accurate
        for all lines.
        */
        get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
        /**
        The text direction
        ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
        CSS property) of the editor's content element.
        */
        get textDirection() { return this.viewState.defaultTextDirection; }
        /**
        Find the text direction of the block at the given position, as
        assigned by CSS. If
        [`perLineTextDirection`](https://codemirror.net/6/docs/ref/#view.EditorView^perLineTextDirection)
        isn't enabled, or the given position is outside of the viewport,
        this will always return the same as
        [`textDirection`](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). Note that
        this may trigger a DOM layout.
        */
        textDirectionAt(pos) {
            let perLine = this.state.facet(perLineTextDirection);
            if (!perLine || pos < this.viewport.from || pos > this.viewport.to)
                return this.textDirection;
            this.readMeasured();
            return this.docView.textDirectionAt(pos);
        }
        /**
        Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
        (as determined by the
        [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
        CSS property of its content element).
        */
        get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
        /**
        Returns the bidirectional text structure of the given line
        (which should be in the current document) as an array of span
        objects. The order of these spans matches the [text
        direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
        left-to-right, the leftmost spans come first, otherwise the
        rightmost spans come first.
        */
        bidiSpans(line) {
            if (line.length > MaxBidiLine)
                return trivialOrder(line.length);
            let dir = this.textDirectionAt(line.from), isolates;
            for (let entry of this.bidiCache) {
                if (entry.from == line.from && entry.dir == dir &&
                    (entry.fresh || isolatesEq(entry.isolates, isolates = getIsolatedRanges(this, line.from, line.to))))
                    return entry.order;
            }
            if (!isolates)
                isolates = getIsolatedRanges(this, line.from, line.to);
            let order = computeOrder(line.text, dir, isolates);
            this.bidiCache.push(new CachedOrder(line.from, line.to, dir, isolates, true, order));
            return order;
        }
        /**
        Check whether the editor has focus.
        */
        get hasFocus() {
            var _a;
            // Safari return false for hasFocus when the context menu is open
            // or closing, which leads us to ignore selection changes from the
            // context menu because it looks like the editor isn't focused.
            // This kludges around that.
            return (this.dom.ownerDocument.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
                this.root.activeElement == this.contentDOM;
        }
        /**
        Put focus on the editor.
        */
        focus() {
            this.observer.ignore(() => {
                focusPreventScroll(this.contentDOM);
                this.docView.updateSelection();
            });
        }
        /**
        Update the [root](https://codemirror.net/6/docs/ref/##view.EditorViewConfig.root) in which the editor lives. This is only
        necessary when moving the editor's existing DOM to a new window or shadow root.
        */
        setRoot(root) {
            if (this._root != root) {
                this._root = root;
                this.observer.setWindow((root.nodeType == 9 ? root : root.ownerDocument).defaultView || window);
                this.mountStyles();
            }
        }
        /**
        Clean up this editor view, removing its element from the
        document, unregistering event handlers, and notifying
        plugins. The view instance can no longer be used after
        calling this.
        */
        destroy() {
            for (let plugin of this.plugins)
                plugin.destroy(this);
            this.plugins = [];
            this.inputState.destroy();
            this.dom.remove();
            this.observer.destroy();
            if (this.measureScheduled > -1)
                this.win.cancelAnimationFrame(this.measureScheduled);
            this.destroyed = true;
        }
        /**
        Returns an effect that can be
        [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a transaction to
        cause it to scroll the given position or range into view.
        */
        static scrollIntoView(pos, options = {}) {
            return scrollIntoView.of(new ScrollTarget(typeof pos == "number" ? EditorSelection.cursor(pos) : pos, options.y, options.x, options.yMargin, options.xMargin));
        }
        /**
        Returns an extension that can be used to add DOM event handlers.
        The value should be an object mapping event names to handler
        functions. For any given event, such functions are ordered by
        extension precedence, and the first handler to return true will
        be assumed to have handled that event, and no other handlers or
        built-in behavior will be activated for it. These are registered
        on the [content element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except
        for `scroll` handlers, which will be called any time the
        editor's [scroll element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of
        its parent nodes is scrolled.
        */
        static domEventHandlers(handlers) {
            return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
        }
        /**
        Create a theme extension. The first argument can be a
        [`style-mod`](https://github.com/marijnh/style-mod#documentation)
        style spec providing the styles for the theme. These will be
        prefixed with a generated class for the style.
        
        Because the selectors will be prefixed with a scope class, rule
        that directly match the editor's [wrapper
        element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
        added—need to be explicitly differentiated by adding an `&` to
        the selector for that element—for example
        `&.cm-focused`.
        
        When `dark` is set to true, the theme will be marked as dark,
        which will cause the `&dark` rules from [base
        themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
        `&light` when a light theme is active).
        */
        static theme(spec, options) {
            let prefix = StyleModule.newName();
            let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
            if (options && options.dark)
                result.push(darkTheme.of(true));
            return result;
        }
        /**
        Create an extension that adds styles to the base theme. Like
        with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
        place of the editor wrapper element when directly targeting
        that. You can also use `&dark` or `&light` instead to only
        target editors with a dark or light theme.
        */
        static baseTheme(spec) {
            return Prec.lowest(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
        }
        /**
        Retrieve an editor view instance from the view's DOM
        representation.
        */
        static findFromDOM(dom) {
            var _a;
            let content = dom.querySelector(".cm-content");
            let cView = content && ContentView.get(content) || ContentView.get(dom);
            return ((_a = cView === null || cView === void 0 ? void 0 : cView.rootView) === null || _a === void 0 ? void 0 : _a.view) || null;
        }
    }
    /**
    Facet to add a [style
    module](https://github.com/marijnh/style-mod#documentation) to
    an editor view. The view will ensure that the module is
    mounted in its [document
    root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
    */
    EditorView.styleModule = styleModule;
    /**
    An input handler can override the way changes to the editable
    DOM content are handled. Handlers are passed the document
    positions between which the change was found, and the new
    content. When one returns true, no further input handlers are
    called and the default behavior is prevented.
 
    The `insert` argument can be used to get the default transaction
    that would be applied for this input. This can be useful when
    dispatching the custom behavior as a separate transaction.
    */
    EditorView.inputHandler = inputHandler;
    /**
    This facet can be used to provide functions that create effects
    to be dispatched when the editor's focus state changes.
    */
    EditorView.focusChangeEffect = focusChangeEffect;
    /**
    By default, the editor assumes all its content has the same
    [text direction](https://codemirror.net/6/docs/ref/#view.Direction). Configure this with a `true`
    value to make it read the text direction of every (rendered)
    line separately.
    */
    EditorView.perLineTextDirection = perLineTextDirection;
    /**
    Allows you to provide a function that should be called when the
    library catches an exception from an extension (mostly from view
    plugins, but may be used by other extensions to route exceptions
    from user-code-provided callbacks). This is mostly useful for
    debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
    */
    EditorView.exceptionSink = exceptionSink;
    /**
    A facet that can be used to register a function to be called
    every time the view updates.
    */
    EditorView.updateListener = updateListener;
    /**
    Facet that controls whether the editor content DOM is editable.
    When its highest-precedence value is `false`, the element will
    not have its `contenteditable` attribute set. (Note that this
    doesn't affect API calls that change the editor content, even
    when those are bound to keys or buttons. See the
    [`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
    */
    EditorView.editable = editable;
    /**
    Allows you to influence the way mouse selection happens. The
    functions in this facet will be called for a `mousedown` event
    on the editor, and can return an object that overrides the way a
    selection is computed from that mouse click or drag.
    */
    EditorView.mouseSelectionStyle = mouseSelectionStyle;
    /**
    Facet used to configure whether a given selection drag event
    should move or copy the selection. The given predicate will be
    called with the `mousedown` event, and can return `true` when
    the drag should move the content.
    */
    EditorView.dragMovesSelection = dragMovesSelection$1;
    /**
    Facet used to configure whether a given selecting click adds a
    new range to the existing selection or replaces it entirely. The
    default behavior is to check `event.metaKey` on macOS, and
    `event.ctrlKey` elsewhere.
    */
    EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
    /**
    A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
    are shown in the view. Decorations can be provided in two
    ways—directly, or via a function that takes an editor view.
 
    Only decoration sets provided directly are allowed to influence
    the editor's vertical layout structure. The ones provided as
    functions are called _after_ the new viewport has been computed,
    and thus **must not** introduce block widgets or replacing
    decorations that cover line breaks.
 
    If you want decorated ranges to behave like atomic units for
    cursor motion and deletion purposes, also provide the range set
    containing the decorations to
    [`EditorView.atomicRanges`](https://codemirror.net/6/docs/ref/#view.EditorView^atomicRanges).
    */
    EditorView.decorations = decorations;
    /**
    Used to provide ranges that should be treated as atoms as far as
    cursor motion is concerned. This causes methods like
    [`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
    [`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
    commands built on top of them) to skip across such regions when
    a selection endpoint would enter them. This does _not_ prevent
    direct programmatic [selection
    updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
    regions.
    */
    EditorView.atomicRanges = atomicRanges;
    /**
    When range decorations add a `unicode-bidi: isolate` style, they
    should also include a
    [`bidiIsolate`](https://codemirror.net/6/docs/ref/#view.MarkDecorationSpec.bidiIsolate) property
    in their decoration spec, and be exposed through this facet, so
    that the editor can compute the proper text order. (Other values
    for `unicode-bidi`, except of course `normal`, are not
    supported.)
    */
    EditorView.bidiIsolatedRanges = bidiIsolatedRanges;
    /**
    Facet that allows extensions to provide additional scroll
    margins (space around the sides of the scrolling element that
    should be considered invisible). This can be useful when the
    plugin introduces elements that cover part of that element (for
    example a horizontally fixed gutter).
    */
    EditorView.scrollMargins = scrollMargins;
    /**
    This facet records whether a dark theme is active. The extension
    returned by [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme) automatically
    includes an instance of this when the `dark` option is set to
    true.
    */
    EditorView.darkTheme = darkTheme;
    /**
    Provides a Content Security Policy nonce to use when creating
    the style sheets for the editor. Holds the empty string when no
    nonce has been provided.
    */
    EditorView.cspNonce = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : "" });
    /**
    Facet that provides additional DOM attributes for the editor's
    editable DOM element.
    */
    EditorView.contentAttributes = contentAttributes;
    /**
    Facet that provides DOM attributes for the editor's outer
    element.
    */
    EditorView.editorAttributes = editorAttributes;
    /**
    An extension that enables line wrapping in the editor (by
    setting CSS `white-space` to `pre-wrap` in the content).
    */
    EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
    /**
    State effect used to include screen reader announcements in a
    transaction. These will be added to the DOM in a visually hidden
    element with `aria-live="polite"` set, and should be used to
    describe effects that are visually obvious but may not be
    noticed by screen reader users (such as moving to the next
    search match).
    */
    EditorView.announce = /*@__PURE__*/StateEffect.define();
    // Maximum line length for which we compute accurate bidi info
    const MaxBidiLine = 4096;
    const BadMeasure = {};
    class CachedOrder {
        constructor(from, to, dir, isolates, fresh, order) {
            this.from = from;
            this.to = to;
            this.dir = dir;
            this.isolates = isolates;
            this.fresh = fresh;
            this.order = order;
        }
        static update(cache, changes) {
            if (changes.empty && !cache.some(c => c.fresh))
                return cache;
            let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
            for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
                let entry = cache[i];
                if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
                    result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.isolates, false, entry.order));
            }
            return result;
        }
    }
    function attrsFromFacet(view, facet, base) {
        for (let sources = view.state.facet(facet), i = sources.length - 1; i >= 0; i--) {
            let source = sources[i], value = typeof source == "function" ? source(view) : source;
            if (value)
                combineAttrs(value, base);
        }
        return base;
    }
 
    const currentPlatform = browser.mac ? "mac" : browser.windows ? "win" : browser.linux ? "linux" : "key";
    function normalizeKeyName(name, platform) {
        const parts = name.split(/-(?!$)/);
        let result = parts[parts.length - 1];
        if (result == "Space")
            result = " ";
        let alt, ctrl, shift, meta;
        for (let i = 0; i < parts.length - 1; ++i) {
            const mod = parts[i];
            if (/^(cmd|meta|m)$/i.test(mod))
                meta = true;
            else if (/^a(lt)?$/i.test(mod))
                alt = true;
            else if (/^(c|ctrl|control)$/i.test(mod))
                ctrl = true;
            else if (/^s(hift)?$/i.test(mod))
                shift = true;
            else if (/^mod$/i.test(mod)) {
                if (platform == "mac")
                    meta = true;
                else
                    ctrl = true;
            }
            else
                throw new Error("Unrecognized modifier name: " + mod);
        }
        if (alt)
            result = "Alt-" + result;
        if (ctrl)
            result = "Ctrl-" + result;
        if (meta)
            result = "Meta-" + result;
        if (shift)
            result = "Shift-" + result;
        return result;
    }
    function modifiers(name, event, shift) {
        if (event.altKey)
            name = "Alt-" + name;
        if (event.ctrlKey)
            name = "Ctrl-" + name;
        if (event.metaKey)
            name = "Meta-" + name;
        if (shift !== false && event.shiftKey)
            name = "Shift-" + name;
        return name;
    }
    const handleKeyEvents = /*@__PURE__*/Prec.default(/*@__PURE__*/EditorView.domEventHandlers({
        keydown(event, view) {
            return runHandlers(getKeymap(view.state), event, view, "editor");
        }
    }));
    /**
    Facet used for registering keymaps.
 
    You can add multiple keymaps to an editor. Their priorities
    determine their precedence (the ones specified early or with high
    priority get checked first). When a handler has returned `true`
    for a given key, no further handlers are called.
    */
    const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
    const Keymaps = /*@__PURE__*/new WeakMap();
    // This is hidden behind an indirection, rather than directly computed
    // by the facet, to keep internal types out of the facet's type.
    function getKeymap(state) {
        let bindings = state.facet(keymap);
        let map = Keymaps.get(bindings);
        if (!map)
            Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
        return map;
    }
    let storedPrefix = null;
    const PrefixTimeout = 4000;
    function buildKeymap(bindings, platform = currentPlatform) {
        let bound = Object.create(null);
        let isPrefix = Object.create(null);
        let checkPrefix = (name, is) => {
            let current = isPrefix[name];
            if (current == null)
                isPrefix[name] = is;
            else if (current != is)
                throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
        };
        let add = (scope, key, command, preventDefault, stopPropagation) => {
            var _a, _b;
            let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
            let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
            for (let i = 1; i < parts.length; i++) {
                let prefix = parts.slice(0, i).join(" ");
                checkPrefix(prefix, true);
                if (!scopeObj[prefix])
                    scopeObj[prefix] = {
                        preventDefault: true,
                        stopPropagation: false,
                        run: [(view) => {
                                let ourObj = storedPrefix = { view, prefix, scope };
                                setTimeout(() => { if (storedPrefix == ourObj)
                                    storedPrefix = null; }, PrefixTimeout);
                                return true;
                            }]
                    };
            }
            let full = parts.join(" ");
            checkPrefix(full, false);
            let binding = scopeObj[full] || (scopeObj[full] = {
                preventDefault: false,
                stopPropagation: false,
                run: ((_b = (_a = scopeObj._any) === null || _a === void 0 ? void 0 : _a.run) === null || _b === void 0 ? void 0 : _b.slice()) || []
            });
            if (command)
                binding.run.push(command);
            if (preventDefault)
                binding.preventDefault = true;
            if (stopPropagation)
                binding.stopPropagation = true;
        };
        for (let b of bindings) {
            let scopes = b.scope ? b.scope.split(" ") : ["editor"];
            if (b.any)
                for (let scope of scopes) {
                    let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
                    if (!scopeObj._any)
                        scopeObj._any = { preventDefault: false, stopPropagation: false, run: [] };
                    for (let key in scopeObj)
                        scopeObj[key].run.push(b.any);
                }
            let name = b[platform] || b.key;
            if (!name)
                continue;
            for (let scope of scopes) {
                add(scope, name, b.run, b.preventDefault, b.stopPropagation);
                if (b.shift)
                    add(scope, "Shift-" + name, b.shift, b.preventDefault, b.stopPropagation);
            }
        }
        return bound;
    }
    function runHandlers(map, event, view, scope) {
        let name = keyName(event);
        let charCode = codePointAt(name, 0), isChar = codePointSize(charCode) == name.length && name != " ";
        let prefix = "", handled = false, prevented = false, stopPropagation = false;
        if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
            prefix = storedPrefix.prefix + " ";
            if (modifierCodes.indexOf(event.keyCode) < 0) {
                prevented = true;
                storedPrefix = null;
            }
        }
        let ran = new Set;
        let runFor = (binding) => {
            if (binding) {
                for (let cmd of binding.run)
                    if (!ran.has(cmd)) {
                        ran.add(cmd);
                        if (cmd(view, event)) {
                            if (binding.stopPropagation)
                                stopPropagation = true;
                            return true;
                        }
                    }
                if (binding.preventDefault) {
                    if (binding.stopPropagation)
                        stopPropagation = true;
                    prevented = true;
                }
            }
            return false;
        };
        let scopeObj = map[scope], baseName, shiftName;
        if (scopeObj) {
            if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) {
                handled = true;
            }
            else if (isChar && (event.altKey || event.metaKey || event.ctrlKey) &&
                // Ctrl-Alt may be used for AltGr on Windows
                !(browser.windows && event.ctrlKey && event.altKey) &&
                (baseName = base[event.keyCode]) && baseName != name) {
                if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) {
                    handled = true;
                }
                else if (event.shiftKey && (shiftName = shift[event.keyCode]) != name && shiftName != baseName &&
                    runFor(scopeObj[prefix + modifiers(shiftName, event, false)])) {
                    handled = true;
                }
            }
            else if (isChar && event.shiftKey &&
                runFor(scopeObj[prefix + modifiers(name, event, true)])) {
                handled = true;
            }
            if (!handled && runFor(scopeObj._any))
                handled = true;
        }
        if (prevented)
            handled = true;
        if (handled && stopPropagation)
            event.stopPropagation();
        return handled;
    }
 
    const CanHidePrimary = !browser.ios; // FIXME test IE
    const themeSpec = {
        ".cm-line": {
            "& ::selection": { backgroundColor: "transparent !important" },
            "&::selection": { backgroundColor: "transparent !important" }
        }
    };
    if (CanHidePrimary)
        themeSpec[".cm-line"].caretColor = "transparent !important";
 
    /**
    A gutter marker represents a bit of information attached to a line
    in a specific gutter. Your own custom markers have to extend this
    class.
    */
    class GutterMarker extends RangeValue {
        /**
        @internal
        */
        compare(other) {
            return this == other || this.constructor == other.constructor && this.eq(other);
        }
        /**
        Compare this marker to another marker of the same type.
        */
        eq(other) { return false; }
        /**
        Called if the marker has a `toDOM` method and its representation
        was removed from a gutter.
        */
        destroy(dom) { }
    }
    GutterMarker.prototype.elementClass = "";
    GutterMarker.prototype.toDOM = undefined;
    GutterMarker.prototype.mapMode = MapMode.TrackBefore;
    GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
    GutterMarker.prototype.point = true;
    /**
    Facet used to add a class to all gutter elements for a given line.
    Markers given to this facet should _only_ define an
    [`elementclass`](https://codemirror.net/6/docs/ref/#view.GutterMarker.elementClass), not a
    [`toDOM`](https://codemirror.net/6/docs/ref/#view.GutterMarker.toDOM) (or the marker will appear
    in all gutters for the line).
    */
    const gutterLineClass = /*@__PURE__*/Facet.define();
    const defaults = {
        class: "",
        renderEmptyElements: false,
        elementStyle: "",
        markers: () => RangeSet.empty,
        lineMarker: () => null,
        widgetMarker: () => null,
        lineMarkerChange: null,
        initialSpacer: null,
        updateSpacer: null,
        domEventHandlers: {}
    };
    const activeGutters = /*@__PURE__*/Facet.define();
    /**
    Define an editor gutter. The order in which the gutters appear is
    determined by their extension priority.
    */
    function gutter(config) {
        return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
    }
    const unfixGutters = /*@__PURE__*/Facet.define({
        combine: values => values.some(x => x)
    });
    /**
    The gutter-drawing plugin is automatically enabled when you add a
    gutter, but you can use this function to explicitly configure it.
 
    Unless `fixed` is explicitly set to `false`, the gutters are
    fixed, meaning they don't scroll along with the content
    horizontally (except on Internet Explorer, which doesn't support
    CSS [`position:
    sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
    */
    function gutters(config) {
        let result = [
            gutterView,
        ];
        if (config && config.fixed === false)
            result.push(unfixGutters.of(true));
        return result;
    }
    const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
        constructor(view) {
            this.view = view;
            this.prevViewport = view.viewport;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutters";
            this.dom.setAttribute("aria-hidden", "true");
            this.dom.style.minHeight = (this.view.contentHeight / this.view.scaleY) + "px";
            this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
            for (let gutter of this.gutters)
                this.dom.appendChild(gutter.dom);
            this.fixed = !view.state.facet(unfixGutters);
            if (this.fixed) {
                // FIXME IE11 fallback, which doesn't support position: sticky,
                // by using position: relative + event handlers that realign the
                // gutter (or just force fixed=false on IE11?)
                this.dom.style.position = "sticky";
            }
            this.syncGutters(false);
            view.scrollDOM.insertBefore(this.dom, view.contentDOM);
        }
        update(update) {
            if (this.updateGutters(update)) {
                // Detach during sync when the viewport changed significantly
                // (such as during scrolling), since for large updates that is
                // faster.
                let vpA = this.prevViewport, vpB = update.view.viewport;
                let vpOverlap = Math.min(vpA.to, vpB.to) - Math.max(vpA.from, vpB.from);
                this.syncGutters(vpOverlap < (vpB.to - vpB.from) * 0.8);
            }
            if (update.geometryChanged)
                this.dom.style.minHeight = this.view.contentHeight + "px";
            if (this.view.state.facet(unfixGutters) != !this.fixed) {
                this.fixed = !this.fixed;
                this.dom.style.position = this.fixed ? "sticky" : "";
            }
            this.prevViewport = update.view.viewport;
        }
        syncGutters(detach) {
            let after = this.dom.nextSibling;
            if (detach)
                this.dom.remove();
            let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
            let classSet = [];
            let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport, -this.view.documentPadding.top));
            for (let line of this.view.viewportLineBlocks) {
                if (classSet.length)
                    classSet = [];
                if (Array.isArray(line.type)) {
                    let first = true;
                    for (let b of line.type) {
                        if (b.type == BlockType.Text && first) {
                            advanceCursor(lineClasses, classSet, b.from);
                            for (let cx of contexts)
                                cx.line(this.view, b, classSet);
                            first = false;
                        }
                        else if (b.widget) {
                            for (let cx of contexts)
                                cx.widget(this.view, b);
                        }
                    }
                }
                else if (line.type == BlockType.Text) {
                    advanceCursor(lineClasses, classSet, line.from);
                    for (let cx of contexts)
                        cx.line(this.view, line, classSet);
                }
            }
            for (let cx of contexts)
                cx.finish();
            if (detach)
                this.view.scrollDOM.insertBefore(this.dom, after);
        }
        updateGutters(update) {
            let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
            let change = update.docChanged || update.heightChanged || update.viewportChanged ||
                !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
            if (prev == cur) {
                for (let gutter of this.gutters)
                    if (gutter.update(update))
                        change = true;
            }
            else {
                change = true;
                let gutters = [];
                for (let conf of cur) {
                    let known = prev.indexOf(conf);
                    if (known < 0) {
                        gutters.push(new SingleGutterView(this.view, conf));
                    }
                    else {
                        this.gutters[known].update(update);
                        gutters.push(this.gutters[known]);
                    }
                }
                for (let g of this.gutters) {
                    g.dom.remove();
                    if (gutters.indexOf(g) < 0)
                        g.destroy();
                }
                for (let g of gutters)
                    this.dom.appendChild(g.dom);
                this.gutters = gutters;
            }
            return change;
        }
        destroy() {
            for (let view of this.gutters)
                view.destroy();
            this.dom.remove();
        }
    }, {
        provide: plugin => EditorView.scrollMargins.of(view => {
            let value = view.plugin(plugin);
            if (!value || value.gutters.length == 0 || !value.fixed)
                return null;
            return view.textDirection == Direction.LTR
                ? { left: value.dom.offsetWidth * view.scaleX }
                : { right: value.dom.offsetWidth * view.scaleX };
        })
    });
    function asArray(val) { return (Array.isArray(val) ? val : [val]); }
    function advanceCursor(cursor, collect, pos) {
        while (cursor.value && cursor.from <= pos) {
            if (cursor.from == pos)
                collect.push(cursor.value);
            cursor.next();
        }
    }
    class UpdateContext {
        constructor(gutter, viewport, height) {
            this.gutter = gutter;
            this.height = height;
            this.i = 0;
            this.cursor = RangeSet.iter(gutter.markers, viewport.from);
        }
        addElement(view, block, markers) {
            let { gutter } = this, above = block.top - this.height;
            if (this.i == gutter.elements.length) {
                let newElt = new GutterElement(view, block.height, above, markers);
                gutter.elements.push(newElt);
                gutter.dom.appendChild(newElt.dom);
            }
            else {
                gutter.elements[this.i].update(view, block.height, above, markers);
            }
            this.height = block.bottom;
            this.i++;
        }
        line(view, line, extraMarkers) {
            let localMarkers = [];
            advanceCursor(this.cursor, localMarkers, line.from);
            if (extraMarkers.length)
                localMarkers = localMarkers.concat(extraMarkers);
            let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
            if (forLine)
                localMarkers.unshift(forLine);
            let gutter = this.gutter;
            if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
                return;
            this.addElement(view, line, localMarkers);
        }
        widget(view, block) {
            let marker = this.gutter.config.widgetMarker(view, block.widget, block);
            if (marker)
                this.addElement(view, block, [marker]);
        }
        finish() {
            let gutter = this.gutter;
            while (gutter.elements.length > this.i) {
                let last = gutter.elements.pop();
                gutter.dom.removeChild(last.dom);
                last.destroy();
            }
        }
    }
    class SingleGutterView {
        constructor(view, config) {
            this.view = view;
            this.config = config;
            this.elements = [];
            this.spacer = null;
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
            for (let prop in config.domEventHandlers) {
                this.dom.addEventListener(prop, (event) => {
                    let target = event.target, y;
                    if (target != this.dom && this.dom.contains(target)) {
                        while (target.parentNode != this.dom)
                            target = target.parentNode;
                        let rect = target.getBoundingClientRect();
                        y = (rect.top + rect.bottom) / 2;
                    }
                    else {
                        y = event.clientY;
                    }
                    let line = view.lineBlockAtHeight(y - view.documentTop);
                    if (config.domEventHandlers[prop](view, line, event))
                        event.preventDefault();
                });
            }
            this.markers = asArray(config.markers(view));
            if (config.initialSpacer) {
                this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
                this.dom.appendChild(this.spacer.dom);
                this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
            }
        }
        update(update) {
            let prevMarkers = this.markers;
            this.markers = asArray(this.config.markers(update.view));
            if (this.spacer && this.config.updateSpacer) {
                let updated = this.config.updateSpacer(this.spacer.markers[0], update);
                if (updated != this.spacer.markers[0])
                    this.spacer.update(update.view, 0, 0, [updated]);
            }
            let vp = update.view.viewport;
            return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to) ||
                (this.config.lineMarkerChange ? this.config.lineMarkerChange(update) : false);
        }
        destroy() {
            for (let elt of this.elements)
                elt.destroy();
        }
    }
    class GutterElement {
        constructor(view, height, above, markers) {
            this.height = -1;
            this.above = 0;
            this.markers = [];
            this.dom = document.createElement("div");
            this.dom.className = "cm-gutterElement";
            this.update(view, height, above, markers);
        }
        update(view, height, above, markers) {
            if (this.height != height) {
                this.height = height;
                this.dom.style.height = height / view.scaleY + "px";
            }
            if (this.above != above)
                this.dom.style.marginTop = (this.above = above) ? above / view.scaleY + "px" : "";
            if (!sameMarkers(this.markers, markers))
                this.setMarkers(view, markers);
        }
        setMarkers(view, markers) {
            let cls = "cm-gutterElement", domPos = this.dom.firstChild;
            for (let iNew = 0, iOld = 0;;) {
                let skipTo = iOld, marker = iNew < markers.length ? markers[iNew++] : null, matched = false;
                if (marker) {
                    let c = marker.elementClass;
                    if (c)
                        cls += " " + c;
                    for (let i = iOld; i < this.markers.length; i++)
                        if (this.markers[i].compare(marker)) {
                            skipTo = i;
                            matched = true;
                            break;
                        }
                }
                else {
                    skipTo = this.markers.length;
                }
                while (iOld < skipTo) {
                    let next = this.markers[iOld++];
                    if (next.toDOM) {
                        next.destroy(domPos);
                        let after = domPos.nextSibling;
                        domPos.remove();
                        domPos = after;
                    }
                }
                if (!marker)
                    break;
                if (marker.toDOM) {
                    if (matched)
                        domPos = domPos.nextSibling;
                    else
                        this.dom.insertBefore(marker.toDOM(view), domPos);
                }
                if (matched)
                    iOld++;
            }
            this.dom.className = cls;
            this.markers = markers;
        }
        destroy() {
            this.setMarkers(null, []); // First argument not used unless creating markers
        }
    }
    function sameMarkers(a, b) {
        if (a.length != b.length)
            return false;
        for (let i = 0; i < a.length; i++)
            if (!a[i].compare(b[i]))
                return false;
        return true;
    }
    /**
    Facet used to provide markers to the line number gutter.
    */
    const lineNumberMarkers = /*@__PURE__*/Facet.define();
    const lineNumberConfig = /*@__PURE__*/Facet.define({
        combine(values) {
            return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
                domEventHandlers(a, b) {
                    let result = Object.assign({}, a);
                    for (let event in b) {
                        let exists = result[event], add = b[event];
                        result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
                    }
                    return result;
                }
            });
        }
    });
    class NumberMarker extends GutterMarker {
        constructor(number) {
            super();
            this.number = number;
        }
        eq(other) { return this.number == other.number; }
        toDOM() { return document.createTextNode(this.number); }
    }
    function formatNumber(view, number) {
        return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
    }
    const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
        class: "cm-lineNumbers",
        renderEmptyElements: false,
        markers(view) { return view.state.facet(lineNumberMarkers); },
        lineMarker(view, line, others) {
            if (others.some(m => m.toDOM))
                return null;
            return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
        },
        widgetMarker: () => null,
        lineMarkerChange: update => update.startState.facet(lineNumberConfig) != update.state.facet(lineNumberConfig),
        initialSpacer(view) {
            return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
        },
        updateSpacer(spacer, update) {
            let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
            return max == spacer.number ? spacer : new NumberMarker(max);
        },
        domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
    }));
    /**
    Create a line number gutter extension.
    */
    function lineNumbers(config = {}) {
        return [
            lineNumberConfig.of(config),
            gutters(),
            lineNumberGutter
        ];
    }
    function maxLineNumber(lines) {
        let last = 9;
        while (last < lines)
            last = last * 10 + 9;
        return last;
    }
 
    // FIXME profile adding a per-Tree TreeNode cache, validating it by
    // parent pointer
    /**
    The default maximum length of a `TreeBuffer` node.
    */
    const DefaultBufferLength = 1024;
    let nextPropID = 0;
    class Range {
        constructor(from, to) {
            this.from = from;
            this.to = to;
        }
    }
    /**
    Each [node type](#common.NodeType) or [individual tree](#common.Tree)
    can have metadata associated with it in props. Instances of this
    class represent prop names.
    */
    class NodeProp {
        /**
        Create a new node prop type.
        */
        constructor(config = {}) {
            this.id = nextPropID++;
            this.perNode = !!config.perNode;
            this.deserialize = config.deserialize || (() => {
                throw new Error("This node type doesn't define a deserialize function");
            });
        }
        /**
        This is meant to be used with
        [`NodeSet.extend`](#common.NodeSet.extend) or
        [`LRParser.configure`](#lr.ParserConfig.props) to compute
        prop values for each node type in the set. Takes a [match
        object](#common.NodeType^match) or function that returns undefined
        if the node type doesn't get this prop, and the prop's value if
        it does.
        */
        add(match) {
            if (this.perNode)
                throw new RangeError("Can't add per-node props to node types");
            if (typeof match != "function")
                match = NodeType.match(match);
            return (type) => {
                let result = match(type);
                return result === undefined ? null : [this, result];
            };
        }
    }
    /**
    Prop that is used to describe matching delimiters. For opening
    delimiters, this holds an array of node names (written as a
    space-separated string when declaring this prop in a grammar)
    for the node types of closing delimiters that match it.
    */
    NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
    attached to closing delimiters, holding an array of node names
    of types of matching opening delimiters.
    */
    NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    Used to assign node types to groups (for example, all node
    types that represent an expression could be tagged with an
    `"Expression"` group).
    */
    NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
    /**
    The hash of the [context](#lr.ContextTracker.constructor)
    that the node was parsed in, if any. Used to limit reuse of
    contextual nodes.
    */
    NodeProp.contextHash = new NodeProp({ perNode: true });
    /**
    The distance beyond the end of the node that the tokenizer
    looked ahead for any of the tokens inside the node. (The LR
    parser only stores this when it is larger than 25, for
    efficiency reasons.)
    */
    NodeProp.lookAhead = new NodeProp({ perNode: true });
    /**
    This per-node prop is used to replace a given node, or part of a
    node, with another tree. This is useful to include trees from
    different languages in mixed-language parsers.
    */
    NodeProp.mounted = new NodeProp({ perNode: true });
    const noProps = Object.create(null);
    /**
    Each node in a syntax tree has a node type associated with it.
    */
    class NodeType {
        /**
        @internal
        */
        constructor(
        /**
        The name of the node type. Not necessarily unique, but if the
        grammar was written properly, different node types with the
        same name within a node set should play the same semantic
        role.
        */
        name, 
        /**
        @internal
        */
        props, 
        /**
        The id of this node in its set. Corresponds to the term ids
        used in the parser.
        */
        id, 
        /**
        @internal
        */
        flags = 0) {
            this.name = name;
            this.props = props;
            this.id = id;
            this.flags = flags;
        }
        /**
        Define a node type.
        */
        static define(spec) {
            let props = spec.props && spec.props.length ? Object.create(null) : noProps;
            let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |
                (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);
            let type = new NodeType(spec.name || "", props, spec.id, flags);
            if (spec.props)
                for (let src of spec.props) {
                    if (!Array.isArray(src))
                        src = src(type);
                    if (src) {
                        if (src[0].perNode)
                            throw new RangeError("Can't store a per-node prop on a node type");
                        props[src[0].id] = src[1];
                    }
                }
            return type;
        }
        /**
        Retrieves a node prop for this type. Will return `undefined` if
        the prop isn't present on this node.
        */
        prop(prop) { return this.props[prop.id]; }
        /**
        True when this is the top node of a grammar.
        */
        get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }
        /**
        True when this node is produced by a skip rule.
        */
        get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }
        /**
        Indicates whether this is an error node.
        */
        get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }
        /**
        When true, this node type doesn't correspond to a user-declared
        named node, for example because it is used to cache repetition.
        */
        get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }
        /**
        Returns true when this node's name or one of its
        [groups](#common.NodeProp^group) matches the given string.
        */
        is(name) {
            if (typeof name == 'string') {
                if (this.name == name)
                    return true;
                let group = this.prop(NodeProp.group);
                return group ? group.indexOf(name) > -1 : false;
            }
            return this.id == name;
        }
        /**
        Create a function from node types to arbitrary values by
        specifying an object whose property names are node or
        [group](#common.NodeProp^group) names. Often useful with
        [`NodeProp.add`](#common.NodeProp.add). You can put multiple
        names, separated by spaces, in a single property name to map
        multiple node names to a single value.
        */
        static match(map) {
            let direct = Object.create(null);
            for (let prop in map)
                for (let name of prop.split(" "))
                    direct[name] = map[prop];
            return (node) => {
                for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
                    let found = direct[i < 0 ? node.name : groups[i]];
                    if (found)
                        return found;
                }
            };
        }
    }
    /**
    An empty dummy node type to use when no actual type is available.
    */
    NodeType.none = new NodeType("", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);
    const CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();
    /**
    Options that control iteration. Can be combined with the `|`
    operator to enable multiple ones.
    */
    var IterMode;
    (function (IterMode) {
        /**
        When enabled, iteration will only visit [`Tree`](#common.Tree)
        objects, not nodes packed into
        [`TreeBuffer`](#common.TreeBuffer)s.
        */
        IterMode[IterMode["ExcludeBuffers"] = 1] = "ExcludeBuffers";
        /**
        Enable this to make iteration include anonymous nodes (such as
        the nodes that wrap repeated grammar constructs into a balanced
        tree).
        */
        IterMode[IterMode["IncludeAnonymous"] = 2] = "IncludeAnonymous";
        /**
        By default, regular [mounted](#common.NodeProp^mounted) nodes
        replace their base node in iteration. Enable this to ignore them
        instead.
        */
        IterMode[IterMode["IgnoreMounts"] = 4] = "IgnoreMounts";
        /**
        This option only applies in
        [`enter`](#common.SyntaxNode.enter)-style methods. It tells the
        library to not enter mounted overlays if one covers the given
        position.
        */
        IterMode[IterMode["IgnoreOverlays"] = 8] = "IgnoreOverlays";
    })(IterMode || (IterMode = {}));
    /**
    A piece of syntax tree. There are two ways to approach these
    trees: the way they are actually stored in memory, and the
    convenient way.
 
    Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
    objects. By packing detail information into `TreeBuffer` leaf
    nodes, the representation is made a lot more memory-efficient.
 
    However, when you want to actually work with tree nodes, this
    representation is very awkward, so most client code will want to
    use the [`TreeCursor`](#common.TreeCursor) or
    [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
    a view on some part of this data structure, and can be used to
    move around to adjacent nodes.
    */
    class Tree {
        /**
        Construct a new tree. See also [`Tree.build`](#common.Tree^build).
        */
        constructor(
        /**
        The type of the top node.
        */
        type, 
        /**
        This node's child nodes.
        */
        children, 
        /**
        The positions (offsets relative to the start of this tree) of
        the children.
        */
        positions, 
        /**
        The total length of this tree
        */
        length, 
        /**
        Per-node [node props](#common.NodeProp) to associate with this node.
        */
        props) {
            this.type = type;
            this.children = children;
            this.positions = positions;
            this.length = length;
            /**
            @internal
            */
            this.props = null;
            if (props && props.length) {
                this.props = Object.create(null);
                for (let [prop, value] of props)
                    this.props[typeof prop == "number" ? prop : prop.id] = value;
            }
        }
        /**
        @internal
        */
        toString() {
            let mounted = this.prop(NodeProp.mounted);
            if (mounted && !mounted.overlay)
                return mounted.tree.toString();
            let children = "";
            for (let ch of this.children) {
                let str = ch.toString();
                if (str) {
                    if (children)
                        children += ",";
                    children += str;
                }
            }
            return !this.type.name ? children :
                (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
                    (children.length ? "(" + children + ")" : "");
        }
        /**
        Get a [tree cursor](#common.TreeCursor) positioned at the top of
        the tree. Mode can be used to [control](#common.IterMode) which
        nodes the cursor visits.
        */
        cursor(mode = 0) {
            return new TreeCursor(this.topNode, mode);
        }
        /**
        Get a [tree cursor](#common.TreeCursor) pointing into this tree
        at the given position and side (see
        [`moveTo`](#common.TreeCursor.moveTo).
        */
        cursorAt(pos, side = 0, mode = 0) {
            let scope = CachedNode.get(this) || this.topNode;
            let cursor = new TreeCursor(scope);
            cursor.moveTo(pos, side);
            CachedNode.set(this, cursor._tree);
            return cursor;
        }
        /**
        Get a [syntax node](#common.SyntaxNode) object for the top of the
        tree.
        */
        get topNode() {
            return new TreeNode(this, 0, 0, null);
        }
        /**
        Get the [syntax node](#common.SyntaxNode) at the given position.
        If `side` is -1, this will move into nodes that end at the
        position. If 1, it'll move into nodes that start at the
        position. With 0, it'll only enter nodes that cover the position
        from both sides.
        
        Note that this will not enter
        [overlays](#common.MountedTree.overlay), and you often want
        [`resolveInner`](#common.Tree.resolveInner) instead.
        */
        resolve(pos, side = 0) {
            let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);
            CachedNode.set(this, node);
            return node;
        }
        /**
        Like [`resolve`](#common.Tree.resolve), but will enter
        [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
        pointing into the innermost overlaid tree at the given position
        (with parent links going through all parent structure, including
        the host trees).
        */
        resolveInner(pos, side = 0) {
            let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);
            CachedInnerNode.set(this, node);
            return node;
        }
        /**
        Iterate over the tree and its children, calling `enter` for any
        node that touches the `from`/`to` region (if given) before
        running over such a node's children, and `leave` (if given) when
        leaving the node. When `enter` returns `false`, that node will
        not have its children iterated over (or `leave` called).
        */
        iterate(spec) {
            let { enter, leave, from = 0, to = this.length } = spec;
            let mode = spec.mode || 0, anon = (mode & IterMode.IncludeAnonymous) > 0;
            for (let c = this.cursor(mode | IterMode.IncludeAnonymous);;) {
                let entered = false;
                if (c.from <= to && c.to >= from && (!anon && c.type.isAnonymous || enter(c) !== false)) {
                    if (c.firstChild())
                        continue;
                    entered = true;
                }
                for (;;) {
                    if (entered && leave && (anon || !c.type.isAnonymous))
                        leave(c);
                    if (c.nextSibling())
                        break;
                    if (!c.parent())
                        return;
                    entered = true;
                }
            }
        }
        /**
        Get the value of the given [node prop](#common.NodeProp) for this
        node. Works with both per-node and per-type props.
        */
        prop(prop) {
            return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
        }
        /**
        Returns the node's [per-node props](#common.NodeProp.perNode) in a
        format that can be passed to the [`Tree`](#common.Tree)
        constructor.
        */
        get propValues() {
            let result = [];
            if (this.props)
                for (let id in this.props)
                    result.push([+id, this.props[id]]);
            return result;
        }
        /**
        Balance the direct children of this tree, producing a copy of
        which may have children grouped into subtrees with type
        [`NodeType.none`](#common.NodeType^none).
        */
        balance(config = {}) {
            return this.children.length <= 8 /* Balance.BranchFactor */ ? this :
                balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
        }
        /**
        Build a tree from a postfix-ordered buffer of node information,
        or a cursor over such a buffer.
        */
        static build(data) { return buildTree(data); }
    }
    /**
    The empty tree
    */
    Tree.empty = new Tree(NodeType.none, [], [], 0);
    class FlatBufferCursor {
        constructor(buffer, index) {
            this.buffer = buffer;
            this.index = index;
        }
        get id() { return this.buffer[this.index - 4]; }
        get start() { return this.buffer[this.index - 3]; }
        get end() { return this.buffer[this.index - 2]; }
        get size() { return this.buffer[this.index - 1]; }
        get pos() { return this.index; }
        next() { this.index -= 4; }
        fork() { return new FlatBufferCursor(this.buffer, this.index); }
    }
    /**
    Tree buffers contain (type, start, end, endIndex) quads for each
    node. In such a buffer, nodes are stored in prefix order (parents
    before children, with the endIndex of the parent indicating which
    children belong to it).
    */
    class TreeBuffer {
        /**
        Create a tree buffer.
        */
        constructor(
        /**
        The buffer's content.
        */
        buffer, 
        /**
        The total length of the group of nodes in the buffer.
        */
        length, 
        /**
        The node set used in this buffer.
        */
        set) {
            this.buffer = buffer;
            this.length = length;
            this.set = set;
        }
        /**
        @internal
        */
        get type() { return NodeType.none; }
        /**
        @internal
        */
        toString() {
            let result = [];
            for (let index = 0; index < this.buffer.length;) {
                result.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result.join(",");
        }
        /**
        @internal
        */
        childString(index) {
            let id = this.buffer[index], endIndex = this.buffer[index + 3];
            let type = this.set.types[id], result = type.name;
            if (/\W/.test(result) && !type.isError)
                result = JSON.stringify(result);
            index += 4;
            if (endIndex == index)
                return result;
            let children = [];
            while (index < endIndex) {
                children.push(this.childString(index));
                index = this.buffer[index + 3];
            }
            return result + "(" + children.join(",") + ")";
        }
        /**
        @internal
        */
        findChild(startIndex, endIndex, dir, pos, side) {
            let { buffer } = this, pick = -1;
            for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
                if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
                    pick = i;
                    if (dir > 0)
                        break;
                }
            }
            return pick;
        }
        /**
        @internal
        */
        slice(startI, endI, from) {
            let b = this.buffer;
            let copy = new Uint16Array(endI - startI), len = 0;
            for (let i = startI, j = 0; i < endI;) {
                copy[j++] = b[i++];
                copy[j++] = b[i++] - from;
                let to = copy[j++] = b[i++] - from;
                copy[j++] = b[i++] - startI;
                len = Math.max(len, to);
            }
            return new TreeBuffer(copy, len, this.set);
        }
    }
    function checkSide(side, pos, from, to) {
        switch (side) {
            case -2 /* Side.Before */: return from < pos;
            case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;
            case 0 /* Side.Around */: return from < pos && to > pos;
            case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;
            case 2 /* Side.After */: return to > pos;
            case 4 /* Side.DontCare */: return true;
        }
    }
    function enterUnfinishedNodesBefore(node, pos) {
        let scan = node.childBefore(pos);
        while (scan) {
            let last = scan.lastChild;
            if (!last || last.to != scan.to)
                break;
            if (last.type.isError && last.from == last.to) {
                node = scan;
                scan = last.prevSibling;
            }
            else {
                scan = last;
            }
        }
        return node;
    }
    function resolveNode(node, pos, side, overlays) {
        var _a;
        // Move up to a node that actually holds the position, if possible
        while (node.from == node.to ||
            (side < 1 ? node.from >= pos : node.from > pos) ||
            (side > -1 ? node.to <= pos : node.to < pos)) {
            let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;
            if (!parent)
                return node;
            node = parent;
        }
        let mode = overlays ? 0 : IterMode.IgnoreOverlays;
        // Must go up out of overlays when those do not overlap with pos
        if (overlays)
            for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {
                if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)
                    node = parent;
            }
        for (;;) {
            let inner = node.enter(pos, side, mode);
            if (!inner)
                return node;
            node = inner;
        }
    }
    class TreeNode {
        constructor(_tree, from, 
        // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
        index, _parent) {
            this._tree = _tree;
            this.from = from;
            this.index = index;
            this._parent = _parent;
        }
        get type() { return this._tree.type; }
        get name() { return this._tree.type.name; }
        get to() { return this.from + this._tree.length; }
        nextChild(i, dir, pos, side, mode = 0) {
            for (let parent = this;;) {
                for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {
                    let next = children[i], start = positions[i] + parent.from;
                    if (!checkSide(side, pos, start, start + next.length))
                        continue;
                    if (next instanceof TreeBuffer) {
                        if (mode & IterMode.ExcludeBuffers)
                            continue;
                        let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
                        if (index > -1)
                            return new BufferNode(new BufferContext(parent, next, i, start), null, index);
                    }
                    else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {
                        let mounted;
                        if (!(mode & IterMode.IgnoreMounts) &&
                            next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
                            return new TreeNode(mounted.tree, start, i, parent);
                        let inner = new TreeNode(next, start, i, parent);
                        return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner
                            : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
                    }
                }
                if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)
                    return null;
                if (parent.index >= 0)
                    i = parent.index + dir;
                else
                    i = dir < 0 ? -1 : parent._parent._tree.children.length;
                parent = parent._parent;
                if (!parent)
                    return null;
            }
        }
        get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            let mounted;
            if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {
                let rPos = pos - this.from;
                for (let { from, to } of mounted.overlay) {
                    if ((side > 0 ? from <= rPos : from < rPos) &&
                        (side < 0 ? to >= rPos : to > rPos))
                        return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
                }
            }
            return this.nextChild(0, 1, pos, side, mode);
        }
        nextSignificantParent() {
            let val = this;
            while (val.type.isAnonymous && val._parent)
                val = val._parent;
            return val;
        }
        get parent() {
            return this._parent ? this._parent.nextSignificantParent() : null;
        }
        get nextSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;
        }
        get prevSibling() {
            return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return this._tree; }
        toTree() { return this._tree; }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        /**
        @internal
        */
        toString() { return this._tree.toString(); }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    function getChildren(node, type, before, after) {
        let cur = node.cursor(), result = [];
        if (!cur.firstChild())
            return result;
        if (before != null)
            while (!cur.type.is(before))
                if (!cur.nextSibling())
                    return result;
        for (;;) {
            if (after != null && cur.type.is(after))
                return result;
            if (cur.type.is(type))
                result.push(cur.node);
            if (!cur.nextSibling())
                return after == null ? result : [];
        }
    }
    function matchNodeContext(node, context, i = context.length - 1) {
        for (let p = node.parent; i >= 0; p = p.parent) {
            if (!p)
                return false;
            if (!p.type.isAnonymous) {
                if (context[i] && context[i] != p.name)
                    return false;
                i--;
            }
        }
        return true;
    }
    class BufferContext {
        constructor(parent, buffer, index, start) {
            this.parent = parent;
            this.buffer = buffer;
            this.index = index;
            this.start = start;
        }
    }
    class BufferNode {
        get name() { return this.type.name; }
        get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
        get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
        constructor(context, _parent, index) {
            this.context = context;
            this._parent = _parent;
            this.index = index;
            this.type = context.buffer.set.types[context.buffer.buffer[index]];
        }
        child(dir, pos, side) {
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }
        get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }
        childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }
        childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }
        enter(pos, side, mode = 0) {
            if (mode & IterMode.ExcludeBuffers)
                return null;
            let { buffer } = this.context;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
            return index < 0 ? null : new BufferNode(this.context, this, index);
        }
        get parent() {
            return this._parent || this.context.parent.nextSignificantParent();
        }
        externalSibling(dir) {
            return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);
        }
        get nextSibling() {
            let { buffer } = this.context;
            let after = buffer.buffer[this.index + 3];
            if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
                return new BufferNode(this.context, this._parent, after);
            return this.externalSibling(1);
        }
        get prevSibling() {
            let { buffer } = this.context;
            let parentStart = this._parent ? this._parent.index + 4 : 0;
            if (this.index == parentStart)
                return this.externalSibling(-1);
            return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
        }
        cursor(mode = 0) { return new TreeCursor(this, mode); }
        get tree() { return null; }
        toTree() {
            let children = [], positions = [];
            let { buffer } = this.context;
            let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
            if (endI > startI) {
                let from = buffer.buffer[this.index + 1];
                children.push(buffer.slice(startI, endI, from));
                positions.push(0);
            }
            return new Tree(this.type, children, positions, this.to - this.from);
        }
        resolve(pos, side = 0) {
            return resolveNode(this, pos, side, false);
        }
        resolveInner(pos, side = 0) {
            return resolveNode(this, pos, side, true);
        }
        enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
        /**
        @internal
        */
        toString() { return this.context.buffer.childString(this.index); }
        getChild(type, before = null, after = null) {
            let r = getChildren(this, type, before, after);
            return r.length ? r[0] : null;
        }
        getChildren(type, before = null, after = null) {
            return getChildren(this, type, before, after);
        }
        get node() { return this; }
        matchContext(context) { return matchNodeContext(this, context); }
    }
    /**
    A tree cursor object focuses on a given node in a syntax tree, and
    allows you to move to adjacent nodes.
    */
    class TreeCursor {
        /**
        Shorthand for `.type.name`.
        */
        get name() { return this.type.name; }
        /**
        @internal
        */
        constructor(node, 
        /**
        @internal
        */
        mode = 0) {
            this.mode = mode;
            /**
            @internal
            */
            this.buffer = null;
            this.stack = [];
            /**
            @internal
            */
            this.index = 0;
            this.bufferNode = null;
            if (node instanceof TreeNode) {
                this.yieldNode(node);
            }
            else {
                this._tree = node.context.parent;
                this.buffer = node.context;
                for (let n = node._parent; n; n = n._parent)
                    this.stack.unshift(n.index);
                this.bufferNode = node;
                this.yieldBuf(node.index);
            }
        }
        yieldNode(node) {
            if (!node)
                return false;
            this._tree = node;
            this.type = node.type;
            this.from = node.from;
            this.to = node.to;
            return true;
        }
        yieldBuf(index, type) {
            this.index = index;
            let { start, buffer } = this.buffer;
            this.type = type || buffer.set.types[buffer.buffer[index]];
            this.from = start + buffer.buffer[index + 1];
            this.to = start + buffer.buffer[index + 2];
            return true;
        }
        yield(node) {
            if (!node)
                return false;
            if (node instanceof TreeNode) {
                this.buffer = null;
                return this.yieldNode(node);
            }
            this.buffer = node.context;
            return this.yieldBuf(node.index, node.type);
        }
        /**
        @internal
        */
        toString() {
            return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
        }
        /**
        @internal
        */
        enterChild(dir, pos, side) {
            if (!this.buffer)
                return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));
            let { buffer } = this.buffer;
            let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
            if (index < 0)
                return false;
            this.stack.push(this.index);
            return this.yieldBuf(index);
        }
        /**
        Move the cursor to this node's first child. When this returns
        false, the node has no child, and the cursor has not been moved.
        */
        firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }
        /**
        Move the cursor to this node's last child.
        */
        lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }
        /**
        Move the cursor to the first child that ends after `pos`.
        */
        childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }
        /**
        Move to the last child that starts before `pos`.
        */
        childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }
        /**
        Move the cursor to the child around `pos`. If side is -1 the
        child may end at that position, when 1 it may start there. This
        will also enter [overlaid](#common.MountedTree.overlay)
        [mounted](#common.NodeProp^mounted) trees unless `overlays` is
        set to false.
        */
        enter(pos, side, mode = this.mode) {
            if (!this.buffer)
                return this.yield(this._tree.enter(pos, side, mode));
            return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);
        }
        /**
        Move to the node's parent node, if this isn't the top node.
        */
        parent() {
            if (!this.buffer)
                return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);
            if (this.stack.length)
                return this.yieldBuf(this.stack.pop());
            let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
            this.buffer = null;
            return this.yieldNode(parent);
        }
        /**
        @internal
        */
        sibling(dir) {
            if (!this.buffer)
                return !this._tree._parent ? false
                    : this.yield(this._tree.index < 0 ? null
                        : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));
            let { buffer } = this.buffer, d = this.stack.length - 1;
            if (dir < 0) {
                let parentStart = d < 0 ? 0 : this.stack[d] + 4;
                if (this.index != parentStart)
                    return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));
            }
            else {
                let after = buffer.buffer[this.index + 3];
                if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
                    return this.yieldBuf(after);
            }
            return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;
        }
        /**
        Move to this node's next sibling, if any.
        */
        nextSibling() { return this.sibling(1); }
        /**
        Move to this node's previous sibling, if any.
        */
        prevSibling() { return this.sibling(-1); }
        atLastNode(dir) {
            let index, parent, { buffer } = this;
            if (buffer) {
                if (dir > 0) {
                    if (this.index < buffer.buffer.buffer.length)
                        return false;
                }
                else {
                    for (let i = 0; i < this.index; i++)
                        if (buffer.buffer.buffer[i + 3] < this.index)
                            return false;
                }
                ({ index, parent } = buffer);
            }
            else {
                ({ index, _parent: parent } = this._tree);
            }
            for (; parent; { index, _parent: parent } = parent) {
                if (index > -1)
                    for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {
                        let child = parent._tree.children[i];
                        if ((this.mode & IterMode.IncludeAnonymous) ||
                            child instanceof TreeBuffer ||
                            !child.type.isAnonymous ||
                            hasChild(child))
                            return false;
                    }
            }
            return true;
        }
        move(dir, enter) {
            if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))
                return true;
            for (;;) {
                if (this.sibling(dir))
                    return true;
                if (this.atLastNode(dir) || !this.parent())
                    return false;
            }
        }
        /**
        Move to the next node in a
        [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)
        traversal, going from a node to its first child or, if the
        current node is empty or `enter` is false, its next sibling or
        the next sibling of the first parent node that has one.
        */
        next(enter = true) { return this.move(1, enter); }
        /**
        Move to the next node in a last-to-first pre-order traveral. A
        node is followed by its last child or, if it has none, its
        previous sibling or the previous sibling of the first parent
        node that has one.
        */
        prev(enter = true) { return this.move(-1, enter); }
        /**
        Move the cursor to the innermost node that covers `pos`. If
        `side` is -1, it will enter nodes that end at `pos`. If it is 1,
        it will enter nodes that start at `pos`.
        */
        moveTo(pos, side = 0) {
            // Move up to a node that actually holds the position, if possible
            while (this.from == this.to ||
                (side < 1 ? this.from >= pos : this.from > pos) ||
                (side > -1 ? this.to <= pos : this.to < pos))
                if (!this.parent())
                    break;
            // Then scan down into child nodes as far as possible
            while (this.enterChild(1, pos, side)) { }
            return this;
        }
        /**
        Get a [syntax node](#common.SyntaxNode) at the cursor's current
        position.
        */
        get node() {
            if (!this.buffer)
                return this._tree;
            let cache = this.bufferNode, result = null, depth = 0;
            if (cache && cache.context == this.buffer) {
                scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
                    for (let c = cache; c; c = c._parent)
                        if (c.index == index) {
                            if (index == this.index)
                                return c;
                            result = c;
                            depth = d + 1;
                            break scan;
                        }
                    index = this.stack[--d];
                }
            }
            for (let i = depth; i < this.stack.length; i++)
                result = new BufferNode(this.buffer, result, this.stack[i]);
            return this.bufferNode = new BufferNode(this.buffer, result, this.index);
        }
        /**
        Get the [tree](#common.Tree) that represents the current node, if
        any. Will return null when the node is in a [tree
        buffer](#common.TreeBuffer).
        */
        get tree() {
            return this.buffer ? null : this._tree._tree;
        }
        /**
        Iterate over the current node and all its descendants, calling
        `enter` when entering a node and `leave`, if given, when leaving
        one. When `enter` returns `false`, any children of that node are
        skipped, and `leave` isn't called for it.
        */
        iterate(enter, leave) {
            for (let depth = 0;;) {
                let mustLeave = false;
                if (this.type.isAnonymous || enter(this) !== false) {
                    if (this.firstChild()) {
                        depth++;
                        continue;
                    }
                    if (!this.type.isAnonymous)
                        mustLeave = true;
                }
                for (;;) {
                    if (mustLeave && leave)
                        leave(this);
                    mustLeave = this.type.isAnonymous;
                    if (this.nextSibling())
                        break;
                    if (!depth)
                        return;
                    this.parent();
                    depth--;
                    mustLeave = true;
                }
            }
        }
        /**
        Test whether the current node matches a given context—a sequence
        of direct parent node names. Empty strings in the context array
        are treated as wildcards.
        */
        matchContext(context) {
            if (!this.buffer)
                return matchNodeContext(this.node, context);
            let { buffer } = this.buffer, { types } = buffer.set;
            for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {
                if (d < 0)
                    return matchNodeContext(this.node, context, i);
                let type = types[buffer.buffer[this.stack[d]]];
                if (!type.isAnonymous) {
                    if (context[i] && context[i] != type.name)
                        return false;
                    i--;
                }
            }
            return true;
        }
    }
    function hasChild(tree) {
        return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
    }
    function buildTree(data) {
        var _a;
        let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
        let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
        let types = nodeSet.types;
        let contextHash = 0, lookAhead = 0;
        function takeNode(parentStart, minPos, children, positions, inRepeat) {
            let { id, start, end, size } = cursor;
            let lookAheadAtStart = lookAhead;
            while (size < 0) {
                cursor.next();
                if (size == -1 /* SpecialRecord.Reuse */) {
                    let node = reused[id];
                    children.push(node);
                    positions.push(start - parentStart);
                    return;
                }
                else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change
                    contextHash = id;
                    return;
                }
                else if (size == -4 /* SpecialRecord.LookAhead */) {
                    lookAhead = id;
                    return;
                }
                else {
                    throw new RangeError(`Unrecognized record size: ${size}`);
                }
            }
            let type = types[id], node, buffer;
            let startPos = start - parentStart;
            if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
                // Small enough for a buffer, and no reused nodes inside
                let data = new Uint16Array(buffer.size - buffer.skip);
                let endPos = cursor.pos - buffer.size, index = data.length;
                while (cursor.pos > endPos)
                    index = copyToBuffer(buffer.start, data, index);
                node = new TreeBuffer(data, end - buffer.start, nodeSet);
                startPos = buffer.start - parentStart;
            }
            else { // Make it a node
                let endPos = cursor.pos - size;
                cursor.next();
                let localChildren = [], localPositions = [];
                let localInRepeat = id >= minRepeatType ? id : -1;
                let lastGroup = 0, lastEnd = end;
                while (cursor.pos > endPos) {
                    if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
                        if (cursor.end <= lastEnd - maxBufferLength) {
                            makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
                            lastGroup = localChildren.length;
                            lastEnd = cursor.end;
                        }
                        cursor.next();
                    }
                    else {
                        takeNode(start, endPos, localChildren, localPositions, localInRepeat);
                    }
                }
                if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
                    makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
                localChildren.reverse();
                localPositions.reverse();
                if (localInRepeat > -1 && lastGroup > 0) {
                    let make = makeBalanced(type);
                    node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
                }
                else {
                    node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
                }
            }
            children.push(node);
            positions.push(startPos);
        }
        function makeBalanced(type) {
            return (children, positions, length) => {
                let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
                if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
                    if (!lastI && last.type == type && last.length == length)
                        return last;
                    if (lookAheadProp = last.prop(NodeProp.lookAhead))
                        lookAhead = positions[lastI] + last.length + lookAheadProp;
                }
                return makeTree(type, children, positions, length, lookAhead);
            };
        }
        function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
            let localChildren = [], localPositions = [];
            while (children.length > i) {
                localChildren.push(children.pop());
                localPositions.push(positions.pop() + base - from);
            }
            children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
            positions.push(from - base);
        }
        function makeTree(type, children, positions, length, lookAhead = 0, props) {
            if (contextHash) {
                let pair = [NodeProp.contextHash, contextHash];
                props = props ? [pair].concat(props) : [pair];
            }
            if (lookAhead > 25) {
                let pair = [NodeProp.lookAhead, lookAhead];
                props = props ? [pair].concat(props) : [pair];
            }
            return new Tree(type, children, positions, length, props);
        }
        function findBufferSize(maxSize, inRepeat) {
            // Scan through the buffer to find previous siblings that fit
            // together in a TreeBuffer, and don't contain any reused nodes
            // (which can't be stored in a buffer).
            // If `inRepeat` is > -1, ignore node boundaries of that type for
            // nesting, but make sure the end falls either at the start
            // (`maxSize`) or before such a node.
            let fork = cursor.fork();
            let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
            let result = { size: 0, start: 0, skip: 0 };
            scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
                let nodeSize = fork.size;
                // Pretend nested repeat nodes of the same type don't exist
                if (fork.id == inRepeat && nodeSize >= 0) {
                    // Except that we store the current state as a valid return
                    // value.
                    result.size = size;
                    result.start = start;
                    result.skip = skip;
                    skip += 4;
                    size += 4;
                    fork.next();
                    continue;
                }
                let startPos = fork.pos - nodeSize;
                if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
                    break;
                let localSkipped = fork.id >= minRepeatType ? 4 : 0;
                let nodeStart = fork.start;
                fork.next();
                while (fork.pos > startPos) {
                    if (fork.size < 0) {
                        if (fork.size == -3 /* SpecialRecord.ContextChange */)
                            localSkipped += 4;
                        else
                            break scan;
                    }
                    else if (fork.id >= minRepeatType) {
                        localSkipped += 4;
                    }
                    fork.next();
                }
                start = nodeStart;
                size += nodeSize;
                skip += localSkipped;
            }
            if (inRepeat < 0 || size == maxSize) {
                result.size = size;
                result.start = start;
                result.skip = skip;
            }
            return result.size > 4 ? result : undefined;
        }
        function copyToBuffer(bufferStart, buffer, index) {
            let { id, start, end, size } = cursor;
            cursor.next();
            if (size >= 0 && id < minRepeatType) {
                let startIndex = index;
                if (size > 4) {
                    let endPos = cursor.pos - (size - 4);
                    while (cursor.pos > endPos)
                        index = copyToBuffer(bufferStart, buffer, index);
                }
                buffer[--index] = startIndex;
                buffer[--index] = end - bufferStart;
                buffer[--index] = start - bufferStart;
                buffer[--index] = id;
            }
            else if (size == -3 /* SpecialRecord.ContextChange */) {
                contextHash = id;
            }
            else if (size == -4 /* SpecialRecord.LookAhead */) {
                lookAhead = id;
            }
            return index;
        }
        let children = [], positions = [];
        while (cursor.pos > 0)
            takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
        let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
        return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
    }
    const nodeSizeCache = new WeakMap;
    function nodeSize(balanceType, node) {
        if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
            return 1;
        let size = nodeSizeCache.get(node);
        if (size == null) {
            size = 1;
            for (let child of node.children) {
                if (child.type != balanceType || !(child instanceof Tree)) {
                    size = 1;
                    break;
                }
                size += nodeSize(balanceType, child);
            }
            nodeSizeCache.set(node, size);
        }
        return size;
    }
    function balanceRange(
    // The type the balanced tree's inner nodes.
    balanceType, 
    // The direct children and their positions
    children, positions, 
    // The index range in children/positions to use
    from, to, 
    // The start position of the nodes, relative to their parent.
    start, 
    // Length of the outer node
    length, 
    // Function to build the top node of the balanced tree
    mkTop, 
    // Function to build internal nodes for the balanced tree
    mkTree) {
        let total = 0;
        for (let i = from; i < to; i++)
            total += nodeSize(balanceType, children[i]);
        let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);
        let localChildren = [], localPositions = [];
        function divide(children, positions, from, to, offset) {
            for (let i = from; i < to;) {
                let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);
                i++;
                for (; i < to; i++) {
                    let nextSize = nodeSize(balanceType, children[i]);
                    if (groupSize + nextSize >= maxChild)
                        break;
                    groupSize += nextSize;
                }
                if (i == groupFrom + 1) {
                    if (groupSize > maxChild) {
                        let only = children[groupFrom]; // Only trees can have a size > 1
                        divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
                        continue;
                    }
                    localChildren.push(children[groupFrom]);
                }
                else {
                    let length = positions[i - 1] + children[i - 1].length - groupStart;
                    localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));
                }
                localPositions.push(groupStart + offset - start);
            }
        }
        divide(children, positions, from, to, 0);
        return (mkTop || mkTree)(localChildren, localPositions, length);
    }
 
    /**
    Tree fragments are used during [incremental
    parsing](#common.Parser.startParse) to track parts of old trees
    that can be reused in a new parse. An array of fragments is used
    to track regions of an old tree whose nodes might be reused in new
    parses. Use the static
    [`applyChanges`](#common.TreeFragment^applyChanges) method to
    update fragments for document changes.
    */
    class TreeFragment {
        /**
        Construct a tree fragment. You'll usually want to use
        [`addTree`](#common.TreeFragment^addTree) and
        [`applyChanges`](#common.TreeFragment^applyChanges) instead of
        calling this directly.
        */
        constructor(
        /**
        The start of the unchanged range pointed to by this fragment.
        This refers to an offset in the _updated_ document (as opposed
        to the original tree).
        */
        from, 
        /**
        The end of the unchanged range.
        */
        to, 
        /**
        The tree that this fragment is based on.
        */
        tree, 
        /**
        The offset between the fragment's tree and the document that
        this fragment can be used against. Add this when going from
        document to tree positions, subtract it to go from tree to
        document positions.
        */
        offset, openStart = false, openEnd = false) {
            this.from = from;
            this.to = to;
            this.tree = tree;
            this.offset = offset;
            this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);
        }
        /**
        Whether the start of the fragment represents the start of a
        parse, or the end of a change. (In the second case, it may not
        be safe to reuse some nodes at the start, depending on the
        parsing algorithm.)
        */
        get openStart() { return (this.open & 1 /* Open.Start */) > 0; }
        /**
        Whether the end of the fragment represents the end of a
        full-document parse, or the start of a change.
        */
        get openEnd() { return (this.open & 2 /* Open.End */) > 0; }
        /**
        Create a set of fragments from a freshly parsed tree, or update
        an existing set of fragments by replacing the ones that overlap
        with a tree with content from the new tree. When `partial` is
        true, the parse is treated as incomplete, and the resulting
        fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
        true.
        */
        static addTree(tree, fragments = [], partial = false) {
            let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
            for (let f of fragments)
                if (f.to > tree.length)
                    result.push(f);
            return result;
        }
        /**
        Apply a set of edits to an array of fragments, removing or
        splitting fragments as necessary to remove edited ranges, and
        adjusting offsets for fragments that moved.
        */
        static applyChanges(fragments, changes, minGap = 128) {
            if (!changes.length)
                return fragments;
            let result = [];
            let fI = 1, nextF = fragments.length ? fragments[0] : null;
            for (let cI = 0, pos = 0, off = 0;; cI++) {
                let nextC = cI < changes.length ? changes[cI] : null;
                let nextPos = nextC ? nextC.fromA : 1e9;
                if (nextPos - pos >= minGap)
                    while (nextF && nextF.from < nextPos) {
                        let cut = nextF;
                        if (pos >= cut.from || nextPos <= cut.to || off) {
                            let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
                            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
                        }
                        if (cut)
                            result.push(cut);
                        if (nextF.to > nextPos)
                            break;
                        nextF = fI < fragments.length ? fragments[fI++] : null;
                    }
                if (!nextC)
                    break;
                pos = nextC.toA;
                off = nextC.toA - nextC.toB;
            }
            return result;
        }
    }
    /**
    A superclass that parsers should extend.
    */
    class Parser {
        /**
        Start a parse, returning a [partial parse](#common.PartialParse)
        object. [`fragments`](#common.TreeFragment) can be passed in to
        make the parse incremental.
        
        By default, the entire input is parsed. You can pass `ranges`,
        which should be a sorted array of non-empty, non-overlapping
        ranges, to parse only those ranges. The tree returned in that
        case will start at `ranges[0].from`.
        */
        startParse(input, fragments, ranges) {
            if (typeof input == "string")
                input = new StringInput(input);
            ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
            return this.createParse(input, fragments || [], ranges);
        }
        /**
        Run a full parse, returning the resulting tree.
        */
        parse(input, fragments, ranges) {
            let parse = this.startParse(input, fragments, ranges);
            for (;;) {
                let done = parse.advance();
                if (done)
                    return done;
            }
        }
    }
    class StringInput {
        constructor(string) {
            this.string = string;
        }
        get length() { return this.string.length; }
        chunk(from) { return this.string.slice(from); }
        get lineChunks() { return false; }
        read(from, to) { return this.string.slice(from, to); }
    }
    new NodeProp({ perNode: true });
 
    let nextTagID = 0;
    /**
    Highlighting tags are markers that denote a highlighting category.
    They are [associated](#highlight.styleTags) with parts of a syntax
    tree by a language mode, and then mapped to an actual CSS style by
    a [highlighter](#highlight.Highlighter).
 
    Because syntax tree node types and highlight styles have to be
    able to talk the same language, CodeMirror uses a mostly _closed_
    [vocabulary](#highlight.tags) of syntax tags (as opposed to
    traditional open string-based systems, which make it hard for
    highlighting themes to cover all the tokens produced by the
    various languages).
 
    It _is_ possible to [define](#highlight.Tag^define) your own
    highlighting tags for system-internal use (where you control both
    the language package and the highlighter), but such tags will not
    be picked up by regular highlighters (though you can derive them
    from standard tags to allow highlighters to fall back to those).
    */
    class Tag {
        /**
        @internal
        */
        constructor(
        /**
        The set of this tag and all its parent tags, starting with
        this one itself and sorted in order of decreasing specificity.
        */
        set, 
        /**
        The base unmodified tag that this one is based on, if it's
        modified @internal
        */
        base, 
        /**
        The modifiers applied to this.base @internal
        */
        modified) {
            this.set = set;
            this.base = base;
            this.modified = modified;
            /**
            @internal
            */
            this.id = nextTagID++;
        }
        /**
        Define a new tag. If `parent` is given, the tag is treated as a
        sub-tag of that parent, and
        [highlighters](#highlight.tagHighlighter) that don't mention
        this tag will try to fall back to the parent tag (or grandparent
        tag, etc).
        */
        static define(parent) {
            if (parent === null || parent === void 0 ? void 0 : parent.base)
                throw new Error("Can not derive from a modified tag");
            let tag = new Tag([], null, []);
            tag.set.push(tag);
            if (parent)
                for (let t of parent.set)
                    tag.set.push(t);
            return tag;
        }
        /**
        Define a tag _modifier_, which is a function that, given a tag,
        will return a tag that is a subtag of the original. Applying the
        same modifier to a twice tag will return the same value (`m1(t1)
        == m1(t1)`) and applying multiple modifiers will, regardless or
        order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
        
        When multiple modifiers are applied to a given base tag, each
        smaller set of modifiers is registered as a parent, so that for
        example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
        `m1(m3(t1)`, and so on.
        */
        static defineModifier() {
            let mod = new Modifier;
            return (tag) => {
                if (tag.modified.indexOf(mod) > -1)
                    return tag;
                return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
            };
        }
    }
    let nextModifierID = 0;
    class Modifier {
        constructor() {
            this.instances = [];
            this.id = nextModifierID++;
        }
        static get(base, mods) {
            if (!mods.length)
                return base;
            let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
            if (exists)
                return exists;
            let set = [], tag = new Tag(set, base, mods);
            for (let m of mods)
                m.instances.push(tag);
            let configs = powerSet(mods);
            for (let parent of base.set)
                if (!parent.modified.length)
                    for (let config of configs)
                        set.push(Modifier.get(parent, config));
            return tag;
        }
    }
    function sameArray(a, b) {
        return a.length == b.length && a.every((x, i) => x == b[i]);
    }
    function powerSet(array) {
        let sets = [[]];
        for (let i = 0; i < array.length; i++) {
            for (let j = 0, e = sets.length; j < e; j++) {
                sets.push(sets[j].concat(array[i]));
            }
        }
        return sets.sort((a, b) => b.length - a.length);
    }
    /**
    This function is used to add a set of tags to a language syntax
    via [`NodeSet.extend`](#common.NodeSet.extend) or
    [`LRParser.configure`](#lr.LRParser.configure).
 
    The argument object maps node selectors to [highlighting
    tags](#highlight.Tag) or arrays of tags.
 
    Node selectors may hold one or more (space-separated) node paths.
    Such a path can be a [node name](#common.NodeType.name), or
    multiple node names (or `*` wildcards) separated by slash
    characters, as in `"Block/Declaration/VariableName"`. Such a path
    matches the final node but only if its direct parent nodes are the
    other nodes mentioned. A `*` in such a path matches any parent,
    but only a single level—wildcards that match multiple parents
    aren't supported, both for efficiency reasons and because Lezer
    trees make it rather hard to reason about what they would match.)
 
    A path can be ended with `/...` to indicate that the tag assigned
    to the node should also apply to all child nodes, even if they
    match their own style (by default, only the innermost style is
    used).
 
    When a path ends in `!`, as in `Attribute!`, no further matching
    happens for the node's child nodes, and the entire node gets the
    given style.
 
    In this notation, node names that contain `/`, `!`, `*`, or `...`
    must be quoted as JSON strings.
 
    For example:
 
    ```javascript
    parser.withProps(
      styleTags({
        // Style Number and BigNumber nodes
        "Number BigNumber": tags.number,
        // Style Escape nodes whose parent is String
        "String/Escape": tags.escape,
        // Style anything inside Attributes nodes
        "Attributes!": tags.meta,
        // Add a style to all content inside Italic nodes
        "Italic/...": tags.emphasis,
        // Style InvalidString nodes as both `string` and `invalid`
        "InvalidString": [tags.string, tags.invalid],
        // Style the node named "/" as punctuation
        '"/"': tags.punctuation
      })
    )
    ```
    */
    function styleTags(spec) {
        let byName = Object.create(null);
        for (let prop in spec) {
            let tags = spec[prop];
            if (!Array.isArray(tags))
                tags = [tags];
            for (let part of prop.split(" "))
                if (part) {
                    let pieces = [], mode = 2 /* Normal */, rest = part;
                    for (let pos = 0;;) {
                        if (rest == "..." && pos > 0 && pos + 3 == part.length) {
                            mode = 1 /* Inherit */;
                            break;
                        }
                        let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
                        if (!m)
                            throw new RangeError("Invalid path: " + part);
                        pieces.push(m[0] == "*" ? "" : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
                        pos += m[0].length;
                        if (pos == part.length)
                            break;
                        let next = part[pos++];
                        if (pos == part.length && next == "!") {
                            mode = 0 /* Opaque */;
                            break;
                        }
                        if (next != "/")
                            throw new RangeError("Invalid path: " + part);
                        rest = part.slice(pos);
                    }
                    let last = pieces.length - 1, inner = pieces[last];
                    if (!inner)
                        throw new RangeError("Invalid path: " + part);
                    let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
                    byName[inner] = rule.sort(byName[inner]);
                }
        }
        return ruleNodeProp.add(byName);
    }
    const ruleNodeProp = new NodeProp();
    class Rule {
        constructor(tags, mode, context, next) {
            this.tags = tags;
            this.mode = mode;
            this.context = context;
            this.next = next;
        }
        get opaque() { return this.mode == 0 /* Opaque */; }
        get inherit() { return this.mode == 1 /* Inherit */; }
        sort(other) {
            if (!other || other.depth < this.depth) {
                this.next = other;
                return this;
            }
            other.next = this.sort(other.next);
            return other;
        }
        get depth() { return this.context ? this.context.length : 0; }
    }
    Rule.empty = new Rule([], 2 /* Normal */, null);
    /**
    Define a [highlighter](#highlight.Highlighter) from an array of
    tag/class pairs. Classes associated with more specific tags will
    take precedence.
    */
    function tagHighlighter(tags, options) {
        let map = Object.create(null);
        for (let style of tags) {
            if (!Array.isArray(style.tag))
                map[style.tag.id] = style.class;
            else
                for (let tag of style.tag)
                    map[tag.id] = style.class;
        }
        let { scope, all = null } = options || {};
        return {
            style: (tags) => {
                let cls = all;
                for (let tag of tags) {
                    for (let sub of tag.set) {
                        let tagClass = map[sub.id];
                        if (tagClass) {
                            cls = cls ? cls + " " + tagClass : tagClass;
                            break;
                        }
                    }
                }
                return cls;
            },
            scope
        };
    }
    const t = Tag.define;
    const comment$1 = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading$1 = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();
    /**
    The default set of highlighting [tags](#highlight.Tag).
 
    This collection is heavily biased towards programming languages,
    and necessarily incomplete. A full ontology of syntactic
    constructs would fill a stack of books, and be impractical to
    write themes for. So try to make do with this set. If all else
    fails, [open an
    issue](https://github.com/codemirror/codemirror.next) to propose a
    new tag, or [define](#highlight.Tag^define) a local custom tag for
    your use case.
 
    Note that it is not obligatory to always attach the most specific
    tag possible to an element—if your grammar can't easily
    distinguish a certain type of element (such as a local variable),
    it is okay to style it as its more general variant (a variable).
 
    For tags that extend some parent tag, the documentation links to
    the parent.
    */
    const tags = {
        /**
        A comment.
        */
        comment: comment$1,
        /**
        A line [comment](#highlight.tags.comment).
        */
        lineComment: t(comment$1),
        /**
        A block [comment](#highlight.tags.comment).
        */
        blockComment: t(comment$1),
        /**
        A documentation [comment](#highlight.tags.comment).
        */
        docComment: t(comment$1),
        /**
        Any kind of identifier.
        */
        name,
        /**
        The [name](#highlight.tags.name) of a variable.
        */
        variableName: t(name),
        /**
        A type [name](#highlight.tags.name).
        */
        typeName: typeName,
        /**
        A tag name (subtag of [`typeName`](#highlight.tags.typeName)).
        */
        tagName: t(typeName),
        /**
        A property or field [name](#highlight.tags.name).
        */
        propertyName: propertyName,
        /**
        An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).
        */
        attributeName: t(propertyName),
        /**
        The [name](#highlight.tags.name) of a class.
        */
        className: t(name),
        /**
        A label [name](#highlight.tags.name).
        */
        labelName: t(name),
        /**
        A namespace [name](#highlight.tags.name).
        */
        namespace: t(name),
        /**
        The [name](#highlight.tags.name) of a macro.
        */
        macroName: t(name),
        /**
        A literal value.
        */
        literal,
        /**
        A string [literal](#highlight.tags.literal).
        */
        string,
        /**
        A documentation [string](#highlight.tags.string).
        */
        docString: t(string),
        /**
        A character literal (subtag of [string](#highlight.tags.string)).
        */
        character: t(string),
        /**
        An attribute value (subtag of [string](#highlight.tags.string)).
        */
        attributeValue: t(string),
        /**
        A number [literal](#highlight.tags.literal).
        */
        number,
        /**
        An integer [number](#highlight.tags.number) literal.
        */
        integer: t(number),
        /**
        A floating-point [number](#highlight.tags.number) literal.
        */
        float: t(number),
        /**
        A boolean [literal](#highlight.tags.literal).
        */
        bool: t(literal),
        /**
        Regular expression [literal](#highlight.tags.literal).
        */
        regexp: t(literal),
        /**
        An escape [literal](#highlight.tags.literal), for example a
        backslash escape in a string.
        */
        escape: t(literal),
        /**
        A color [literal](#highlight.tags.literal).
        */
        color: t(literal),
        /**
        A URL [literal](#highlight.tags.literal).
        */
        url: t(literal),
        /**
        A language keyword.
        */
        keyword,
        /**
        The [keyword](#highlight.tags.keyword) for the self or this
        object.
        */
        self: t(keyword),
        /**
        The [keyword](#highlight.tags.keyword) for null.
        */
        null: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) denoting some atomic value.
        */
        atom: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that represents a unit.
        */
        unit: t(keyword),
        /**
        A modifier [keyword](#highlight.tags.keyword).
        */
        modifier: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that acts as an operator.
        */
        operatorKeyword: t(keyword),
        /**
        A control-flow related [keyword](#highlight.tags.keyword).
        */
        controlKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) that defines something.
        */
        definitionKeyword: t(keyword),
        /**
        A [keyword](#highlight.tags.keyword) related to defining or
        interfacing with modules.
        */
        moduleKeyword: t(keyword),
        /**
        An operator.
        */
        operator,
        /**
        An [operator](#highlight.tags.operator) that dereferences something.
        */
        derefOperator: t(operator),
        /**
        Arithmetic-related [operator](#highlight.tags.operator).
        */
        arithmeticOperator: t(operator),
        /**
        Logical [operator](#highlight.tags.operator).
        */
        logicOperator: t(operator),
        /**
        Bit [operator](#highlight.tags.operator).
        */
        bitwiseOperator: t(operator),
        /**
        Comparison [operator](#highlight.tags.operator).
        */
        compareOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that updates its operand.
        */
        updateOperator: t(operator),
        /**
        [Operator](#highlight.tags.operator) that defines something.
        */
        definitionOperator: t(operator),
        /**
        Type-related [operator](#highlight.tags.operator).
        */
        typeOperator: t(operator),
        /**
        Control-flow [operator](#highlight.tags.operator).
        */
        controlOperator: t(operator),
        /**
        Program or markup punctuation.
        */
        punctuation,
        /**
        [Punctuation](#highlight.tags.punctuation) that separates
        things.
        */
        separator: t(punctuation),
        /**
        Bracket-style [punctuation](#highlight.tags.punctuation).
        */
        bracket,
        /**
        Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`
        tokens).
        */
        angleBracket: t(bracket),
        /**
        Square [brackets](#highlight.tags.bracket) (usually `[` and `]`
        tokens).
        */
        squareBracket: t(bracket),
        /**
        Parentheses (usually `(` and `)` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        paren: t(bracket),
        /**
        Braces (usually `{` and `}` tokens). Subtag of
        [bracket](#highlight.tags.bracket).
        */
        brace: t(bracket),
        /**
        Content, for example plain text in XML or markup documents.
        */
        content,
        /**
        [Content](#highlight.tags.content) that represents a heading.
        */
        heading: heading$1,
        /**
        A level 1 [heading](#highlight.tags.heading).
        */
        heading1: t(heading$1),
        /**
        A level 2 [heading](#highlight.tags.heading).
        */
        heading2: t(heading$1),
        /**
        A level 3 [heading](#highlight.tags.heading).
        */
        heading3: t(heading$1),
        /**
        A level 4 [heading](#highlight.tags.heading).
        */
        heading4: t(heading$1),
        /**
        A level 5 [heading](#highlight.tags.heading).
        */
        heading5: t(heading$1),
        /**
        A level 6 [heading](#highlight.tags.heading).
        */
        heading6: t(heading$1),
        /**
        A prose separator (such as a horizontal rule).
        */
        contentSeparator: t(content),
        /**
        [Content](#highlight.tags.content) that represents a list.
        */
        list: t(content),
        /**
        [Content](#highlight.tags.content) that represents a quote.
        */
        quote: t(content),
        /**
        [Content](#highlight.tags.content) that is emphasized.
        */
        emphasis: t(content),
        /**
        [Content](#highlight.tags.content) that is styled strong.
        */
        strong: t(content),
        /**
        [Content](#highlight.tags.content) that is part of a link.
        */
        link: t(content),
        /**
        [Content](#highlight.tags.content) that is styled as code or
        monospace.
        */
        monospace: t(content),
        /**
        [Content](#highlight.tags.content) that has a strike-through
        style.
        */
        strikethrough: t(content),
        /**
        Inserted text in a change-tracking format.
        */
        inserted: t(),
        /**
        Deleted text.
        */
        deleted: t(),
        /**
        Changed text.
        */
        changed: t(),
        /**
        An invalid or unsyntactic element.
        */
        invalid: t(),
        /**
        Metadata or meta-instruction.
        */
        meta,
        /**
        [Metadata](#highlight.tags.meta) that applies to the entire
        document.
        */
        documentMeta: t(meta),
        /**
        [Metadata](#highlight.tags.meta) that annotates or adds
        attributes to a given syntactic element.
        */
        annotation: t(meta),
        /**
        Processing instruction or preprocessor directive. Subtag of
        [meta](#highlight.tags.meta).
        */
        processingInstruction: t(meta),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that a
        given element is being defined. Expected to be used with the
        various [name](#highlight.tags.name) tags.
        */
        definition: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates that
        something is constant. Mostly expected to be used with
        [variable names](#highlight.tags.variableName).
        */
        constant: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) used to indicate that
        a [variable](#highlight.tags.variableName) or [property
        name](#highlight.tags.propertyName) is being called or defined
        as a function.
        */
        function: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that can be applied to
        [names](#highlight.tags.name) to indicate that they belong to
        the language's standard environment.
        */
        standard: Tag.defineModifier(),
        /**
        [Modifier](#highlight.Tag^defineModifier) that indicates a given
        [names](#highlight.tags.name) is local to some scope.
        */
        local: Tag.defineModifier(),
        /**
        A generic variant [modifier](#highlight.Tag^defineModifier) that
        can be used to tag language-specific alternative variants of
        some common tag. It is recommended for themes to define special
        forms of at least the [string](#highlight.tags.string) and
        [variable name](#highlight.tags.variableName) tags, since those
        come up a lot.
        */
        special: Tag.defineModifier()
    };
    /**
    This is a highlighter that adds stable, predictable classes to
    tokens, for styling with external CSS.
 
    The following tags are mapped to their name prefixed with `"tok-"`
    (for example `"tok-comment"`):
 
    * [`link`](#highlight.tags.link)
    * [`heading`](#highlight.tags.heading)
    * [`emphasis`](#highlight.tags.emphasis)
    * [`strong`](#highlight.tags.strong)
    * [`keyword`](#highlight.tags.keyword)
    * [`atom`](#highlight.tags.atom)
    * [`bool`](#highlight.tags.bool)
    * [`url`](#highlight.tags.url)
    * [`labelName`](#highlight.tags.labelName)
    * [`inserted`](#highlight.tags.inserted)
    * [`deleted`](#highlight.tags.deleted)
    * [`literal`](#highlight.tags.literal)
    * [`string`](#highlight.tags.string)
    * [`number`](#highlight.tags.number)
    * [`variableName`](#highlight.tags.variableName)
    * [`typeName`](#highlight.tags.typeName)
    * [`namespace`](#highlight.tags.namespace)
    * [`className`](#highlight.tags.className)
    * [`macroName`](#highlight.tags.macroName)
    * [`propertyName`](#highlight.tags.propertyName)
    * [`operator`](#highlight.tags.operator)
    * [`comment`](#highlight.tags.comment)
    * [`meta`](#highlight.tags.meta)
    * [`punctuation`](#highlight.tags.punctuation)
    * [`invalid`](#highlight.tags.invalid)
 
    In addition, these mappings are provided:
 
    * [`regexp`](#highlight.tags.regexp),
      [`escape`](#highlight.tags.escape), and
      [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)
      are mapped to `"tok-string2"`
    * [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName2"`
    * [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-local"`
    * [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)
      to `"tok-variableName tok-definition"`
    * [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)
      to `"tok-propertyName tok-definition"`
    */
    tagHighlighter([
        { tag: tags.link, class: "tok-link" },
        { tag: tags.heading, class: "tok-heading" },
        { tag: tags.emphasis, class: "tok-emphasis" },
        { tag: tags.strong, class: "tok-strong" },
        { tag: tags.keyword, class: "tok-keyword" },
        { tag: tags.atom, class: "tok-atom" },
        { tag: tags.bool, class: "tok-bool" },
        { tag: tags.url, class: "tok-url" },
        { tag: tags.labelName, class: "tok-labelName" },
        { tag: tags.inserted, class: "tok-inserted" },
        { tag: tags.deleted, class: "tok-deleted" },
        { tag: tags.literal, class: "tok-literal" },
        { tag: tags.string, class: "tok-string" },
        { tag: tags.number, class: "tok-number" },
        { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: "tok-string2" },
        { tag: tags.variableName, class: "tok-variableName" },
        { tag: tags.local(tags.variableName), class: "tok-variableName tok-local" },
        { tag: tags.definition(tags.variableName), class: "tok-variableName tok-definition" },
        { tag: tags.special(tags.variableName), class: "tok-variableName2" },
        { tag: tags.definition(tags.propertyName), class: "tok-propertyName tok-definition" },
        { tag: tags.typeName, class: "tok-typeName" },
        { tag: tags.namespace, class: "tok-namespace" },
        { tag: tags.className, class: "tok-className" },
        { tag: tags.macroName, class: "tok-macroName" },
        { tag: tags.propertyName, class: "tok-propertyName" },
        { tag: tags.operator, class: "tok-operator" },
        { tag: tags.comment, class: "tok-comment" },
        { tag: tags.meta, class: "tok-meta" },
        { tag: tags.invalid, class: "tok-invalid" },
        { tag: tags.punctuation, class: "tok-punctuation" }
    ]);
 
    var _a;
    /**
    Node prop stored in a parser's top syntax node to provide the
    facet that stores language-specific data for that language.
    */
    const languageDataProp = /*@__PURE__*/new NodeProp();
    /**
    Syntax node prop used to register sublanguages. Should be added to
    the top level node type for the language.
    */
    const sublanguageProp = /*@__PURE__*/new NodeProp();
    /**
    A language object manages parsing and per-language
    [metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
    managed as a [Lezer](https://lezer.codemirror.net) tree. The class
    can be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)
    subclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or
    via the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass
    for stream parsers.
    */
    class Language {
        /**
        Construct a language object. If you need to invoke this
        directly, first define a data facet with
        [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then
        configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it
        to the language's outer syntax node.
        */
        constructor(
        /**
        The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet
        used for this language.
        */
        data, parser, extraExtensions = [], 
        /**
        A language name.
        */
        name = "") {
            this.data = data;
            this.name = name;
            // Kludge to define EditorState.tree as a debugging helper,
            // without the EditorState package actually knowing about
            // languages and lezer trees.
            if (!EditorState.prototype.hasOwnProperty("tree"))
                Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
            this.parser = parser;
            this.extension = [
                language.of(this),
                EditorState.languageData.of((state, pos, side) => {
                    let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);
                    if (!data)
                        return [];
                    let base = state.facet(data), sub = top.type.prop(sublanguageProp);
                    if (sub) {
                        let innerNode = top.resolve(pos - top.from, side);
                        for (let sublang of sub)
                            if (sublang.test(innerNode, state)) {
                                let data = state.facet(sublang.facet);
                                return sublang.type == "replace" ? data : data.concat(base);
                            }
                    }
                    return base;
                })
            ].concat(extraExtensions);
        }
        /**
        Query whether this language is active at the given position.
        */
        isActiveAt(state, pos, side = -1) {
            return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;
        }
        /**
        Find the document regions that were parsed using this language.
        The returned regions will _include_ any nested languages rooted
        in this language, when those exist.
        */
        findRegions(state) {
            let lang = state.facet(language);
            if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
                return [{ from: 0, to: state.doc.length }];
            if (!lang || !lang.allowsNesting)
                return [];
            let result = [];
            let explore = (tree, from) => {
                if (tree.prop(languageDataProp) == this.data) {
                    result.push({ from, to: from + tree.length });
                    return;
                }
                let mount = tree.prop(NodeProp.mounted);
                if (mount) {
                    if (mount.tree.prop(languageDataProp) == this.data) {
                        if (mount.overlay)
                            for (let r of mount.overlay)
                                result.push({ from: r.from + from, to: r.to + from });
                        else
                            result.push({ from: from, to: from + tree.length });
                        return;
                    }
                    else if (mount.overlay) {
                        let size = result.length;
                        explore(mount.tree, mount.overlay[0].from + from);
                        if (result.length > size)
                            return;
                    }
                }
                for (let i = 0; i < tree.children.length; i++) {
                    let ch = tree.children[i];
                    if (ch instanceof Tree)
                        explore(ch, tree.positions[i] + from);
                }
            };
            explore(syntaxTree(state), 0);
            return result;
        }
        /**
        Indicates whether this language allows nested languages. The
        default implementation returns true.
        */
        get allowsNesting() { return true; }
    }
    /**
    @internal
    */
    Language.setState = /*@__PURE__*/StateEffect.define();
    function topNodeAt(state, pos, side) {
        let topLang = state.facet(language), tree = syntaxTree(state).topNode;
        if (!topLang || topLang.allowsNesting) {
            for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))
                if (node.type.isTop)
                    tree = node;
        }
        return tree;
    }
    /**
    Get the syntax tree for a state, which is the current (possibly
    incomplete) parse tree of the active
    [language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no
    language available.
    */
    function syntaxTree(state) {
        let field = state.field(Language.state, false);
        return field ? field.tree : Tree.empty;
    }
    /**
    Lezer-style
    [`Input`](https://lezer.codemirror.net/docs/ref#common.Input)
    object for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.
    */
    class DocInput {
        /**
        Create an input object for the given document.
        */
        constructor(doc) {
            this.doc = doc;
            this.cursorPos = 0;
            this.string = "";
            this.cursor = doc.iter();
        }
        get length() { return this.doc.length; }
        syncTo(pos) {
            this.string = this.cursor.next(pos - this.cursorPos).value;
            this.cursorPos = pos + this.string.length;
            return this.cursorPos - this.string.length;
        }
        chunk(pos) {
            this.syncTo(pos);
            return this.string;
        }
        get lineChunks() { return true; }
        read(from, to) {
            let stringStart = this.cursorPos - this.string.length;
            if (from < stringStart || to >= this.cursorPos)
                return this.doc.sliceString(from, to);
            else
                return this.string.slice(from - stringStart, to - stringStart);
        }
    }
    let currentContext = null;
    /**
    A parse context provided to parsers working on the editor content.
    */
    class ParseContext {
        constructor(parser, 
        /**
        The current editor state.
        */
        state, 
        /**
        Tree fragments that can be reused by incremental re-parses.
        */
        fragments = [], 
        /**
        @internal
        */
        tree, 
        /**
        @internal
        */
        treeLen, 
        /**
        The current editor viewport (or some overapproximation
        thereof). Intended to be used for opportunistically avoiding
        work (in which case
        [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
        should be called to make sure the parser is restarted when the
        skipped region becomes visible).
        */
        viewport, 
        /**
        @internal
        */
        skipped, 
        /**
        This is where skipping parsers can register a promise that,
        when resolved, will schedule a new parse. It is cleared when
        the parse worker picks up the promise. @internal
        */
        scheduleOn) {
            this.parser = parser;
            this.state = state;
            this.fragments = fragments;
            this.tree = tree;
            this.treeLen = treeLen;
            this.viewport = viewport;
            this.skipped = skipped;
            this.scheduleOn = scheduleOn;
            this.parse = null;
            /**
            @internal
            */
            this.tempSkipped = [];
        }
        /**
        @internal
        */
        static create(parser, state, viewport) {
            return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);
        }
        startParse() {
            return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
        }
        /**
        @internal
        */
        work(until, upto) {
            if (upto != null && upto >= this.state.doc.length)
                upto = undefined;
            if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
                this.takeTree();
                return true;
            }
            return this.withContext(() => {
                var _a;
                if (typeof until == "number") {
                    let endTime = Date.now() + until;
                    until = () => Date.now() > endTime;
                }
                if (!this.parse)
                    this.parse = this.startParse();
                if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
                    upto < this.state.doc.length)
                    this.parse.stopAt(upto);
                for (;;) {
                    let done = this.parse.advance();
                    if (done) {
                        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
                        this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
                        this.tree = done;
                        this.parse = null;
                        if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
                            this.parse = this.startParse();
                        else
                            return true;
                    }
                    if (until())
                        return false;
                }
            });
        }
        /**
        @internal
        */
        takeTree() {
            let pos, tree;
            if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {
                if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
                    this.parse.stopAt(pos);
                this.withContext(() => { while (!(tree = this.parse.advance())) { } });
                this.treeLen = pos;
                this.tree = tree;
                this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
                this.parse = null;
            }
        }
        withContext(f) {
            let prev = currentContext;
            currentContext = this;
            try {
                return f();
            }
            finally {
                currentContext = prev;
            }
        }
        withoutTempSkipped(fragments) {
            for (let r; r = this.tempSkipped.pop();)
                fragments = cutFragments(fragments, r.from, r.to);
            return fragments;
        }
        /**
        @internal
        */
        changes(changes, newState) {
            let { fragments, tree, treeLen, viewport, skipped } = this;
            this.takeTree();
            if (!changes.empty) {
                let ranges = [];
                changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
                fragments = TreeFragment.applyChanges(fragments, ranges);
                tree = Tree.empty;
                treeLen = 0;
                viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
                if (this.skipped.length) {
                    skipped = [];
                    for (let r of this.skipped) {
                        let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
                        if (from < to)
                            skipped.push({ from, to });
                    }
                }
            }
            return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
        }
        /**
        @internal
        */
        updateViewport(viewport) {
            if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
                return false;
            this.viewport = viewport;
            let startLen = this.skipped.length;
            for (let i = 0; i < this.skipped.length; i++) {
                let { from, to } = this.skipped[i];
                if (from < viewport.to && to > viewport.from) {
                    this.fragments = cutFragments(this.fragments, from, to);
                    this.skipped.splice(i--, 1);
                }
            }
            if (this.skipped.length >= startLen)
                return false;
            this.reset();
            return true;
        }
        /**
        @internal
        */
        reset() {
            if (this.parse) {
                this.takeTree();
                this.parse = null;
            }
        }
        /**
        Notify the parse scheduler that the given region was skipped
        because it wasn't in view, and the parse should be restarted
        when it comes into view.
        */
        skipUntilInView(from, to) {
            this.skipped.push({ from, to });
        }
        /**
        Returns a parser intended to be used as placeholder when
        asynchronously loading a nested parser. It'll skip its input and
        mark it as not-really-parsed, so that the next update will parse
        it again.
        
        When `until` is given, a reparse will be scheduled when that
        promise resolves.
        */
        static getSkippingParser(until) {
            return new class extends Parser {
                createParse(input, fragments, ranges) {
                    let from = ranges[0].from, to = ranges[ranges.length - 1].to;
                    let parser = {
                        parsedPos: from,
                        advance() {
                            let cx = currentContext;
                            if (cx) {
                                for (let r of ranges)
                                    cx.tempSkipped.push(r);
                                if (until)
                                    cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
                            }
                            this.parsedPos = to;
                            return new Tree(NodeType.none, [], [], to - from);
                        },
                        stoppedAt: null,
                        stopAt() { }
                    };
                    return parser;
                }
            };
        }
        /**
        @internal
        */
        isDone(upto) {
            upto = Math.min(upto, this.state.doc.length);
            let frags = this.fragments;
            return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
        }
        /**
        Get the context for the current parse, or `null` if no editor
        parse is in progress.
        */
        static get() { return currentContext; }
    }
    function cutFragments(fragments, from, to) {
        return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
    }
    class LanguageState {
        constructor(
        // A mutable parse state that is used to preserve work done during
        // the lifetime of a state when moving to the next state.
        context) {
            this.context = context;
            this.tree = context.tree;
        }
        apply(tr) {
            if (!tr.docChanged && this.tree == this.context.tree)
                return this;
            let newCx = this.context.changes(tr.changes, tr.state);
            // If the previous parse wasn't done, go forward only up to its
            // end position or the end of the viewport, to avoid slowing down
            // state updates with parse work beyond the viewport.
            let upto = this.context.treeLen == tr.startState.doc.length ? undefined
                : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
            if (!newCx.work(20 /* Apply */, upto))
                newCx.takeTree();
            return new LanguageState(newCx);
        }
        static init(state) {
            let vpTo = Math.min(3000 /* InitViewport */, state.doc.length);
            let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });
            if (!parseState.work(20 /* Apply */, vpTo))
                parseState.takeTree();
            return new LanguageState(parseState);
        }
    }
    Language.state = /*@__PURE__*/StateField.define({
        create: LanguageState.init,
        update(value, tr) {
            for (let e of tr.effects)
                if (e.is(Language.setState))
                    return e.value;
            if (tr.startState.facet(language) != tr.state.facet(language))
                return LanguageState.init(tr.state);
            return value.apply(tr);
        }
    });
    let requestIdle = (callback) => {
        let timeout = setTimeout(() => callback(), 500 /* MaxPause */);
        return () => clearTimeout(timeout);
    };
    if (typeof requestIdleCallback != "undefined")
        requestIdle = (callback) => {
            let idle = -1, timeout = setTimeout(() => {
                idle = requestIdleCallback(callback, { timeout: 500 /* MaxPause */ - 100 /* MinPause */ });
            }, 100 /* MinPause */);
            return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);
        };
    const isInputPending = typeof navigator != "undefined" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)
        ? () => navigator.scheduling.isInputPending() : null;
    const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
        constructor(view) {
            this.view = view;
            this.working = null;
            this.workScheduled = 0;
            // End of the current time chunk
            this.chunkEnd = -1;
            // Milliseconds of budget left for this chunk
            this.chunkBudget = -1;
            this.work = this.work.bind(this);
            this.scheduleWork();
        }
        update(update) {
            let cx = this.view.state.field(Language.state).context;
            if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
                this.scheduleWork();
            if (update.docChanged) {
                if (this.view.hasFocus)
                    this.chunkBudget += 50 /* ChangeBonus */;
                this.scheduleWork();
            }
            this.checkAsyncSchedule(cx);
        }
        scheduleWork() {
            if (this.working)
                return;
            let { state } = this.view, field = state.field(Language.state);
            if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
                this.working = requestIdle(this.work);
        }
        work(deadline) {
            this.working = null;
            let now = Date.now();
            if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
                this.chunkEnd = now + 30000 /* ChunkTime */;
                this.chunkBudget = 3000 /* ChunkBudget */;
            }
            if (this.chunkBudget <= 0)
                return; // No more budget
            let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
            if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* MaxParseAhead */))
                return;
            let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Slice */, deadline && !isInputPending ? Math.max(25 /* MinSlice */, deadline.timeRemaining() - 5) : 1e9);
            let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;
            let done = field.context.work(() => {
                return isInputPending && isInputPending() || Date.now() > endTime;
            }, vpTo + (viewportFirst ? 0 : 100000 /* MaxParseAhead */));
            this.chunkBudget -= Date.now() - now;
            if (done || this.chunkBudget <= 0) {
                field.context.takeTree();
                this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
            }
            if (this.chunkBudget > 0 && !(done && !viewportFirst))
                this.scheduleWork();
            this.checkAsyncSchedule(field.context);
        }
        checkAsyncSchedule(cx) {
            if (cx.scheduleOn) {
                this.workScheduled++;
                cx.scheduleOn
                    .then(() => this.scheduleWork())
                    .catch(err => logException(this.view.state, err))
                    .then(() => this.workScheduled--);
                cx.scheduleOn = null;
            }
        }
        destroy() {
            if (this.working)
                this.working();
        }
        isWorking() {
            return !!(this.working || this.workScheduled > 0);
        }
    }, {
        eventHandlers: { focus() { this.scheduleWork(); } }
    });
    /**
    The facet used to associate a language with an editor state. Used
    by `Language` object's `extension` property (so you don't need to
    manually wrap your languages in this). Can be used to access the
    current language on a state.
    */
    const language = /*@__PURE__*/Facet.define({
        combine(languages) { return languages.length ? languages[0] : null; },
        enables: language => [
            Language.state,
            parseWorker,
            EditorView.contentAttributes.compute([language], state => {
                let lang = state.facet(language);
                return lang && lang.name ? { "data-language": lang.name } : {};
            })
        ]
    });
 
    /**
    Facet that defines a way to provide a function that computes the
    appropriate indentation depth, as a column number (see
    [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given
    line. A return value of `null` indicates no indentation can be
    determined, and the line should inherit the indentation of the one
    above it. A return value of `undefined` defers to the next indent
    service.
    */
    const indentService = /*@__PURE__*/Facet.define();
    /**
    Facet for overriding the unit by which indentation happens. Should
    be a string consisting either entirely of the same whitespace
    character. When not set, this defaults to 2 spaces.
    */
    const indentUnit = /*@__PURE__*/Facet.define({
        combine: values => {
            if (!values.length)
                return "  ";
            let unit = values[0];
            if (!unit || /\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))
                throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
            return unit;
        }
    });
    /**
    Return the _column width_ of an indent unit in the state.
    Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
    facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
    contains tabs.
    */
    function getIndentUnit(state) {
        let unit = state.facet(indentUnit);
        return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
    }
    /**
    Create an indentation string that covers columns 0 to `cols`.
    Will use tabs for as much of the columns as possible when the
    [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
    tabs.
    */
    function indentString(state, cols) {
        let result = "", ts = state.tabSize, ch = state.facet(indentUnit)[0];
        if (ch == "\t") {
            while (cols >= ts) {
                result += "\t";
                cols -= ts;
            }
            ch = " ";
        }
        for (let i = 0; i < cols; i++)
            result += ch;
        return result;
    }
    /**
    Get the indentation, as a column number, at the given position.
    Will first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)
    that are registered, and if none of those return an indentation,
    this will check the syntax tree for the [indent node
    prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a
    number when an indentation could be determined, and null
    otherwise.
    */
    function getIndentation(context, pos) {
        if (context instanceof EditorState)
            context = new IndentContext(context);
        for (let service of context.state.facet(indentService)) {
            let result = service(context, pos);
            if (result !== undefined)
                return result;
        }
        let tree = syntaxTree(context.state);
        return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;
    }
    /**
    Indentation contexts are used when calling [indentation
    services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
    useful in indentation logic, and can selectively override the
    indentation reported for some lines.
    */
    class IndentContext {
        /**
        Create an indent context.
        */
        constructor(
        /**
        The editor state.
        */
        state, 
        /**
        @internal
        */
        options = {}) {
            this.state = state;
            this.options = options;
            this.unit = getIndentUnit(state);
        }
        /**
        Get a description of the line at the given position, taking
        [simulated line
        breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        into account. If there is such a break at `pos`, the `bias`
        argument determines whether the part of the line line before or
        after the break is used.
        */
        lineAt(pos, bias = 1) {
            let line = this.state.doc.lineAt(pos);
            let { simulateBreak, simulateDoubleBreak } = this.options;
            if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
                if (simulateDoubleBreak && simulateBreak == pos)
                    return { text: "", from: pos };
                else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
                    return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
                else
                    return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
            }
            return line;
        }
        /**
        Get the text directly after `pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        textAfterPos(pos, bias = 1) {
            if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
                return "";
            let { text, from } = this.lineAt(pos, bias);
            return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
        }
        /**
        Find the column for the given position.
        */
        column(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let result = this.countColumn(text, pos - from);
            let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
            if (override > -1)
                result += override - this.countColumn(text, text.search(/\S|$/));
            return result;
        }
        /**
        Find the column position (taking tabs into account) of the given
        position in the given string.
        */
        countColumn(line, pos = line.length) {
            return countColumn(line, this.state.tabSize, pos);
        }
        /**
        Find the indentation column of the line at the given point.
        */
        lineIndent(pos, bias = 1) {
            let { text, from } = this.lineAt(pos, bias);
            let override = this.options.overrideIndentation;
            if (override) {
                let overriden = override(from);
                if (overriden > -1)
                    return overriden;
            }
            return this.countColumn(text, text.search(/\S|$/));
        }
        /**
        Returns the [simulated line
        break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
        for this context, if any.
        */
        get simulatedBreak() {
            return this.options.simulateBreak || null;
        }
    }
    /**
    A syntax tree node prop used to associate indentation strategies
    with node types. Such a strategy is a function from an indentation
    context to a column number (see also
    [`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null
    indicates that no definitive indentation can be determined.
    */
    const indentNodeProp = /*@__PURE__*/new NodeProp();
    // Compute the indentation for a given position from the syntax tree.
    function syntaxIndentation(cx, ast, pos) {
        return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
    }
    function ignoreClosed(cx) {
        return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
    }
    function indentStrategy(tree) {
        let strategy = tree.type.prop(indentNodeProp);
        if (strategy)
            return strategy;
        let first = tree.firstChild, close;
        if (first && (close = first.type.prop(NodeProp.closedBy))) {
            let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
            return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
        }
        return tree.parent == null ? topIndent : null;
    }
    function indentFrom(node, pos, base) {
        for (; node; node = node.parent) {
            let strategy = indentStrategy(node);
            if (strategy)
                return strategy(TreeIndentContext.create(base, pos, node));
        }
        return null;
    }
    function topIndent() { return 0; }
    /**
    Objects of this type provide context information and helper
    methods to indentation functions registered on syntax nodes.
    */
    class TreeIndentContext extends IndentContext {
        constructor(base, 
        /**
        The position at which indentation is being computed.
        */
        pos, 
        /**
        The syntax tree node to which the indentation strategy
        applies.
        */
        node) {
            super(base.state, base.options);
            this.base = base;
            this.pos = pos;
            this.node = node;
        }
        /**
        @internal
        */
        static create(base, pos, node) {
            return new TreeIndentContext(base, pos, node);
        }
        /**
        Get the text directly after `this.pos`, either the entire line
        or the next 100 characters, whichever is shorter.
        */
        get textAfter() {
            return this.textAfterPos(this.pos);
        }
        /**
        Get the indentation at the reference line for `this.node`, which
        is the line on which it starts, unless there is a node that is
        _not_ a parent of this node covering the start of that line. If
        so, the line at the start of that node is tried, again skipping
        on if it is covered by another such node.
        */
        get baseIndent() {
            return this.baseIndentFor(this.node);
        }
        /**
        Get the indentation for the reference line of the given node
        (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).
        */
        baseIndentFor(node) {
            let line = this.state.doc.lineAt(node.from);
            // Skip line starts that are covered by a sibling (or cousin, etc)
            for (;;) {
                let atBreak = node.resolve(line.from);
                while (atBreak.parent && atBreak.parent.from == atBreak.from)
                    atBreak = atBreak.parent;
                if (isParent(atBreak, node))
                    break;
                line = this.state.doc.lineAt(atBreak.from);
            }
            return this.lineIndent(line.from);
        }
        /**
        Continue looking for indentations in the node's parent nodes,
        and return the result of that.
        */
        continue() {
            let parent = this.node.parent;
            return parent ? indentFrom(parent, this.pos, this.base) : 0;
        }
    }
    function isParent(parent, of) {
        for (let cur = of; cur; cur = cur.parent)
            if (parent == cur)
                return true;
        return false;
    }
    // Check whether a delimited node is aligned (meaning there are
    // non-skipped nodes on the same line as the opening delimiter). And
    // if so, return the opening token.
    function bracketedAligned(context) {
        let tree = context.node;
        let openToken = tree.childAfter(tree.from), last = tree.lastChild;
        if (!openToken)
            return null;
        let sim = context.options.simulateBreak;
        let openLine = context.state.doc.lineAt(openToken.from);
        let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
        for (let pos = openToken.to;;) {
            let next = tree.childAfter(pos);
            if (!next || next == last)
                return null;
            if (!next.type.isSkipped)
                return next.from < lineEnd ? openToken : null;
            pos = next.to;
        }
    }
    function delimitedStrategy(context, align, units, closing, closedAt) {
        let after = context.textAfter, space = after.match(/^\s*/)[0].length;
        let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
        let aligned = align ? bracketedAligned(context) : null;
        if (aligned)
            return closed ? context.column(aligned.from) : context.column(aligned.to);
        return context.baseIndent + (closed ? 0 : context.unit * units);
    }
    const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
    /**
    When larger syntax nodes, such as HTML tags, are marked as
    opening/closing, it can be a bit messy to treat the whole node as
    a matchable bracket. This node prop allows you to define, for such
    a node, a ‘handle’—the part of the node that is highlighted, and
    that the cursor must be on to activate highlighting in the first
    place.
    */
    const bracketMatchingHandle = /*@__PURE__*/new NodeProp();
    function matchingNodes(node, dir, brackets) {
        let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
        if (byProp)
            return byProp;
        if (node.name.length == 1) {
            let index = brackets.indexOf(node.name);
            if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
                return [brackets[index + dir]];
        }
        return null;
    }
    function findHandle(node) {
        let hasHandle = node.type.prop(bracketMatchingHandle);
        return hasHandle ? hasHandle(node.node) : node;
    }
    /**
    Find the matching bracket for the token at `pos`, scanning
    direction `dir`. Only the `brackets` and `maxScanDistance`
    properties are used from `config`, if given. Returns null if no
    bracket was found at `pos`, or a match result otherwise.
    */
    function matchBrackets(state, pos, dir, config = {}) {
        let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
        let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
        for (let cur = node; cur; cur = cur.parent) {
            let matches = matchingNodes(cur.type, dir, brackets);
            if (matches && cur.from < cur.to) {
                let handle = findHandle(cur);
                if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))
                    return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);
            }
        }
        return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
    }
    function matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {
        let parent = token.parent, firstToken = { from: handle.from, to: handle.to };
        let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();
        if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
            do {
                if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
                    if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
                        let endHandle = findHandle(cursor);
                        return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };
                    }
                    else if (matchingNodes(cursor.type, dir, brackets)) {
                        depth++;
                    }
                    else if (matchingNodes(cursor.type, -dir, brackets)) {
                        if (depth == 0) {
                            let endHandle = findHandle(cursor);
                            return {
                                start: firstToken,
                                end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,
                                matched: false
                            };
                        }
                        depth--;
                    }
                }
            } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
        return { start: firstToken, matched: false };
    }
    function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
        let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
        let bracket = brackets.indexOf(startCh);
        if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
            return null;
        let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
        let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
        for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
            let text = iter.value;
            if (dir < 0)
                distance += text.length;
            let basePos = pos + distance * dir;
            for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
                let found = brackets.indexOf(text[pos]);
                if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)
                    continue;
                if ((found % 2 == 0) == (dir > 0)) {
                    depth++;
                }
                else if (depth == 1) { // Closing
                    return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
                }
                else {
                    depth--;
                }
            }
            if (dir > 0)
                distance += text.length;
        }
        return iter.done ? { start: startToken, matched: false } : null;
    }
    const noTokens = /*@__PURE__*/Object.create(null);
    const typeArray = [NodeType.none];
    const warned = [];
    const defaultTable = /*@__PURE__*/Object.create(null);
    for (let [legacyName, name] of [
        ["variable", "variableName"],
        ["variable-2", "variableName.special"],
        ["string-2", "string.special"],
        ["def", "variableName.definition"],
        ["tag", "tagName"],
        ["attribute", "attributeName"],
        ["type", "typeName"],
        ["builtin", "variableName.standard"],
        ["qualifier", "modifier"],
        ["error", "invalid"],
        ["header", "heading"],
        ["property", "propertyName"]
    ])
        defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);
    function warnForPart(part, msg) {
        if (warned.indexOf(part) > -1)
            return;
        warned.push(part);
        console.warn(msg);
    }
    function createTokenType(extra, tagStr) {
        let tag = null;
        for (let part of tagStr.split(".")) {
            let value = (extra[part] || tags[part]);
            if (!value) {
                warnForPart(part, `Unknown highlighting tag ${part}`);
            }
            else if (typeof value == "function") {
                if (!tag)
                    warnForPart(part, `Modifier ${part} used at start of tag`);
                else
                    tag = value(tag);
            }
            else {
                if (tag)
                    warnForPart(part, `Tag ${part} used as modifier`);
                else
                    tag = value;
            }
        }
        if (!tag)
            return 0;
        let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
            id: typeArray.length,
            name,
            props: [styleTags({ [name]: tag })]
        });
        typeArray.push(type);
        return type.id;
    }
 
    /**
    Comment or uncomment the current selection. Will use line comments
    if available, otherwise falling back to block comments.
    */
    const toggleComment = target => {
        let { state } = target, line = state.doc.lineAt(state.selection.main.from), config = getConfig(target.state, line.from);
        return config.line ? toggleLineComment(target) : config.block ? toggleBlockCommentByLine(target) : false;
    };
    function command(f, option) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let tr = f(option, state);
            if (!tr)
                return false;
            dispatch(state.update(tr));
            return true;
        };
    }
    /**
    Comment or uncomment the current selection using line comments.
    The line comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* CommentOption.Toggle */);
    /**
    Comment or uncomment the current selection using block comments.
    The block comment syntax is taken from the
    [`commentTokens`](https://codemirror.net/6/docs/ref/#commands.CommentTokens) [language
    data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
    */
    const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* CommentOption.Toggle */);
    /**
    Comment or uncomment the lines around the current selection using
    block comments.
    */
    const toggleBlockCommentByLine = /*@__PURE__*/command((o, s) => changeBlockComment(o, s, selectedLineRanges(s)), 0 /* CommentOption.Toggle */);
    function getConfig(state, pos) {
        let data = state.languageDataAt("commentTokens", pos);
        return data.length ? data[0] : {};
    }
    const SearchMargin = 50;
    /**
    Determines if the given range is block-commented in the given
    state.
    */
    function findBlockComment(state, { open, close }, from, to) {
        let textBefore = state.sliceDoc(from - SearchMargin, from);
        let textAfter = state.sliceDoc(to, to + SearchMargin);
        let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
        let beforeOff = textBefore.length - spaceBefore;
        if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
            textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
            return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
                close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
        }
        let startText, endText;
        if (to - from <= 2 * SearchMargin) {
            startText = endText = state.sliceDoc(from, to);
        }
        else {
            startText = state.sliceDoc(from, from + SearchMargin);
            endText = state.sliceDoc(to - SearchMargin, to);
        }
        let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
        let endOff = endText.length - endSpace - close.length;
        if (startText.slice(startSpace, startSpace + open.length) == open &&
            endText.slice(endOff, endOff + close.length) == close) {
            return { open: { pos: from + startSpace + open.length,
                    margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
                close: { pos: to - endSpace - close.length,
                    margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
        }
        return null;
    }
    function selectedLineRanges(state) {
        let ranges = [];
        for (let r of state.selection.ranges) {
            let fromLine = state.doc.lineAt(r.from);
            let toLine = r.to <= fromLine.to ? fromLine : state.doc.lineAt(r.to);
            let last = ranges.length - 1;
            if (last >= 0 && ranges[last].to > fromLine.from)
                ranges[last].to = toLine.to;
            else
                ranges.push({ from: fromLine.from + /^\s*/.exec(fromLine.text)[0].length, to: toLine.to });
        }
        return ranges;
    }
    // Performs toggle, comment and uncomment of block comments in
    // languages that support them.
    function changeBlockComment(option, state, ranges = state.selection.ranges) {
        let tokens = ranges.map(r => getConfig(state, r.from).block);
        if (!tokens.every(c => c))
            return null;
        let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
        if (option != 2 /* CommentOption.Uncomment */ && !comments.every(c => c)) {
            return { changes: state.changes(ranges.map((range, i) => {
                    if (comments[i])
                        return [];
                    return [{ from: range.from, insert: tokens[i].open + " " }, { from: range.to, insert: " " + tokens[i].close }];
                })) };
        }
        else if (option != 1 /* CommentOption.Comment */ && comments.some(c => c)) {
            let changes = [];
            for (let i = 0, comment; i < comments.length; i++)
                if (comment = comments[i]) {
                    let token = tokens[i], { open, close } = comment;
                    changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
                }
            return { changes };
        }
        return null;
    }
    // Performs toggle, comment and uncomment of line comments.
    function changeLineComment(option, state, ranges = state.selection.ranges) {
        let lines = [];
        let prevLine = -1;
        for (let { from, to } of ranges) {
            let startI = lines.length, minIndent = 1e9;
            let token = getConfig(state, from).line;
            if (!token)
                continue;
            for (let pos = from; pos <= to;) {
                let line = state.doc.lineAt(pos);
                if (line.from > prevLine && (from == to || to > line.from)) {
                    prevLine = line.from;
                    let indent = /^\s*/.exec(line.text)[0].length;
                    let empty = indent == line.length;
                    let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
                    if (indent < line.text.length && indent < minIndent)
                        minIndent = indent;
                    lines.push({ line, comment, token, indent, empty, single: false });
                }
                pos = line.to + 1;
            }
            if (minIndent < 1e9)
                for (let i = startI; i < lines.length; i++)
                    if (lines[i].indent < lines[i].line.text.length)
                        lines[i].indent = minIndent;
            if (lines.length == startI + 1)
                lines[startI].single = true;
        }
        if (option != 2 /* CommentOption.Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
            let changes = [];
            for (let { line, token, indent, empty, single } of lines)
                if (single || !empty)
                    changes.push({ from: line.from + indent, insert: token + " " });
            let changeSet = state.changes(changes);
            return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
        }
        else if (option != 1 /* CommentOption.Comment */ && lines.some(l => l.comment >= 0)) {
            let changes = [];
            for (let { line, comment, token } of lines)
                if (comment >= 0) {
                    let from = line.from + comment, to = from + token.length;
                    if (line.text[to - line.from] == " ")
                        to++;
                    changes.push({ from, to });
                }
            return { changes };
        }
        return null;
    }
 
    function updateSel(sel, by) {
        return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
    }
    function setSel(state, selection) {
        return state.update({ selection, scrollIntoView: true, userEvent: "select" });
    }
    function moveSel({ state, dispatch }, how) {
        let selection = updateSel(state.selection, how);
        if (selection.eq(state.selection))
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    function rangeEnd(range, forward) {
        return EditorSelection.cursor(forward ? range.to : range.from);
    }
    function cursorByChar(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
    }
    function ltrAtCursor(view) {
        return view.textDirectionAt(view.state.selection.main.head) == Direction.LTR;
    }
    /**
    Move the selection one character to the left (which is backward in
    left-to-right text, forward in right-to-left text).
    */
    const cursorCharLeft = view => cursorByChar(view, !ltrAtCursor(view));
    /**
    Move the selection one character to the right.
    */
    const cursorCharRight = view => cursorByChar(view, ltrAtCursor(view));
    function cursorByGroup(view, forward) {
        return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
    }
    /**
    Move the selection to the left across one group of word or
    non-word (but also non-space) characters.
    */
    const cursorGroupLeft = view => cursorByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection one group to the right.
    */
    const cursorGroupRight = view => cursorByGroup(view, ltrAtCursor(view));
    function interestingNode(state, node, bracketProp) {
        if (node.type.prop(bracketProp))
            return true;
        let len = node.to - node.from;
        return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
    }
    function moveBySyntax(state, start, forward) {
        let pos = syntaxTree(state).resolveInner(start.head);
        let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
        // Scan forward through child nodes to see if there's an interesting
        // node ahead.
        for (let at = start.head;;) {
            let next = forward ? pos.childAfter(at) : pos.childBefore(at);
            if (!next)
                break;
            if (interestingNode(state, next, bracketProp))
                pos = next;
            else
                at = forward ? next.to : next.from;
        }
        let bracket = pos.type.prop(bracketProp), match, newPos;
        if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
            newPos = forward ? match.end.to : match.end.from;
        else
            newPos = forward ? pos.to : pos.from;
        return EditorSelection.cursor(newPos, forward ? -1 : 1);
    }
    /**
    Move the cursor over the next syntactic element to the left.
    */
    const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the cursor over the next syntactic element to the right.
    */
    const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function cursorByLine(view, forward) {
        return moveSel(view, range => {
            if (!range.empty)
                return rangeEnd(range, forward);
            let moved = view.moveVertically(range, forward);
            return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
        });
    }
    /**
    Move the selection one line up.
    */
    const cursorLineUp = view => cursorByLine(view, false);
    /**
    Move the selection one line down.
    */
    const cursorLineDown = view => cursorByLine(view, true);
    function pageInfo(view) {
        let selfScroll = view.scrollDOM.clientHeight < view.scrollDOM.scrollHeight - 2;
        let marginTop = 0, marginBottom = 0, height;
        if (selfScroll) {
            for (let source of view.state.facet(EditorView.scrollMargins)) {
                let margins = source(view);
                if (margins === null || margins === void 0 ? void 0 : margins.top)
                    marginTop = Math.max(margins === null || margins === void 0 ? void 0 : margins.top, marginTop);
                if (margins === null || margins === void 0 ? void 0 : margins.bottom)
                    marginBottom = Math.max(margins === null || margins === void 0 ? void 0 : margins.bottom, marginBottom);
            }
            height = view.scrollDOM.clientHeight - marginTop - marginBottom;
        }
        else {
            height = (view.dom.ownerDocument.defaultView || window).innerHeight;
        }
        return { marginTop, marginBottom, selfScroll,
            height: Math.max(view.defaultLineHeight, height - 5) };
    }
    function cursorByPage(view, forward) {
        let page = pageInfo(view);
        let { state } = view, selection = updateSel(state.selection, range => {
            return range.empty ? view.moveVertically(range, forward, page.height)
                : rangeEnd(range, forward);
        });
        if (selection.eq(state.selection))
            return false;
        let effect;
        if (page.selfScroll) {
            let startPos = view.coordsAtPos(state.selection.main.head);
            let scrollRect = view.scrollDOM.getBoundingClientRect();
            let scrollTop = scrollRect.top + page.marginTop, scrollBottom = scrollRect.bottom - page.marginBottom;
            if (startPos && startPos.top > scrollTop && startPos.bottom < scrollBottom)
                effect = EditorView.scrollIntoView(selection.main.head, { y: "start", yMargin: startPos.top - scrollTop });
        }
        view.dispatch(setSel(state, selection), { effects: effect });
        return true;
    }
    /**
    Move the selection one page up.
    */
    const cursorPageUp = view => cursorByPage(view, false);
    /**
    Move the selection one page down.
    */
    const cursorPageDown = view => cursorByPage(view, true);
    function moveByLineBoundary(view, start, forward) {
        let line = view.lineBlockAt(start.head), moved = view.moveToLineBoundary(start, forward);
        if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
            moved = view.moveToLineBoundary(start, forward, false);
        if (!forward && moved.head == line.from && line.length) {
            let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
            if (space && start.head != line.from + space)
                moved = EditorSelection.cursor(line.from + space);
        }
        return moved;
    }
    /**
    Move the selection to the next line wrap point, or to the end of
    the line if there isn't one left on this line.
    */
    const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection to previous line wrap point, or failing that to
    the start of the line. If the line is indented, and the cursor
    isn't already at the end of the indentation, this will move to the
    end of the indentation instead of the start of the line.
    */
    const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection one line wrap point to the left.
    */
    const cursorLineBoundaryLeft = view => moveSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    /**
    Move the selection one line wrap point to the right.
    */
    const cursorLineBoundaryRight = view => moveSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
    /**
    Move the selection to the start of the line.
    */
    const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from, 1));
    /**
    Move the selection to the end of the line.
    */
    const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to, -1));
    function toMatchingBracket(state, dispatch, extend) {
        let found = false, selection = updateSel(state.selection, range => {
            let matching = matchBrackets(state, range.head, -1)
                || matchBrackets(state, range.head, 1)
                || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
                || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
            if (!matching || !matching.end)
                return range;
            found = true;
            let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
            return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
        });
        if (!found)
            return false;
        dispatch(setSel(state, selection));
        return true;
    }
    /**
    Move the selection to the bracket matching the one it is currently
    on, if any.
    */
    const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
    function extendSel(view, how) {
        let selection = updateSel(view.state.selection, range => {
            let head = how(range);
            return EditorSelection.range(range.anchor, head.head, head.goalColumn, head.bidiLevel || undefined);
        });
        if (selection.eq(view.state.selection))
            return false;
        view.dispatch(setSel(view.state, selection));
        return true;
    }
    function selectByChar(view, forward) {
        return extendSel(view, range => view.moveByChar(range, forward));
    }
    /**
    Move the selection head one character to the left, while leaving
    the anchor in place.
    */
    const selectCharLeft = view => selectByChar(view, !ltrAtCursor(view));
    /**
    Move the selection head one character to the right.
    */
    const selectCharRight = view => selectByChar(view, ltrAtCursor(view));
    function selectByGroup(view, forward) {
        return extendSel(view, range => view.moveByGroup(range, forward));
    }
    /**
    Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
    the left.
    */
    const selectGroupLeft = view => selectByGroup(view, !ltrAtCursor(view));
    /**
    Move the selection head one group to the right.
    */
    const selectGroupRight = view => selectByGroup(view, ltrAtCursor(view));
    /**
    Move the selection head over the next syntactic element to the left.
    */
    const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, !ltrAtCursor(view)));
    /**
    Move the selection head over the next syntactic element to the right.
    */
    const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, ltrAtCursor(view)));
    function selectByLine(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward));
    }
    /**
    Move the selection head one line up.
    */
    const selectLineUp = view => selectByLine(view, false);
    /**
    Move the selection head one line down.
    */
    const selectLineDown = view => selectByLine(view, true);
    function selectByPage(view, forward) {
        return extendSel(view, range => view.moveVertically(range, forward, pageInfo(view).height));
    }
    /**
    Move the selection head one page up.
    */
    const selectPageUp = view => selectByPage(view, false);
    /**
    Move the selection head one page down.
    */
    const selectPageDown = view => selectByPage(view, true);
    /**
    Move the selection head to the next line boundary.
    */
    const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
    /**
    Move the selection head to the previous line boundary.
    */
    const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
    /**
    Move the selection head one line boundary to the left.
    */
    const selectLineBoundaryLeft = view => extendSel(view, range => moveByLineBoundary(view, range, !ltrAtCursor(view)));
    /**
    Move the selection head one line boundary to the right.
    */
    const selectLineBoundaryRight = view => extendSel(view, range => moveByLineBoundary(view, range, ltrAtCursor(view)));
    /**
    Move the selection head to the start of the line.
    */
    const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).from));
    /**
    Move the selection head to the end of the line.
    */
    const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.lineBlockAt(range.head).to));
    /**
    Move the selection to the start of the document.
    */
    const cursorDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: 0 }));
        return true;
    };
    /**
    Move the selection to the end of the document.
    */
    const cursorDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.doc.length }));
        return true;
    };
    /**
    Move the selection head to the start of the document.
    */
    const selectDocStart = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
        return true;
    };
    /**
    Move the selection head to the end of the document.
    */
    const selectDocEnd = ({ state, dispatch }) => {
        dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
        return true;
    };
    /**
    Select the entire document.
    */
    const selectAll = ({ state, dispatch }) => {
        dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
        return true;
    };
    /**
    Expand the selection to cover entire lines.
    */
    const selectLine = ({ state, dispatch }) => {
        let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
        dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
        return true;
    };
    /**
    Select the next syntactic construct that is larger than the
    selection. Note that this will only work insofar as the language
    [provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
    syntax tree.
    */
    const selectParentSyntax = ({ state, dispatch }) => {
        let selection = updateSel(state.selection, range => {
            var _a;
            let context = syntaxTree(state).resolveInner(range.head, 1);
            while (!((context.from < range.from && context.to >= range.to) ||
                (context.to > range.to && context.from <= range.from) ||
                !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
                context = context.parent;
            return EditorSelection.range(context.to, context.from);
        });
        dispatch(setSel(state, selection));
        return true;
    };
    /**
    Simplify the current selection. When multiple ranges are selected,
    reduce it to its main range. Otherwise, if the selection is
    non-empty, convert it to a cursor selection.
    */
    const simplifySelection = ({ state, dispatch }) => {
        let cur = state.selection, selection = null;
        if (cur.ranges.length > 1)
            selection = EditorSelection.create([cur.main]);
        else if (!cur.main.empty)
            selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
        if (!selection)
            return false;
        dispatch(setSel(state, selection));
        return true;
    };
    function deleteBy(target, by) {
        if (target.state.readOnly)
            return false;
        let event = "delete.selection", { state } = target;
        let changes = state.changeByRange(range => {
            let { from, to } = range;
            if (from == to) {
                let towards = by(from);
                if (towards < from) {
                    event = "delete.backward";
                    towards = skipAtomic(target, towards, false);
                }
                else if (towards > from) {
                    event = "delete.forward";
                    towards = skipAtomic(target, towards, true);
                }
                from = Math.min(from, towards);
                to = Math.max(to, towards);
            }
            else {
                from = skipAtomic(target, from, false);
                to = skipAtomic(target, to, true);
            }
            return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
        });
        if (changes.changes.empty)
            return false;
        target.dispatch(state.update(changes, {
            scrollIntoView: true,
            userEvent: event,
            effects: event == "delete.selection" ? EditorView.announce.of(state.phrase("Selection deleted")) : undefined
        }));
        return true;
    }
    function skipAtomic(target, pos, forward) {
        if (target instanceof EditorView)
            for (let ranges of target.state.facet(EditorView.atomicRanges).map(f => f(target)))
                ranges.between(pos, pos, (from, to) => {
                    if (from < pos && to > pos)
                        pos = forward ? to : from;
                });
        return pos;
    }
    const deleteByChar = (target, forward) => deleteBy(target, pos => {
        let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
        if (!forward && pos > line.from && pos < line.from + 200 &&
            !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
            if (before[before.length - 1] == "\t")
                return pos - 1;
            let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
            for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
                pos--;
            targetPos = pos;
        }
        else {
            targetPos = findClusterBreak(line.text, pos - line.from, forward, forward) + line.from;
            if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
                targetPos += forward ? 1 : -1;
        }
        return targetPos;
    });
    /**
    Delete the selection, or, for cursor selections, the character
    before the cursor.
    */
    const deleteCharBackward = view => deleteByChar(view, false);
    /**
    Delete the selection or the character after the cursor.
    */
    const deleteCharForward = view => deleteByChar(view, true);
    const deleteByGroup = (target, forward) => deleteBy(target, start => {
        let pos = start, { state } = target, line = state.doc.lineAt(pos);
        let categorize = state.charCategorizer(pos);
        for (let cat = null;;) {
            if (pos == (forward ? line.to : line.from)) {
                if (pos == start && line.number != (forward ? state.doc.lines : 1))
                    pos += forward ? 1 : -1;
                break;
            }
            let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
            let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
            let nextCat = categorize(nextChar);
            if (cat != null && nextCat != cat)
                break;
            if (nextChar != " " || pos != start)
                cat = nextCat;
            pos = next;
        }
        return pos;
    });
    /**
    Delete the selection or backward until the end of the next
    [group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
    whitespace when they consist of a single space.
    */
    const deleteGroupBackward = target => deleteByGroup(target, false);
    /**
    Delete the selection or forward until the end of the next group.
    */
    const deleteGroupForward = target => deleteByGroup(target, true);
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the end of the line. If the cursor is directly at the end of the
    line, delete the line break after it.
    */
    const deleteToLineEnd = view => deleteBy(view, pos => {
        let lineEnd = view.lineBlockAt(pos).to;
        return pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1);
    });
    /**
    Delete the selection, or, if it is a cursor selection, delete to
    the start of the line. If the cursor is directly at the start of the
    line, delete the line break before it.
    */
    const deleteToLineStart = view => deleteBy(view, pos => {
        let lineStart = view.lineBlockAt(pos).from;
        return pos > lineStart ? lineStart : Math.max(0, pos - 1);
    });
    /**
    Replace each selection range with a line break, leaving the cursor
    on the line before the break.
    */
    const splitLine = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
                range: EditorSelection.cursor(range.from) };
        });
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
        return true;
    };
    /**
    Flip the characters before and after the cursor(s).
    */
    const transposeChars = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let changes = state.changeByRange(range => {
            if (!range.empty || range.from == 0 || range.from == state.doc.length)
                return { range };
            let pos = range.from, line = state.doc.lineAt(pos);
            let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
            let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
            return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
                range: EditorSelection.cursor(to) };
        });
        if (changes.changes.empty)
            return false;
        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
        return true;
    };
    function selectedLineBlocks(state) {
        let blocks = [], upto = -1;
        for (let range of state.selection.ranges) {
            let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
            if (!range.empty && range.to == endLine.from)
                endLine = state.doc.lineAt(range.to - 1);
            if (upto >= startLine.number) {
                let prev = blocks[blocks.length - 1];
                prev.to = endLine.to;
                prev.ranges.push(range);
            }
            else {
                blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
            }
            upto = endLine.number + 1;
        }
        return blocks;
    }
    function moveLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [], ranges = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward ? block.to == state.doc.length : block.from == 0)
                continue;
            let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
            let size = nextLine.length + 1;
            if (forward) {
                changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
            }
            else {
                changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
                for (let r of block.ranges)
                    ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
            }
        }
        if (!changes.length)
            return false;
        dispatch(state.update({
            changes,
            scrollIntoView: true,
            selection: EditorSelection.create(ranges, state.selection.mainIndex),
            userEvent: "move.line"
        }));
        return true;
    }
    /**
    Move the selected lines up one line.
    */
    const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
    /**
    Move the selected lines down one line.
    */
    const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
    function copyLine(state, dispatch, forward) {
        if (state.readOnly)
            return false;
        let changes = [];
        for (let block of selectedLineBlocks(state)) {
            if (forward)
                changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
            else
                changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
        }
        dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
        return true;
    }
    /**
    Create a copy of the selected lines. Keep the selection in the top copy.
    */
    const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
    /**
    Create a copy of the selected lines. Keep the selection in the bottom copy.
    */
    const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
    /**
    Delete selected lines.
    */
    const deleteLine = view => {
        if (view.state.readOnly)
            return false;
        let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
            if (from > 0)
                from--;
            else if (to < state.doc.length)
                to++;
            return { from, to };
        }));
        let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
        view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
        return true;
    };
    function isBetweenBrackets(state, pos) {
        if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
            return { from: pos, to: pos };
        let context = syntaxTree(state).resolveInner(pos);
        let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
        if (before && after && before.to <= pos && after.from >= pos &&
            (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
            state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from &&
            !/\S/.test(state.sliceDoc(before.to, after.from)))
            return { from: before.to, to: after.from };
        return null;
    }
    /**
    Replace the selection with a newline and indent the newly created
    line(s). If the current line consists only of whitespace, this
    will also delete that whitespace. When the cursor is between
    matching brackets, an additional newline will be inserted after
    the cursor.
    */
    const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
    /**
    Create a blank, indented line below the current line.
    */
    const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
    function newlineAndIndent(atEof) {
        return ({ state, dispatch }) => {
            if (state.readOnly)
                return false;
            let changes = state.changeByRange(range => {
                let { from, to } = range, line = state.doc.lineAt(from);
                let explode = !atEof && from == to && isBetweenBrackets(state, from);
                if (atEof)
                    from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
                let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
                let indent = getIndentation(cx, from);
                if (indent == null)
                    indent = countColumn(/^\s*/.exec(state.doc.lineAt(from).text)[0], state.tabSize);
                while (to < line.to && /\s/.test(line.text[to - line.from]))
                    to++;
                if (explode)
                    ({ from, to } = explode);
                else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
                    from = line.from;
                let insert = ["", indentString(state, indent)];
                if (explode)
                    insert.push(indentString(state, cx.lineIndent(line.from, -1)));
                return { changes: { from, to, insert: Text.of(insert) },
                    range: EditorSelection.cursor(from + 1 + insert[1].length) };
            });
            dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
            return true;
        };
    }
    function changeBySelectedLine(state, f) {
        let atLine = -1;
        return state.changeByRange(range => {
            let changes = [];
            for (let pos = range.from; pos <= range.to;) {
                let line = state.doc.lineAt(pos);
                if (line.number > atLine && (range.empty || range.to > line.from)) {
                    f(line, changes, range);
                    atLine = line.number;
                }
                pos = line.to + 1;
            }
            let changeSet = state.changes(changes);
            return { changes,
                range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
        });
    }
    /**
    Auto-indent the selected lines. This uses the [indentation service
    facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
    information.
    */
    const indentSelection = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        let updated = Object.create(null);
        let context = new IndentContext(state, { overrideIndentation: start => {
                let found = updated[start];
                return found == null ? -1 : found;
            } });
        let changes = changeBySelectedLine(state, (line, changes, range) => {
            let indent = getIndentation(context, line.from);
            if (indent == null)
                return;
            if (!/\S/.test(line.text))
                indent = 0;
            let cur = /^\s*/.exec(line.text)[0];
            let norm = indentString(state, indent);
            if (cur != norm || range.from < line.from + cur.length) {
                updated[line.from] = indent;
                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
            }
        });
        if (!changes.changes.empty)
            dispatch(state.update(changes, { userEvent: "indent" }));
        return true;
    };
    /**
    Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
    lines.
    */
    const indentMore = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            changes.push({ from: line.from, insert: state.facet(indentUnit) });
        }), { userEvent: "input.indent" }));
        return true;
    };
    /**
    Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
    selected lines.
    */
    const indentLess = ({ state, dispatch }) => {
        if (state.readOnly)
            return false;
        dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
            let space = /^\s*/.exec(line.text)[0];
            if (!space)
                return;
            let col = countColumn(space, state.tabSize), keep = 0;
            let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
            while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
                keep++;
            changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
        }), { userEvent: "delete.dedent" }));
        return true;
    };
    /**
    Array of key bindings containing the Emacs-style bindings that are
    available on macOS by default.
 
     - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
     - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
     - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
     - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
     - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
    */
    const emacsStyleKeymap = [
        { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
        { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
        { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
        { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
        { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
        { key: "Ctrl-d", run: deleteCharForward },
        { key: "Ctrl-h", run: deleteCharBackward },
        { key: "Ctrl-k", run: deleteToLineEnd },
        { key: "Ctrl-Alt-h", run: deleteGroupBackward },
        { key: "Ctrl-o", run: splitLine },
        { key: "Ctrl-t", run: transposeChars },
        { key: "Ctrl-v", run: cursorPageDown },
    ];
    /**
    An array of key bindings closely sticking to platform-standard or
    widely used bindings. (This includes the bindings from
    [`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
    property changed to `mac`.)
 
     - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
     - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
     - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
     - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
     - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
     - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
     - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
     - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
     - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
     - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
     - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
     - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
     - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
     - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
     - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
     - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
     - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
     - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
     - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
     - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
     - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
     - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
    */
    const standardKeymap = /*@__PURE__*/[
        { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
        { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft, preventDefault: true },
        { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryLeft, shift: selectLineBoundaryLeft, preventDefault: true },
        { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
        { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight, preventDefault: true },
        { mac: "Cmd-ArrowRight", run: cursorLineBoundaryRight, shift: selectLineBoundaryRight, preventDefault: true },
        { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
        { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
        { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
        { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
        { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
        { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
        { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
        { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
        { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward, preventDefault: true },
        { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
        { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward, preventDefault: true },
        { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
        { key: "Enter", run: insertNewlineAndIndent },
        { key: "Mod-a", run: selectAll },
        { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
        { key: "Delete", run: deleteCharForward },
        { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
        { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
        { mac: "Mod-Backspace", run: deleteToLineStart },
        { mac: "Mod-Delete", run: deleteToLineEnd }
    ].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
    /**
    The default keymap. Includes all bindings from
    [`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:
 
    - Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
    - Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
    - Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
    - Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
    - Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
    - Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
    - Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
    - Ctrl-Enter (Cmd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
    - Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
    - Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
    - Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
    - Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
    - Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
    - Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
    - Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
    - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#commands.toggleComment).
    - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#commands.toggleBlockComment).
    */
    const defaultKeymap = /*@__PURE__*/[
        { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
        { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
        { key: "Alt-ArrowUp", run: moveLineUp },
        { key: "Shift-Alt-ArrowUp", run: copyLineUp },
        { key: "Alt-ArrowDown", run: moveLineDown },
        { key: "Shift-Alt-ArrowDown", run: copyLineDown },
        { key: "Escape", run: simplifySelection },
        { key: "Mod-Enter", run: insertBlankLine },
        { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
        { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
        { key: "Mod-[", run: indentLess },
        { key: "Mod-]", run: indentMore },
        { key: "Mod-Alt-\\", run: indentSelection },
        { key: "Shift-Mod-k", run: deleteLine },
        { key: "Shift-Mod-\\", run: cursorMatchingBracket },
        { key: "Mod-/", run: toggleComment },
        { key: "Alt-A", run: toggleBlockComment }
    ].concat(standardKeymap);
 
    function getDefaultExportFromCjs (x) {
        return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }
 
    var utils$1 = {};
 
    var Aacute = "Á";
    var aacute = "á";
    var Abreve = "Ă";
    var abreve = "ă";
    var ac = "∾";
    var acd = "∿";
    var acE = "∾̳";
    var Acirc = "Â";
    var acirc = "â";
    var acute = "´";
    var Acy = "А";
    var acy = "а";
    var AElig = "Æ";
    var aelig = "æ";
    var af = "⁡";
    var Afr = "𝔄";
    var afr = "𝔞";
    var Agrave = "À";
    var agrave = "à";
    var alefsym = "ℵ";
    var aleph = "ℵ";
    var Alpha = "Α";
    var alpha = "α";
    var Amacr = "Ā";
    var amacr = "ā";
    var amalg = "⨿";
    var amp = "&";
    var AMP = "&";
    var andand = "⩕";
    var And = "⩓";
    var and = "∧";
    var andd = "⩜";
    var andslope = "⩘";
    var andv = "⩚";
    var ang = "∠";
    var ange = "⦤";
    var angle = "∠";
    var angmsdaa = "⦨";
    var angmsdab = "⦩";
    var angmsdac = "⦪";
    var angmsdad = "⦫";
    var angmsdae = "⦬";
    var angmsdaf = "⦭";
    var angmsdag = "⦮";
    var angmsdah = "⦯";
    var angmsd = "∡";
    var angrt = "∟";
    var angrtvb = "⊾";
    var angrtvbd = "⦝";
    var angsph = "∢";
    var angst = "Å";
    var angzarr = "⍼";
    var Aogon = "Ą";
    var aogon = "ą";
    var Aopf = "𝔸";
    var aopf = "𝕒";
    var apacir = "⩯";
    var ap = "≈";
    var apE = "⩰";
    var ape = "≊";
    var apid = "≋";
    var apos = "'";
    var ApplyFunction = "⁡";
    var approx = "≈";
    var approxeq = "≊";
    var Aring = "Å";
    var aring = "å";
    var Ascr = "𝒜";
    var ascr = "𝒶";
    var Assign = "≔";
    var ast = "*";
    var asymp = "≈";
    var asympeq = "≍";
    var Atilde = "Ã";
    var atilde = "ã";
    var Auml = "Ä";
    var auml = "ä";
    var awconint = "∳";
    var awint = "⨑";
    var backcong = "≌";
    var backepsilon = "϶";
    var backprime = "‵";
    var backsim = "∽";
    var backsimeq = "⋍";
    var Backslash = "∖";
    var Barv = "⫧";
    var barvee = "⊽";
    var barwed = "⌅";
    var Barwed = "⌆";
    var barwedge = "⌅";
    var bbrk = "⎵";
    var bbrktbrk = "⎶";
    var bcong = "≌";
    var Bcy = "Б";
    var bcy = "б";
    var bdquo = "„";
    var becaus = "∵";
    var because = "∵";
    var Because = "∵";
    var bemptyv = "⦰";
    var bepsi = "϶";
    var bernou = "ℬ";
    var Bernoullis = "ℬ";
    var Beta = "Β";
    var beta = "β";
    var beth = "ℶ";
    var between = "≬";
    var Bfr = "𝔅";
    var bfr = "𝔟";
    var bigcap = "⋂";
    var bigcirc = "◯";
    var bigcup = "⋃";
    var bigodot = "⨀";
    var bigoplus = "⨁";
    var bigotimes = "⨂";
    var bigsqcup = "⨆";
    var bigstar = "★";
    var bigtriangledown = "▽";
    var bigtriangleup = "△";
    var biguplus = "⨄";
    var bigvee = "⋁";
    var bigwedge = "⋀";
    var bkarow = "⤍";
    var blacklozenge = "⧫";
    var blacksquare = "▪";
    var blacktriangle = "▴";
    var blacktriangledown = "▾";
    var blacktriangleleft = "◂";
    var blacktriangleright = "▸";
    var blank = "␣";
    var blk12 = "▒";
    var blk14 = "░";
    var blk34 = "▓";
    var block$1 = "█";
    var bne = "=⃥";
    var bnequiv = "≡⃥";
    var bNot = "⫭";
    var bnot = "⌐";
    var Bopf = "𝔹";
    var bopf = "𝕓";
    var bot = "⊥";
    var bottom = "⊥";
    var bowtie = "⋈";
    var boxbox = "⧉";
    var boxdl = "┐";
    var boxdL = "╕";
    var boxDl = "╖";
    var boxDL = "╗";
    var boxdr = "┌";
    var boxdR = "╒";
    var boxDr = "╓";
    var boxDR = "╔";
    var boxh = "─";
    var boxH = "═";
    var boxhd = "┬";
    var boxHd = "╤";
    var boxhD = "╥";
    var boxHD = "╦";
    var boxhu = "┴";
    var boxHu = "╧";
    var boxhU = "╨";
    var boxHU = "╩";
    var boxminus = "⊟";
    var boxplus = "⊞";
    var boxtimes = "⊠";
    var boxul = "┘";
    var boxuL = "╛";
    var boxUl = "╜";
    var boxUL = "╝";
    var boxur = "└";
    var boxuR = "╘";
    var boxUr = "╙";
    var boxUR = "╚";
    var boxv = "│";
    var boxV = "║";
    var boxvh = "┼";
    var boxvH = "╪";
    var boxVh = "╫";
    var boxVH = "╬";
    var boxvl = "┤";
    var boxvL = "╡";
    var boxVl = "╢";
    var boxVL = "╣";
    var boxvr = "├";
    var boxvR = "╞";
    var boxVr = "╟";
    var boxVR = "╠";
    var bprime = "‵";
    var breve = "˘";
    var Breve = "˘";
    var brvbar = "¦";
    var bscr = "𝒷";
    var Bscr = "ℬ";
    var bsemi = "⁏";
    var bsim = "∽";
    var bsime = "⋍";
    var bsolb = "⧅";
    var bsol = "\\";
    var bsolhsub = "⟈";
    var bull = "•";
    var bullet = "•";
    var bump = "≎";
    var bumpE = "⪮";
    var bumpe = "≏";
    var Bumpeq = "≎";
    var bumpeq = "≏";
    var Cacute = "Ć";
    var cacute = "ć";
    var capand = "⩄";
    var capbrcup = "⩉";
    var capcap = "⩋";
    var cap = "∩";
    var Cap = "⋒";
    var capcup = "⩇";
    var capdot = "⩀";
    var CapitalDifferentialD = "ⅅ";
    var caps = "∩︀";
    var caret = "⁁";
    var caron = "ˇ";
    var Cayleys = "ℭ";
    var ccaps = "⩍";
    var Ccaron = "Č";
    var ccaron = "č";
    var Ccedil = "Ç";
    var ccedil = "ç";
    var Ccirc = "Ĉ";
    var ccirc = "ĉ";
    var Cconint = "∰";
    var ccups = "⩌";
    var ccupssm = "⩐";
    var Cdot = "Ċ";
    var cdot = "ċ";
    var cedil = "¸";
    var Cedilla = "¸";
    var cemptyv = "⦲";
    var cent = "¢";
    var centerdot = "·";
    var CenterDot = "·";
    var cfr = "𝔠";
    var Cfr = "ℭ";
    var CHcy = "Ч";
    var chcy = "ч";
    var check = "✓";
    var checkmark = "✓";
    var Chi = "Χ";
    var chi = "χ";
    var circ = "ˆ";
    var circeq = "≗";
    var circlearrowleft = "↺";
    var circlearrowright = "↻";
    var circledast = "⊛";
    var circledcirc = "⊚";
    var circleddash = "⊝";
    var CircleDot = "⊙";
    var circledR = "®";
    var circledS = "Ⓢ";
    var CircleMinus = "⊖";
    var CirclePlus = "⊕";
    var CircleTimes = "⊗";
    var cir = "○";
    var cirE = "⧃";
    var cire = "≗";
    var cirfnint = "⨐";
    var cirmid = "⫯";
    var cirscir = "⧂";
    var ClockwiseContourIntegral = "∲";
    var CloseCurlyDoubleQuote = "”";
    var CloseCurlyQuote = "’";
    var clubs = "♣";
    var clubsuit = "♣";
    var colon = ":";
    var Colon = "∷";
    var Colone = "⩴";
    var colone = "≔";
    var coloneq = "≔";
    var comma = ",";
    var commat = "@";
    var comp = "∁";
    var compfn = "∘";
    var complement = "∁";
    var complexes = "ℂ";
    var cong = "≅";
    var congdot = "⩭";
    var Congruent = "≡";
    var conint = "∮";
    var Conint = "∯";
    var ContourIntegral = "∮";
    var copf = "𝕔";
    var Copf = "ℂ";
    var coprod = "∐";
    var Coproduct = "∐";
    var copy = "©";
    var COPY = "©";
    var copysr = "℗";
    var CounterClockwiseContourIntegral = "∳";
    var crarr = "↵";
    var cross = "✗";
    var Cross = "⨯";
    var Cscr = "𝒞";
    var cscr = "𝒸";
    var csub = "⫏";
    var csube = "⫑";
    var csup = "⫐";
    var csupe = "⫒";
    var ctdot = "⋯";
    var cudarrl = "⤸";
    var cudarrr = "⤵";
    var cuepr = "⋞";
    var cuesc = "⋟";
    var cularr = "↶";
    var cularrp = "⤽";
    var cupbrcap = "⩈";
    var cupcap = "⩆";
    var CupCap = "≍";
    var cup = "∪";
    var Cup = "⋓";
    var cupcup = "⩊";
    var cupdot = "⊍";
    var cupor = "⩅";
    var cups = "∪︀";
    var curarr = "↷";
    var curarrm = "⤼";
    var curlyeqprec = "⋞";
    var curlyeqsucc = "⋟";
    var curlyvee = "⋎";
    var curlywedge = "⋏";
    var curren = "¤";
    var curvearrowleft = "↶";
    var curvearrowright = "↷";
    var cuvee = "⋎";
    var cuwed = "⋏";
    var cwconint = "∲";
    var cwint = "∱";
    var cylcty = "⌭";
    var dagger = "†";
    var Dagger = "‡";
    var daleth = "ℸ";
    var darr = "↓";
    var Darr = "↡";
    var dArr = "⇓";
    var dash = "‐";
    var Dashv = "⫤";
    var dashv = "⊣";
    var dbkarow = "⤏";
    var dblac = "˝";
    var Dcaron = "Ď";
    var dcaron = "ď";
    var Dcy = "Д";
    var dcy = "д";
    var ddagger = "‡";
    var ddarr = "⇊";
    var DD = "ⅅ";
    var dd = "ⅆ";
    var DDotrahd = "⤑";
    var ddotseq = "⩷";
    var deg = "°";
    var Del = "∇";
    var Delta = "Δ";
    var delta = "δ";
    var demptyv = "⦱";
    var dfisht = "⥿";
    var Dfr = "𝔇";
    var dfr = "𝔡";
    var dHar = "⥥";
    var dharl = "⇃";
    var dharr = "⇂";
    var DiacriticalAcute = "´";
    var DiacriticalDot = "˙";
    var DiacriticalDoubleAcute = "˝";
    var DiacriticalGrave = "`";
    var DiacriticalTilde = "˜";
    var diam = "⋄";
    var diamond = "⋄";
    var Diamond = "⋄";
    var diamondsuit = "♦";
    var diams = "♦";
    var die = "¨";
    var DifferentialD = "ⅆ";
    var digamma = "ϝ";
    var disin = "⋲";
    var div = "÷";
    var divide = "÷";
    var divideontimes = "⋇";
    var divonx = "⋇";
    var DJcy = "Ђ";
    var djcy = "ђ";
    var dlcorn = "⌞";
    var dlcrop = "⌍";
    var dollar = "$";
    var Dopf = "𝔻";
    var dopf = "𝕕";
    var Dot = "¨";
    var dot = "˙";
    var DotDot = "⃜";
    var doteq = "≐";
    var doteqdot = "≑";
    var DotEqual = "≐";
    var dotminus = "∸";
    var dotplus = "∔";
    var dotsquare = "⊡";
    var doublebarwedge = "⌆";
    var DoubleContourIntegral = "∯";
    var DoubleDot = "¨";
    var DoubleDownArrow = "⇓";
    var DoubleLeftArrow = "⇐";
    var DoubleLeftRightArrow = "⇔";
    var DoubleLeftTee = "⫤";
    var DoubleLongLeftArrow = "⟸";
    var DoubleLongLeftRightArrow = "⟺";
    var DoubleLongRightArrow = "⟹";
    var DoubleRightArrow = "⇒";
    var DoubleRightTee = "⊨";
    var DoubleUpArrow = "⇑";
    var DoubleUpDownArrow = "⇕";
    var DoubleVerticalBar = "∥";
    var DownArrowBar = "⤓";
    var downarrow = "↓";
    var DownArrow = "↓";
    var Downarrow = "⇓";
    var DownArrowUpArrow = "⇵";
    var DownBreve = "̑";
    var downdownarrows = "⇊";
    var downharpoonleft = "⇃";
    var downharpoonright = "⇂";
    var DownLeftRightVector = "⥐";
    var DownLeftTeeVector = "⥞";
    var DownLeftVectorBar = "⥖";
    var DownLeftVector = "↽";
    var DownRightTeeVector = "⥟";
    var DownRightVectorBar = "⥗";
    var DownRightVector = "⇁";
    var DownTeeArrow = "↧";
    var DownTee = "⊤";
    var drbkarow = "⤐";
    var drcorn = "⌟";
    var drcrop = "⌌";
    var Dscr = "𝒟";
    var dscr = "𝒹";
    var DScy = "Ѕ";
    var dscy = "ѕ";
    var dsol = "⧶";
    var Dstrok = "Đ";
    var dstrok = "đ";
    var dtdot = "⋱";
    var dtri = "▿";
    var dtrif = "▾";
    var duarr = "⇵";
    var duhar = "⥯";
    var dwangle = "⦦";
    var DZcy = "Џ";
    var dzcy = "џ";
    var dzigrarr = "⟿";
    var Eacute = "É";
    var eacute = "é";
    var easter = "⩮";
    var Ecaron = "Ě";
    var ecaron = "ě";
    var Ecirc = "Ê";
    var ecirc = "ê";
    var ecir = "≖";
    var ecolon = "≕";
    var Ecy = "Э";
    var ecy = "э";
    var eDDot = "⩷";
    var Edot = "Ė";
    var edot = "ė";
    var eDot = "≑";
    var ee = "ⅇ";
    var efDot = "≒";
    var Efr = "𝔈";
    var efr = "𝔢";
    var eg = "⪚";
    var Egrave = "È";
    var egrave = "è";
    var egs = "⪖";
    var egsdot = "⪘";
    var el = "⪙";
    var Element = "∈";
    var elinters = "⏧";
    var ell = "ℓ";
    var els = "⪕";
    var elsdot = "⪗";
    var Emacr = "Ē";
    var emacr = "ē";
    var empty = "∅";
    var emptyset = "∅";
    var EmptySmallSquare = "◻";
    var emptyv = "∅";
    var EmptyVerySmallSquare = "▫";
    var emsp13 = " ";
    var emsp14 = " ";
    var emsp = " ";
    var ENG = "Ŋ";
    var eng = "ŋ";
    var ensp = " ";
    var Eogon = "Ę";
    var eogon = "ę";
    var Eopf = "𝔼";
    var eopf = "𝕖";
    var epar = "⋕";
    var eparsl = "⧣";
    var eplus = "⩱";
    var epsi = "ε";
    var Epsilon = "Ε";
    var epsilon = "ε";
    var epsiv = "ϵ";
    var eqcirc = "≖";
    var eqcolon = "≕";
    var eqsim = "≂";
    var eqslantgtr = "⪖";
    var eqslantless = "⪕";
    var Equal = "⩵";
    var equals = "=";
    var EqualTilde = "≂";
    var equest = "≟";
    var Equilibrium = "⇌";
    var equiv = "≡";
    var equivDD = "⩸";
    var eqvparsl = "⧥";
    var erarr = "⥱";
    var erDot = "≓";
    var escr = "ℯ";
    var Escr = "ℰ";
    var esdot = "≐";
    var Esim = "⩳";
    var esim = "≂";
    var Eta = "Η";
    var eta = "η";
    var ETH = "Ð";
    var eth = "ð";
    var Euml = "Ë";
    var euml = "ë";
    var euro = "€";
    var excl = "!";
    var exist = "∃";
    var Exists = "∃";
    var expectation = "ℰ";
    var exponentiale = "ⅇ";
    var ExponentialE = "ⅇ";
    var fallingdotseq = "≒";
    var Fcy = "Ф";
    var fcy = "ф";
    var female = "♀";
    var ffilig = "ﬃ";
    var fflig = "ﬀ";
    var ffllig = "ﬄ";
    var Ffr = "𝔉";
    var ffr = "𝔣";
    var filig = "ﬁ";
    var FilledSmallSquare = "◼";
    var FilledVerySmallSquare = "▪";
    var fjlig = "fj";
    var flat = "♭";
    var fllig = "ﬂ";
    var fltns = "▱";
    var fnof = "ƒ";
    var Fopf = "𝔽";
    var fopf = "𝕗";
    var forall = "∀";
    var ForAll = "∀";
    var fork = "⋔";
    var forkv = "⫙";
    var Fouriertrf = "ℱ";
    var fpartint = "⨍";
    var frac12 = "½";
    var frac13 = "⅓";
    var frac14 = "¼";
    var frac15 = "⅕";
    var frac16 = "⅙";
    var frac18 = "⅛";
    var frac23 = "⅔";
    var frac25 = "⅖";
    var frac34 = "¾";
    var frac35 = "⅗";
    var frac38 = "⅜";
    var frac45 = "⅘";
    var frac56 = "⅚";
    var frac58 = "⅝";
    var frac78 = "⅞";
    var frasl = "⁄";
    var frown = "⌢";
    var fscr = "𝒻";
    var Fscr = "ℱ";
    var gacute = "ǵ";
    var Gamma = "Γ";
    var gamma = "γ";
    var Gammad = "Ϝ";
    var gammad = "ϝ";
    var gap = "⪆";
    var Gbreve = "Ğ";
    var gbreve = "ğ";
    var Gcedil = "Ģ";
    var Gcirc = "Ĝ";
    var gcirc = "ĝ";
    var Gcy = "Г";
    var gcy = "г";
    var Gdot = "Ġ";
    var gdot = "ġ";
    var ge = "≥";
    var gE = "≧";
    var gEl = "⪌";
    var gel = "⋛";
    var geq = "≥";
    var geqq = "≧";
    var geqslant = "⩾";
    var gescc = "⪩";
    var ges = "⩾";
    var gesdot = "⪀";
    var gesdoto = "⪂";
    var gesdotol = "⪄";
    var gesl = "⋛︀";
    var gesles = "⪔";
    var Gfr = "𝔊";
    var gfr = "𝔤";
    var gg = "≫";
    var Gg = "⋙";
    var ggg = "⋙";
    var gimel = "ℷ";
    var GJcy = "Ѓ";
    var gjcy = "ѓ";
    var gla = "⪥";
    var gl = "≷";
    var glE = "⪒";
    var glj = "⪤";
    var gnap = "⪊";
    var gnapprox = "⪊";
    var gne = "⪈";
    var gnE = "≩";
    var gneq = "⪈";
    var gneqq = "≩";
    var gnsim = "⋧";
    var Gopf = "𝔾";
    var gopf = "𝕘";
    var grave = "`";
    var GreaterEqual = "≥";
    var GreaterEqualLess = "⋛";
    var GreaterFullEqual = "≧";
    var GreaterGreater = "⪢";
    var GreaterLess = "≷";
    var GreaterSlantEqual = "⩾";
    var GreaterTilde = "≳";
    var Gscr = "𝒢";
    var gscr = "ℊ";
    var gsim = "≳";
    var gsime = "⪎";
    var gsiml = "⪐";
    var gtcc = "⪧";
    var gtcir = "⩺";
    var gt = ">";
    var GT = ">";
    var Gt = "≫";
    var gtdot = "⋗";
    var gtlPar = "⦕";
    var gtquest = "⩼";
    var gtrapprox = "⪆";
    var gtrarr = "⥸";
    var gtrdot = "⋗";
    var gtreqless = "⋛";
    var gtreqqless = "⪌";
    var gtrless = "≷";
    var gtrsim = "≳";
    var gvertneqq = "≩︀";
    var gvnE = "≩︀";
    var Hacek = "ˇ";
    var hairsp = " ";
    var half = "½";
    var hamilt = "ℋ";
    var HARDcy = "Ъ";
    var hardcy = "ъ";
    var harrcir = "⥈";
    var harr = "↔";
    var hArr = "⇔";
    var harrw = "↭";
    var Hat = "^";
    var hbar = "ℏ";
    var Hcirc = "Ĥ";
    var hcirc = "ĥ";
    var hearts = "♥";
    var heartsuit = "♥";
    var hellip = "…";
    var hercon = "⊹";
    var hfr = "𝔥";
    var Hfr = "ℌ";
    var HilbertSpace = "ℋ";
    var hksearow = "⤥";
    var hkswarow = "⤦";
    var hoarr = "⇿";
    var homtht = "∻";
    var hookleftarrow = "↩";
    var hookrightarrow = "↪";
    var hopf = "𝕙";
    var Hopf = "ℍ";
    var horbar = "―";
    var HorizontalLine = "─";
    var hscr = "𝒽";
    var Hscr = "ℋ";
    var hslash = "ℏ";
    var Hstrok = "Ħ";
    var hstrok = "ħ";
    var HumpDownHump = "≎";
    var HumpEqual = "≏";
    var hybull = "⁃";
    var hyphen = "‐";
    var Iacute = "Í";
    var iacute = "í";
    var ic = "⁣";
    var Icirc = "Î";
    var icirc = "î";
    var Icy = "И";
    var icy = "и";
    var Idot = "İ";
    var IEcy = "Е";
    var iecy = "е";
    var iexcl = "¡";
    var iff = "⇔";
    var ifr = "𝔦";
    var Ifr = "ℑ";
    var Igrave = "Ì";
    var igrave = "ì";
    var ii = "ⅈ";
    var iiiint = "⨌";
    var iiint = "∭";
    var iinfin = "⧜";
    var iiota = "℩";
    var IJlig = "Ĳ";
    var ijlig = "ĳ";
    var Imacr = "Ī";
    var imacr = "ī";
    var image$1 = "ℑ";
    var ImaginaryI = "ⅈ";
    var imagline = "ℐ";
    var imagpart = "ℑ";
    var imath = "ı";
    var Im = "ℑ";
    var imof = "⊷";
    var imped = "Ƶ";
    var Implies = "⇒";
    var incare = "℅";
    var infin = "∞";
    var infintie = "⧝";
    var inodot = "ı";
    var intcal = "⊺";
    var int = "∫";
    var Int = "∬";
    var integers = "ℤ";
    var Integral = "∫";
    var intercal = "⊺";
    var Intersection = "⋂";
    var intlarhk = "⨗";
    var intprod = "⨼";
    var InvisibleComma = "⁣";
    var InvisibleTimes = "⁢";
    var IOcy = "Ё";
    var iocy = "ё";
    var Iogon = "Į";
    var iogon = "į";
    var Iopf = "𝕀";
    var iopf = "𝕚";
    var Iota = "Ι";
    var iota = "ι";
    var iprod = "⨼";
    var iquest = "¿";
    var iscr = "𝒾";
    var Iscr = "ℐ";
    var isin = "∈";
    var isindot = "⋵";
    var isinE = "⋹";
    var isins = "⋴";
    var isinsv = "⋳";
    var isinv = "∈";
    var it = "⁢";
    var Itilde = "Ĩ";
    var itilde = "ĩ";
    var Iukcy = "І";
    var iukcy = "і";
    var Iuml = "Ï";
    var iuml = "ï";
    var Jcirc = "Ĵ";
    var jcirc = "ĵ";
    var Jcy = "Й";
    var jcy = "й";
    var Jfr = "𝔍";
    var jfr = "𝔧";
    var jmath = "ȷ";
    var Jopf = "𝕁";
    var jopf = "𝕛";
    var Jscr = "𝒥";
    var jscr = "𝒿";
    var Jsercy = "Ј";
    var jsercy = "ј";
    var Jukcy = "Є";
    var jukcy = "є";
    var Kappa = "Κ";
    var kappa = "κ";
    var kappav = "ϰ";
    var Kcedil = "Ķ";
    var kcedil = "ķ";
    var Kcy = "К";
    var kcy = "к";
    var Kfr = "𝔎";
    var kfr = "𝔨";
    var kgreen = "ĸ";
    var KHcy = "Х";
    var khcy = "х";
    var KJcy = "Ќ";
    var kjcy = "ќ";
    var Kopf = "𝕂";
    var kopf = "𝕜";
    var Kscr = "𝒦";
    var kscr = "𝓀";
    var lAarr = "⇚";
    var Lacute = "Ĺ";
    var lacute = "ĺ";
    var laemptyv = "⦴";
    var lagran = "ℒ";
    var Lambda = "Λ";
    var lambda = "λ";
    var lang = "⟨";
    var Lang = "⟪";
    var langd = "⦑";
    var langle = "⟨";
    var lap = "⪅";
    var Laplacetrf = "ℒ";
    var laquo = "«";
    var larrb = "⇤";
    var larrbfs = "⤟";
    var larr = "←";
    var Larr = "↞";
    var lArr = "⇐";
    var larrfs = "⤝";
    var larrhk = "↩";
    var larrlp = "↫";
    var larrpl = "⤹";
    var larrsim = "⥳";
    var larrtl = "↢";
    var latail = "⤙";
    var lAtail = "⤛";
    var lat = "⪫";
    var late = "⪭";
    var lates = "⪭︀";
    var lbarr = "⤌";
    var lBarr = "⤎";
    var lbbrk = "❲";
    var lbrace = "{";
    var lbrack = "[";
    var lbrke = "⦋";
    var lbrksld = "⦏";
    var lbrkslu = "⦍";
    var Lcaron = "Ľ";
    var lcaron = "ľ";
    var Lcedil = "Ļ";
    var lcedil = "ļ";
    var lceil = "⌈";
    var lcub = "{";
    var Lcy = "Л";
    var lcy = "л";
    var ldca = "⤶";
    var ldquo = "“";
    var ldquor = "„";
    var ldrdhar = "⥧";
    var ldrushar = "⥋";
    var ldsh = "↲";
    var le = "≤";
    var lE = "≦";
    var LeftAngleBracket = "⟨";
    var LeftArrowBar = "⇤";
    var leftarrow = "←";
    var LeftArrow = "←";
    var Leftarrow = "⇐";
    var LeftArrowRightArrow = "⇆";
    var leftarrowtail = "↢";
    var LeftCeiling = "⌈";
    var LeftDoubleBracket = "⟦";
    var LeftDownTeeVector = "⥡";
    var LeftDownVectorBar = "⥙";
    var LeftDownVector = "⇃";
    var LeftFloor = "⌊";
    var leftharpoondown = "↽";
    var leftharpoonup = "↼";
    var leftleftarrows = "⇇";
    var leftrightarrow = "↔";
    var LeftRightArrow = "↔";
    var Leftrightarrow = "⇔";
    var leftrightarrows = "⇆";
    var leftrightharpoons = "⇋";
    var leftrightsquigarrow = "↭";
    var LeftRightVector = "⥎";
    var LeftTeeArrow = "↤";
    var LeftTee = "⊣";
    var LeftTeeVector = "⥚";
    var leftthreetimes = "⋋";
    var LeftTriangleBar = "⧏";
    var LeftTriangle = "⊲";
    var LeftTriangleEqual = "⊴";
    var LeftUpDownVector = "⥑";
    var LeftUpTeeVector = "⥠";
    var LeftUpVectorBar = "⥘";
    var LeftUpVector = "↿";
    var LeftVectorBar = "⥒";
    var LeftVector = "↼";
    var lEg = "⪋";
    var leg = "⋚";
    var leq = "≤";
    var leqq = "≦";
    var leqslant = "⩽";
    var lescc = "⪨";
    var les = "⩽";
    var lesdot = "⩿";
    var lesdoto = "⪁";
    var lesdotor = "⪃";
    var lesg = "⋚︀";
    var lesges = "⪓";
    var lessapprox = "⪅";
    var lessdot = "⋖";
    var lesseqgtr = "⋚";
    var lesseqqgtr = "⪋";
    var LessEqualGreater = "⋚";
    var LessFullEqual = "≦";
    var LessGreater = "≶";
    var lessgtr = "≶";
    var LessLess = "⪡";
    var lesssim = "≲";
    var LessSlantEqual = "⩽";
    var LessTilde = "≲";
    var lfisht = "⥼";
    var lfloor = "⌊";
    var Lfr = "𝔏";
    var lfr = "𝔩";
    var lg = "≶";
    var lgE = "⪑";
    var lHar = "⥢";
    var lhard = "↽";
    var lharu = "↼";
    var lharul = "⥪";
    var lhblk = "▄";
    var LJcy = "Љ";
    var ljcy = "љ";
    var llarr = "⇇";
    var ll = "≪";
    var Ll = "⋘";
    var llcorner = "⌞";
    var Lleftarrow = "⇚";
    var llhard = "⥫";
    var lltri = "◺";
    var Lmidot = "Ŀ";
    var lmidot = "ŀ";
    var lmoustache = "⎰";
    var lmoust = "⎰";
    var lnap = "⪉";
    var lnapprox = "⪉";
    var lne = "⪇";
    var lnE = "≨";
    var lneq = "⪇";
    var lneqq = "≨";
    var lnsim = "⋦";
    var loang = "⟬";
    var loarr = "⇽";
    var lobrk = "⟦";
    var longleftarrow = "⟵";
    var LongLeftArrow = "⟵";
    var Longleftarrow = "⟸";
    var longleftrightarrow = "⟷";
    var LongLeftRightArrow = "⟷";
    var Longleftrightarrow = "⟺";
    var longmapsto = "⟼";
    var longrightarrow = "⟶";
    var LongRightArrow = "⟶";
    var Longrightarrow = "⟹";
    var looparrowleft = "↫";
    var looparrowright = "↬";
    var lopar = "⦅";
    var Lopf = "𝕃";
    var lopf = "𝕝";
    var loplus = "⨭";
    var lotimes = "⨴";
    var lowast = "∗";
    var lowbar = "_";
    var LowerLeftArrow = "↙";
    var LowerRightArrow = "↘";
    var loz = "◊";
    var lozenge = "◊";
    var lozf = "⧫";
    var lpar = "(";
    var lparlt = "⦓";
    var lrarr = "⇆";
    var lrcorner = "⌟";
    var lrhar = "⇋";
    var lrhard = "⥭";
    var lrm = "‎";
    var lrtri = "⊿";
    var lsaquo = "‹";
    var lscr = "𝓁";
    var Lscr = "ℒ";
    var lsh = "↰";
    var Lsh = "↰";
    var lsim = "≲";
    var lsime = "⪍";
    var lsimg = "⪏";
    var lsqb = "[";
    var lsquo = "‘";
    var lsquor = "‚";
    var Lstrok = "Ł";
    var lstrok = "ł";
    var ltcc = "⪦";
    var ltcir = "⩹";
    var lt = "<";
    var LT = "<";
    var Lt = "≪";
    var ltdot = "⋖";
    var lthree = "⋋";
    var ltimes = "⋉";
    var ltlarr = "⥶";
    var ltquest = "⩻";
    var ltri = "◃";
    var ltrie = "⊴";
    var ltrif = "◂";
    var ltrPar = "⦖";
    var lurdshar = "⥊";
    var luruhar = "⥦";
    var lvertneqq = "≨︀";
    var lvnE = "≨︀";
    var macr = "¯";
    var male = "♂";
    var malt = "✠";
    var maltese = "✠";
    var map = "↦";
    var mapsto = "↦";
    var mapstodown = "↧";
    var mapstoleft = "↤";
    var mapstoup = "↥";
    var marker = "▮";
    var mcomma = "⨩";
    var Mcy = "М";
    var mcy = "м";
    var mdash = "—";
    var mDDot = "∺";
    var measuredangle = "∡";
    var MediumSpace = " ";
    var Mellintrf = "ℳ";
    var Mfr = "𝔐";
    var mfr = "𝔪";
    var mho = "℧";
    var micro = "µ";
    var midast = "*";
    var midcir = "⫰";
    var mid = "∣";
    var middot = "·";
    var minusb = "⊟";
    var minus = "−";
    var minusd = "∸";
    var minusdu = "⨪";
    var MinusPlus = "∓";
    var mlcp = "⫛";
    var mldr = "…";
    var mnplus = "∓";
    var models = "⊧";
    var Mopf = "𝕄";
    var mopf = "𝕞";
    var mp = "∓";
    var mscr = "𝓂";
    var Mscr = "ℳ";
    var mstpos = "∾";
    var Mu = "Μ";
    var mu = "μ";
    var multimap = "⊸";
    var mumap = "⊸";
    var nabla = "∇";
    var Nacute = "Ń";
    var nacute = "ń";
    var nang = "∠⃒";
    var nap = "≉";
    var napE = "⩰̸";
    var napid = "≋̸";
    var napos = "ŉ";
    var napprox = "≉";
    var natural = "♮";
    var naturals = "ℕ";
    var natur = "♮";
    var nbsp = " ";
    var nbump = "≎̸";
    var nbumpe = "≏̸";
    var ncap = "⩃";
    var Ncaron = "Ň";
    var ncaron = "ň";
    var Ncedil = "Ņ";
    var ncedil = "ņ";
    var ncong = "≇";
    var ncongdot = "⩭̸";
    var ncup = "⩂";
    var Ncy = "Н";
    var ncy = "н";
    var ndash = "–";
    var nearhk = "⤤";
    var nearr = "↗";
    var neArr = "⇗";
    var nearrow = "↗";
    var ne = "≠";
    var nedot = "≐̸";
    var NegativeMediumSpace = "​";
    var NegativeThickSpace = "​";
    var NegativeThinSpace = "​";
    var NegativeVeryThinSpace = "​";
    var nequiv = "≢";
    var nesear = "⤨";
    var nesim = "≂̸";
    var NestedGreaterGreater = "≫";
    var NestedLessLess = "≪";
    var NewLine = "\n";
    var nexist = "∄";
    var nexists = "∄";
    var Nfr = "𝔑";
    var nfr = "𝔫";
    var ngE = "≧̸";
    var nge = "≱";
    var ngeq = "≱";
    var ngeqq = "≧̸";
    var ngeqslant = "⩾̸";
    var nges = "⩾̸";
    var nGg = "⋙̸";
    var ngsim = "≵";
    var nGt = "≫⃒";
    var ngt = "≯";
    var ngtr = "≯";
    var nGtv = "≫̸";
    var nharr = "↮";
    var nhArr = "⇎";
    var nhpar = "⫲";
    var ni = "∋";
    var nis = "⋼";
    var nisd = "⋺";
    var niv = "∋";
    var NJcy = "Њ";
    var njcy = "њ";
    var nlarr = "↚";
    var nlArr = "⇍";
    var nldr = "‥";
    var nlE = "≦̸";
    var nle = "≰";
    var nleftarrow = "↚";
    var nLeftarrow = "⇍";
    var nleftrightarrow = "↮";
    var nLeftrightarrow = "⇎";
    var nleq = "≰";
    var nleqq = "≦̸";
    var nleqslant = "⩽̸";
    var nles = "⩽̸";
    var nless = "≮";
    var nLl = "⋘̸";
    var nlsim = "≴";
    var nLt = "≪⃒";
    var nlt = "≮";
    var nltri = "⋪";
    var nltrie = "⋬";
    var nLtv = "≪̸";
    var nmid = "∤";
    var NoBreak = "⁠";
    var NonBreakingSpace = " ";
    var nopf = "𝕟";
    var Nopf = "ℕ";
    var Not = "⫬";
    var not = "¬";
    var NotCongruent = "≢";
    var NotCupCap = "≭";
    var NotDoubleVerticalBar = "∦";
    var NotElement = "∉";
    var NotEqual = "≠";
    var NotEqualTilde = "≂̸";
    var NotExists = "∄";
    var NotGreater = "≯";
    var NotGreaterEqual = "≱";
    var NotGreaterFullEqual = "≧̸";
    var NotGreaterGreater = "≫̸";
    var NotGreaterLess = "≹";
    var NotGreaterSlantEqual = "⩾̸";
    var NotGreaterTilde = "≵";
    var NotHumpDownHump = "≎̸";
    var NotHumpEqual = "≏̸";
    var notin = "∉";
    var notindot = "⋵̸";
    var notinE = "⋹̸";
    var notinva = "∉";
    var notinvb = "⋷";
    var notinvc = "⋶";
    var NotLeftTriangleBar = "⧏̸";
    var NotLeftTriangle = "⋪";
    var NotLeftTriangleEqual = "⋬";
    var NotLess = "≮";
    var NotLessEqual = "≰";
    var NotLessGreater = "≸";
    var NotLessLess = "≪̸";
    var NotLessSlantEqual = "⩽̸";
    var NotLessTilde = "≴";
    var NotNestedGreaterGreater = "⪢̸";
    var NotNestedLessLess = "⪡̸";
    var notni = "∌";
    var notniva = "∌";
    var notnivb = "⋾";
    var notnivc = "⋽";
    var NotPrecedes = "⊀";
    var NotPrecedesEqual = "⪯̸";
    var NotPrecedesSlantEqual = "⋠";
    var NotReverseElement = "∌";
    var NotRightTriangleBar = "⧐̸";
    var NotRightTriangle = "⋫";
    var NotRightTriangleEqual = "⋭";
    var NotSquareSubset = "⊏̸";
    var NotSquareSubsetEqual = "⋢";
    var NotSquareSuperset = "⊐̸";
    var NotSquareSupersetEqual = "⋣";
    var NotSubset = "⊂⃒";
    var NotSubsetEqual = "⊈";
    var NotSucceeds = "⊁";
    var NotSucceedsEqual = "⪰̸";
    var NotSucceedsSlantEqual = "⋡";
    var NotSucceedsTilde = "≿̸";
    var NotSuperset = "⊃⃒";
    var NotSupersetEqual = "⊉";
    var NotTilde = "≁";
    var NotTildeEqual = "≄";
    var NotTildeFullEqual = "≇";
    var NotTildeTilde = "≉";
    var NotVerticalBar = "∤";
    var nparallel = "∦";
    var npar = "∦";
    var nparsl = "⫽⃥";
    var npart = "∂̸";
    var npolint = "⨔";
    var npr = "⊀";
    var nprcue = "⋠";
    var nprec = "⊀";
    var npreceq = "⪯̸";
    var npre = "⪯̸";
    var nrarrc = "⤳̸";
    var nrarr = "↛";
    var nrArr = "⇏";
    var nrarrw = "↝̸";
    var nrightarrow = "↛";
    var nRightarrow = "⇏";
    var nrtri = "⋫";
    var nrtrie = "⋭";
    var nsc = "⊁";
    var nsccue = "⋡";
    var nsce = "⪰̸";
    var Nscr = "𝒩";
    var nscr = "𝓃";
    var nshortmid = "∤";
    var nshortparallel = "∦";
    var nsim = "≁";
    var nsime = "≄";
    var nsimeq = "≄";
    var nsmid = "∤";
    var nspar = "∦";
    var nsqsube = "⋢";
    var nsqsupe = "⋣";
    var nsub = "⊄";
    var nsubE = "⫅̸";
    var nsube = "⊈";
    var nsubset = "⊂⃒";
    var nsubseteq = "⊈";
    var nsubseteqq = "⫅̸";
    var nsucc = "⊁";
    var nsucceq = "⪰̸";
    var nsup = "⊅";
    var nsupE = "⫆̸";
    var nsupe = "⊉";
    var nsupset = "⊃⃒";
    var nsupseteq = "⊉";
    var nsupseteqq = "⫆̸";
    var ntgl = "≹";
    var Ntilde = "Ñ";
    var ntilde = "ñ";
    var ntlg = "≸";
    var ntriangleleft = "⋪";
    var ntrianglelefteq = "⋬";
    var ntriangleright = "⋫";
    var ntrianglerighteq = "⋭";
    var Nu = "Ν";
    var nu = "ν";
    var num = "#";
    var numero = "№";
    var numsp = " ";
    var nvap = "≍⃒";
    var nvdash = "⊬";
    var nvDash = "⊭";
    var nVdash = "⊮";
    var nVDash = "⊯";
    var nvge = "≥⃒";
    var nvgt = ">⃒";
    var nvHarr = "⤄";
    var nvinfin = "⧞";
    var nvlArr = "⤂";
    var nvle = "≤⃒";
    var nvlt = "<⃒";
    var nvltrie = "⊴⃒";
    var nvrArr = "⤃";
    var nvrtrie = "⊵⃒";
    var nvsim = "∼⃒";
    var nwarhk = "⤣";
    var nwarr = "↖";
    var nwArr = "⇖";
    var nwarrow = "↖";
    var nwnear = "⤧";
    var Oacute = "Ó";
    var oacute = "ó";
    var oast = "⊛";
    var Ocirc = "Ô";
    var ocirc = "ô";
    var ocir = "⊚";
    var Ocy = "О";
    var ocy = "о";
    var odash = "⊝";
    var Odblac = "Ő";
    var odblac = "ő";
    var odiv = "⨸";
    var odot = "⊙";
    var odsold = "⦼";
    var OElig = "Œ";
    var oelig = "œ";
    var ofcir = "⦿";
    var Ofr = "𝔒";
    var ofr = "𝔬";
    var ogon = "˛";
    var Ograve = "Ò";
    var ograve = "ò";
    var ogt = "⧁";
    var ohbar = "⦵";
    var ohm = "Ω";
    var oint = "∮";
    var olarr = "↺";
    var olcir = "⦾";
    var olcross = "⦻";
    var oline = "‾";
    var olt = "⧀";
    var Omacr = "Ō";
    var omacr = "ō";
    var Omega = "Ω";
    var omega = "ω";
    var Omicron = "Ο";
    var omicron = "ο";
    var omid = "⦶";
    var ominus = "⊖";
    var Oopf = "𝕆";
    var oopf = "𝕠";
    var opar = "⦷";
    var OpenCurlyDoubleQuote = "“";
    var OpenCurlyQuote = "‘";
    var operp = "⦹";
    var oplus = "⊕";
    var orarr = "↻";
    var Or = "⩔";
    var or = "∨";
    var ord = "⩝";
    var order = "ℴ";
    var orderof = "ℴ";
    var ordf = "ª";
    var ordm = "º";
    var origof = "⊶";
    var oror = "⩖";
    var orslope = "⩗";
    var orv = "⩛";
    var oS = "Ⓢ";
    var Oscr = "𝒪";
    var oscr = "ℴ";
    var Oslash = "Ø";
    var oslash = "ø";
    var osol = "⊘";
    var Otilde = "Õ";
    var otilde = "õ";
    var otimesas = "⨶";
    var Otimes = "⨷";
    var otimes = "⊗";
    var Ouml = "Ö";
    var ouml = "ö";
    var ovbar = "⌽";
    var OverBar = "‾";
    var OverBrace = "⏞";
    var OverBracket = "⎴";
    var OverParenthesis = "⏜";
    var para = "¶";
    var parallel = "∥";
    var par = "∥";
    var parsim = "⫳";
    var parsl = "⫽";
    var part = "∂";
    var PartialD = "∂";
    var Pcy = "П";
    var pcy = "п";
    var percnt = "%";
    var period = ".";
    var permil = "‰";
    var perp = "⊥";
    var pertenk = "‱";
    var Pfr = "𝔓";
    var pfr = "𝔭";
    var Phi = "Φ";
    var phi = "φ";
    var phiv = "ϕ";
    var phmmat = "ℳ";
    var phone = "☎";
    var Pi = "Π";
    var pi = "π";
    var pitchfork = "⋔";
    var piv = "ϖ";
    var planck = "ℏ";
    var planckh = "ℎ";
    var plankv = "ℏ";
    var plusacir = "⨣";
    var plusb = "⊞";
    var pluscir = "⨢";
    var plus = "+";
    var plusdo = "∔";
    var plusdu = "⨥";
    var pluse = "⩲";
    var PlusMinus = "±";
    var plusmn = "±";
    var plussim = "⨦";
    var plustwo = "⨧";
    var pm = "±";
    var Poincareplane = "ℌ";
    var pointint = "⨕";
    var popf = "𝕡";
    var Popf = "ℙ";
    var pound = "£";
    var prap = "⪷";
    var Pr = "⪻";
    var pr = "≺";
    var prcue = "≼";
    var precapprox = "⪷";
    var prec = "≺";
    var preccurlyeq = "≼";
    var Precedes = "≺";
    var PrecedesEqual = "⪯";
    var PrecedesSlantEqual = "≼";
    var PrecedesTilde = "≾";
    var preceq = "⪯";
    var precnapprox = "⪹";
    var precneqq = "⪵";
    var precnsim = "⋨";
    var pre = "⪯";
    var prE = "⪳";
    var precsim = "≾";
    var prime = "′";
    var Prime = "″";
    var primes = "ℙ";
    var prnap = "⪹";
    var prnE = "⪵";
    var prnsim = "⋨";
    var prod = "∏";
    var Product = "∏";
    var profalar = "⌮";
    var profline = "⌒";
    var profsurf = "⌓";
    var prop = "∝";
    var Proportional = "∝";
    var Proportion = "∷";
    var propto = "∝";
    var prsim = "≾";
    var prurel = "⊰";
    var Pscr = "𝒫";
    var pscr = "𝓅";
    var Psi = "Ψ";
    var psi = "ψ";
    var puncsp = " ";
    var Qfr = "𝔔";
    var qfr = "𝔮";
    var qint = "⨌";
    var qopf = "𝕢";
    var Qopf = "ℚ";
    var qprime = "⁗";
    var Qscr = "𝒬";
    var qscr = "𝓆";
    var quaternions = "ℍ";
    var quatint = "⨖";
    var quest = "?";
    var questeq = "≟";
    var quot = "\"";
    var QUOT = "\"";
    var rAarr = "⇛";
    var race = "∽̱";
    var Racute = "Ŕ";
    var racute = "ŕ";
    var radic = "√";
    var raemptyv = "⦳";
    var rang = "⟩";
    var Rang = "⟫";
    var rangd = "⦒";
    var range = "⦥";
    var rangle = "⟩";
    var raquo = "»";
    var rarrap = "⥵";
    var rarrb = "⇥";
    var rarrbfs = "⤠";
    var rarrc = "⤳";
    var rarr = "→";
    var Rarr = "↠";
    var rArr = "⇒";
    var rarrfs = "⤞";
    var rarrhk = "↪";
    var rarrlp = "↬";
    var rarrpl = "⥅";
    var rarrsim = "⥴";
    var Rarrtl = "⤖";
    var rarrtl = "↣";
    var rarrw = "↝";
    var ratail = "⤚";
    var rAtail = "⤜";
    var ratio = "∶";
    var rationals = "ℚ";
    var rbarr = "⤍";
    var rBarr = "⤏";
    var RBarr = "⤐";
    var rbbrk = "❳";
    var rbrace = "}";
    var rbrack = "]";
    var rbrke = "⦌";
    var rbrksld = "⦎";
    var rbrkslu = "⦐";
    var Rcaron = "Ř";
    var rcaron = "ř";
    var Rcedil = "Ŗ";
    var rcedil = "ŗ";
    var rceil = "⌉";
    var rcub = "}";
    var Rcy = "Р";
    var rcy = "р";
    var rdca = "⤷";
    var rdldhar = "⥩";
    var rdquo = "”";
    var rdquor = "”";
    var rdsh = "↳";
    var real = "ℜ";
    var realine = "ℛ";
    var realpart = "ℜ";
    var reals = "ℝ";
    var Re = "ℜ";
    var rect = "▭";
    var reg = "®";
    var REG = "®";
    var ReverseElement = "∋";
    var ReverseEquilibrium = "⇋";
    var ReverseUpEquilibrium = "⥯";
    var rfisht = "⥽";
    var rfloor = "⌋";
    var rfr = "𝔯";
    var Rfr = "ℜ";
    var rHar = "⥤";
    var rhard = "⇁";
    var rharu = "⇀";
    var rharul = "⥬";
    var Rho = "Ρ";
    var rho = "ρ";
    var rhov = "ϱ";
    var RightAngleBracket = "⟩";
    var RightArrowBar = "⇥";
    var rightarrow = "→";
    var RightArrow = "→";
    var Rightarrow = "⇒";
    var RightArrowLeftArrow = "⇄";
    var rightarrowtail = "↣";
    var RightCeiling = "⌉";
    var RightDoubleBracket = "⟧";
    var RightDownTeeVector = "⥝";
    var RightDownVectorBar = "⥕";
    var RightDownVector = "⇂";
    var RightFloor = "⌋";
    var rightharpoondown = "⇁";
    var rightharpoonup = "⇀";
    var rightleftarrows = "⇄";
    var rightleftharpoons = "⇌";
    var rightrightarrows = "⇉";
    var rightsquigarrow = "↝";
    var RightTeeArrow = "↦";
    var RightTee = "⊢";
    var RightTeeVector = "⥛";
    var rightthreetimes = "⋌";
    var RightTriangleBar = "⧐";
    var RightTriangle = "⊳";
    var RightTriangleEqual = "⊵";
    var RightUpDownVector = "⥏";
    var RightUpTeeVector = "⥜";
    var RightUpVectorBar = "⥔";
    var RightUpVector = "↾";
    var RightVectorBar = "⥓";
    var RightVector = "⇀";
    var ring = "˚";
    var risingdotseq = "≓";
    var rlarr = "⇄";
    var rlhar = "⇌";
    var rlm = "‏";
    var rmoustache = "⎱";
    var rmoust = "⎱";
    var rnmid = "⫮";
    var roang = "⟭";
    var roarr = "⇾";
    var robrk = "⟧";
    var ropar = "⦆";
    var ropf = "𝕣";
    var Ropf = "ℝ";
    var roplus = "⨮";
    var rotimes = "⨵";
    var RoundImplies = "⥰";
    var rpar = ")";
    var rpargt = "⦔";
    var rppolint = "⨒";
    var rrarr = "⇉";
    var Rrightarrow = "⇛";
    var rsaquo = "›";
    var rscr = "𝓇";
    var Rscr = "ℛ";
    var rsh = "↱";
    var Rsh = "↱";
    var rsqb = "]";
    var rsquo = "’";
    var rsquor = "’";
    var rthree = "⋌";
    var rtimes = "⋊";
    var rtri = "▹";
    var rtrie = "⊵";
    var rtrif = "▸";
    var rtriltri = "⧎";
    var RuleDelayed = "⧴";
    var ruluhar = "⥨";
    var rx = "℞";
    var Sacute = "Ś";
    var sacute = "ś";
    var sbquo = "‚";
    var scap = "⪸";
    var Scaron = "Š";
    var scaron = "š";
    var Sc = "⪼";
    var sc = "≻";
    var sccue = "≽";
    var sce = "⪰";
    var scE = "⪴";
    var Scedil = "Ş";
    var scedil = "ş";
    var Scirc = "Ŝ";
    var scirc = "ŝ";
    var scnap = "⪺";
    var scnE = "⪶";
    var scnsim = "⋩";
    var scpolint = "⨓";
    var scsim = "≿";
    var Scy = "С";
    var scy = "с";
    var sdotb = "⊡";
    var sdot = "⋅";
    var sdote = "⩦";
    var searhk = "⤥";
    var searr = "↘";
    var seArr = "⇘";
    var searrow = "↘";
    var sect = "§";
    var semi = ";";
    var seswar = "⤩";
    var setminus = "∖";
    var setmn = "∖";
    var sext = "✶";
    var Sfr = "𝔖";
    var sfr = "𝔰";
    var sfrown = "⌢";
    var sharp = "♯";
    var SHCHcy = "Щ";
    var shchcy = "щ";
    var SHcy = "Ш";
    var shcy = "ш";
    var ShortDownArrow = "↓";
    var ShortLeftArrow = "←";
    var shortmid = "∣";
    var shortparallel = "∥";
    var ShortRightArrow = "→";
    var ShortUpArrow = "↑";
    var shy = "­";
    var Sigma = "Σ";
    var sigma = "σ";
    var sigmaf = "ς";
    var sigmav = "ς";
    var sim = "∼";
    var simdot = "⩪";
    var sime = "≃";
    var simeq = "≃";
    var simg = "⪞";
    var simgE = "⪠";
    var siml = "⪝";
    var simlE = "⪟";
    var simne = "≆";
    var simplus = "⨤";
    var simrarr = "⥲";
    var slarr = "←";
    var SmallCircle = "∘";
    var smallsetminus = "∖";
    var smashp = "⨳";
    var smeparsl = "⧤";
    var smid = "∣";
    var smile = "⌣";
    var smt = "⪪";
    var smte = "⪬";
    var smtes = "⪬︀";
    var SOFTcy = "Ь";
    var softcy = "ь";
    var solbar = "⌿";
    var solb = "⧄";
    var sol = "/";
    var Sopf = "𝕊";
    var sopf = "𝕤";
    var spades = "♠";
    var spadesuit = "♠";
    var spar = "∥";
    var sqcap = "⊓";
    var sqcaps = "⊓︀";
    var sqcup = "⊔";
    var sqcups = "⊔︀";
    var Sqrt = "√";
    var sqsub = "⊏";
    var sqsube = "⊑";
    var sqsubset = "⊏";
    var sqsubseteq = "⊑";
    var sqsup = "⊐";
    var sqsupe = "⊒";
    var sqsupset = "⊐";
    var sqsupseteq = "⊒";
    var square = "□";
    var Square = "□";
    var SquareIntersection = "⊓";
    var SquareSubset = "⊏";
    var SquareSubsetEqual = "⊑";
    var SquareSuperset = "⊐";
    var SquareSupersetEqual = "⊒";
    var SquareUnion = "⊔";
    var squarf = "▪";
    var squ = "□";
    var squf = "▪";
    var srarr = "→";
    var Sscr = "𝒮";
    var sscr = "𝓈";
    var ssetmn = "∖";
    var ssmile = "⌣";
    var sstarf = "⋆";
    var Star = "⋆";
    var star = "☆";
    var starf = "★";
    var straightepsilon = "ϵ";
    var straightphi = "ϕ";
    var strns = "¯";
    var sub = "⊂";
    var Sub = "⋐";
    var subdot = "⪽";
    var subE = "⫅";
    var sube = "⊆";
    var subedot = "⫃";
    var submult = "⫁";
    var subnE = "⫋";
    var subne = "⊊";
    var subplus = "⪿";
    var subrarr = "⥹";
    var subset = "⊂";
    var Subset = "⋐";
    var subseteq = "⊆";
    var subseteqq = "⫅";
    var SubsetEqual = "⊆";
    var subsetneq = "⊊";
    var subsetneqq = "⫋";
    var subsim = "⫇";
    var subsub = "⫕";
    var subsup = "⫓";
    var succapprox = "⪸";
    var succ = "≻";
    var succcurlyeq = "≽";
    var Succeeds = "≻";
    var SucceedsEqual = "⪰";
    var SucceedsSlantEqual = "≽";
    var SucceedsTilde = "≿";
    var succeq = "⪰";
    var succnapprox = "⪺";
    var succneqq = "⪶";
    var succnsim = "⋩";
    var succsim = "≿";
    var SuchThat = "∋";
    var sum = "∑";
    var Sum = "∑";
    var sung = "♪";
    var sup1 = "¹";
    var sup2 = "²";
    var sup3 = "³";
    var sup = "⊃";
    var Sup = "⋑";
    var supdot = "⪾";
    var supdsub = "⫘";
    var supE = "⫆";
    var supe = "⊇";
    var supedot = "⫄";
    var Superset = "⊃";
    var SupersetEqual = "⊇";
    var suphsol = "⟉";
    var suphsub = "⫗";
    var suplarr = "⥻";
    var supmult = "⫂";
    var supnE = "⫌";
    var supne = "⊋";
    var supplus = "⫀";
    var supset = "⊃";
    var Supset = "⋑";
    var supseteq = "⊇";
    var supseteqq = "⫆";
    var supsetneq = "⊋";
    var supsetneqq = "⫌";
    var supsim = "⫈";
    var supsub = "⫔";
    var supsup = "⫖";
    var swarhk = "⤦";
    var swarr = "↙";
    var swArr = "⇙";
    var swarrow = "↙";
    var swnwar = "⤪";
    var szlig = "ß";
    var Tab = "\t";
    var target = "⌖";
    var Tau = "Τ";
    var tau = "τ";
    var tbrk = "⎴";
    var Tcaron = "Ť";
    var tcaron = "ť";
    var Tcedil = "Ţ";
    var tcedil = "ţ";
    var Tcy = "Т";
    var tcy = "т";
    var tdot = "⃛";
    var telrec = "⌕";
    var Tfr = "𝔗";
    var tfr = "𝔱";
    var there4 = "∴";
    var therefore = "∴";
    var Therefore = "∴";
    var Theta = "Θ";
    var theta = "θ";
    var thetasym = "ϑ";
    var thetav = "ϑ";
    var thickapprox = "≈";
    var thicksim = "∼";
    var ThickSpace = "  ";
    var ThinSpace = " ";
    var thinsp = " ";
    var thkap = "≈";
    var thksim = "∼";
    var THORN = "Þ";
    var thorn = "þ";
    var tilde = "˜";
    var Tilde = "∼";
    var TildeEqual = "≃";
    var TildeFullEqual = "≅";
    var TildeTilde = "≈";
    var timesbar = "⨱";
    var timesb = "⊠";
    var times = "×";
    var timesd = "⨰";
    var tint = "∭";
    var toea = "⤨";
    var topbot = "⌶";
    var topcir = "⫱";
    var top = "⊤";
    var Topf = "𝕋";
    var topf = "𝕥";
    var topfork = "⫚";
    var tosa = "⤩";
    var tprime = "‴";
    var trade = "™";
    var TRADE = "™";
    var triangle = "▵";
    var triangledown = "▿";
    var triangleleft = "◃";
    var trianglelefteq = "⊴";
    var triangleq = "≜";
    var triangleright = "▹";
    var trianglerighteq = "⊵";
    var tridot = "◬";
    var trie = "≜";
    var triminus = "⨺";
    var TripleDot = "⃛";
    var triplus = "⨹";
    var trisb = "⧍";
    var tritime = "⨻";
    var trpezium = "⏢";
    var Tscr = "𝒯";
    var tscr = "𝓉";
    var TScy = "Ц";
    var tscy = "ц";
    var TSHcy = "Ћ";
    var tshcy = "ћ";
    var Tstrok = "Ŧ";
    var tstrok = "ŧ";
    var twixt = "≬";
    var twoheadleftarrow = "↞";
    var twoheadrightarrow = "↠";
    var Uacute = "Ú";
    var uacute = "ú";
    var uarr = "↑";
    var Uarr = "↟";
    var uArr = "⇑";
    var Uarrocir = "⥉";
    var Ubrcy = "Ў";
    var ubrcy = "ў";
    var Ubreve = "Ŭ";
    var ubreve = "ŭ";
    var Ucirc = "Û";
    var ucirc = "û";
    var Ucy = "У";
    var ucy = "у";
    var udarr = "⇅";
    var Udblac = "Ű";
    var udblac = "ű";
    var udhar = "⥮";
    var ufisht = "⥾";
    var Ufr = "𝔘";
    var ufr = "𝔲";
    var Ugrave = "Ù";
    var ugrave = "ù";
    var uHar = "⥣";
    var uharl = "↿";
    var uharr = "↾";
    var uhblk = "▀";
    var ulcorn = "⌜";
    var ulcorner = "⌜";
    var ulcrop = "⌏";
    var ultri = "◸";
    var Umacr = "Ū";
    var umacr = "ū";
    var uml = "¨";
    var UnderBar = "_";
    var UnderBrace = "⏟";
    var UnderBracket = "⎵";
    var UnderParenthesis = "⏝";
    var Union = "⋃";
    var UnionPlus = "⊎";
    var Uogon = "Ų";
    var uogon = "ų";
    var Uopf = "𝕌";
    var uopf = "𝕦";
    var UpArrowBar = "⤒";
    var uparrow = "↑";
    var UpArrow = "↑";
    var Uparrow = "⇑";
    var UpArrowDownArrow = "⇅";
    var updownarrow = "↕";
    var UpDownArrow = "↕";
    var Updownarrow = "⇕";
    var UpEquilibrium = "⥮";
    var upharpoonleft = "↿";
    var upharpoonright = "↾";
    var uplus = "⊎";
    var UpperLeftArrow = "↖";
    var UpperRightArrow = "↗";
    var upsi = "υ";
    var Upsi = "ϒ";
    var upsih = "ϒ";
    var Upsilon = "Υ";
    var upsilon = "υ";
    var UpTeeArrow = "↥";
    var UpTee = "⊥";
    var upuparrows = "⇈";
    var urcorn = "⌝";
    var urcorner = "⌝";
    var urcrop = "⌎";
    var Uring = "Ů";
    var uring = "ů";
    var urtri = "◹";
    var Uscr = "𝒰";
    var uscr = "𝓊";
    var utdot = "⋰";
    var Utilde = "Ũ";
    var utilde = "ũ";
    var utri = "▵";
    var utrif = "▴";
    var uuarr = "⇈";
    var Uuml = "Ü";
    var uuml = "ü";
    var uwangle = "⦧";
    var vangrt = "⦜";
    var varepsilon = "ϵ";
    var varkappa = "ϰ";
    var varnothing = "∅";
    var varphi = "ϕ";
    var varpi = "ϖ";
    var varpropto = "∝";
    var varr = "↕";
    var vArr = "⇕";
    var varrho = "ϱ";
    var varsigma = "ς";
    var varsubsetneq = "⊊︀";
    var varsubsetneqq = "⫋︀";
    var varsupsetneq = "⊋︀";
    var varsupsetneqq = "⫌︀";
    var vartheta = "ϑ";
    var vartriangleleft = "⊲";
    var vartriangleright = "⊳";
    var vBar = "⫨";
    var Vbar = "⫫";
    var vBarv = "⫩";
    var Vcy = "В";
    var vcy = "в";
    var vdash = "⊢";
    var vDash = "⊨";
    var Vdash = "⊩";
    var VDash = "⊫";
    var Vdashl = "⫦";
    var veebar = "⊻";
    var vee = "∨";
    var Vee = "⋁";
    var veeeq = "≚";
    var vellip = "⋮";
    var verbar = "|";
    var Verbar = "‖";
    var vert = "|";
    var Vert = "‖";
    var VerticalBar = "∣";
    var VerticalLine = "|";
    var VerticalSeparator = "❘";
    var VerticalTilde = "≀";
    var VeryThinSpace = " ";
    var Vfr = "𝔙";
    var vfr = "𝔳";
    var vltri = "⊲";
    var vnsub = "⊂⃒";
    var vnsup = "⊃⃒";
    var Vopf = "𝕍";
    var vopf = "𝕧";
    var vprop = "∝";
    var vrtri = "⊳";
    var Vscr = "𝒱";
    var vscr = "𝓋";
    var vsubnE = "⫋︀";
    var vsubne = "⊊︀";
    var vsupnE = "⫌︀";
    var vsupne = "⊋︀";
    var Vvdash = "⊪";
    var vzigzag = "⦚";
    var Wcirc = "Ŵ";
    var wcirc = "ŵ";
    var wedbar = "⩟";
    var wedge = "∧";
    var Wedge = "⋀";
    var wedgeq = "≙";
    var weierp = "℘";
    var Wfr = "𝔚";
    var wfr = "𝔴";
    var Wopf = "𝕎";
    var wopf = "𝕨";
    var wp = "℘";
    var wr = "≀";
    var wreath = "≀";
    var Wscr = "𝒲";
    var wscr = "𝓌";
    var xcap = "⋂";
    var xcirc = "◯";
    var xcup = "⋃";
    var xdtri = "▽";
    var Xfr = "𝔛";
    var xfr = "𝔵";
    var xharr = "⟷";
    var xhArr = "⟺";
    var Xi = "Ξ";
    var xi = "ξ";
    var xlarr = "⟵";
    var xlArr = "⟸";
    var xmap = "⟼";
    var xnis = "⋻";
    var xodot = "⨀";
    var Xopf = "𝕏";
    var xopf = "𝕩";
    var xoplus = "⨁";
    var xotime = "⨂";
    var xrarr = "⟶";
    var xrArr = "⟹";
    var Xscr = "𝒳";
    var xscr = "𝓍";
    var xsqcup = "⨆";
    var xuplus = "⨄";
    var xutri = "△";
    var xvee = "⋁";
    var xwedge = "⋀";
    var Yacute = "Ý";
    var yacute = "ý";
    var YAcy = "Я";
    var yacy = "я";
    var Ycirc = "Ŷ";
    var ycirc = "ŷ";
    var Ycy = "Ы";
    var ycy = "ы";
    var yen = "¥";
    var Yfr = "𝔜";
    var yfr = "𝔶";
    var YIcy = "Ї";
    var yicy = "ї";
    var Yopf = "𝕐";
    var yopf = "𝕪";
    var Yscr = "𝒴";
    var yscr = "𝓎";
    var YUcy = "Ю";
    var yucy = "ю";
    var yuml = "ÿ";
    var Yuml = "Ÿ";
    var Zacute = "Ź";
    var zacute = "ź";
    var Zcaron = "Ž";
    var zcaron = "ž";
    var Zcy = "З";
    var zcy = "з";
    var Zdot = "Ż";
    var zdot = "ż";
    var zeetrf = "ℨ";
    var ZeroWidthSpace = "​";
    var Zeta = "Ζ";
    var zeta = "ζ";
    var zfr = "𝔷";
    var Zfr = "ℨ";
    var ZHcy = "Ж";
    var zhcy = "ж";
    var zigrarr = "⇝";
    var zopf = "𝕫";
    var Zopf = "ℤ";
    var Zscr = "𝒵";
    var zscr = "𝓏";
    var zwj = "‍";
    var zwnj = "‌";
    var require$$0 = {
        Aacute: Aacute,
        aacute: aacute,
        Abreve: Abreve,
        abreve: abreve,
        ac: ac,
        acd: acd,
        acE: acE,
        Acirc: Acirc,
        acirc: acirc,
        acute: acute,
        Acy: Acy,
        acy: acy,
        AElig: AElig,
        aelig: aelig,
        af: af,
        Afr: Afr,
        afr: afr,
        Agrave: Agrave,
        agrave: agrave,
        alefsym: alefsym,
        aleph: aleph,
        Alpha: Alpha,
        alpha: alpha,
        Amacr: Amacr,
        amacr: amacr,
        amalg: amalg,
        amp: amp,
        AMP: AMP,
        andand: andand,
        And: And,
        and: and,
        andd: andd,
        andslope: andslope,
        andv: andv,
        ang: ang,
        ange: ange,
        angle: angle,
        angmsdaa: angmsdaa,
        angmsdab: angmsdab,
        angmsdac: angmsdac,
        angmsdad: angmsdad,
        angmsdae: angmsdae,
        angmsdaf: angmsdaf,
        angmsdag: angmsdag,
        angmsdah: angmsdah,
        angmsd: angmsd,
        angrt: angrt,
        angrtvb: angrtvb,
        angrtvbd: angrtvbd,
        angsph: angsph,
        angst: angst,
        angzarr: angzarr,
        Aogon: Aogon,
        aogon: aogon,
        Aopf: Aopf,
        aopf: aopf,
        apacir: apacir,
        ap: ap,
        apE: apE,
        ape: ape,
        apid: apid,
        apos: apos,
        ApplyFunction: ApplyFunction,
        approx: approx,
        approxeq: approxeq,
        Aring: Aring,
        aring: aring,
        Ascr: Ascr,
        ascr: ascr,
        Assign: Assign,
        ast: ast,
        asymp: asymp,
        asympeq: asympeq,
        Atilde: Atilde,
        atilde: atilde,
        Auml: Auml,
        auml: auml,
        awconint: awconint,
        awint: awint,
        backcong: backcong,
        backepsilon: backepsilon,
        backprime: backprime,
        backsim: backsim,
        backsimeq: backsimeq,
        Backslash: Backslash,
        Barv: Barv,
        barvee: barvee,
        barwed: barwed,
        Barwed: Barwed,
        barwedge: barwedge,
        bbrk: bbrk,
        bbrktbrk: bbrktbrk,
        bcong: bcong,
        Bcy: Bcy,
        bcy: bcy,
        bdquo: bdquo,
        becaus: becaus,
        because: because,
        Because: Because,
        bemptyv: bemptyv,
        bepsi: bepsi,
        bernou: bernou,
        Bernoullis: Bernoullis,
        Beta: Beta,
        beta: beta,
        beth: beth,
        between: between,
        Bfr: Bfr,
        bfr: bfr,
        bigcap: bigcap,
        bigcirc: bigcirc,
        bigcup: bigcup,
        bigodot: bigodot,
        bigoplus: bigoplus,
        bigotimes: bigotimes,
        bigsqcup: bigsqcup,
        bigstar: bigstar,
        bigtriangledown: bigtriangledown,
        bigtriangleup: bigtriangleup,
        biguplus: biguplus,
        bigvee: bigvee,
        bigwedge: bigwedge,
        bkarow: bkarow,
        blacklozenge: blacklozenge,
        blacksquare: blacksquare,
        blacktriangle: blacktriangle,
        blacktriangledown: blacktriangledown,
        blacktriangleleft: blacktriangleleft,
        blacktriangleright: blacktriangleright,
        blank: blank,
        blk12: blk12,
        blk14: blk14,
        blk34: blk34,
        block: block$1,
        bne: bne,
        bnequiv: bnequiv,
        bNot: bNot,
        bnot: bnot,
        Bopf: Bopf,
        bopf: bopf,
        bot: bot,
        bottom: bottom,
        bowtie: bowtie,
        boxbox: boxbox,
        boxdl: boxdl,
        boxdL: boxdL,
        boxDl: boxDl,
        boxDL: boxDL,
        boxdr: boxdr,
        boxdR: boxdR,
        boxDr: boxDr,
        boxDR: boxDR,
        boxh: boxh,
        boxH: boxH,
        boxhd: boxhd,
        boxHd: boxHd,
        boxhD: boxhD,
        boxHD: boxHD,
        boxhu: boxhu,
        boxHu: boxHu,
        boxhU: boxhU,
        boxHU: boxHU,
        boxminus: boxminus,
        boxplus: boxplus,
        boxtimes: boxtimes,
        boxul: boxul,
        boxuL: boxuL,
        boxUl: boxUl,
        boxUL: boxUL,
        boxur: boxur,
        boxuR: boxuR,
        boxUr: boxUr,
        boxUR: boxUR,
        boxv: boxv,
        boxV: boxV,
        boxvh: boxvh,
        boxvH: boxvH,
        boxVh: boxVh,
        boxVH: boxVH,
        boxvl: boxvl,
        boxvL: boxvL,
        boxVl: boxVl,
        boxVL: boxVL,
        boxvr: boxvr,
        boxvR: boxvR,
        boxVr: boxVr,
        boxVR: boxVR,
        bprime: bprime,
        breve: breve,
        Breve: Breve,
        brvbar: brvbar,
        bscr: bscr,
        Bscr: Bscr,
        bsemi: bsemi,
        bsim: bsim,
        bsime: bsime,
        bsolb: bsolb,
        bsol: bsol,
        bsolhsub: bsolhsub,
        bull: bull,
        bullet: bullet,
        bump: bump,
        bumpE: bumpE,
        bumpe: bumpe,
        Bumpeq: Bumpeq,
        bumpeq: bumpeq,
        Cacute: Cacute,
        cacute: cacute,
        capand: capand,
        capbrcup: capbrcup,
        capcap: capcap,
        cap: cap,
        Cap: Cap,
        capcup: capcup,
        capdot: capdot,
        CapitalDifferentialD: CapitalDifferentialD,
        caps: caps,
        caret: caret,
        caron: caron,
        Cayleys: Cayleys,
        ccaps: ccaps,
        Ccaron: Ccaron,
        ccaron: ccaron,
        Ccedil: Ccedil,
        ccedil: ccedil,
        Ccirc: Ccirc,
        ccirc: ccirc,
        Cconint: Cconint,
        ccups: ccups,
        ccupssm: ccupssm,
        Cdot: Cdot,
        cdot: cdot,
        cedil: cedil,
        Cedilla: Cedilla,
        cemptyv: cemptyv,
        cent: cent,
        centerdot: centerdot,
        CenterDot: CenterDot,
        cfr: cfr,
        Cfr: Cfr,
        CHcy: CHcy,
        chcy: chcy,
        check: check,
        checkmark: checkmark,
        Chi: Chi,
        chi: chi,
        circ: circ,
        circeq: circeq,
        circlearrowleft: circlearrowleft,
        circlearrowright: circlearrowright,
        circledast: circledast,
        circledcirc: circledcirc,
        circleddash: circleddash,
        CircleDot: CircleDot,
        circledR: circledR,
        circledS: circledS,
        CircleMinus: CircleMinus,
        CirclePlus: CirclePlus,
        CircleTimes: CircleTimes,
        cir: cir,
        cirE: cirE,
        cire: cire,
        cirfnint: cirfnint,
        cirmid: cirmid,
        cirscir: cirscir,
        ClockwiseContourIntegral: ClockwiseContourIntegral,
        CloseCurlyDoubleQuote: CloseCurlyDoubleQuote,
        CloseCurlyQuote: CloseCurlyQuote,
        clubs: clubs,
        clubsuit: clubsuit,
        colon: colon,
        Colon: Colon,
        Colone: Colone,
        colone: colone,
        coloneq: coloneq,
        comma: comma,
        commat: commat,
        comp: comp,
        compfn: compfn,
        complement: complement,
        complexes: complexes,
        cong: cong,
        congdot: congdot,
        Congruent: Congruent,
        conint: conint,
        Conint: Conint,
        ContourIntegral: ContourIntegral,
        copf: copf,
        Copf: Copf,
        coprod: coprod,
        Coproduct: Coproduct,
        copy: copy,
        COPY: COPY,
        copysr: copysr,
        CounterClockwiseContourIntegral: CounterClockwiseContourIntegral,
        crarr: crarr,
        cross: cross,
        Cross: Cross,
        Cscr: Cscr,
        cscr: cscr,
        csub: csub,
        csube: csube,
        csup: csup,
        csupe: csupe,
        ctdot: ctdot,
        cudarrl: cudarrl,
        cudarrr: cudarrr,
        cuepr: cuepr,
        cuesc: cuesc,
        cularr: cularr,
        cularrp: cularrp,
        cupbrcap: cupbrcap,
        cupcap: cupcap,
        CupCap: CupCap,
        cup: cup,
        Cup: Cup,
        cupcup: cupcup,
        cupdot: cupdot,
        cupor: cupor,
        cups: cups,
        curarr: curarr,
        curarrm: curarrm,
        curlyeqprec: curlyeqprec,
        curlyeqsucc: curlyeqsucc,
        curlyvee: curlyvee,
        curlywedge: curlywedge,
        curren: curren,
        curvearrowleft: curvearrowleft,
        curvearrowright: curvearrowright,
        cuvee: cuvee,
        cuwed: cuwed,
        cwconint: cwconint,
        cwint: cwint,
        cylcty: cylcty,
        dagger: dagger,
        Dagger: Dagger,
        daleth: daleth,
        darr: darr,
        Darr: Darr,
        dArr: dArr,
        dash: dash,
        Dashv: Dashv,
        dashv: dashv,
        dbkarow: dbkarow,
        dblac: dblac,
        Dcaron: Dcaron,
        dcaron: dcaron,
        Dcy: Dcy,
        dcy: dcy,
        ddagger: ddagger,
        ddarr: ddarr,
        DD: DD,
        dd: dd,
        DDotrahd: DDotrahd,
        ddotseq: ddotseq,
        deg: deg,
        Del: Del,
        Delta: Delta,
        delta: delta,
        demptyv: demptyv,
        dfisht: dfisht,
        Dfr: Dfr,
        dfr: dfr,
        dHar: dHar,
        dharl: dharl,
        dharr: dharr,
        DiacriticalAcute: DiacriticalAcute,
        DiacriticalDot: DiacriticalDot,
        DiacriticalDoubleAcute: DiacriticalDoubleAcute,
        DiacriticalGrave: DiacriticalGrave,
        DiacriticalTilde: DiacriticalTilde,
        diam: diam,
        diamond: diamond,
        Diamond: Diamond,
        diamondsuit: diamondsuit,
        diams: diams,
        die: die,
        DifferentialD: DifferentialD,
        digamma: digamma,
        disin: disin,
        div: div,
        divide: divide,
        divideontimes: divideontimes,
        divonx: divonx,
        DJcy: DJcy,
        djcy: djcy,
        dlcorn: dlcorn,
        dlcrop: dlcrop,
        dollar: dollar,
        Dopf: Dopf,
        dopf: dopf,
        Dot: Dot,
        dot: dot,
        DotDot: DotDot,
        doteq: doteq,
        doteqdot: doteqdot,
        DotEqual: DotEqual,
        dotminus: dotminus,
        dotplus: dotplus,
        dotsquare: dotsquare,
        doublebarwedge: doublebarwedge,
        DoubleContourIntegral: DoubleContourIntegral,
        DoubleDot: DoubleDot,
        DoubleDownArrow: DoubleDownArrow,
        DoubleLeftArrow: DoubleLeftArrow,
        DoubleLeftRightArrow: DoubleLeftRightArrow,
        DoubleLeftTee: DoubleLeftTee,
        DoubleLongLeftArrow: DoubleLongLeftArrow,
        DoubleLongLeftRightArrow: DoubleLongLeftRightArrow,
        DoubleLongRightArrow: DoubleLongRightArrow,
        DoubleRightArrow: DoubleRightArrow,
        DoubleRightTee: DoubleRightTee,
        DoubleUpArrow: DoubleUpArrow,
        DoubleUpDownArrow: DoubleUpDownArrow,
        DoubleVerticalBar: DoubleVerticalBar,
        DownArrowBar: DownArrowBar,
        downarrow: downarrow,
        DownArrow: DownArrow,
        Downarrow: Downarrow,
        DownArrowUpArrow: DownArrowUpArrow,
        DownBreve: DownBreve,
        downdownarrows: downdownarrows,
        downharpoonleft: downharpoonleft,
        downharpoonright: downharpoonright,
        DownLeftRightVector: DownLeftRightVector,
        DownLeftTeeVector: DownLeftTeeVector,
        DownLeftVectorBar: DownLeftVectorBar,
        DownLeftVector: DownLeftVector,
        DownRightTeeVector: DownRightTeeVector,
        DownRightVectorBar: DownRightVectorBar,
        DownRightVector: DownRightVector,
        DownTeeArrow: DownTeeArrow,
        DownTee: DownTee,
        drbkarow: drbkarow,
        drcorn: drcorn,
        drcrop: drcrop,
        Dscr: Dscr,
        dscr: dscr,
        DScy: DScy,
        dscy: dscy,
        dsol: dsol,
        Dstrok: Dstrok,
        dstrok: dstrok,
        dtdot: dtdot,
        dtri: dtri,
        dtrif: dtrif,
        duarr: duarr,
        duhar: duhar,
        dwangle: dwangle,
        DZcy: DZcy,
        dzcy: dzcy,
        dzigrarr: dzigrarr,
        Eacute: Eacute,
        eacute: eacute,
        easter: easter,
        Ecaron: Ecaron,
        ecaron: ecaron,
        Ecirc: Ecirc,
        ecirc: ecirc,
        ecir: ecir,
        ecolon: ecolon,
        Ecy: Ecy,
        ecy: ecy,
        eDDot: eDDot,
        Edot: Edot,
        edot: edot,
        eDot: eDot,
        ee: ee,
        efDot: efDot,
        Efr: Efr,
        efr: efr,
        eg: eg,
        Egrave: Egrave,
        egrave: egrave,
        egs: egs,
        egsdot: egsdot,
        el: el,
        Element: Element,
        elinters: elinters,
        ell: ell,
        els: els,
        elsdot: elsdot,
        Emacr: Emacr,
        emacr: emacr,
        empty: empty,
        emptyset: emptyset,
        EmptySmallSquare: EmptySmallSquare,
        emptyv: emptyv,
        EmptyVerySmallSquare: EmptyVerySmallSquare,
        emsp13: emsp13,
        emsp14: emsp14,
        emsp: emsp,
        ENG: ENG,
        eng: eng,
        ensp: ensp,
        Eogon: Eogon,
        eogon: eogon,
        Eopf: Eopf,
        eopf: eopf,
        epar: epar,
        eparsl: eparsl,
        eplus: eplus,
        epsi: epsi,
        Epsilon: Epsilon,
        epsilon: epsilon,
        epsiv: epsiv,
        eqcirc: eqcirc,
        eqcolon: eqcolon,
        eqsim: eqsim,
        eqslantgtr: eqslantgtr,
        eqslantless: eqslantless,
        Equal: Equal,
        equals: equals,
        EqualTilde: EqualTilde,
        equest: equest,
        Equilibrium: Equilibrium,
        equiv: equiv,
        equivDD: equivDD,
        eqvparsl: eqvparsl,
        erarr: erarr,
        erDot: erDot,
        escr: escr,
        Escr: Escr,
        esdot: esdot,
        Esim: Esim,
        esim: esim,
        Eta: Eta,
        eta: eta,
        ETH: ETH,
        eth: eth,
        Euml: Euml,
        euml: euml,
        euro: euro,
        excl: excl,
        exist: exist,
        Exists: Exists,
        expectation: expectation,
        exponentiale: exponentiale,
        ExponentialE: ExponentialE,
        fallingdotseq: fallingdotseq,
        Fcy: Fcy,
        fcy: fcy,
        female: female,
        ffilig: ffilig,
        fflig: fflig,
        ffllig: ffllig,
        Ffr: Ffr,
        ffr: ffr,
        filig: filig,
        FilledSmallSquare: FilledSmallSquare,
        FilledVerySmallSquare: FilledVerySmallSquare,
        fjlig: fjlig,
        flat: flat,
        fllig: fllig,
        fltns: fltns,
        fnof: fnof,
        Fopf: Fopf,
        fopf: fopf,
        forall: forall,
        ForAll: ForAll,
        fork: fork,
        forkv: forkv,
        Fouriertrf: Fouriertrf,
        fpartint: fpartint,
        frac12: frac12,
        frac13: frac13,
        frac14: frac14,
        frac15: frac15,
        frac16: frac16,
        frac18: frac18,
        frac23: frac23,
        frac25: frac25,
        frac34: frac34,
        frac35: frac35,
        frac38: frac38,
        frac45: frac45,
        frac56: frac56,
        frac58: frac58,
        frac78: frac78,
        frasl: frasl,
        frown: frown,
        fscr: fscr,
        Fscr: Fscr,
        gacute: gacute,
        Gamma: Gamma,
        gamma: gamma,
        Gammad: Gammad,
        gammad: gammad,
        gap: gap,
        Gbreve: Gbreve,
        gbreve: gbreve,
        Gcedil: Gcedil,
        Gcirc: Gcirc,
        gcirc: gcirc,
        Gcy: Gcy,
        gcy: gcy,
        Gdot: Gdot,
        gdot: gdot,
        ge: ge,
        gE: gE,
        gEl: gEl,
        gel: gel,
        geq: geq,
        geqq: geqq,
        geqslant: geqslant,
        gescc: gescc,
        ges: ges,
        gesdot: gesdot,
        gesdoto: gesdoto,
        gesdotol: gesdotol,
        gesl: gesl,
        gesles: gesles,
        Gfr: Gfr,
        gfr: gfr,
        gg: gg,
        Gg: Gg,
        ggg: ggg,
        gimel: gimel,
        GJcy: GJcy,
        gjcy: gjcy,
        gla: gla,
        gl: gl,
        glE: glE,
        glj: glj,
        gnap: gnap,
        gnapprox: gnapprox,
        gne: gne,
        gnE: gnE,
        gneq: gneq,
        gneqq: gneqq,
        gnsim: gnsim,
        Gopf: Gopf,
        gopf: gopf,
        grave: grave,
        GreaterEqual: GreaterEqual,
        GreaterEqualLess: GreaterEqualLess,
        GreaterFullEqual: GreaterFullEqual,
        GreaterGreater: GreaterGreater,
        GreaterLess: GreaterLess,
        GreaterSlantEqual: GreaterSlantEqual,
        GreaterTilde: GreaterTilde,
        Gscr: Gscr,
        gscr: gscr,
        gsim: gsim,
        gsime: gsime,
        gsiml: gsiml,
        gtcc: gtcc,
        gtcir: gtcir,
        gt: gt,
        GT: GT,
        Gt: Gt,
        gtdot: gtdot,
        gtlPar: gtlPar,
        gtquest: gtquest,
        gtrapprox: gtrapprox,
        gtrarr: gtrarr,
        gtrdot: gtrdot,
        gtreqless: gtreqless,
        gtreqqless: gtreqqless,
        gtrless: gtrless,
        gtrsim: gtrsim,
        gvertneqq: gvertneqq,
        gvnE: gvnE,
        Hacek: Hacek,
        hairsp: hairsp,
        half: half,
        hamilt: hamilt,
        HARDcy: HARDcy,
        hardcy: hardcy,
        harrcir: harrcir,
        harr: harr,
        hArr: hArr,
        harrw: harrw,
        Hat: Hat,
        hbar: hbar,
        Hcirc: Hcirc,
        hcirc: hcirc,
        hearts: hearts,
        heartsuit: heartsuit,
        hellip: hellip,
        hercon: hercon,
        hfr: hfr,
        Hfr: Hfr,
        HilbertSpace: HilbertSpace,
        hksearow: hksearow,
        hkswarow: hkswarow,
        hoarr: hoarr,
        homtht: homtht,
        hookleftarrow: hookleftarrow,
        hookrightarrow: hookrightarrow,
        hopf: hopf,
        Hopf: Hopf,
        horbar: horbar,
        HorizontalLine: HorizontalLine,
        hscr: hscr,
        Hscr: Hscr,
        hslash: hslash,
        Hstrok: Hstrok,
        hstrok: hstrok,
        HumpDownHump: HumpDownHump,
        HumpEqual: HumpEqual,
        hybull: hybull,
        hyphen: hyphen,
        Iacute: Iacute,
        iacute: iacute,
        ic: ic,
        Icirc: Icirc,
        icirc: icirc,
        Icy: Icy,
        icy: icy,
        Idot: Idot,
        IEcy: IEcy,
        iecy: iecy,
        iexcl: iexcl,
        iff: iff,
        ifr: ifr,
        Ifr: Ifr,
        Igrave: Igrave,
        igrave: igrave,
        ii: ii,
        iiiint: iiiint,
        iiint: iiint,
        iinfin: iinfin,
        iiota: iiota,
        IJlig: IJlig,
        ijlig: ijlig,
        Imacr: Imacr,
        imacr: imacr,
        image: image$1,
        ImaginaryI: ImaginaryI,
        imagline: imagline,
        imagpart: imagpart,
        imath: imath,
        Im: Im,
        imof: imof,
        imped: imped,
        Implies: Implies,
        incare: incare,
        "in": "∈",
        infin: infin,
        infintie: infintie,
        inodot: inodot,
        intcal: intcal,
        int: int,
        Int: Int,
        integers: integers,
        Integral: Integral,
        intercal: intercal,
        Intersection: Intersection,
        intlarhk: intlarhk,
        intprod: intprod,
        InvisibleComma: InvisibleComma,
        InvisibleTimes: InvisibleTimes,
        IOcy: IOcy,
        iocy: iocy,
        Iogon: Iogon,
        iogon: iogon,
        Iopf: Iopf,
        iopf: iopf,
        Iota: Iota,
        iota: iota,
        iprod: iprod,
        iquest: iquest,
        iscr: iscr,
        Iscr: Iscr,
        isin: isin,
        isindot: isindot,
        isinE: isinE,
        isins: isins,
        isinsv: isinsv,
        isinv: isinv,
        it: it,
        Itilde: Itilde,
        itilde: itilde,
        Iukcy: Iukcy,
        iukcy: iukcy,
        Iuml: Iuml,
        iuml: iuml,
        Jcirc: Jcirc,
        jcirc: jcirc,
        Jcy: Jcy,
        jcy: jcy,
        Jfr: Jfr,
        jfr: jfr,
        jmath: jmath,
        Jopf: Jopf,
        jopf: jopf,
        Jscr: Jscr,
        jscr: jscr,
        Jsercy: Jsercy,
        jsercy: jsercy,
        Jukcy: Jukcy,
        jukcy: jukcy,
        Kappa: Kappa,
        kappa: kappa,
        kappav: kappav,
        Kcedil: Kcedil,
        kcedil: kcedil,
        Kcy: Kcy,
        kcy: kcy,
        Kfr: Kfr,
        kfr: kfr,
        kgreen: kgreen,
        KHcy: KHcy,
        khcy: khcy,
        KJcy: KJcy,
        kjcy: kjcy,
        Kopf: Kopf,
        kopf: kopf,
        Kscr: Kscr,
        kscr: kscr,
        lAarr: lAarr,
        Lacute: Lacute,
        lacute: lacute,
        laemptyv: laemptyv,
        lagran: lagran,
        Lambda: Lambda,
        lambda: lambda,
        lang: lang,
        Lang: Lang,
        langd: langd,
        langle: langle,
        lap: lap,
        Laplacetrf: Laplacetrf,
        laquo: laquo,
        larrb: larrb,
        larrbfs: larrbfs,
        larr: larr,
        Larr: Larr,
        lArr: lArr,
        larrfs: larrfs,
        larrhk: larrhk,
        larrlp: larrlp,
        larrpl: larrpl,
        larrsim: larrsim,
        larrtl: larrtl,
        latail: latail,
        lAtail: lAtail,
        lat: lat,
        late: late,
        lates: lates,
        lbarr: lbarr,
        lBarr: lBarr,
        lbbrk: lbbrk,
        lbrace: lbrace,
        lbrack: lbrack,
        lbrke: lbrke,
        lbrksld: lbrksld,
        lbrkslu: lbrkslu,
        Lcaron: Lcaron,
        lcaron: lcaron,
        Lcedil: Lcedil,
        lcedil: lcedil,
        lceil: lceil,
        lcub: lcub,
        Lcy: Lcy,
        lcy: lcy,
        ldca: ldca,
        ldquo: ldquo,
        ldquor: ldquor,
        ldrdhar: ldrdhar,
        ldrushar: ldrushar,
        ldsh: ldsh,
        le: le,
        lE: lE,
        LeftAngleBracket: LeftAngleBracket,
        LeftArrowBar: LeftArrowBar,
        leftarrow: leftarrow,
        LeftArrow: LeftArrow,
        Leftarrow: Leftarrow,
        LeftArrowRightArrow: LeftArrowRightArrow,
        leftarrowtail: leftarrowtail,
        LeftCeiling: LeftCeiling,
        LeftDoubleBracket: LeftDoubleBracket,
        LeftDownTeeVector: LeftDownTeeVector,
        LeftDownVectorBar: LeftDownVectorBar,
        LeftDownVector: LeftDownVector,
        LeftFloor: LeftFloor,
        leftharpoondown: leftharpoondown,
        leftharpoonup: leftharpoonup,
        leftleftarrows: leftleftarrows,
        leftrightarrow: leftrightarrow,
        LeftRightArrow: LeftRightArrow,
        Leftrightarrow: Leftrightarrow,
        leftrightarrows: leftrightarrows,
        leftrightharpoons: leftrightharpoons,
        leftrightsquigarrow: leftrightsquigarrow,
        LeftRightVector: LeftRightVector,
        LeftTeeArrow: LeftTeeArrow,
        LeftTee: LeftTee,
        LeftTeeVector: LeftTeeVector,
        leftthreetimes: leftthreetimes,
        LeftTriangleBar: LeftTriangleBar,
        LeftTriangle: LeftTriangle,
        LeftTriangleEqual: LeftTriangleEqual,
        LeftUpDownVector: LeftUpDownVector,
        LeftUpTeeVector: LeftUpTeeVector,
        LeftUpVectorBar: LeftUpVectorBar,
        LeftUpVector: LeftUpVector,
        LeftVectorBar: LeftVectorBar,
        LeftVector: LeftVector,
        lEg: lEg,
        leg: leg,
        leq: leq,
        leqq: leqq,
        leqslant: leqslant,
        lescc: lescc,
        les: les,
        lesdot: lesdot,
        lesdoto: lesdoto,
        lesdotor: lesdotor,
        lesg: lesg,
        lesges: lesges,
        lessapprox: lessapprox,
        lessdot: lessdot,
        lesseqgtr: lesseqgtr,
        lesseqqgtr: lesseqqgtr,
        LessEqualGreater: LessEqualGreater,
        LessFullEqual: LessFullEqual,
        LessGreater: LessGreater,
        lessgtr: lessgtr,
        LessLess: LessLess,
        lesssim: lesssim,
        LessSlantEqual: LessSlantEqual,
        LessTilde: LessTilde,
        lfisht: lfisht,
        lfloor: lfloor,
        Lfr: Lfr,
        lfr: lfr,
        lg: lg,
        lgE: lgE,
        lHar: lHar,
        lhard: lhard,
        lharu: lharu,
        lharul: lharul,
        lhblk: lhblk,
        LJcy: LJcy,
        ljcy: ljcy,
        llarr: llarr,
        ll: ll,
        Ll: Ll,
        llcorner: llcorner,
        Lleftarrow: Lleftarrow,
        llhard: llhard,
        lltri: lltri,
        Lmidot: Lmidot,
        lmidot: lmidot,
        lmoustache: lmoustache,
        lmoust: lmoust,
        lnap: lnap,
        lnapprox: lnapprox,
        lne: lne,
        lnE: lnE,
        lneq: lneq,
        lneqq: lneqq,
        lnsim: lnsim,
        loang: loang,
        loarr: loarr,
        lobrk: lobrk,
        longleftarrow: longleftarrow,
        LongLeftArrow: LongLeftArrow,
        Longleftarrow: Longleftarrow,
        longleftrightarrow: longleftrightarrow,
        LongLeftRightArrow: LongLeftRightArrow,
        Longleftrightarrow: Longleftrightarrow,
        longmapsto: longmapsto,
        longrightarrow: longrightarrow,
        LongRightArrow: LongRightArrow,
        Longrightarrow: Longrightarrow,
        looparrowleft: looparrowleft,
        looparrowright: looparrowright,
        lopar: lopar,
        Lopf: Lopf,
        lopf: lopf,
        loplus: loplus,
        lotimes: lotimes,
        lowast: lowast,
        lowbar: lowbar,
        LowerLeftArrow: LowerLeftArrow,
        LowerRightArrow: LowerRightArrow,
        loz: loz,
        lozenge: lozenge,
        lozf: lozf,
        lpar: lpar,
        lparlt: lparlt,
        lrarr: lrarr,
        lrcorner: lrcorner,
        lrhar: lrhar,
        lrhard: lrhard,
        lrm: lrm,
        lrtri: lrtri,
        lsaquo: lsaquo,
        lscr: lscr,
        Lscr: Lscr,
        lsh: lsh,
        Lsh: Lsh,
        lsim: lsim,
        lsime: lsime,
        lsimg: lsimg,
        lsqb: lsqb,
        lsquo: lsquo,
        lsquor: lsquor,
        Lstrok: Lstrok,
        lstrok: lstrok,
        ltcc: ltcc,
        ltcir: ltcir,
        lt: lt,
        LT: LT,
        Lt: Lt,
        ltdot: ltdot,
        lthree: lthree,
        ltimes: ltimes,
        ltlarr: ltlarr,
        ltquest: ltquest,
        ltri: ltri,
        ltrie: ltrie,
        ltrif: ltrif,
        ltrPar: ltrPar,
        lurdshar: lurdshar,
        luruhar: luruhar,
        lvertneqq: lvertneqq,
        lvnE: lvnE,
        macr: macr,
        male: male,
        malt: malt,
        maltese: maltese,
        "Map": "⤅",
        map: map,
        mapsto: mapsto,
        mapstodown: mapstodown,
        mapstoleft: mapstoleft,
        mapstoup: mapstoup,
        marker: marker,
        mcomma: mcomma,
        Mcy: Mcy,
        mcy: mcy,
        mdash: mdash,
        mDDot: mDDot,
        measuredangle: measuredangle,
        MediumSpace: MediumSpace,
        Mellintrf: Mellintrf,
        Mfr: Mfr,
        mfr: mfr,
        mho: mho,
        micro: micro,
        midast: midast,
        midcir: midcir,
        mid: mid,
        middot: middot,
        minusb: minusb,
        minus: minus,
        minusd: minusd,
        minusdu: minusdu,
        MinusPlus: MinusPlus,
        mlcp: mlcp,
        mldr: mldr,
        mnplus: mnplus,
        models: models,
        Mopf: Mopf,
        mopf: mopf,
        mp: mp,
        mscr: mscr,
        Mscr: Mscr,
        mstpos: mstpos,
        Mu: Mu,
        mu: mu,
        multimap: multimap,
        mumap: mumap,
        nabla: nabla,
        Nacute: Nacute,
        nacute: nacute,
        nang: nang,
        nap: nap,
        napE: napE,
        napid: napid,
        napos: napos,
        napprox: napprox,
        natural: natural,
        naturals: naturals,
        natur: natur,
        nbsp: nbsp,
        nbump: nbump,
        nbumpe: nbumpe,
        ncap: ncap,
        Ncaron: Ncaron,
        ncaron: ncaron,
        Ncedil: Ncedil,
        ncedil: ncedil,
        ncong: ncong,
        ncongdot: ncongdot,
        ncup: ncup,
        Ncy: Ncy,
        ncy: ncy,
        ndash: ndash,
        nearhk: nearhk,
        nearr: nearr,
        neArr: neArr,
        nearrow: nearrow,
        ne: ne,
        nedot: nedot,
        NegativeMediumSpace: NegativeMediumSpace,
        NegativeThickSpace: NegativeThickSpace,
        NegativeThinSpace: NegativeThinSpace,
        NegativeVeryThinSpace: NegativeVeryThinSpace,
        nequiv: nequiv,
        nesear: nesear,
        nesim: nesim,
        NestedGreaterGreater: NestedGreaterGreater,
        NestedLessLess: NestedLessLess,
        NewLine: NewLine,
        nexist: nexist,
        nexists: nexists,
        Nfr: Nfr,
        nfr: nfr,
        ngE: ngE,
        nge: nge,
        ngeq: ngeq,
        ngeqq: ngeqq,
        ngeqslant: ngeqslant,
        nges: nges,
        nGg: nGg,
        ngsim: ngsim,
        nGt: nGt,
        ngt: ngt,
        ngtr: ngtr,
        nGtv: nGtv,
        nharr: nharr,
        nhArr: nhArr,
        nhpar: nhpar,
        ni: ni,
        nis: nis,
        nisd: nisd,
        niv: niv,
        NJcy: NJcy,
        njcy: njcy,
        nlarr: nlarr,
        nlArr: nlArr,
        nldr: nldr,
        nlE: nlE,
        nle: nle,
        nleftarrow: nleftarrow,
        nLeftarrow: nLeftarrow,
        nleftrightarrow: nleftrightarrow,
        nLeftrightarrow: nLeftrightarrow,
        nleq: nleq,
        nleqq: nleqq,
        nleqslant: nleqslant,
        nles: nles,
        nless: nless,
        nLl: nLl,
        nlsim: nlsim,
        nLt: nLt,
        nlt: nlt,
        nltri: nltri,
        nltrie: nltrie,
        nLtv: nLtv,
        nmid: nmid,
        NoBreak: NoBreak,
        NonBreakingSpace: NonBreakingSpace,
        nopf: nopf,
        Nopf: Nopf,
        Not: Not,
        not: not,
        NotCongruent: NotCongruent,
        NotCupCap: NotCupCap,
        NotDoubleVerticalBar: NotDoubleVerticalBar,
        NotElement: NotElement,
        NotEqual: NotEqual,
        NotEqualTilde: NotEqualTilde,
        NotExists: NotExists,
        NotGreater: NotGreater,
        NotGreaterEqual: NotGreaterEqual,
        NotGreaterFullEqual: NotGreaterFullEqual,
        NotGreaterGreater: NotGreaterGreater,
        NotGreaterLess: NotGreaterLess,
        NotGreaterSlantEqual: NotGreaterSlantEqual,
        NotGreaterTilde: NotGreaterTilde,
        NotHumpDownHump: NotHumpDownHump,
        NotHumpEqual: NotHumpEqual,
        notin: notin,
        notindot: notindot,
        notinE: notinE,
        notinva: notinva,
        notinvb: notinvb,
        notinvc: notinvc,
        NotLeftTriangleBar: NotLeftTriangleBar,
        NotLeftTriangle: NotLeftTriangle,
        NotLeftTriangleEqual: NotLeftTriangleEqual,
        NotLess: NotLess,
        NotLessEqual: NotLessEqual,
        NotLessGreater: NotLessGreater,
        NotLessLess: NotLessLess,
        NotLessSlantEqual: NotLessSlantEqual,
        NotLessTilde: NotLessTilde,
        NotNestedGreaterGreater: NotNestedGreaterGreater,
        NotNestedLessLess: NotNestedLessLess,
        notni: notni,
        notniva: notniva,
        notnivb: notnivb,
        notnivc: notnivc,
        NotPrecedes: NotPrecedes,
        NotPrecedesEqual: NotPrecedesEqual,
        NotPrecedesSlantEqual: NotPrecedesSlantEqual,
        NotReverseElement: NotReverseElement,
        NotRightTriangleBar: NotRightTriangleBar,
        NotRightTriangle: NotRightTriangle,
        NotRightTriangleEqual: NotRightTriangleEqual,
        NotSquareSubset: NotSquareSubset,
        NotSquareSubsetEqual: NotSquareSubsetEqual,
        NotSquareSuperset: NotSquareSuperset,
        NotSquareSupersetEqual: NotSquareSupersetEqual,
        NotSubset: NotSubset,
        NotSubsetEqual: NotSubsetEqual,
        NotSucceeds: NotSucceeds,
        NotSucceedsEqual: NotSucceedsEqual,
        NotSucceedsSlantEqual: NotSucceedsSlantEqual,
        NotSucceedsTilde: NotSucceedsTilde,
        NotSuperset: NotSuperset,
        NotSupersetEqual: NotSupersetEqual,
        NotTilde: NotTilde,
        NotTildeEqual: NotTildeEqual,
        NotTildeFullEqual: NotTildeFullEqual,
        NotTildeTilde: NotTildeTilde,
        NotVerticalBar: NotVerticalBar,
        nparallel: nparallel,
        npar: npar,
        nparsl: nparsl,
        npart: npart,
        npolint: npolint,
        npr: npr,
        nprcue: nprcue,
        nprec: nprec,
        npreceq: npreceq,
        npre: npre,
        nrarrc: nrarrc,
        nrarr: nrarr,
        nrArr: nrArr,
        nrarrw: nrarrw,
        nrightarrow: nrightarrow,
        nRightarrow: nRightarrow,
        nrtri: nrtri,
        nrtrie: nrtrie,
        nsc: nsc,
        nsccue: nsccue,
        nsce: nsce,
        Nscr: Nscr,
        nscr: nscr,
        nshortmid: nshortmid,
        nshortparallel: nshortparallel,
        nsim: nsim,
        nsime: nsime,
        nsimeq: nsimeq,
        nsmid: nsmid,
        nspar: nspar,
        nsqsube: nsqsube,
        nsqsupe: nsqsupe,
        nsub: nsub,
        nsubE: nsubE,
        nsube: nsube,
        nsubset: nsubset,
        nsubseteq: nsubseteq,
        nsubseteqq: nsubseteqq,
        nsucc: nsucc,
        nsucceq: nsucceq,
        nsup: nsup,
        nsupE: nsupE,
        nsupe: nsupe,
        nsupset: nsupset,
        nsupseteq: nsupseteq,
        nsupseteqq: nsupseteqq,
        ntgl: ntgl,
        Ntilde: Ntilde,
        ntilde: ntilde,
        ntlg: ntlg,
        ntriangleleft: ntriangleleft,
        ntrianglelefteq: ntrianglelefteq,
        ntriangleright: ntriangleright,
        ntrianglerighteq: ntrianglerighteq,
        Nu: Nu,
        nu: nu,
        num: num,
        numero: numero,
        numsp: numsp,
        nvap: nvap,
        nvdash: nvdash,
        nvDash: nvDash,
        nVdash: nVdash,
        nVDash: nVDash,
        nvge: nvge,
        nvgt: nvgt,
        nvHarr: nvHarr,
        nvinfin: nvinfin,
        nvlArr: nvlArr,
        nvle: nvle,
        nvlt: nvlt,
        nvltrie: nvltrie,
        nvrArr: nvrArr,
        nvrtrie: nvrtrie,
        nvsim: nvsim,
        nwarhk: nwarhk,
        nwarr: nwarr,
        nwArr: nwArr,
        nwarrow: nwarrow,
        nwnear: nwnear,
        Oacute: Oacute,
        oacute: oacute,
        oast: oast,
        Ocirc: Ocirc,
        ocirc: ocirc,
        ocir: ocir,
        Ocy: Ocy,
        ocy: ocy,
        odash: odash,
        Odblac: Odblac,
        odblac: odblac,
        odiv: odiv,
        odot: odot,
        odsold: odsold,
        OElig: OElig,
        oelig: oelig,
        ofcir: ofcir,
        Ofr: Ofr,
        ofr: ofr,
        ogon: ogon,
        Ograve: Ograve,
        ograve: ograve,
        ogt: ogt,
        ohbar: ohbar,
        ohm: ohm,
        oint: oint,
        olarr: olarr,
        olcir: olcir,
        olcross: olcross,
        oline: oline,
        olt: olt,
        Omacr: Omacr,
        omacr: omacr,
        Omega: Omega,
        omega: omega,
        Omicron: Omicron,
        omicron: omicron,
        omid: omid,
        ominus: ominus,
        Oopf: Oopf,
        oopf: oopf,
        opar: opar,
        OpenCurlyDoubleQuote: OpenCurlyDoubleQuote,
        OpenCurlyQuote: OpenCurlyQuote,
        operp: operp,
        oplus: oplus,
        orarr: orarr,
        Or: Or,
        or: or,
        ord: ord,
        order: order,
        orderof: orderof,
        ordf: ordf,
        ordm: ordm,
        origof: origof,
        oror: oror,
        orslope: orslope,
        orv: orv,
        oS: oS,
        Oscr: Oscr,
        oscr: oscr,
        Oslash: Oslash,
        oslash: oslash,
        osol: osol,
        Otilde: Otilde,
        otilde: otilde,
        otimesas: otimesas,
        Otimes: Otimes,
        otimes: otimes,
        Ouml: Ouml,
        ouml: ouml,
        ovbar: ovbar,
        OverBar: OverBar,
        OverBrace: OverBrace,
        OverBracket: OverBracket,
        OverParenthesis: OverParenthesis,
        para: para,
        parallel: parallel,
        par: par,
        parsim: parsim,
        parsl: parsl,
        part: part,
        PartialD: PartialD,
        Pcy: Pcy,
        pcy: pcy,
        percnt: percnt,
        period: period,
        permil: permil,
        perp: perp,
        pertenk: pertenk,
        Pfr: Pfr,
        pfr: pfr,
        Phi: Phi,
        phi: phi,
        phiv: phiv,
        phmmat: phmmat,
        phone: phone,
        Pi: Pi,
        pi: pi,
        pitchfork: pitchfork,
        piv: piv,
        planck: planck,
        planckh: planckh,
        plankv: plankv,
        plusacir: plusacir,
        plusb: plusb,
        pluscir: pluscir,
        plus: plus,
        plusdo: plusdo,
        plusdu: plusdu,
        pluse: pluse,
        PlusMinus: PlusMinus,
        plusmn: plusmn,
        plussim: plussim,
        plustwo: plustwo,
        pm: pm,
        Poincareplane: Poincareplane,
        pointint: pointint,
        popf: popf,
        Popf: Popf,
        pound: pound,
        prap: prap,
        Pr: Pr,
        pr: pr,
        prcue: prcue,
        precapprox: precapprox,
        prec: prec,
        preccurlyeq: preccurlyeq,
        Precedes: Precedes,
        PrecedesEqual: PrecedesEqual,
        PrecedesSlantEqual: PrecedesSlantEqual,
        PrecedesTilde: PrecedesTilde,
        preceq: preceq,
        precnapprox: precnapprox,
        precneqq: precneqq,
        precnsim: precnsim,
        pre: pre,
        prE: prE,
        precsim: precsim,
        prime: prime,
        Prime: Prime,
        primes: primes,
        prnap: prnap,
        prnE: prnE,
        prnsim: prnsim,
        prod: prod,
        Product: Product,
        profalar: profalar,
        profline: profline,
        profsurf: profsurf,
        prop: prop,
        Proportional: Proportional,
        Proportion: Proportion,
        propto: propto,
        prsim: prsim,
        prurel: prurel,
        Pscr: Pscr,
        pscr: pscr,
        Psi: Psi,
        psi: psi,
        puncsp: puncsp,
        Qfr: Qfr,
        qfr: qfr,
        qint: qint,
        qopf: qopf,
        Qopf: Qopf,
        qprime: qprime,
        Qscr: Qscr,
        qscr: qscr,
        quaternions: quaternions,
        quatint: quatint,
        quest: quest,
        questeq: questeq,
        quot: quot,
        QUOT: QUOT,
        rAarr: rAarr,
        race: race,
        Racute: Racute,
        racute: racute,
        radic: radic,
        raemptyv: raemptyv,
        rang: rang,
        Rang: Rang,
        rangd: rangd,
        range: range,
        rangle: rangle,
        raquo: raquo,
        rarrap: rarrap,
        rarrb: rarrb,
        rarrbfs: rarrbfs,
        rarrc: rarrc,
        rarr: rarr,
        Rarr: Rarr,
        rArr: rArr,
        rarrfs: rarrfs,
        rarrhk: rarrhk,
        rarrlp: rarrlp,
        rarrpl: rarrpl,
        rarrsim: rarrsim,
        Rarrtl: Rarrtl,
        rarrtl: rarrtl,
        rarrw: rarrw,
        ratail: ratail,
        rAtail: rAtail,
        ratio: ratio,
        rationals: rationals,
        rbarr: rbarr,
        rBarr: rBarr,
        RBarr: RBarr,
        rbbrk: rbbrk,
        rbrace: rbrace,
        rbrack: rbrack,
        rbrke: rbrke,
        rbrksld: rbrksld,
        rbrkslu: rbrkslu,
        Rcaron: Rcaron,
        rcaron: rcaron,
        Rcedil: Rcedil,
        rcedil: rcedil,
        rceil: rceil,
        rcub: rcub,
        Rcy: Rcy,
        rcy: rcy,
        rdca: rdca,
        rdldhar: rdldhar,
        rdquo: rdquo,
        rdquor: rdquor,
        rdsh: rdsh,
        real: real,
        realine: realine,
        realpart: realpart,
        reals: reals,
        Re: Re,
        rect: rect,
        reg: reg,
        REG: REG,
        ReverseElement: ReverseElement,
        ReverseEquilibrium: ReverseEquilibrium,
        ReverseUpEquilibrium: ReverseUpEquilibrium,
        rfisht: rfisht,
        rfloor: rfloor,
        rfr: rfr,
        Rfr: Rfr,
        rHar: rHar,
        rhard: rhard,
        rharu: rharu,
        rharul: rharul,
        Rho: Rho,
        rho: rho,
        rhov: rhov,
        RightAngleBracket: RightAngleBracket,
        RightArrowBar: RightArrowBar,
        rightarrow: rightarrow,
        RightArrow: RightArrow,
        Rightarrow: Rightarrow,
        RightArrowLeftArrow: RightArrowLeftArrow,
        rightarrowtail: rightarrowtail,
        RightCeiling: RightCeiling,
        RightDoubleBracket: RightDoubleBracket,
        RightDownTeeVector: RightDownTeeVector,
        RightDownVectorBar: RightDownVectorBar,
        RightDownVector: RightDownVector,
        RightFloor: RightFloor,
        rightharpoondown: rightharpoondown,
        rightharpoonup: rightharpoonup,
        rightleftarrows: rightleftarrows,
        rightleftharpoons: rightleftharpoons,
        rightrightarrows: rightrightarrows,
        rightsquigarrow: rightsquigarrow,
        RightTeeArrow: RightTeeArrow,
        RightTee: RightTee,
        RightTeeVector: RightTeeVector,
        rightthreetimes: rightthreetimes,
        RightTriangleBar: RightTriangleBar,
        RightTriangle: RightTriangle,
        RightTriangleEqual: RightTriangleEqual,
        RightUpDownVector: RightUpDownVector,
        RightUpTeeVector: RightUpTeeVector,
        RightUpVectorBar: RightUpVectorBar,
        RightUpVector: RightUpVector,
        RightVectorBar: RightVectorBar,
        RightVector: RightVector,
        ring: ring,
        risingdotseq: risingdotseq,
        rlarr: rlarr,
        rlhar: rlhar,
        rlm: rlm,
        rmoustache: rmoustache,
        rmoust: rmoust,
        rnmid: rnmid,
        roang: roang,
        roarr: roarr,
        robrk: robrk,
        ropar: ropar,
        ropf: ropf,
        Ropf: Ropf,
        roplus: roplus,
        rotimes: rotimes,
        RoundImplies: RoundImplies,
        rpar: rpar,
        rpargt: rpargt,
        rppolint: rppolint,
        rrarr: rrarr,
        Rrightarrow: Rrightarrow,
        rsaquo: rsaquo,
        rscr: rscr,
        Rscr: Rscr,
        rsh: rsh,
        Rsh: Rsh,
        rsqb: rsqb,
        rsquo: rsquo,
        rsquor: rsquor,
        rthree: rthree,
        rtimes: rtimes,
        rtri: rtri,
        rtrie: rtrie,
        rtrif: rtrif,
        rtriltri: rtriltri,
        RuleDelayed: RuleDelayed,
        ruluhar: ruluhar,
        rx: rx,
        Sacute: Sacute,
        sacute: sacute,
        sbquo: sbquo,
        scap: scap,
        Scaron: Scaron,
        scaron: scaron,
        Sc: Sc,
        sc: sc,
        sccue: sccue,
        sce: sce,
        scE: scE,
        Scedil: Scedil,
        scedil: scedil,
        Scirc: Scirc,
        scirc: scirc,
        scnap: scnap,
        scnE: scnE,
        scnsim: scnsim,
        scpolint: scpolint,
        scsim: scsim,
        Scy: Scy,
        scy: scy,
        sdotb: sdotb,
        sdot: sdot,
        sdote: sdote,
        searhk: searhk,
        searr: searr,
        seArr: seArr,
        searrow: searrow,
        sect: sect,
        semi: semi,
        seswar: seswar,
        setminus: setminus,
        setmn: setmn,
        sext: sext,
        Sfr: Sfr,
        sfr: sfr,
        sfrown: sfrown,
        sharp: sharp,
        SHCHcy: SHCHcy,
        shchcy: shchcy,
        SHcy: SHcy,
        shcy: shcy,
        ShortDownArrow: ShortDownArrow,
        ShortLeftArrow: ShortLeftArrow,
        shortmid: shortmid,
        shortparallel: shortparallel,
        ShortRightArrow: ShortRightArrow,
        ShortUpArrow: ShortUpArrow,
        shy: shy,
        Sigma: Sigma,
        sigma: sigma,
        sigmaf: sigmaf,
        sigmav: sigmav,
        sim: sim,
        simdot: simdot,
        sime: sime,
        simeq: simeq,
        simg: simg,
        simgE: simgE,
        siml: siml,
        simlE: simlE,
        simne: simne,
        simplus: simplus,
        simrarr: simrarr,
        slarr: slarr,
        SmallCircle: SmallCircle,
        smallsetminus: smallsetminus,
        smashp: smashp,
        smeparsl: smeparsl,
        smid: smid,
        smile: smile,
        smt: smt,
        smte: smte,
        smtes: smtes,
        SOFTcy: SOFTcy,
        softcy: softcy,
        solbar: solbar,
        solb: solb,
        sol: sol,
        Sopf: Sopf,
        sopf: sopf,
        spades: spades,
        spadesuit: spadesuit,
        spar: spar,
        sqcap: sqcap,
        sqcaps: sqcaps,
        sqcup: sqcup,
        sqcups: sqcups,
        Sqrt: Sqrt,
        sqsub: sqsub,
        sqsube: sqsube,
        sqsubset: sqsubset,
        sqsubseteq: sqsubseteq,
        sqsup: sqsup,
        sqsupe: sqsupe,
        sqsupset: sqsupset,
        sqsupseteq: sqsupseteq,
        square: square,
        Square: Square,
        SquareIntersection: SquareIntersection,
        SquareSubset: SquareSubset,
        SquareSubsetEqual: SquareSubsetEqual,
        SquareSuperset: SquareSuperset,
        SquareSupersetEqual: SquareSupersetEqual,
        SquareUnion: SquareUnion,
        squarf: squarf,
        squ: squ,
        squf: squf,
        srarr: srarr,
        Sscr: Sscr,
        sscr: sscr,
        ssetmn: ssetmn,
        ssmile: ssmile,
        sstarf: sstarf,
        Star: Star,
        star: star,
        starf: starf,
        straightepsilon: straightepsilon,
        straightphi: straightphi,
        strns: strns,
        sub: sub,
        Sub: Sub,
        subdot: subdot,
        subE: subE,
        sube: sube,
        subedot: subedot,
        submult: submult,
        subnE: subnE,
        subne: subne,
        subplus: subplus,
        subrarr: subrarr,
        subset: subset,
        Subset: Subset,
        subseteq: subseteq,
        subseteqq: subseteqq,
        SubsetEqual: SubsetEqual,
        subsetneq: subsetneq,
        subsetneqq: subsetneqq,
        subsim: subsim,
        subsub: subsub,
        subsup: subsup,
        succapprox: succapprox,
        succ: succ,
        succcurlyeq: succcurlyeq,
        Succeeds: Succeeds,
        SucceedsEqual: SucceedsEqual,
        SucceedsSlantEqual: SucceedsSlantEqual,
        SucceedsTilde: SucceedsTilde,
        succeq: succeq,
        succnapprox: succnapprox,
        succneqq: succneqq,
        succnsim: succnsim,
        succsim: succsim,
        SuchThat: SuchThat,
        sum: sum,
        Sum: Sum,
        sung: sung,
        sup1: sup1,
        sup2: sup2,
        sup3: sup3,
        sup: sup,
        Sup: Sup,
        supdot: supdot,
        supdsub: supdsub,
        supE: supE,
        supe: supe,
        supedot: supedot,
        Superset: Superset,
        SupersetEqual: SupersetEqual,
        suphsol: suphsol,
        suphsub: suphsub,
        suplarr: suplarr,
        supmult: supmult,
        supnE: supnE,
        supne: supne,
        supplus: supplus,
        supset: supset,
        Supset: Supset,
        supseteq: supseteq,
        supseteqq: supseteqq,
        supsetneq: supsetneq,
        supsetneqq: supsetneqq,
        supsim: supsim,
        supsub: supsub,
        supsup: supsup,
        swarhk: swarhk,
        swarr: swarr,
        swArr: swArr,
        swarrow: swarrow,
        swnwar: swnwar,
        szlig: szlig,
        Tab: Tab,
        target: target,
        Tau: Tau,
        tau: tau,
        tbrk: tbrk,
        Tcaron: Tcaron,
        tcaron: tcaron,
        Tcedil: Tcedil,
        tcedil: tcedil,
        Tcy: Tcy,
        tcy: tcy,
        tdot: tdot,
        telrec: telrec,
        Tfr: Tfr,
        tfr: tfr,
        there4: there4,
        therefore: therefore,
        Therefore: Therefore,
        Theta: Theta,
        theta: theta,
        thetasym: thetasym,
        thetav: thetav,
        thickapprox: thickapprox,
        thicksim: thicksim,
        ThickSpace: ThickSpace,
        ThinSpace: ThinSpace,
        thinsp: thinsp,
        thkap: thkap,
        thksim: thksim,
        THORN: THORN,
        thorn: thorn,
        tilde: tilde,
        Tilde: Tilde,
        TildeEqual: TildeEqual,
        TildeFullEqual: TildeFullEqual,
        TildeTilde: TildeTilde,
        timesbar: timesbar,
        timesb: timesb,
        times: times,
        timesd: timesd,
        tint: tint,
        toea: toea,
        topbot: topbot,
        topcir: topcir,
        top: top,
        Topf: Topf,
        topf: topf,
        topfork: topfork,
        tosa: tosa,
        tprime: tprime,
        trade: trade,
        TRADE: TRADE,
        triangle: triangle,
        triangledown: triangledown,
        triangleleft: triangleleft,
        trianglelefteq: trianglelefteq,
        triangleq: triangleq,
        triangleright: triangleright,
        trianglerighteq: trianglerighteq,
        tridot: tridot,
        trie: trie,
        triminus: triminus,
        TripleDot: TripleDot,
        triplus: triplus,
        trisb: trisb,
        tritime: tritime,
        trpezium: trpezium,
        Tscr: Tscr,
        tscr: tscr,
        TScy: TScy,
        tscy: tscy,
        TSHcy: TSHcy,
        tshcy: tshcy,
        Tstrok: Tstrok,
        tstrok: tstrok,
        twixt: twixt,
        twoheadleftarrow: twoheadleftarrow,
        twoheadrightarrow: twoheadrightarrow,
        Uacute: Uacute,
        uacute: uacute,
        uarr: uarr,
        Uarr: Uarr,
        uArr: uArr,
        Uarrocir: Uarrocir,
        Ubrcy: Ubrcy,
        ubrcy: ubrcy,
        Ubreve: Ubreve,
        ubreve: ubreve,
        Ucirc: Ucirc,
        ucirc: ucirc,
        Ucy: Ucy,
        ucy: ucy,
        udarr: udarr,
        Udblac: Udblac,
        udblac: udblac,
        udhar: udhar,
        ufisht: ufisht,
        Ufr: Ufr,
        ufr: ufr,
        Ugrave: Ugrave,
        ugrave: ugrave,
        uHar: uHar,
        uharl: uharl,
        uharr: uharr,
        uhblk: uhblk,
        ulcorn: ulcorn,
        ulcorner: ulcorner,
        ulcrop: ulcrop,
        ultri: ultri,
        Umacr: Umacr,
        umacr: umacr,
        uml: uml,
        UnderBar: UnderBar,
        UnderBrace: UnderBrace,
        UnderBracket: UnderBracket,
        UnderParenthesis: UnderParenthesis,
        Union: Union,
        UnionPlus: UnionPlus,
        Uogon: Uogon,
        uogon: uogon,
        Uopf: Uopf,
        uopf: uopf,
        UpArrowBar: UpArrowBar,
        uparrow: uparrow,
        UpArrow: UpArrow,
        Uparrow: Uparrow,
        UpArrowDownArrow: UpArrowDownArrow,
        updownarrow: updownarrow,
        UpDownArrow: UpDownArrow,
        Updownarrow: Updownarrow,
        UpEquilibrium: UpEquilibrium,
        upharpoonleft: upharpoonleft,
        upharpoonright: upharpoonright,
        uplus: uplus,
        UpperLeftArrow: UpperLeftArrow,
        UpperRightArrow: UpperRightArrow,
        upsi: upsi,
        Upsi: Upsi,
        upsih: upsih,
        Upsilon: Upsilon,
        upsilon: upsilon,
        UpTeeArrow: UpTeeArrow,
        UpTee: UpTee,
        upuparrows: upuparrows,
        urcorn: urcorn,
        urcorner: urcorner,
        urcrop: urcrop,
        Uring: Uring,
        uring: uring,
        urtri: urtri,
        Uscr: Uscr,
        uscr: uscr,
        utdot: utdot,
        Utilde: Utilde,
        utilde: utilde,
        utri: utri,
        utrif: utrif,
        uuarr: uuarr,
        Uuml: Uuml,
        uuml: uuml,
        uwangle: uwangle,
        vangrt: vangrt,
        varepsilon: varepsilon,
        varkappa: varkappa,
        varnothing: varnothing,
        varphi: varphi,
        varpi: varpi,
        varpropto: varpropto,
        varr: varr,
        vArr: vArr,
        varrho: varrho,
        varsigma: varsigma,
        varsubsetneq: varsubsetneq,
        varsubsetneqq: varsubsetneqq,
        varsupsetneq: varsupsetneq,
        varsupsetneqq: varsupsetneqq,
        vartheta: vartheta,
        vartriangleleft: vartriangleleft,
        vartriangleright: vartriangleright,
        vBar: vBar,
        Vbar: Vbar,
        vBarv: vBarv,
        Vcy: Vcy,
        vcy: vcy,
        vdash: vdash,
        vDash: vDash,
        Vdash: Vdash,
        VDash: VDash,
        Vdashl: Vdashl,
        veebar: veebar,
        vee: vee,
        Vee: Vee,
        veeeq: veeeq,
        vellip: vellip,
        verbar: verbar,
        Verbar: Verbar,
        vert: vert,
        Vert: Vert,
        VerticalBar: VerticalBar,
        VerticalLine: VerticalLine,
        VerticalSeparator: VerticalSeparator,
        VerticalTilde: VerticalTilde,
        VeryThinSpace: VeryThinSpace,
        Vfr: Vfr,
        vfr: vfr,
        vltri: vltri,
        vnsub: vnsub,
        vnsup: vnsup,
        Vopf: Vopf,
        vopf: vopf,
        vprop: vprop,
        vrtri: vrtri,
        Vscr: Vscr,
        vscr: vscr,
        vsubnE: vsubnE,
        vsubne: vsubne,
        vsupnE: vsupnE,
        vsupne: vsupne,
        Vvdash: Vvdash,
        vzigzag: vzigzag,
        Wcirc: Wcirc,
        wcirc: wcirc,
        wedbar: wedbar,
        wedge: wedge,
        Wedge: Wedge,
        wedgeq: wedgeq,
        weierp: weierp,
        Wfr: Wfr,
        wfr: wfr,
        Wopf: Wopf,
        wopf: wopf,
        wp: wp,
        wr: wr,
        wreath: wreath,
        Wscr: Wscr,
        wscr: wscr,
        xcap: xcap,
        xcirc: xcirc,
        xcup: xcup,
        xdtri: xdtri,
        Xfr: Xfr,
        xfr: xfr,
        xharr: xharr,
        xhArr: xhArr,
        Xi: Xi,
        xi: xi,
        xlarr: xlarr,
        xlArr: xlArr,
        xmap: xmap,
        xnis: xnis,
        xodot: xodot,
        Xopf: Xopf,
        xopf: xopf,
        xoplus: xoplus,
        xotime: xotime,
        xrarr: xrarr,
        xrArr: xrArr,
        Xscr: Xscr,
        xscr: xscr,
        xsqcup: xsqcup,
        xuplus: xuplus,
        xutri: xutri,
        xvee: xvee,
        xwedge: xwedge,
        Yacute: Yacute,
        yacute: yacute,
        YAcy: YAcy,
        yacy: yacy,
        Ycirc: Ycirc,
        ycirc: ycirc,
        Ycy: Ycy,
        ycy: ycy,
        yen: yen,
        Yfr: Yfr,
        yfr: yfr,
        YIcy: YIcy,
        yicy: yicy,
        Yopf: Yopf,
        yopf: yopf,
        Yscr: Yscr,
        yscr: yscr,
        YUcy: YUcy,
        yucy: yucy,
        yuml: yuml,
        Yuml: Yuml,
        Zacute: Zacute,
        zacute: zacute,
        Zcaron: Zcaron,
        zcaron: zcaron,
        Zcy: Zcy,
        zcy: zcy,
        Zdot: Zdot,
        zdot: zdot,
        zeetrf: zeetrf,
        ZeroWidthSpace: ZeroWidthSpace,
        Zeta: Zeta,
        zeta: zeta,
        zfr: zfr,
        Zfr: Zfr,
        ZHcy: ZHcy,
        zhcy: zhcy,
        zigrarr: zigrarr,
        zopf: zopf,
        Zopf: Zopf,
        Zscr: Zscr,
        zscr: zscr,
        zwj: zwj,
        zwnj: zwnj
    };
 
    /*eslint quotes:0*/
    var entities$1 = require$$0;
 
    var regex$4=/[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/;
 
    var mdurl$1 = {};
 
    var encodeCache = {};
 
 
    // Create a lookup array where anything but characters in `chars` string
    // and alphanumeric chars is percent-encoded.
    //
    function getEncodeCache(exclude) {
      var i, ch, cache = encodeCache[exclude];
      if (cache) { return cache; }
 
      cache = encodeCache[exclude] = [];
 
      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);
 
        if (/^[0-9a-z]$/i.test(ch)) {
          // always allow unencoded alphanumeric characters
          cache.push(ch);
        } else {
          cache.push('%' + ('0' + i.toString(16).toUpperCase()).slice(-2));
        }
      }
 
      for (i = 0; i < exclude.length; i++) {
        cache[exclude.charCodeAt(i)] = exclude[i];
      }
 
      return cache;
    }
 
 
    // Encode unsafe characters with percent-encoding, skipping already
    // encoded sequences.
    //
    //  - string       - string to encode
    //  - exclude      - list of characters to ignore (in addition to a-zA-Z0-9)
    //  - keepEscaped  - don't encode '%' in a correct escape sequence (default: true)
    //
    function encode(string, exclude, keepEscaped) {
      var i, l, code, nextCode, cache,
          result = '';
 
      if (typeof exclude !== 'string') {
        // encode(string, keepEscaped)
        keepEscaped  = exclude;
        exclude = encode.defaultChars;
      }
 
      if (typeof keepEscaped === 'undefined') {
        keepEscaped = true;
      }
 
      cache = getEncodeCache(exclude);
 
      for (i = 0, l = string.length; i < l; i++) {
        code = string.charCodeAt(i);
 
        if (keepEscaped && code === 0x25 /* % */ && i + 2 < l) {
          if (/^[0-9a-f]{2}$/i.test(string.slice(i + 1, i + 3))) {
            result += string.slice(i, i + 3);
            i += 2;
            continue;
          }
        }
 
        if (code < 128) {
          result += cache[code];
          continue;
        }
 
        if (code >= 0xD800 && code <= 0xDFFF) {
          if (code >= 0xD800 && code <= 0xDBFF && i + 1 < l) {
            nextCode = string.charCodeAt(i + 1);
            if (nextCode >= 0xDC00 && nextCode <= 0xDFFF) {
              result += encodeURIComponent(string[i] + string[i + 1]);
              i++;
              continue;
            }
          }
          result += '%EF%BF%BD';
          continue;
        }
 
        result += encodeURIComponent(string[i]);
      }
 
      return result;
    }
 
    encode.defaultChars   = ";/?:@&=+$,-_.!~*'()#";
    encode.componentChars = "-_.!~*'()";
 
 
    var encode_1 = encode;
 
    /* eslint-disable no-bitwise */
 
    var decodeCache = {};
 
    function getDecodeCache(exclude) {
      var i, ch, cache = decodeCache[exclude];
      if (cache) { return cache; }
 
      cache = decodeCache[exclude] = [];
 
      for (i = 0; i < 128; i++) {
        ch = String.fromCharCode(i);
        cache.push(ch);
      }
 
      for (i = 0; i < exclude.length; i++) {
        ch = exclude.charCodeAt(i);
        cache[ch] = '%' + ('0' + ch.toString(16).toUpperCase()).slice(-2);
      }
 
      return cache;
    }
 
 
    // Decode percent-encoded string.
    //
    function decode(string, exclude) {
      var cache;
 
      if (typeof exclude !== 'string') {
        exclude = decode.defaultChars;
      }
 
      cache = getDecodeCache(exclude);
 
      return string.replace(/(%[a-f0-9]{2})+/gi, function(seq) {
        var i, l, b1, b2, b3, b4, chr,
            result = '';
 
        for (i = 0, l = seq.length; i < l; i += 3) {
          b1 = parseInt(seq.slice(i + 1, i + 3), 16);
 
          if (b1 < 0x80) {
            result += cache[b1];
            continue;
          }
 
          if ((b1 & 0xE0) === 0xC0 && (i + 3 < l)) {
            // 110xxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
 
            if ((b2 & 0xC0) === 0x80) {
              chr = ((b1 << 6) & 0x7C0) | (b2 & 0x3F);
 
              if (chr < 0x80) {
                result += '\ufffd\ufffd';
              } else {
                result += String.fromCharCode(chr);
              }
 
              i += 3;
              continue;
            }
          }
 
          if ((b1 & 0xF0) === 0xE0 && (i + 6 < l)) {
            // 1110xxxx 10xxxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
 
            if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80) {
              chr = ((b1 << 12) & 0xF000) | ((b2 << 6) & 0xFC0) | (b3 & 0x3F);
 
              if (chr < 0x800 || (chr >= 0xD800 && chr <= 0xDFFF)) {
                result += '\ufffd\ufffd\ufffd';
              } else {
                result += String.fromCharCode(chr);
              }
 
              i += 6;
              continue;
            }
          }
 
          if ((b1 & 0xF8) === 0xF0 && (i + 9 < l)) {
            // 111110xx 10xxxxxx 10xxxxxx 10xxxxxx
            b2 = parseInt(seq.slice(i + 4, i + 6), 16);
            b3 = parseInt(seq.slice(i + 7, i + 9), 16);
            b4 = parseInt(seq.slice(i + 10, i + 12), 16);
 
            if ((b2 & 0xC0) === 0x80 && (b3 & 0xC0) === 0x80 && (b4 & 0xC0) === 0x80) {
              chr = ((b1 << 18) & 0x1C0000) | ((b2 << 12) & 0x3F000) | ((b3 << 6) & 0xFC0) | (b4 & 0x3F);
 
              if (chr < 0x10000 || chr > 0x10FFFF) {
                result += '\ufffd\ufffd\ufffd\ufffd';
              } else {
                chr -= 0x10000;
                result += String.fromCharCode(0xD800 + (chr >> 10), 0xDC00 + (chr & 0x3FF));
              }
 
              i += 9;
              continue;
            }
          }
 
          result += '\ufffd';
        }
 
        return result;
      });
    }
 
 
    decode.defaultChars   = ';/?:@&=+$,#';
    decode.componentChars = '';
 
 
    var decode_1 = decode;
 
    var format = function format(url) {
      var result = '';
 
      result += url.protocol || '';
      result += url.slashes ? '//' : '';
      result += url.auth ? url.auth + '@' : '';
 
      if (url.hostname && url.hostname.indexOf(':') !== -1) {
        // ipv6 address
        result += '[' + url.hostname + ']';
      } else {
        result += url.hostname || '';
      }
 
      result += url.port ? ':' + url.port : '';
      result += url.pathname || '';
      result += url.search || '';
      result += url.hash || '';
 
      return result;
    };
 
    //
    // Changes from joyent/node:
    //
    // 1. No leading slash in paths,
    //    e.g. in `url.parse('http://foo?bar')` pathname is ``, not `/`
    //
    // 2. Backslashes are not replaced with slashes,
    //    so `http:\\example.org\` is treated like a relative path
    //
    // 3. Trailing colon is treated like a part of the path,
    //    i.e. in `http://example.org:foo` pathname is `:foo`
    //
    // 4. Nothing is URL-encoded in the resulting object,
    //    (in joyent/node some chars in auth and paths are encoded)
    //
    // 5. `url.parse()` does not have `parseQueryString` argument
    //
    // 6. Removed extraneous result properties: `host`, `path`, `query`, etc.,
    //    which can be constructed using other parts of the url.
    //
 
 
    function Url() {
      this.protocol = null;
      this.slashes = null;
      this.auth = null;
      this.port = null;
      this.hostname = null;
      this.hash = null;
      this.search = null;
      this.pathname = null;
    }
 
    // Reference: RFC 3986, RFC 1808, RFC 2396
 
    // define these here so at least they only have to be
    // compiled once on the first module load.
    var protocolPattern = /^([a-z0-9.+-]+:)/i,
        portPattern = /:[0-9]*$/,
 
        // Special case for a simple path URL
        simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
 
        // RFC 2396: characters reserved for delimiting URLs.
        // We actually just auto-escape these.
        delims = [ '<', '>', '"', '`', ' ', '\r', '\n', '\t' ],
 
        // RFC 2396: characters not allowed for various reasons.
        unwise = [ '{', '}', '|', '\\', '^', '`' ].concat(delims),
 
        // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
        autoEscape = [ '\'' ].concat(unwise),
        // Characters that are never ever allowed in a hostname.
        // Note that any invalid chars are also handled, but these
        // are the ones that are *expected* to be seen, so we fast-path
        // them.
        nonHostChars = [ '%', '/', '?', ';', '#' ].concat(autoEscape),
        hostEndingChars = [ '/', '?', '#' ],
        hostnameMaxLen = 255,
        hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
        hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
        // protocols that can allow "unsafe" and "unwise" chars.
        /* eslint-disable no-script-url */
        // protocols that never have a hostname.
        hostlessProtocol = {
          'javascript': true,
          'javascript:': true
        },
        // protocols that always contain a // bit.
        slashedProtocol = {
          'http': true,
          'https': true,
          'ftp': true,
          'gopher': true,
          'file': true,
          'http:': true,
          'https:': true,
          'ftp:': true,
          'gopher:': true,
          'file:': true
        };
        /* eslint-enable no-script-url */
 
    function urlParse(url, slashesDenoteHost) {
      if (url && url instanceof Url) { return url; }
 
      var u = new Url();
      u.parse(url, slashesDenoteHost);
      return u;
    }
 
    Url.prototype.parse = function(url, slashesDenoteHost) {
      var i, l, lowerProto, hec, slashes,
          rest = url;
 
      // trim before proceeding.
      // This is to support parse stuff like "  http://foo.com  \n"
      rest = rest.trim();
 
      if (!slashesDenoteHost && url.split('#').length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
          this.pathname = simplePath[1];
          if (simplePath[2]) {
            this.search = simplePath[2];
          }
          return this;
        }
      }
 
      var proto = protocolPattern.exec(rest);
      if (proto) {
        proto = proto[0];
        lowerProto = proto.toLowerCase();
        this.protocol = proto;
        rest = rest.substr(proto.length);
      }
 
      // figure out if it's got a host
      // user@server is *always* interpreted as a hostname, and url
      // resolution will treat //foo/bar as host=foo,path=bar because that's
      // how the browser resolves relative URLs.
      if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
        slashes = rest.substr(0, 2) === '//';
        if (slashes && !(proto && hostlessProtocol[proto])) {
          rest = rest.substr(2);
          this.slashes = true;
        }
      }
 
      if (!hostlessProtocol[proto] &&
          (slashes || (proto && !slashedProtocol[proto]))) {
 
        // there's a hostname.
        // the first instance of /, ?, ;, or # ends the host.
        //
        // If there is an @ in the hostname, then non-host chars *are* allowed
        // to the left of the last @ sign, unless some host-ending character
        // comes *before* the @-sign.
        // URLs are obnoxious.
        //
        // ex:
        // http://a@b@c/ => user:a@b host:c
        // http://a@b?@c => user:a host:c path:/?@c
 
        // v0.12 TODO(isaacs): This is not quite how Chrome does things.
        // Review our test case against browsers more comprehensively.
 
        // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for (i = 0; i < hostEndingChars.length; i++) {
          hec = rest.indexOf(hostEndingChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
 
        // at this point, either we have an explicit point where the
        // auth portion cannot go past, or the last @ char is the decider.
        var auth, atSign;
        if (hostEnd === -1) {
          // atSign can be anywhere.
          atSign = rest.lastIndexOf('@');
        } else {
          // atSign must be in auth portion.
          // http://a@b/c@d => host:b auth:a path:/c@d
          atSign = rest.lastIndexOf('@', hostEnd);
        }
 
        // Now we have a portion which is definitely the auth.
        // Pull that off.
        if (atSign !== -1) {
          auth = rest.slice(0, atSign);
          rest = rest.slice(atSign + 1);
          this.auth = auth;
        }
 
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for (i = 0; i < nonHostChars.length; i++) {
          hec = rest.indexOf(nonHostChars[i]);
          if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) {
            hostEnd = hec;
          }
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) {
          hostEnd = rest.length;
        }
 
        if (rest[hostEnd - 1] === ':') { hostEnd--; }
        var host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
 
        // pull out port.
        this.parseHost(host);
 
        // we've indicated that there is a hostname,
        // so even if it's empty, it has to be present.
        this.hostname = this.hostname || '';
 
        // if hostname begins with [ and ends with ]
        // assume that it's an IPv6 address.
        var ipv6Hostname = this.hostname[0] === '[' &&
            this.hostname[this.hostname.length - 1] === ']';
 
        // validate a little.
        if (!ipv6Hostname) {
          var hostparts = this.hostname.split(/\./);
          for (i = 0, l = hostparts.length; i < l; i++) {
            var part = hostparts[i];
            if (!part) { continue; }
            if (!part.match(hostnamePartPattern)) {
              var newpart = '';
              for (var j = 0, k = part.length; j < k; j++) {
                if (part.charCodeAt(j) > 127) {
                  // we replace non-ASCII char with a temporary placeholder
                  // we need this to make sure size of hostname is not
                  // broken by replacing non-ASCII by nothing
                  newpart += 'x';
                } else {
                  newpart += part[j];
                }
              }
              // we test again with ASCII char only
              if (!newpart.match(hostnamePartPattern)) {
                var validParts = hostparts.slice(0, i);
                var notHost = hostparts.slice(i + 1);
                var bit = part.match(hostnamePartStart);
                if (bit) {
                  validParts.push(bit[1]);
                  notHost.unshift(bit[2]);
                }
                if (notHost.length) {
                  rest = notHost.join('.') + rest;
                }
                this.hostname = validParts.join('.');
                break;
              }
            }
          }
        }
 
        if (this.hostname.length > hostnameMaxLen) {
          this.hostname = '';
        }
 
        // strip [ and ] from the hostname
        // the host field still retains them, though
        if (ipv6Hostname) {
          this.hostname = this.hostname.substr(1, this.hostname.length - 2);
        }
      }
 
      // chop off from the tail first.
      var hash = rest.indexOf('#');
      if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
      }
      var qm = rest.indexOf('?');
      if (qm !== -1) {
        this.search = rest.substr(qm);
        rest = rest.slice(0, qm);
      }
      if (rest) { this.pathname = rest; }
      if (slashedProtocol[lowerProto] &&
          this.hostname && !this.pathname) {
        this.pathname = '';
      }
 
      return this;
    };
 
    Url.prototype.parseHost = function(host) {
      var port = portPattern.exec(host);
      if (port) {
        port = port[0];
        if (port !== ':') {
          this.port = port.substr(1);
        }
        host = host.substr(0, host.length - port.length);
      }
      if (host) { this.hostname = host; }
    };
 
    var parse = urlParse;
 
    mdurl$1.encode = encode_1;
    mdurl$1.decode = decode_1;
    mdurl$1.format = format;
    mdurl$1.parse  = parse;
 
    var uc_micro = {};
 
    var regex$3;
    var hasRequiredRegex$3;
 
    function requireRegex$3 () {
        if (hasRequiredRegex$3) return regex$3;
        hasRequiredRegex$3 = 1;
        regex$3=/[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
        return regex$3;
    }
 
    var regex$2;
    var hasRequiredRegex$2;
 
    function requireRegex$2 () {
        if (hasRequiredRegex$2) return regex$2;
        hasRequiredRegex$2 = 1;
        regex$2=/[\0-\x1F\x7F-\x9F]/;
        return regex$2;
    }
 
    var regex$1;
    var hasRequiredRegex$1;
 
    function requireRegex$1 () {
        if (hasRequiredRegex$1) return regex$1;
        hasRequiredRegex$1 = 1;
        regex$1=/[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/;
        return regex$1;
    }
 
    var regex;
    var hasRequiredRegex;
 
    function requireRegex () {
        if (hasRequiredRegex) return regex;
        hasRequiredRegex = 1;
        regex=/[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/;
        return regex;
    }
 
    var hasRequiredUc_micro;
 
    function requireUc_micro () {
        if (hasRequiredUc_micro) return uc_micro;
        hasRequiredUc_micro = 1;
 
        uc_micro.Any = requireRegex$3();
        uc_micro.Cc  = requireRegex$2();
        uc_micro.Cf  = requireRegex$1();
        uc_micro.P   = regex$4;
        uc_micro.Z   = requireRegex();
        return uc_micro;
    }
 
    (function (exports) {
 
 
        function _class(obj) { return Object.prototype.toString.call(obj); }
 
        function isString(obj) { return _class(obj) === '[object String]'; }
 
        var _hasOwnProperty = Object.prototype.hasOwnProperty;
 
        function has(object, key) {
          return _hasOwnProperty.call(object, key);
        }
 
        // Merge objects
        //
        function assign(obj /*from1, from2, from3, ...*/) {
          var sources = Array.prototype.slice.call(arguments, 1);
 
          sources.forEach(function (source) {
            if (!source) { return; }
 
            if (typeof source !== 'object') {
              throw new TypeError(source + 'must be object');
            }
 
            Object.keys(source).forEach(function (key) {
              obj[key] = source[key];
            });
          });
 
          return obj;
        }
 
        // Remove element from array and put another array at those position.
        // Useful for some operations with tokens
        function arrayReplaceAt(src, pos, newElements) {
          return [].concat(src.slice(0, pos), newElements, src.slice(pos + 1));
        }
 
        ////////////////////////////////////////////////////////////////////////////////
 
        function isValidEntityCode(c) {
          /*eslint no-bitwise:0*/
          // broken sequence
          if (c >= 0xD800 && c <= 0xDFFF) { return false; }
          // never used
          if (c >= 0xFDD0 && c <= 0xFDEF) { return false; }
          if ((c & 0xFFFF) === 0xFFFF || (c & 0xFFFF) === 0xFFFE) { return false; }
          // control codes
          if (c >= 0x00 && c <= 0x08) { return false; }
          if (c === 0x0B) { return false; }
          if (c >= 0x0E && c <= 0x1F) { return false; }
          if (c >= 0x7F && c <= 0x9F) { return false; }
          // out of range
          if (c > 0x10FFFF) { return false; }
          return true;
        }
 
        function fromCodePoint(c) {
          /*eslint no-bitwise:0*/
          if (c > 0xffff) {
            c -= 0x10000;
            var surrogate1 = 0xd800 + (c >> 10),
                surrogate2 = 0xdc00 + (c & 0x3ff);
 
            return String.fromCharCode(surrogate1, surrogate2);
          }
          return String.fromCharCode(c);
        }
 
 
        var UNESCAPE_MD_RE  = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g;
        var ENTITY_RE       = /&([a-z#][a-z0-9]{1,31});/gi;
        var UNESCAPE_ALL_RE = new RegExp(UNESCAPE_MD_RE.source + '|' + ENTITY_RE.source, 'gi');
 
        var DIGITAL_ENTITY_TEST_RE = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i;
 
        var entities = entities$1;
 
        function replaceEntityPattern(match, name) {
          var code = 0;
 
          if (has(entities, name)) {
            return entities[name];
          }
 
          if (name.charCodeAt(0) === 0x23/* # */ && DIGITAL_ENTITY_TEST_RE.test(name)) {
            code = name[1].toLowerCase() === 'x' ?
              parseInt(name.slice(2), 16) : parseInt(name.slice(1), 10);
 
            if (isValidEntityCode(code)) {
              return fromCodePoint(code);
            }
          }
 
          return match;
        }
 
        /*function replaceEntities(str) {
          if (str.indexOf('&') < 0) { return str; }
 
          return str.replace(ENTITY_RE, replaceEntityPattern);
        }*/
 
        function unescapeMd(str) {
          if (str.indexOf('\\') < 0) { return str; }
          return str.replace(UNESCAPE_MD_RE, '$1');
        }
 
        function unescapeAll(str) {
          if (str.indexOf('\\') < 0 && str.indexOf('&') < 0) { return str; }
 
          return str.replace(UNESCAPE_ALL_RE, function (match, escaped, entity) {
            if (escaped) { return escaped; }
            return replaceEntityPattern(match, entity);
          });
        }
 
        ////////////////////////////////////////////////////////////////////////////////
 
        var HTML_ESCAPE_TEST_RE = /[&<>"]/;
        var HTML_ESCAPE_REPLACE_RE = /[&<>"]/g;
        var HTML_REPLACEMENTS = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;'
        };
 
        function replaceUnsafeChar(ch) {
          return HTML_REPLACEMENTS[ch];
        }
 
        function escapeHtml(str) {
          if (HTML_ESCAPE_TEST_RE.test(str)) {
            return str.replace(HTML_ESCAPE_REPLACE_RE, replaceUnsafeChar);
          }
          return str;
        }
 
        ////////////////////////////////////////////////////////////////////////////////
 
        var REGEXP_ESCAPE_RE = /[.?*+^$[\]\\(){}|-]/g;
 
        function escapeRE(str) {
          return str.replace(REGEXP_ESCAPE_RE, '\\$&');
        }
 
        ////////////////////////////////////////////////////////////////////////////////
 
        function isSpace(code) {
          switch (code) {
            case 0x09:
            case 0x20:
              return true;
          }
          return false;
        }
 
        // Zs (unicode class) || [\t\f\v\r\n]
        function isWhiteSpace(code) {
          if (code >= 0x2000 && code <= 0x200A) { return true; }
          switch (code) {
            case 0x09: // \t
            case 0x0A: // \n
            case 0x0B: // \v
            case 0x0C: // \f
            case 0x0D: // \r
            case 0x20:
            case 0xA0:
            case 0x1680:
            case 0x202F:
            case 0x205F:
            case 0x3000:
              return true;
          }
          return false;
        }
 
        ////////////////////////////////////////////////////////////////////////////////
 
        /*eslint-disable max-len*/
        var UNICODE_PUNCT_RE = regex$4;
 
        // Currently without astral characters support.
        function isPunctChar(ch) {
          return UNICODE_PUNCT_RE.test(ch);
        }
 
 
        // Markdown ASCII punctuation characters.
        //
        // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
        // http://spec.commonmark.org/0.15/#ascii-punctuation-character
        //
        // Don't confuse with unicode punctuation !!! It lacks some chars in ascii range.
        //
        function isMdAsciiPunct(ch) {
          switch (ch) {
            case 0x21/* ! */:
            case 0x22/* " */:
            case 0x23/* # */:
            case 0x24/* $ */:
            case 0x25/* % */:
            case 0x26/* & */:
            case 0x27/* ' */:
            case 0x28/* ( */:
            case 0x29/* ) */:
            case 0x2A/* * */:
            case 0x2B/* + */:
            case 0x2C/* , */:
            case 0x2D/* - */:
            case 0x2E/* . */:
            case 0x2F/* / */:
            case 0x3A/* : */:
            case 0x3B/* ; */:
            case 0x3C/* < */:
            case 0x3D/* = */:
            case 0x3E/* > */:
            case 0x3F/* ? */:
            case 0x40/* @ */:
            case 0x5B/* [ */:
            case 0x5C/* \ */:
            case 0x5D/* ] */:
            case 0x5E/* ^ */:
            case 0x5F/* _ */:
            case 0x60/* ` */:
            case 0x7B/* { */:
            case 0x7C/* | */:
            case 0x7D/* } */:
            case 0x7E/* ~ */:
              return true;
            default:
              return false;
          }
        }
 
        // Hepler to unify [reference labels].
        //
        function normalizeReference(str) {
          // Trim and collapse whitespace
          //
          str = str.trim().replace(/\s+/g, ' ');
 
          // In node v10 'ẞ'.toLowerCase() === 'Ṿ', which is presumed to be a bug
          // fixed in v12 (couldn't find any details).
          //
          // So treat this one as a special case
          // (remove this when node v10 is no longer supported).
          //
          if ('ẞ'.toLowerCase() === 'Ṿ') {
            str = str.replace(/ẞ/g, 'ß');
          }
 
          // .toLowerCase().toUpperCase() should get rid of all differences
          // between letter variants.
          //
          // Simple .toLowerCase() doesn't normalize 125 code points correctly,
          // and .toUpperCase doesn't normalize 6 of them (list of exceptions:
          // İ, ϴ, ẞ, Ω, K, Å - those are already uppercased, but have differently
          // uppercased versions).
          //
          // Here's an example showing how it happens. Lets take greek letter omega:
          // uppercase U+0398 (Θ), U+03f4 (ϴ) and lowercase U+03b8 (θ), U+03d1 (ϑ)
          //
          // Unicode entries:
          // 0398;GREEK CAPITAL LETTER THETA;Lu;0;L;;;;;N;;;;03B8;
          // 03B8;GREEK SMALL LETTER THETA;Ll;0;L;;;;;N;;;0398;;0398
          // 03D1;GREEK THETA SYMBOL;Ll;0;L;<compat> 03B8;;;;N;GREEK SMALL LETTER SCRIPT THETA;;0398;;0398
          // 03F4;GREEK CAPITAL THETA SYMBOL;Lu;0;L;<compat> 0398;;;;N;;;;03B8;
          //
          // Case-insensitive comparison should treat all of them as equivalent.
          //
          // But .toLowerCase() doesn't change ϑ (it's already lowercase),
          // and .toUpperCase() doesn't change ϴ (already uppercase).
          //
          // Applying first lower then upper case normalizes any character:
          // '\u0398\u03f4\u03b8\u03d1'.toLowerCase().toUpperCase() === '\u0398\u0398\u0398\u0398'
          //
          // Note: this is equivalent to unicode case folding; unicode normalization
          // is a different step that is not required here.
          //
          // Final result should be uppercased, because it's later stored in an object
          // (this avoid a conflict with Object.prototype members,
          // most notably, `__proto__`)
          //
          return str.toLowerCase().toUpperCase();
        }
 
        ////////////////////////////////////////////////////////////////////////////////
 
        // Re-export libraries commonly used in both markdown-it and its plugins,
        // so plugins won't have to depend on them explicitly, which reduces their
        // bundled size (e.g. a browser build).
        //
        exports.lib                 = {};
        exports.lib.mdurl           = mdurl$1;
        exports.lib.ucmicro         = requireUc_micro();
 
        exports.assign              = assign;
        exports.isString            = isString;
        exports.has                 = has;
        exports.unescapeMd          = unescapeMd;
        exports.unescapeAll         = unescapeAll;
        exports.isValidEntityCode   = isValidEntityCode;
        exports.fromCodePoint       = fromCodePoint;
        // exports.replaceEntities     = replaceEntities;
        exports.escapeHtml          = escapeHtml;
        exports.arrayReplaceAt      = arrayReplaceAt;
        exports.isSpace             = isSpace;
        exports.isWhiteSpace        = isWhiteSpace;
        exports.isMdAsciiPunct      = isMdAsciiPunct;
        exports.isPunctChar         = isPunctChar;
        exports.escapeRE            = escapeRE;
        exports.normalizeReference  = normalizeReference; 
    } (utils$1));
 
    var helpers$1 = {};
 
    var parse_link_label = function parseLinkLabel(state, start, disableNested) {
      var level, found, marker, prevPos,
          labelEnd = -1,
          max = state.posMax,
          oldPos = state.pos;
 
      state.pos = start + 1;
      level = 1;
 
      while (state.pos < max) {
        marker = state.src.charCodeAt(state.pos);
        if (marker === 0x5D /* ] */) {
          level--;
          if (level === 0) {
            found = true;
            break;
          }
        }
 
        prevPos = state.pos;
        state.md.inline.skipToken(state);
        if (marker === 0x5B /* [ */) {
          if (prevPos === state.pos - 1) {
            // increase level if we find text `[`, which is not a part of any token
            level++;
          } else if (disableNested) {
            state.pos = oldPos;
            return -1;
          }
        }
      }
 
      if (found) {
        labelEnd = state.pos;
      }
 
      // restore old state
      state.pos = oldPos;
 
      return labelEnd;
    };
 
    var unescapeAll$2 = utils$1.unescapeAll;
 
 
    var parse_link_destination = function parseLinkDestination(str, pos, max) {
      var code, level,
          lines = 0,
          start = pos,
          result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ''
          };
 
      if (str.charCodeAt(pos) === 0x3C /* < */) {
        pos++;
        while (pos < max) {
          code = str.charCodeAt(pos);
          if (code === 0x0A /* \n */) { return result; }
          if (code === 0x3C /* < */) { return result; }
          if (code === 0x3E /* > */) {
            result.pos = pos + 1;
            result.str = unescapeAll$2(str.slice(start + 1, pos));
            result.ok = true;
            return result;
          }
          if (code === 0x5C /* \ */ && pos + 1 < max) {
            pos += 2;
            continue;
          }
 
          pos++;
        }
 
        // no closing '>'
        return result;
      }
 
      // this should be ... } else { ... branch
 
      level = 0;
      while (pos < max) {
        code = str.charCodeAt(pos);
 
        if (code === 0x20) { break; }
 
        // ascii control characters
        if (code < 0x20 || code === 0x7F) { break; }
 
        if (code === 0x5C /* \ */ && pos + 1 < max) {
          if (str.charCodeAt(pos + 1) === 0x20) { break; }
          pos += 2;
          continue;
        }
 
        if (code === 0x28 /* ( */) {
          level++;
          if (level > 32) { return result; }
        }
 
        if (code === 0x29 /* ) */) {
          if (level === 0) { break; }
          level--;
        }
 
        pos++;
      }
 
      if (start === pos) { return result; }
      if (level !== 0) { return result; }
 
      result.str = unescapeAll$2(str.slice(start, pos));
      result.lines = lines;
      result.pos = pos;
      result.ok = true;
      return result;
    };
 
    var unescapeAll$1 = utils$1.unescapeAll;
 
 
    var parse_link_title = function parseLinkTitle(str, pos, max) {
      var code,
          marker,
          lines = 0,
          start = pos,
          result = {
            ok: false,
            pos: 0,
            lines: 0,
            str: ''
          };
 
      if (pos >= max) { return result; }
 
      marker = str.charCodeAt(pos);
 
      if (marker !== 0x22 /* " */ && marker !== 0x27 /* ' */ && marker !== 0x28 /* ( */) { return result; }
 
      pos++;
 
      // if opening marker is "(", switch it to closing marker ")"
      if (marker === 0x28) { marker = 0x29; }
 
      while (pos < max) {
        code = str.charCodeAt(pos);
        if (code === marker) {
          result.pos = pos + 1;
          result.lines = lines;
          result.str = unescapeAll$1(str.slice(start + 1, pos));
          result.ok = true;
          return result;
        } else if (code === 0x28 /* ( */ && marker === 0x29 /* ) */) {
          return result;
        } else if (code === 0x0A) {
          lines++;
        } else if (code === 0x5C /* \ */ && pos + 1 < max) {
          pos++;
          if (str.charCodeAt(pos) === 0x0A) {
            lines++;
          }
        }
 
        pos++;
      }
 
      return result;
    };
 
    helpers$1.parseLinkLabel       = parse_link_label;
    helpers$1.parseLinkDestination = parse_link_destination;
    helpers$1.parseLinkTitle       = parse_link_title;
 
    /**
     * class Renderer
     *
     * Generates HTML from parsed token stream. Each instance has independent
     * copy of rules. Those can be rewritten with ease. Also, you can add new
     * rules if you create plugin and adds new token types.
     **/
 
 
    var assign$1          = utils$1.assign;
    var unescapeAll     = utils$1.unescapeAll;
    var escapeHtml      = utils$1.escapeHtml;
 
 
    ////////////////////////////////////////////////////////////////////////////////
 
    var default_rules = {};
 
 
    default_rules.code_inline = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];
 
      return  '<code' + slf.renderAttrs(token) + '>' +
              escapeHtml(tokens[idx].content) +
              '</code>';
    };
 
 
    default_rules.code_block = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];
 
      return  '<pre' + slf.renderAttrs(token) + '><code>' +
              escapeHtml(tokens[idx].content) +
              '</code></pre>\n';
    };
 
 
    default_rules.fence = function (tokens, idx, options, env, slf) {
      var token = tokens[idx],
          info = token.info ? unescapeAll(token.info).trim() : '',
          langName = '',
          langAttrs = '',
          highlighted, i, arr, tmpAttrs, tmpToken;
 
      if (info) {
        arr = info.split(/(\s+)/g);
        langName = arr[0];
        langAttrs = arr.slice(2).join('');
      }
 
      if (options.highlight) {
        highlighted = options.highlight(token.content, langName, langAttrs) || escapeHtml(token.content);
      } else {
        highlighted = escapeHtml(token.content);
      }
 
      if (highlighted.indexOf('<pre') === 0) {
        return highlighted + '\n';
      }
 
      // If language exists, inject class gently, without modifying original token.
      // May be, one day we will add .deepClone() for token and simplify this part, but
      // now we prefer to keep things local.
      if (info) {
        i        = token.attrIndex('class');
        tmpAttrs = token.attrs ? token.attrs.slice() : [];
 
        if (i < 0) {
          tmpAttrs.push([ 'class', options.langPrefix + langName ]);
        } else {
          tmpAttrs[i] = tmpAttrs[i].slice();
          tmpAttrs[i][1] += ' ' + options.langPrefix + langName;
        }
 
        // Fake token just to render attributes
        tmpToken = {
          attrs: tmpAttrs
        };
 
        return  '<pre><code' + slf.renderAttrs(tmpToken) + '>'
              + highlighted
              + '</code></pre>\n';
      }
 
 
      return  '<pre><code' + slf.renderAttrs(token) + '>'
            + highlighted
            + '</code></pre>\n';
    };
 
 
    default_rules.image = function (tokens, idx, options, env, slf) {
      var token = tokens[idx];
 
      // "alt" attr MUST be set, even if empty. Because it's mandatory and
      // should be placed on proper position for tests.
      //
      // Replace content with actual value
 
      token.attrs[token.attrIndex('alt')][1] =
        slf.renderInlineAsText(token.children, options, env);
 
      return slf.renderToken(tokens, idx, options);
    };
 
 
    default_rules.hardbreak = function (tokens, idx, options /*, env */) {
      return options.xhtmlOut ? '<br />\n' : '<br>\n';
    };
    default_rules.softbreak = function (tokens, idx, options /*, env */) {
      return options.breaks ? (options.xhtmlOut ? '<br />\n' : '<br>\n') : '\n';
    };
 
 
    default_rules.text = function (tokens, idx /*, options, env */) {
      return escapeHtml(tokens[idx].content);
    };
 
 
    default_rules.html_block = function (tokens, idx /*, options, env */) {
      return tokens[idx].content;
    };
    default_rules.html_inline = function (tokens, idx /*, options, env */) {
      return tokens[idx].content;
    };
 
 
    /**
     * new Renderer()
     *
     * Creates new [[Renderer]] instance and fill [[Renderer#rules]] with defaults.
     **/
    function Renderer$1() {
 
      /**
       * Renderer#rules -> Object
       *
       * Contains render rules for tokens. Can be updated and extended.
       *
       * ##### Example
       *
       * ```javascript
       * var md = require('markdown-it')();
       *
       * md.renderer.rules.strong_open  = function () { return '<b>'; };
       * md.renderer.rules.strong_close = function () { return '</b>'; };
       *
       * var result = md.renderInline(...);
       * ```
       *
       * Each rule is called as independent static function with fixed signature:
       *
       * ```javascript
       * function my_token_render(tokens, idx, options, env, renderer) {
       *   // ...
       *   return renderedHTML;
       * }
       * ```
       *
       * See [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)
       * for more details and examples.
       **/
      this.rules = assign$1({}, default_rules);
    }
 
 
    /**
     * Renderer.renderAttrs(token) -> String
     *
     * Render token attributes to string.
     **/
    Renderer$1.prototype.renderAttrs = function renderAttrs(token) {
      var i, l, result;
 
      if (!token.attrs) { return ''; }
 
      result = '';
 
      for (i = 0, l = token.attrs.length; i < l; i++) {
        result += ' ' + escapeHtml(token.attrs[i][0]) + '="' + escapeHtml(token.attrs[i][1]) + '"';
      }
 
      return result;
    };
 
 
    /**
     * Renderer.renderToken(tokens, idx, options) -> String
     * - tokens (Array): list of tokens
     * - idx (Numbed): token index to render
     * - options (Object): params of parser instance
     *
     * Default token renderer. Can be overriden by custom function
     * in [[Renderer#rules]].
     **/
    Renderer$1.prototype.renderToken = function renderToken(tokens, idx, options) {
      var nextToken,
          result = '',
          needLf = false,
          token = tokens[idx];
 
      // Tight list paragraphs
      if (token.hidden) {
        return '';
      }
 
      // Insert a newline between hidden paragraph and subsequent opening
      // block-level tag.
      //
      // For example, here we should insert a newline before blockquote:
      //  - a
      //    >
      //
      if (token.block && token.nesting !== -1 && idx && tokens[idx - 1].hidden) {
        result += '\n';
      }
 
      // Add token name, e.g. `<img`
      result += (token.nesting === -1 ? '</' : '<') + token.tag;
 
      // Encode attributes, e.g. `<img src="foo"`
      result += this.renderAttrs(token);
 
      // Add a slash for self-closing tags, e.g. `<img src="foo" /`
      if (token.nesting === 0 && options.xhtmlOut) {
        result += ' /';
      }
 
      // Check if we need to add a newline after this tag
      if (token.block) {
        needLf = true;
 
        if (token.nesting === 1) {
          if (idx + 1 < tokens.length) {
            nextToken = tokens[idx + 1];
 
            if (nextToken.type === 'inline' || nextToken.hidden) {
              // Block-level tag containing an inline tag.
              //
              needLf = false;
 
            } else if (nextToken.nesting === -1 && nextToken.tag === token.tag) {
              // Opening tag + closing tag of the same type. E.g. `<li></li>`.
              //
              needLf = false;
            }
          }
        }
      }
 
      result += needLf ? '>\n' : '>';
 
      return result;
    };
 
 
    /**
     * Renderer.renderInline(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to render
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * The same as [[Renderer.render]], but for single token of `inline` type.
     **/
    Renderer$1.prototype.renderInline = function (tokens, options, env) {
      var type,
          result = '',
          rules = this.rules;
 
      for (var i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;
 
        if (typeof rules[type] !== 'undefined') {
          result += rules[type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options);
        }
      }
 
      return result;
    };
 
 
    /** internal
     * Renderer.renderInlineAsText(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to render
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Special kludge for image `alt` attributes to conform CommonMark spec.
     * Don't try to use it! Spec requires to show `alt` content with stripped markup,
     * instead of simple escaping.
     **/
    Renderer$1.prototype.renderInlineAsText = function (tokens, options, env) {
      var result = '';
 
      for (var i = 0, len = tokens.length; i < len; i++) {
        if (tokens[i].type === 'text') {
          result += tokens[i].content;
        } else if (tokens[i].type === 'image') {
          result += this.renderInlineAsText(tokens[i].children, options, env);
        } else if (tokens[i].type === 'softbreak') {
          result += '\n';
        }
      }
 
      return result;
    };
 
 
    /**
     * Renderer.render(tokens, options, env) -> String
     * - tokens (Array): list on block tokens to render
     * - options (Object): params of parser instance
     * - env (Object): additional data from parsed input (references, for example)
     *
     * Takes token stream and generates HTML. Probably, you will never need to call
     * this method directly.
     **/
    Renderer$1.prototype.render = function (tokens, options, env) {
      var i, len, type,
          result = '',
          rules = this.rules;
 
      for (i = 0, len = tokens.length; i < len; i++) {
        type = tokens[i].type;
 
        if (type === 'inline') {
          result += this.renderInline(tokens[i].children, options, env);
        } else if (typeof rules[type] !== 'undefined') {
          result += rules[tokens[i].type](tokens, i, options, env, this);
        } else {
          result += this.renderToken(tokens, i, options, env);
        }
      }
 
      return result;
    };
 
    var renderer = Renderer$1;
 
    /**
     * class Ruler
     *
     * Helper class, used by [[MarkdownIt#core]], [[MarkdownIt#block]] and
     * [[MarkdownIt#inline]] to manage sequences of functions (rules):
     *
     * - keep rules in defined order
     * - assign the name to each rule
     * - enable/disable rules
     * - add/replace rules
     * - allow assign rules to additional named chains (in the same)
     * - cacheing lists of active rules
     *
     * You will not need use this class directly until write plugins. For simple
     * rules control use [[MarkdownIt.disable]], [[MarkdownIt.enable]] and
     * [[MarkdownIt.use]].
     **/
 
 
    /**
     * new Ruler()
     **/
    function Ruler$3() {
      // List of added rules. Each element is:
      //
      // {
      //   name: XXX,
      //   enabled: Boolean,
      //   fn: Function(),
      //   alt: [ name2, name3 ]
      // }
      //
      this.__rules__ = [];
 
      // Cached rule chains.
      //
      // First level - chain name, '' for default.
      // Second level - diginal anchor for fast filtering by charcodes.
      //
      this.__cache__ = null;
    }
 
    ////////////////////////////////////////////////////////////////////////////////
    // Helper methods, should not be used directly
 
 
    // Find rule index by name
    //
    Ruler$3.prototype.__find__ = function (name) {
      for (var i = 0; i < this.__rules__.length; i++) {
        if (this.__rules__[i].name === name) {
          return i;
        }
      }
      return -1;
    };
 
 
    // Build rules lookup cache
    //
    Ruler$3.prototype.__compile__ = function () {
      var self = this;
      var chains = [ '' ];
 
      // collect unique names
      self.__rules__.forEach(function (rule) {
        if (!rule.enabled) { return; }
 
        rule.alt.forEach(function (altName) {
          if (chains.indexOf(altName) < 0) {
            chains.push(altName);
          }
        });
      });
 
      self.__cache__ = {};
 
      chains.forEach(function (chain) {
        self.__cache__[chain] = [];
        self.__rules__.forEach(function (rule) {
          if (!rule.enabled) { return; }
 
          if (chain && rule.alt.indexOf(chain) < 0) { return; }
 
          self.__cache__[chain].push(rule.fn);
        });
      });
    };
 
 
    /**
     * Ruler.at(name, fn [, options])
     * - name (String): rule name to replace.
     * - fn (Function): new rule function.
     * - options (Object): new rule options (not mandatory).
     *
     * Replace rule by name with new function & options. Throws error if name not
     * found.
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * Replace existing typographer replacement rule with new one:
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.core.ruler.at('replacements', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler$3.prototype.at = function (name, fn, options) {
      var index = this.__find__(name);
      var opt = options || {};
 
      if (index === -1) { throw new Error('Parser rule not found: ' + name); }
 
      this.__rules__[index].fn = fn;
      this.__rules__[index].alt = opt.alt || [];
      this.__cache__ = null;
    };
 
 
    /**
     * Ruler.before(beforeName, ruleName, fn [, options])
     * - beforeName (String): new rule will be added before this one.
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Add new rule to chain before one with given name. See also
     * [[Ruler.after]], [[Ruler.push]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.block.ruler.before('paragraph', 'my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler$3.prototype.before = function (beforeName, ruleName, fn, options) {
      var index = this.__find__(beforeName);
      var opt = options || {};
 
      if (index === -1) { throw new Error('Parser rule not found: ' + beforeName); }
 
      this.__rules__.splice(index, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });
 
      this.__cache__ = null;
    };
 
 
    /**
     * Ruler.after(afterName, ruleName, fn [, options])
     * - afterName (String): new rule will be added after this one.
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Add new rule to chain after one with given name. See also
     * [[Ruler.before]], [[Ruler.push]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.inline.ruler.after('text', 'my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler$3.prototype.after = function (afterName, ruleName, fn, options) {
      var index = this.__find__(afterName);
      var opt = options || {};
 
      if (index === -1) { throw new Error('Parser rule not found: ' + afterName); }
 
      this.__rules__.splice(index + 1, 0, {
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });
 
      this.__cache__ = null;
    };
 
    /**
     * Ruler.push(ruleName, fn [, options])
     * - ruleName (String): name of added rule.
     * - fn (Function): rule function.
     * - options (Object): rule options (not mandatory).
     *
     * Push new rule to the end of chain. See also
     * [[Ruler.before]], [[Ruler.after]].
     *
     * ##### Options:
     *
     * - __alt__ - array with names of "alternate" chains.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')();
     *
     * md.core.ruler.push('my_rule', function replace(state) {
     *   //...
     * });
     * ```
     **/
    Ruler$3.prototype.push = function (ruleName, fn, options) {
      var opt = options || {};
 
      this.__rules__.push({
        name: ruleName,
        enabled: true,
        fn: fn,
        alt: opt.alt || []
      });
 
      this.__cache__ = null;
    };
 
 
    /**
     * Ruler.enable(list [, ignoreInvalid]) -> Array
     * - list (String|Array): list of rule names to enable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable rules with given names. If any rule name not found - throw Error.
     * Errors can be disabled by second param.
     *
     * Returns list of found rule names (if no exception happened).
     *
     * See also [[Ruler.disable]], [[Ruler.enableOnly]].
     **/
    Ruler$3.prototype.enable = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) { list = [ list ]; }
 
      var result = [];
 
      // Search by name and enable
      list.forEach(function (name) {
        var idx = this.__find__(name);
 
        if (idx < 0) {
          if (ignoreInvalid) { return; }
          throw new Error('Rules manager: invalid rule name ' + name);
        }
        this.__rules__[idx].enabled = true;
        result.push(name);
      }, this);
 
      this.__cache__ = null;
      return result;
    };
 
 
    /**
     * Ruler.enableOnly(list [, ignoreInvalid])
     * - list (String|Array): list of rule names to enable (whitelist).
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable rules with given names, and disable everything else. If any rule name
     * not found - throw Error. Errors can be disabled by second param.
     *
     * See also [[Ruler.disable]], [[Ruler.enable]].
     **/
    Ruler$3.prototype.enableOnly = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) { list = [ list ]; }
 
      this.__rules__.forEach(function (rule) { rule.enabled = false; });
 
      this.enable(list, ignoreInvalid);
    };
 
 
    /**
     * Ruler.disable(list [, ignoreInvalid]) -> Array
     * - list (String|Array): list of rule names to disable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Disable rules with given names. If any rule name not found - throw Error.
     * Errors can be disabled by second param.
     *
     * Returns list of found rule names (if no exception happened).
     *
     * See also [[Ruler.enable]], [[Ruler.enableOnly]].
     **/
    Ruler$3.prototype.disable = function (list, ignoreInvalid) {
      if (!Array.isArray(list)) { list = [ list ]; }
 
      var result = [];
 
      // Search by name and disable
      list.forEach(function (name) {
        var idx = this.__find__(name);
 
        if (idx < 0) {
          if (ignoreInvalid) { return; }
          throw new Error('Rules manager: invalid rule name ' + name);
        }
        this.__rules__[idx].enabled = false;
        result.push(name);
      }, this);
 
      this.__cache__ = null;
      return result;
    };
 
 
    /**
     * Ruler.getRules(chainName) -> Array
     *
     * Return array of active functions (rules) for given chain name. It analyzes
     * rules configuration, compiles caches if not exists and returns result.
     *
     * Default chain name is `''` (empty string). It can't be skipped. That's
     * done intentionally, to keep signature monomorphic for high speed.
     **/
    Ruler$3.prototype.getRules = function (chainName) {
      if (this.__cache__ === null) {
        this.__compile__();
      }
 
      // Chain can be empty, if rules disabled. But we still have to return Array.
      return this.__cache__[chainName] || [];
    };
 
    var ruler = Ruler$3;
 
    // https://spec.commonmark.org/0.29/#line-ending
    var NEWLINES_RE  = /\r\n?|\n/g;
    var NULL_RE      = /\0/g;
 
 
    var normalize = function normalize(state) {
      var str;
 
      // Normalize newlines
      str = state.src.replace(NEWLINES_RE, '\n');
 
      // Replace NULL characters
      str = str.replace(NULL_RE, '\uFFFD');
 
      state.src = str;
    };
 
    var block = function block(state) {
      var token;
 
      if (state.inlineMode) {
        token          = new state.Token('inline', '', 0);
        token.content  = state.src;
        token.map      = [ 0, 1 ];
        token.children = [];
        state.tokens.push(token);
      } else {
        state.md.block.parse(state.src, state.md, state.env, state.tokens);
      }
    };
 
    var inline = function inline(state) {
      var tokens = state.tokens, tok, i, l;
 
      // Parse inlines
      for (i = 0, l = tokens.length; i < l; i++) {
        tok = tokens[i];
        if (tok.type === 'inline') {
          state.md.inline.parse(tok.content, state.md, state.env, tok.children);
        }
      }
    };
 
    var arrayReplaceAt = utils$1.arrayReplaceAt;
 
 
    function isLinkOpen$1(str) {
      return /^<a[>\s]/i.test(str);
    }
    function isLinkClose$1(str) {
      return /^<\/a\s*>/i.test(str);
    }
 
 
    var linkify$1 = function linkify(state) {
      var i, j, l, tokens, token, currentToken, nodes, ln, text, pos, lastPos,
          level, htmlLinkLevel, url, fullUrl, urlText,
          blockTokens = state.tokens,
          links;
 
      if (!state.md.options.linkify) { return; }
 
      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== 'inline' ||
            !state.md.linkify.pretest(blockTokens[j].content)) {
          continue;
        }
 
        tokens = blockTokens[j].children;
 
        htmlLinkLevel = 0;
 
        // We scan from the end, to keep position when new tags added.
        // Use reversed logic in links start/end match
        for (i = tokens.length - 1; i >= 0; i--) {
          currentToken = tokens[i];
 
          // Skip content of markdown links
          if (currentToken.type === 'link_close') {
            i--;
            while (tokens[i].level !== currentToken.level && tokens[i].type !== 'link_open') {
              i--;
            }
            continue;
          }
 
          // Skip content of html tag links
          if (currentToken.type === 'html_inline') {
            if (isLinkOpen$1(currentToken.content) && htmlLinkLevel > 0) {
              htmlLinkLevel--;
            }
            if (isLinkClose$1(currentToken.content)) {
              htmlLinkLevel++;
            }
          }
          if (htmlLinkLevel > 0) { continue; }
 
          if (currentToken.type === 'text' && state.md.linkify.test(currentToken.content)) {
 
            text = currentToken.content;
            links = state.md.linkify.match(text);
 
            // Now split string to nodes
            nodes = [];
            level = currentToken.level;
            lastPos = 0;
 
            // forbid escape sequence at the start of the string,
            // this avoids http\://example.com/ from being linkified as
            // http:<a href="//example.com/">//example.com/</a>
            if (links.length > 0 &&
                links[0].index === 0 &&
                i > 0 &&
                tokens[i - 1].type === 'text_special') {
              links = links.slice(1);
            }
 
            for (ln = 0; ln < links.length; ln++) {
              url = links[ln].url;
              fullUrl = state.md.normalizeLink(url);
              if (!state.md.validateLink(fullUrl)) { continue; }
 
              urlText = links[ln].text;
 
              // Linkifier might send raw hostnames like "example.com", where url
              // starts with domain name. So we prepend http:// in those cases,
              // and remove it afterwards.
              //
              if (!links[ln].schema) {
                urlText = state.md.normalizeLinkText('http://' + urlText).replace(/^http:\/\//, '');
              } else if (links[ln].schema === 'mailto:' && !/^mailto:/i.test(urlText)) {
                urlText = state.md.normalizeLinkText('mailto:' + urlText).replace(/^mailto:/, '');
              } else {
                urlText = state.md.normalizeLinkText(urlText);
              }
 
              pos = links[ln].index;
 
              if (pos > lastPos) {
                token         = new state.Token('text', '', 0);
                token.content = text.slice(lastPos, pos);
                token.level   = level;
                nodes.push(token);
              }
 
              token         = new state.Token('link_open', 'a', 1);
              token.attrs   = [ [ 'href', fullUrl ] ];
              token.level   = level++;
              token.markup  = 'linkify';
              token.info    = 'auto';
              nodes.push(token);
 
              token         = new state.Token('text', '', 0);
              token.content = urlText;
              token.level   = level;
              nodes.push(token);
 
              token         = new state.Token('link_close', 'a', -1);
              token.level   = --level;
              token.markup  = 'linkify';
              token.info    = 'auto';
              nodes.push(token);
 
              lastPos = links[ln].lastIndex;
            }
            if (lastPos < text.length) {
              token         = new state.Token('text', '', 0);
              token.content = text.slice(lastPos);
              token.level   = level;
              nodes.push(token);
            }
 
            // replace current node
            blockTokens[j].children = tokens = arrayReplaceAt(tokens, i, nodes);
          }
        }
      }
    };
 
    // TODO:
    // - fractionals 1/2, 1/4, 3/4 -> ½, ¼, ¾
    // - multiplications 2 x 4 -> 2 × 4
 
    var RARE_RE = /\+-|\.\.|\?\?\?\?|!!!!|,,|--/;
 
    // Workaround for phantomjs - need regex without /g flag,
    // or root check will fail every second time
    var SCOPED_ABBR_TEST_RE = /\((c|tm|r)\)/i;
 
    var SCOPED_ABBR_RE = /\((c|tm|r)\)/ig;
    var SCOPED_ABBR = {
      c: '©',
      r: '®',
      tm: '™'
    };
 
    function replaceFn(match, name) {
      return SCOPED_ABBR[name.toLowerCase()];
    }
 
    function replace_scoped(inlineTokens) {
      var i, token, inside_autolink = 0;
 
      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];
 
        if (token.type === 'text' && !inside_autolink) {
          token.content = token.content.replace(SCOPED_ABBR_RE, replaceFn);
        }
 
        if (token.type === 'link_open' && token.info === 'auto') {
          inside_autolink--;
        }
 
        if (token.type === 'link_close' && token.info === 'auto') {
          inside_autolink++;
        }
      }
    }
 
    function replace_rare(inlineTokens) {
      var i, token, inside_autolink = 0;
 
      for (i = inlineTokens.length - 1; i >= 0; i--) {
        token = inlineTokens[i];
 
        if (token.type === 'text' && !inside_autolink) {
          if (RARE_RE.test(token.content)) {
            token.content = token.content
              .replace(/\+-/g, '±')
              // .., ..., ....... -> …
              // but ?..... & !..... -> ?.. & !..
              .replace(/\.{2,}/g, '…').replace(/([?!])…/g, '$1..')
              .replace(/([?!]){4,}/g, '$1$1$1').replace(/,{2,}/g, ',')
              // em-dash
              .replace(/(^|[^-])---(?=[^-]|$)/mg, '$1\u2014')
              // en-dash
              .replace(/(^|\s)--(?=\s|$)/mg, '$1\u2013')
              .replace(/(^|[^-\s])--(?=[^-\s]|$)/mg, '$1\u2013');
          }
        }
 
        if (token.type === 'link_open' && token.info === 'auto') {
          inside_autolink--;
        }
 
        if (token.type === 'link_close' && token.info === 'auto') {
          inside_autolink++;
        }
      }
    }
 
 
    var replacements = function replace(state) {
      var blkIdx;
 
      if (!state.md.options.typographer) { return; }
 
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
 
        if (state.tokens[blkIdx].type !== 'inline') { continue; }
 
        if (SCOPED_ABBR_TEST_RE.test(state.tokens[blkIdx].content)) {
          replace_scoped(state.tokens[blkIdx].children);
        }
 
        if (RARE_RE.test(state.tokens[blkIdx].content)) {
          replace_rare(state.tokens[blkIdx].children);
        }
 
      }
    };
 
    var isWhiteSpace$1   = utils$1.isWhiteSpace;
    var isPunctChar$1    = utils$1.isPunctChar;
    var isMdAsciiPunct$1 = utils$1.isMdAsciiPunct;
 
    var QUOTE_TEST_RE = /['"]/;
    var QUOTE_RE = /['"]/g;
    var APOSTROPHE = '\u2019'; /* ’ */
 
 
    function replaceAt(str, index, ch) {
      return str.slice(0, index) + ch + str.slice(index + 1);
    }
 
    function process_inlines(tokens, state) {
      var i, token, text, t, pos, max, thisLevel, item, lastChar, nextChar,
          isLastPunctChar, isNextPunctChar, isLastWhiteSpace, isNextWhiteSpace,
          canOpen, canClose, j, isSingle, stack, openQuote, closeQuote;
 
      stack = [];
 
      for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
 
        thisLevel = tokens[i].level;
 
        for (j = stack.length - 1; j >= 0; j--) {
          if (stack[j].level <= thisLevel) { break; }
        }
        stack.length = j + 1;
 
        if (token.type !== 'text') { continue; }
 
        text = token.content;
        pos = 0;
        max = text.length;
 
        /*eslint no-labels:0,block-scoped-var:0*/
        OUTER:
        while (pos < max) {
          QUOTE_RE.lastIndex = pos;
          t = QUOTE_RE.exec(text);
          if (!t) { break; }
 
          canOpen = canClose = true;
          pos = t.index + 1;
          isSingle = (t[0] === "'");
 
          // Find previous character,
          // default to space if it's the beginning of the line
          //
          lastChar = 0x20;
 
          if (t.index - 1 >= 0) {
            lastChar = text.charCodeAt(t.index - 1);
          } else {
            for (j = i - 1; j >= 0; j--) {
              if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // lastChar defaults to 0x20
              if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'
 
              lastChar = tokens[j].content.charCodeAt(tokens[j].content.length - 1);
              break;
            }
          }
 
          // Find next character,
          // default to space if it's the end of the line
          //
          nextChar = 0x20;
 
          if (pos < max) {
            nextChar = text.charCodeAt(pos);
          } else {
            for (j = i + 1; j < tokens.length; j++) {
              if (tokens[j].type === 'softbreak' || tokens[j].type === 'hardbreak') break; // nextChar defaults to 0x20
              if (!tokens[j].content) continue; // should skip all tokens except 'text', 'html_inline' or 'code_inline'
 
              nextChar = tokens[j].content.charCodeAt(0);
              break;
            }
          }
 
          isLastPunctChar = isMdAsciiPunct$1(lastChar) || isPunctChar$1(String.fromCharCode(lastChar));
          isNextPunctChar = isMdAsciiPunct$1(nextChar) || isPunctChar$1(String.fromCharCode(nextChar));
 
          isLastWhiteSpace = isWhiteSpace$1(lastChar);
          isNextWhiteSpace = isWhiteSpace$1(nextChar);
 
          if (isNextWhiteSpace) {
            canOpen = false;
          } else if (isNextPunctChar) {
            if (!(isLastWhiteSpace || isLastPunctChar)) {
              canOpen = false;
            }
          }
 
          if (isLastWhiteSpace) {
            canClose = false;
          } else if (isLastPunctChar) {
            if (!(isNextWhiteSpace || isNextPunctChar)) {
              canClose = false;
            }
          }
 
          if (nextChar === 0x22 /* " */ && t[0] === '"') {
            if (lastChar >= 0x30 /* 0 */ && lastChar <= 0x39 /* 9 */) {
              // special case: 1"" - count first quote as an inch
              canClose = canOpen = false;
            }
          }
 
          if (canOpen && canClose) {
            // Replace quotes in the middle of punctuation sequence, but not
            // in the middle of the words, i.e.:
            //
            // 1. foo " bar " baz - not replaced
            // 2. foo-"-bar-"-baz - replaced
            // 3. foo"bar"baz     - not replaced
            //
            canOpen = isLastPunctChar;
            canClose = isNextPunctChar;
          }
 
          if (!canOpen && !canClose) {
            // middle of word
            if (isSingle) {
              token.content = replaceAt(token.content, t.index, APOSTROPHE);
            }
            continue;
          }
 
          if (canClose) {
            // this could be a closing quote, rewind the stack to get a match
            for (j = stack.length - 1; j >= 0; j--) {
              item = stack[j];
              if (stack[j].level < thisLevel) { break; }
              if (item.single === isSingle && stack[j].level === thisLevel) {
                item = stack[j];
 
                if (isSingle) {
                  openQuote = state.md.options.quotes[2];
                  closeQuote = state.md.options.quotes[3];
                } else {
                  openQuote = state.md.options.quotes[0];
                  closeQuote = state.md.options.quotes[1];
                }
 
                // replace token.content *before* tokens[item.token].content,
                // because, if they are pointing at the same token, replaceAt
                // could mess up indices when quote length != 1
                token.content = replaceAt(token.content, t.index, closeQuote);
                tokens[item.token].content = replaceAt(
                  tokens[item.token].content, item.pos, openQuote);
 
                pos += closeQuote.length - 1;
                if (item.token === i) { pos += openQuote.length - 1; }
 
                text = token.content;
                max = text.length;
 
                stack.length = j;
                continue OUTER;
              }
            }
          }
 
          if (canOpen) {
            stack.push({
              token: i,
              pos: t.index,
              single: isSingle,
              level: thisLevel
            });
          } else if (canClose && isSingle) {
            token.content = replaceAt(token.content, t.index, APOSTROPHE);
          }
        }
      }
    }
 
 
    var smartquotes = function smartquotes(state) {
      /*eslint max-depth:0*/
      var blkIdx;
 
      if (!state.md.options.typographer) { return; }
 
      for (blkIdx = state.tokens.length - 1; blkIdx >= 0; blkIdx--) {
 
        if (state.tokens[blkIdx].type !== 'inline' ||
            !QUOTE_TEST_RE.test(state.tokens[blkIdx].content)) {
          continue;
        }
 
        process_inlines(state.tokens[blkIdx].children, state);
      }
    };
 
    var text_join = function text_join(state) {
      var j, l, tokens, curr, max, last,
          blockTokens = state.tokens;
 
      for (j = 0, l = blockTokens.length; j < l; j++) {
        if (blockTokens[j].type !== 'inline') continue;
 
        tokens = blockTokens[j].children;
        max = tokens.length;
 
        for (curr = 0; curr < max; curr++) {
          if (tokens[curr].type === 'text_special') {
            tokens[curr].type = 'text';
          }
        }
 
        for (curr = last = 0; curr < max; curr++) {
          if (tokens[curr].type === 'text' &&
              curr + 1 < max &&
              tokens[curr + 1].type === 'text') {
 
            // collapse two adjacent text nodes
            tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
          } else {
            if (curr !== last) { tokens[last] = tokens[curr]; }
 
            last++;
          }
        }
 
        if (curr !== last) {
          tokens.length = last;
        }
      }
    };
 
    /**
     * class Token
     **/
 
    /**
     * new Token(type, tag, nesting)
     *
     * Create new token and fill passed properties.
     **/
    function Token$3(type, tag, nesting) {
      /**
       * Token#type -> String
       *
       * Type of the token (string, e.g. "paragraph_open")
       **/
      this.type     = type;
 
      /**
       * Token#tag -> String
       *
       * html tag name, e.g. "p"
       **/
      this.tag      = tag;
 
      /**
       * Token#attrs -> Array
       *
       * Html attributes. Format: `[ [ name1, value1 ], [ name2, value2 ] ]`
       **/
      this.attrs    = null;
 
      /**
       * Token#map -> Array
       *
       * Source map info. Format: `[ line_begin, line_end ]`
       **/
      this.map      = null;
 
      /**
       * Token#nesting -> Number
       *
       * Level change (number in {-1, 0, 1} set), where:
       *
       * -  `1` means the tag is opening
       * -  `0` means the tag is self-closing
       * - `-1` means the tag is closing
       **/
      this.nesting  = nesting;
 
      /**
       * Token#level -> Number
       *
       * nesting level, the same as `state.level`
       **/
      this.level    = 0;
 
      /**
       * Token#children -> Array
       *
       * An array of child nodes (inline and img tokens)
       **/
      this.children = null;
 
      /**
       * Token#content -> String
       *
       * In a case of self-closing tag (code, html, fence, etc.),
       * it has contents of this tag.
       **/
      this.content  = '';
 
      /**
       * Token#markup -> String
       *
       * '*' or '_' for emphasis, fence string for fence, etc.
       **/
      this.markup   = '';
 
      /**
       * Token#info -> String
       *
       * Additional information:
       *
       * - Info string for "fence" tokens
       * - The value "auto" for autolink "link_open" and "link_close" tokens
       * - The string value of the item marker for ordered-list "list_item_open" tokens
       **/
      this.info     = '';
 
      /**
       * Token#meta -> Object
       *
       * A place for plugins to store an arbitrary data
       **/
      this.meta     = null;
 
      /**
       * Token#block -> Boolean
       *
       * True for block-level tokens, false for inline tokens.
       * Used in renderer to calculate line breaks
       **/
      this.block    = false;
 
      /**
       * Token#hidden -> Boolean
       *
       * If it's true, ignore this element when rendering. Used for tight lists
       * to hide paragraphs.
       **/
      this.hidden   = false;
    }
 
 
    /**
     * Token.attrIndex(name) -> Number
     *
     * Search attribute index by name.
     **/
    Token$3.prototype.attrIndex = function attrIndex(name) {
      var attrs, i, len;
 
      if (!this.attrs) { return -1; }
 
      attrs = this.attrs;
 
      for (i = 0, len = attrs.length; i < len; i++) {
        if (attrs[i][0] === name) { return i; }
      }
      return -1;
    };
 
 
    /**
     * Token.attrPush(attrData)
     *
     * Add `[ name, value ]` attribute to list. Init attrs if necessary
     **/
    Token$3.prototype.attrPush = function attrPush(attrData) {
      if (this.attrs) {
        this.attrs.push(attrData);
      } else {
        this.attrs = [ attrData ];
      }
    };
 
 
    /**
     * Token.attrSet(name, value)
     *
     * Set `name` attribute to `value`. Override old value if exists.
     **/
    Token$3.prototype.attrSet = function attrSet(name, value) {
      var idx = this.attrIndex(name),
          attrData = [ name, value ];
 
      if (idx < 0) {
        this.attrPush(attrData);
      } else {
        this.attrs[idx] = attrData;
      }
    };
 
 
    /**
     * Token.attrGet(name)
     *
     * Get the value of attribute `name`, or null if it does not exist.
     **/
    Token$3.prototype.attrGet = function attrGet(name) {
      var idx = this.attrIndex(name), value = null;
      if (idx >= 0) {
        value = this.attrs[idx][1];
      }
      return value;
    };
 
 
    /**
     * Token.attrJoin(name, value)
     *
     * Join value to existing attribute via space. Or create new attribute if not
     * exists. Useful to operate with token classes.
     **/
    Token$3.prototype.attrJoin = function attrJoin(name, value) {
      var idx = this.attrIndex(name);
 
      if (idx < 0) {
        this.attrPush([ name, value ]);
      } else {
        this.attrs[idx][1] = this.attrs[idx][1] + ' ' + value;
      }
    };
 
 
    var token = Token$3;
 
    var Token$2 = token;
 
 
    function StateCore(src, md, env) {
      this.src = src;
      this.env = env;
      this.tokens = [];
      this.inlineMode = false;
      this.md = md; // link to parser instance
    }
 
    // re-export Token class to use in core rules
    StateCore.prototype.Token = Token$2;
 
 
    var state_core = StateCore;
 
    /** internal
     * class Core
     *
     * Top-level rules executor. Glues block/inline parsers and does intermediate
     * transformations.
     **/
 
 
    var Ruler$2  = ruler;
 
 
    var _rules$2 = [
      [ 'normalize',      normalize      ],
      [ 'block',          block          ],
      [ 'inline',         inline         ],
      [ 'linkify',        linkify$1        ],
      [ 'replacements',   replacements   ],
      [ 'smartquotes',    smartquotes    ],
      // `text_join` finds `text_special` tokens (for escape sequences)
      // and joins them with the rest of the text
      [ 'text_join',      text_join      ]
    ];
 
 
    /**
     * new Core()
     **/
    function Core() {
      /**
       * Core#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of core rules.
       **/
      this.ruler = new Ruler$2();
 
      for (var i = 0; i < _rules$2.length; i++) {
        this.ruler.push(_rules$2[i][0], _rules$2[i][1]);
      }
    }
 
 
    /**
     * Core.process(state)
     *
     * Executes core chain rules.
     **/
    Core.prototype.process = function (state) {
      var i, l, rules;
 
      rules = this.ruler.getRules('');
 
      for (i = 0, l = rules.length; i < l; i++) {
        rules[i](state);
      }
    };
 
    Core.prototype.State = state_core;
 
 
    var parser_core = Core;
 
    var isSpace$a = utils$1.isSpace;
 
 
    function getLine(state, line) {
      var pos = state.bMarks[line] + state.tShift[line],
          max = state.eMarks[line];
 
      return state.src.slice(pos, max);
    }
 
    function escapedSplit(str) {
      var result = [],
          pos = 0,
          max = str.length,
          ch,
          isEscaped = false,
          lastPos = 0,
          current = '';
 
      ch  = str.charCodeAt(pos);
 
      while (pos < max) {
        if (ch === 0x7c/* | */) {
          if (!isEscaped) {
            // pipe separating cells, '|'
            result.push(current + str.substring(lastPos, pos));
            current = '';
            lastPos = pos + 1;
          } else {
            // escaped pipe, '\|'
            current += str.substring(lastPos, pos - 1);
            lastPos = pos;
          }
        }
 
        isEscaped = (ch === 0x5c/* \ */);
        pos++;
 
        ch = str.charCodeAt(pos);
      }
 
      result.push(current + str.substring(lastPos));
 
      return result;
    }
 
 
    var table = function table(state, startLine, endLine, silent) {
      var ch, lineText, pos, i, l, nextLine, columns, columnCount, token,
          aligns, t, tableLines, tbodyLines, oldParentType, terminate,
          terminatorRules, firstCh, secondCh;
 
      // should have at least two lines
      if (startLine + 2 > endLine) { return false; }
 
      nextLine = startLine + 1;
 
      if (state.sCount[nextLine] < state.blkIndent) { return false; }
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[nextLine] - state.blkIndent >= 4) { return false; }
 
      // first character of the second line should be '|', '-', ':',
      // and no other characters are allowed but spaces;
      // basically, this is the equivalent of /^[-:|][-:|\s]*$/ regexp
 
      pos = state.bMarks[nextLine] + state.tShift[nextLine];
      if (pos >= state.eMarks[nextLine]) { return false; }
 
      firstCh = state.src.charCodeAt(pos++);
      if (firstCh !== 0x7C/* | */ && firstCh !== 0x2D/* - */ && firstCh !== 0x3A/* : */) { return false; }
 
      if (pos >= state.eMarks[nextLine]) { return false; }
 
      secondCh = state.src.charCodeAt(pos++);
      if (secondCh !== 0x7C/* | */ && secondCh !== 0x2D/* - */ && secondCh !== 0x3A/* : */ && !isSpace$a(secondCh)) {
        return false;
      }
 
      // if first character is '-', then second character must not be a space
      // (due to parsing ambiguity with list)
      if (firstCh === 0x2D/* - */ && isSpace$a(secondCh)) { return false; }
 
      while (pos < state.eMarks[nextLine]) {
        ch = state.src.charCodeAt(pos);
 
        if (ch !== 0x7C/* | */ && ch !== 0x2D/* - */ && ch !== 0x3A/* : */ && !isSpace$a(ch)) { return false; }
 
        pos++;
      }
 
      lineText = getLine(state, startLine + 1);
 
      columns = lineText.split('|');
      aligns = [];
      for (i = 0; i < columns.length; i++) {
        t = columns[i].trim();
        if (!t) {
          // allow empty columns before and after table, but not in between columns;
          // e.g. allow ` |---| `, disallow ` ---||--- `
          if (i === 0 || i === columns.length - 1) {
            continue;
          } else {
            return false;
          }
        }
 
        if (!/^:?-+:?$/.test(t)) { return false; }
        if (t.charCodeAt(t.length - 1) === 0x3A/* : */) {
          aligns.push(t.charCodeAt(0) === 0x3A/* : */ ? 'center' : 'right');
        } else if (t.charCodeAt(0) === 0x3A/* : */) {
          aligns.push('left');
        } else {
          aligns.push('');
        }
      }
 
      lineText = getLine(state, startLine).trim();
      if (lineText.indexOf('|') === -1) { return false; }
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
      columns = escapedSplit(lineText);
      if (columns.length && columns[0] === '') columns.shift();
      if (columns.length && columns[columns.length - 1] === '') columns.pop();
 
      // header row will define an amount of columns in the entire table,
      // and align row should be exactly the same (the rest of the rows can differ)
      columnCount = columns.length;
      if (columnCount === 0 || columnCount !== aligns.length) { return false; }
 
      if (silent) { return true; }
 
      oldParentType = state.parentType;
      state.parentType = 'table';
 
      // use 'blockquote' lists for termination because it's
      // the most similar to tables
      terminatorRules = state.md.block.ruler.getRules('blockquote');
 
      token     = state.push('table_open', 'table', 1);
      token.map = tableLines = [ startLine, 0 ];
 
      token     = state.push('thead_open', 'thead', 1);
      token.map = [ startLine, startLine + 1 ];
 
      token     = state.push('tr_open', 'tr', 1);
      token.map = [ startLine, startLine + 1 ];
 
      for (i = 0; i < columns.length; i++) {
        token          = state.push('th_open', 'th', 1);
        if (aligns[i]) {
          token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
        }
 
        token          = state.push('inline', '', 0);
        token.content  = columns[i].trim();
        token.children = [];
 
        token          = state.push('th_close', 'th', -1);
      }
 
      token     = state.push('tr_close', 'tr', -1);
      token     = state.push('thead_close', 'thead', -1);
 
      for (nextLine = startLine + 2; nextLine < endLine; nextLine++) {
        if (state.sCount[nextLine] < state.blkIndent) { break; }
 
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
 
        if (terminate) { break; }
        lineText = getLine(state, nextLine).trim();
        if (!lineText) { break; }
        if (state.sCount[nextLine] - state.blkIndent >= 4) { break; }
        columns = escapedSplit(lineText);
        if (columns.length && columns[0] === '') columns.shift();
        if (columns.length && columns[columns.length - 1] === '') columns.pop();
 
        if (nextLine === startLine + 2) {
          token     = state.push('tbody_open', 'tbody', 1);
          token.map = tbodyLines = [ startLine + 2, 0 ];
        }
 
        token     = state.push('tr_open', 'tr', 1);
        token.map = [ nextLine, nextLine + 1 ];
 
        for (i = 0; i < columnCount; i++) {
          token          = state.push('td_open', 'td', 1);
          if (aligns[i]) {
            token.attrs  = [ [ 'style', 'text-align:' + aligns[i] ] ];
          }
 
          token          = state.push('inline', '', 0);
          token.content  = columns[i] ? columns[i].trim() : '';
          token.children = [];
 
          token          = state.push('td_close', 'td', -1);
        }
        token = state.push('tr_close', 'tr', -1);
      }
 
      if (tbodyLines) {
        token = state.push('tbody_close', 'tbody', -1);
        tbodyLines[1] = nextLine;
      }
 
      token = state.push('table_close', 'table', -1);
      tableLines[1] = nextLine;
 
      state.parentType = oldParentType;
      state.line = nextLine;
      return true;
    };
 
    var code = function code(state, startLine, endLine/*, silent*/) {
      var nextLine, last, token;
 
      if (state.sCount[startLine] - state.blkIndent < 4) { return false; }
 
      last = nextLine = startLine + 1;
 
      while (nextLine < endLine) {
        if (state.isEmpty(nextLine)) {
          nextLine++;
          continue;
        }
 
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          nextLine++;
          last = nextLine;
          continue;
        }
        break;
      }
 
      state.line = last;
 
      token         = state.push('code_block', 'code', 0);
      token.content = state.getLines(startLine, last, 4 + state.blkIndent, false) + '\n';
      token.map     = [ startLine, state.line ];
 
      return true;
    };
 
    var fence = function fence(state, startLine, endLine, silent) {
      var marker, len, params, nextLine, mem, token, markup,
          haveEndMarker = false,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      if (pos + 3 > max) { return false; }
 
      marker = state.src.charCodeAt(pos);
 
      if (marker !== 0x7E/* ~ */ && marker !== 0x60 /* ` */) {
        return false;
      }
 
      // scan marker length
      mem = pos;
      pos = state.skipChars(pos, marker);
 
      len = pos - mem;
 
      if (len < 3) { return false; }
 
      markup = state.src.slice(mem, pos);
      params = state.src.slice(pos, max);
 
      if (marker === 0x60 /* ` */) {
        if (params.indexOf(String.fromCharCode(marker)) >= 0) {
          return false;
        }
      }
 
      // Since start is found, we can report success here in validation mode
      if (silent) { return true; }
 
      // search end of block
      nextLine = startLine;
 
      for (;;) {
        nextLine++;
        if (nextLine >= endLine) {
          // unclosed block should be autoclosed by end of document.
          // also block seems to be autoclosed by end of parent
          break;
        }
 
        pos = mem = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
 
        if (pos < max && state.sCount[nextLine] < state.blkIndent) {
          // non-empty line with negative indent should stop the list:
          // - ```
          //  test
          break;
        }
 
        if (state.src.charCodeAt(pos) !== marker) { continue; }
 
        if (state.sCount[nextLine] - state.blkIndent >= 4) {
          // closing fence should be indented less than 4 spaces
          continue;
        }
 
        pos = state.skipChars(pos, marker);
 
        // closing code fence must be at least as long as the opening one
        if (pos - mem < len) { continue; }
 
        // make sure tail has spaces only
        pos = state.skipSpaces(pos);
 
        if (pos < max) { continue; }
 
        haveEndMarker = true;
        // found!
        break;
      }
 
      // If a fence has heading spaces, they should be removed from its inner block
      len = state.sCount[startLine];
 
      state.line = nextLine + (haveEndMarker ? 1 : 0);
 
      token         = state.push('fence', 'code', 0);
      token.info    = params;
      token.content = state.getLines(startLine + 1, nextLine, len, true);
      token.markup  = markup;
      token.map     = [ startLine, state.line ];
 
      return true;
    };
 
    var isSpace$9 = utils$1.isSpace;
 
 
    var blockquote = function blockquote(state, startLine, endLine, silent) {
      var adjustTab,
          ch,
          i,
          initial,
          l,
          lastLineEmpty,
          lines,
          nextLine,
          offset,
          oldBMarks,
          oldBSCount,
          oldIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          spaceAfterMarker,
          terminate,
          terminatorRules,
          token,
          isOutdented,
          oldLineMax = state.lineMax,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      // check the block quote marker
      if (state.src.charCodeAt(pos++) !== 0x3E/* > */) { return false; }
 
      // we know that it's going to be a valid blockquote,
      // so no point trying to find the end of it in silent mode
      if (silent) { return true; }
 
      // set offset past spaces and ">"
      initial = offset = state.sCount[startLine] + 1;
 
      // skip one optional space after '>'
      if (state.src.charCodeAt(pos) === 0x20 /* space */) {
        // ' >   test '
        //     ^ -- position start of line here:
        pos++;
        initial++;
        offset++;
        adjustTab = false;
        spaceAfterMarker = true;
      } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
        spaceAfterMarker = true;
 
        if ((state.bsCount[startLine] + offset) % 4 === 3) {
          // '  >\t  test '
          //       ^ -- position start of line here (tab has width===1)
          pos++;
          initial++;
          offset++;
          adjustTab = false;
        } else {
          // ' >\t  test '
          //    ^ -- position start of line here + shift bsCount slightly
          //         to make extra space appear
          adjustTab = true;
        }
      } else {
        spaceAfterMarker = false;
      }
 
      oldBMarks = [ state.bMarks[startLine] ];
      state.bMarks[startLine] = pos;
 
      while (pos < max) {
        ch = state.src.charCodeAt(pos);
 
        if (isSpace$9(ch)) {
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[startLine] + (adjustTab ? 1 : 0)) % 4;
          } else {
            offset++;
          }
        } else {
          break;
        }
 
        pos++;
      }
 
      oldBSCount = [ state.bsCount[startLine] ];
      state.bsCount[startLine] = state.sCount[startLine] + 1 + (spaceAfterMarker ? 1 : 0);
 
      lastLineEmpty = pos >= max;
 
      oldSCount = [ state.sCount[startLine] ];
      state.sCount[startLine] = offset - initial;
 
      oldTShift = [ state.tShift[startLine] ];
      state.tShift[startLine] = pos - state.bMarks[startLine];
 
      terminatorRules = state.md.block.ruler.getRules('blockquote');
 
      oldParentType = state.parentType;
      state.parentType = 'blockquote';
 
      // Search the end of the block
      //
      // Block ends with either:
      //  1. an empty line outside:
      //     ```
      //     > test
      //
      //     ```
      //  2. an empty line inside:
      //     ```
      //     >
      //     test
      //     ```
      //  3. another tag:
      //     ```
      //     > test
      //      - - -
      //     ```
      for (nextLine = startLine + 1; nextLine < endLine; nextLine++) {
        // check if it's outdented, i.e. it's inside list item and indented
        // less than said list item:
        //
        // ```
        // 1. anything
        //    > current blockquote
        // 2. checking this line
        // ```
        isOutdented = state.sCount[nextLine] < state.blkIndent;
 
        pos = state.bMarks[nextLine] + state.tShift[nextLine];
        max = state.eMarks[nextLine];
 
        if (pos >= max) {
          // Case 1: line is not inside the blockquote, and this line is empty.
          break;
        }
 
        if (state.src.charCodeAt(pos++) === 0x3E/* > */ && !isOutdented) {
          // This line is inside the blockquote.
 
          // set offset past spaces and ">"
          initial = offset = state.sCount[nextLine] + 1;
 
          // skip one optional space after '>'
          if (state.src.charCodeAt(pos) === 0x20 /* space */) {
            // ' >   test '
            //     ^ -- position start of line here:
            pos++;
            initial++;
            offset++;
            adjustTab = false;
            spaceAfterMarker = true;
          } else if (state.src.charCodeAt(pos) === 0x09 /* tab */) {
            spaceAfterMarker = true;
 
            if ((state.bsCount[nextLine] + offset) % 4 === 3) {
              // '  >\t  test '
              //       ^ -- position start of line here (tab has width===1)
              pos++;
              initial++;
              offset++;
              adjustTab = false;
            } else {
              // ' >\t  test '
              //    ^ -- position start of line here + shift bsCount slightly
              //         to make extra space appear
              adjustTab = true;
            }
          } else {
            spaceAfterMarker = false;
          }
 
          oldBMarks.push(state.bMarks[nextLine]);
          state.bMarks[nextLine] = pos;
 
          while (pos < max) {
            ch = state.src.charCodeAt(pos);
 
            if (isSpace$9(ch)) {
              if (ch === 0x09) {
                offset += 4 - (offset + state.bsCount[nextLine] + (adjustTab ? 1 : 0)) % 4;
              } else {
                offset++;
              }
            } else {
              break;
            }
 
            pos++;
          }
 
          lastLineEmpty = pos >= max;
 
          oldBSCount.push(state.bsCount[nextLine]);
          state.bsCount[nextLine] = state.sCount[nextLine] + 1 + (spaceAfterMarker ? 1 : 0);
 
          oldSCount.push(state.sCount[nextLine]);
          state.sCount[nextLine] = offset - initial;
 
          oldTShift.push(state.tShift[nextLine]);
          state.tShift[nextLine] = pos - state.bMarks[nextLine];
          continue;
        }
 
        // Case 2: line is not inside the blockquote, and the last line was empty.
        if (lastLineEmpty) { break; }
 
        // Case 3: another tag found.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
 
        if (terminate) {
          // Quirk to enforce "hard termination mode" for paragraphs;
          // normally if you call `tokenize(state, startLine, nextLine)`,
          // paragraphs will look below nextLine for paragraph continuation,
          // but if blockquote is terminated by another tag, they shouldn't
          state.lineMax = nextLine;
 
          if (state.blkIndent !== 0) {
            // state.blkIndent was non-zero, we now set it to zero,
            // so we need to re-calculate all offsets to appear as
            // if indent wasn't changed
            oldBMarks.push(state.bMarks[nextLine]);
            oldBSCount.push(state.bsCount[nextLine]);
            oldTShift.push(state.tShift[nextLine]);
            oldSCount.push(state.sCount[nextLine]);
            state.sCount[nextLine] -= state.blkIndent;
          }
 
          break;
        }
 
        oldBMarks.push(state.bMarks[nextLine]);
        oldBSCount.push(state.bsCount[nextLine]);
        oldTShift.push(state.tShift[nextLine]);
        oldSCount.push(state.sCount[nextLine]);
 
        // A negative indentation means that this is a paragraph continuation
        //
        state.sCount[nextLine] = -1;
      }
 
      oldIndent = state.blkIndent;
      state.blkIndent = 0;
 
      token        = state.push('blockquote_open', 'blockquote', 1);
      token.markup = '>';
      token.map    = lines = [ startLine, 0 ];
 
      state.md.block.tokenize(state, startLine, nextLine);
 
      token        = state.push('blockquote_close', 'blockquote', -1);
      token.markup = '>';
 
      state.lineMax = oldLineMax;
      state.parentType = oldParentType;
      lines[1] = state.line;
 
      // Restore original tShift; this might not be necessary since the parser
      // has already been here, but just to make sure we can do that.
      for (i = 0; i < oldTShift.length; i++) {
        state.bMarks[i + startLine] = oldBMarks[i];
        state.tShift[i + startLine] = oldTShift[i];
        state.sCount[i + startLine] = oldSCount[i];
        state.bsCount[i + startLine] = oldBSCount[i];
      }
      state.blkIndent = oldIndent;
 
      return true;
    };
 
    var isSpace$8 = utils$1.isSpace;
 
 
    var hr = function hr(state, startLine, endLine, silent) {
      var marker, cnt, ch, token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      marker = state.src.charCodeAt(pos++);
 
      // Check hr marker
      if (marker !== 0x2A/* * */ &&
          marker !== 0x2D/* - */ &&
          marker !== 0x5F/* _ */) {
        return false;
      }
 
      // markers can be mixed with spaces, but there should be at least 3 of them
 
      cnt = 1;
      while (pos < max) {
        ch = state.src.charCodeAt(pos++);
        if (ch !== marker && !isSpace$8(ch)) { return false; }
        if (ch === marker) { cnt++; }
      }
 
      if (cnt < 3) { return false; }
 
      if (silent) { return true; }
 
      state.line = startLine + 1;
 
      token        = state.push('hr', 'hr', 0);
      token.map    = [ startLine, state.line ];
      token.markup = Array(cnt + 1).join(String.fromCharCode(marker));
 
      return true;
    };
 
    var isSpace$7 = utils$1.isSpace;
 
 
    // Search `[-+*][\n ]`, returns next pos after marker on success
    // or -1 on fail.
    function skipBulletListMarker(state, startLine) {
      var marker, pos, max, ch;
 
      pos = state.bMarks[startLine] + state.tShift[startLine];
      max = state.eMarks[startLine];
 
      marker = state.src.charCodeAt(pos++);
      // Check bullet
      if (marker !== 0x2A/* * */ &&
          marker !== 0x2D/* - */ &&
          marker !== 0x2B/* + */) {
        return -1;
      }
 
      if (pos < max) {
        ch = state.src.charCodeAt(pos);
 
        if (!isSpace$7(ch)) {
          // " -test " - is not a list item
          return -1;
        }
      }
 
      return pos;
    }
 
    // Search `\d+[.)][\n ]`, returns next pos after marker on success
    // or -1 on fail.
    function skipOrderedListMarker(state, startLine) {
      var ch,
          start = state.bMarks[startLine] + state.tShift[startLine],
          pos = start,
          max = state.eMarks[startLine];
 
      // List marker should have at least 2 chars (digit + dot)
      if (pos + 1 >= max) { return -1; }
 
      ch = state.src.charCodeAt(pos++);
 
      if (ch < 0x30/* 0 */ || ch > 0x39/* 9 */) { return -1; }
 
      for (;;) {
        // EOL -> fail
        if (pos >= max) { return -1; }
 
        ch = state.src.charCodeAt(pos++);
 
        if (ch >= 0x30/* 0 */ && ch <= 0x39/* 9 */) {
 
          // List marker should have no more than 9 digits
          // (prevents integer overflow in browsers)
          if (pos - start >= 10) { return -1; }
 
          continue;
        }
 
        // found valid marker
        if (ch === 0x29/* ) */ || ch === 0x2e/* . */) {
          break;
        }
 
        return -1;
      }
 
 
      if (pos < max) {
        ch = state.src.charCodeAt(pos);
 
        if (!isSpace$7(ch)) {
          // " 1.test " - is not a list item
          return -1;
        }
      }
      return pos;
    }
 
    function markTightParagraphs(state, idx) {
      var i, l,
          level = state.level + 2;
 
      for (i = idx + 2, l = state.tokens.length - 2; i < l; i++) {
        if (state.tokens[i].level === level && state.tokens[i].type === 'paragraph_open') {
          state.tokens[i + 2].hidden = true;
          state.tokens[i].hidden = true;
          i += 2;
        }
      }
    }
 
 
    var list = function list(state, startLine, endLine, silent) {
      var ch,
          contentStart,
          i,
          indent,
          indentAfterMarker,
          initial,
          isOrdered,
          itemLines,
          l,
          listLines,
          listTokIdx,
          markerCharCode,
          markerValue,
          max,
          nextLine,
          offset,
          oldListIndent,
          oldParentType,
          oldSCount,
          oldTShift,
          oldTight,
          pos,
          posAfterMarker,
          prevEmptyEnd,
          start,
          terminate,
          terminatorRules,
          token,
          isTerminatingParagraph = false,
          tight = true;
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      // Special case:
      //  - item 1
      //   - item 2
      //    - item 3
      //     - item 4
      //      - this one is a paragraph continuation
      if (state.listIndent >= 0 &&
          state.sCount[startLine] - state.listIndent >= 4 &&
          state.sCount[startLine] < state.blkIndent) {
        return false;
      }
 
      // limit conditions when list can interrupt
      // a paragraph (validation mode only)
      if (silent && state.parentType === 'paragraph') {
        // Next list item should still terminate previous list item;
        //
        // This code can fail if plugins use blkIndent as well as lists,
        // but I hope the spec gets fixed long before that happens.
        //
        if (state.sCount[startLine] >= state.blkIndent) {
          isTerminatingParagraph = true;
        }
      }
 
      // Detect list type and position after marker
      if ((posAfterMarker = skipOrderedListMarker(state, startLine)) >= 0) {
        isOrdered = true;
        start = state.bMarks[startLine] + state.tShift[startLine];
        markerValue = Number(state.src.slice(start, posAfterMarker - 1));
 
        // If we're starting a new ordered list right after
        // a paragraph, it should start with 1.
        if (isTerminatingParagraph && markerValue !== 1) return false;
 
      } else if ((posAfterMarker = skipBulletListMarker(state, startLine)) >= 0) {
        isOrdered = false;
 
      } else {
        return false;
      }
 
      // If we're starting a new unordered list right after
      // a paragraph, first line should not be empty.
      if (isTerminatingParagraph) {
        if (state.skipSpaces(posAfterMarker) >= state.eMarks[startLine]) return false;
      }
 
      // We should terminate list on style change. Remember first one to compare.
      markerCharCode = state.src.charCodeAt(posAfterMarker - 1);
 
      // For validation mode we can terminate immediately
      if (silent) { return true; }
 
      // Start list
      listTokIdx = state.tokens.length;
 
      if (isOrdered) {
        token       = state.push('ordered_list_open', 'ol', 1);
        if (markerValue !== 1) {
          token.attrs = [ [ 'start', markerValue ] ];
        }
 
      } else {
        token       = state.push('bullet_list_open', 'ul', 1);
      }
 
      token.map    = listLines = [ startLine, 0 ];
      token.markup = String.fromCharCode(markerCharCode);
 
      //
      // Iterate list items
      //
 
      nextLine = startLine;
      prevEmptyEnd = false;
      terminatorRules = state.md.block.ruler.getRules('list');
 
      oldParentType = state.parentType;
      state.parentType = 'list';
 
      while (nextLine < endLine) {
        pos = posAfterMarker;
        max = state.eMarks[nextLine];
 
        initial = offset = state.sCount[nextLine] + posAfterMarker - (state.bMarks[startLine] + state.tShift[startLine]);
 
        while (pos < max) {
          ch = state.src.charCodeAt(pos);
 
          if (ch === 0x09) {
            offset += 4 - (offset + state.bsCount[nextLine]) % 4;
          } else if (ch === 0x20) {
            offset++;
          } else {
            break;
          }
 
          pos++;
        }
 
        contentStart = pos;
 
        if (contentStart >= max) {
          // trimming space in "-    \n  3" case, indent is 1 here
          indentAfterMarker = 1;
        } else {
          indentAfterMarker = offset - initial;
        }
 
        // If we have more than 4 spaces, the indent is 1
        // (the rest is just indented code block)
        if (indentAfterMarker > 4) { indentAfterMarker = 1; }
 
        // "  -  test"
        //  ^^^^^ - calculating total length of this thing
        indent = initial + indentAfterMarker;
 
        // Run subparser & write tokens
        token        = state.push('list_item_open', 'li', 1);
        token.markup = String.fromCharCode(markerCharCode);
        token.map    = itemLines = [ startLine, 0 ];
        if (isOrdered) {
          token.info = state.src.slice(start, posAfterMarker - 1);
        }
 
        // change current state, then restore it after parser subcall
        oldTight = state.tight;
        oldTShift = state.tShift[startLine];
        oldSCount = state.sCount[startLine];
 
        //  - example list
        // ^ listIndent position will be here
        //   ^ blkIndent position will be here
        //
        oldListIndent = state.listIndent;
        state.listIndent = state.blkIndent;
        state.blkIndent = indent;
 
        state.tight = true;
        state.tShift[startLine] = contentStart - state.bMarks[startLine];
        state.sCount[startLine] = offset;
 
        if (contentStart >= max && state.isEmpty(startLine + 1)) {
          // workaround for this case
          // (list item is empty, list terminates before "foo"):
          // ~~~~~~~~
          //   -
          //
          //     foo
          // ~~~~~~~~
          state.line = Math.min(state.line + 2, endLine);
        } else {
          state.md.block.tokenize(state, startLine, endLine, true);
        }
 
        // If any of list item is tight, mark list as tight
        if (!state.tight || prevEmptyEnd) {
          tight = false;
        }
        // Item become loose if finish with empty line,
        // but we should filter last element, because it means list finish
        prevEmptyEnd = (state.line - startLine) > 1 && state.isEmpty(state.line - 1);
 
        state.blkIndent = state.listIndent;
        state.listIndent = oldListIndent;
        state.tShift[startLine] = oldTShift;
        state.sCount[startLine] = oldSCount;
        state.tight = oldTight;
 
        token        = state.push('list_item_close', 'li', -1);
        token.markup = String.fromCharCode(markerCharCode);
 
        nextLine = startLine = state.line;
        itemLines[1] = nextLine;
        contentStart = state.bMarks[startLine];
 
        if (nextLine >= endLine) { break; }
 
        //
        // Try to check if list is terminated or continued.
        //
        if (state.sCount[nextLine] < state.blkIndent) { break; }
 
        // if it's indented more than 3 spaces, it should be a code block
        if (state.sCount[startLine] - state.blkIndent >= 4) { break; }
 
        // fail if terminating block found
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
 
        // fail if list has another type
        if (isOrdered) {
          posAfterMarker = skipOrderedListMarker(state, nextLine);
          if (posAfterMarker < 0) { break; }
          start = state.bMarks[nextLine] + state.tShift[nextLine];
        } else {
          posAfterMarker = skipBulletListMarker(state, nextLine);
          if (posAfterMarker < 0) { break; }
        }
 
        if (markerCharCode !== state.src.charCodeAt(posAfterMarker - 1)) { break; }
      }
 
      // Finalize list
      if (isOrdered) {
        token = state.push('ordered_list_close', 'ol', -1);
      } else {
        token = state.push('bullet_list_close', 'ul', -1);
      }
      token.markup = String.fromCharCode(markerCharCode);
 
      listLines[1] = nextLine;
      state.line = nextLine;
 
      state.parentType = oldParentType;
 
      // mark paragraphs tight if needed
      if (tight) {
        markTightParagraphs(state, listTokIdx);
      }
 
      return true;
    };
 
    var normalizeReference$2   = utils$1.normalizeReference;
    var isSpace$6              = utils$1.isSpace;
 
 
    var reference = function reference(state, startLine, _endLine, silent) {
      var ch,
          destEndPos,
          destEndLineNo,
          endLine,
          href,
          i,
          l,
          label,
          labelEnd,
          oldParentType,
          res,
          start,
          str,
          terminate,
          terminatorRules,
          title,
          lines = 0,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine],
          nextLine = startLine + 1;
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      if (state.src.charCodeAt(pos) !== 0x5B/* [ */) { return false; }
 
      // Simple check to quickly interrupt scan on [link](url) at the start of line.
      // Can be useful on practice: https://github.com/markdown-it/markdown-it/issues/54
      while (++pos < max) {
        if (state.src.charCodeAt(pos) === 0x5D /* ] */ &&
            state.src.charCodeAt(pos - 1) !== 0x5C/* \ */) {
          if (pos + 1 === max) { return false; }
          if (state.src.charCodeAt(pos + 1) !== 0x3A/* : */) { return false; }
          break;
        }
      }
 
      endLine = state.lineMax;
 
      // jump line-by-line until empty one or EOF
      terminatorRules = state.md.block.ruler.getRules('reference');
 
      oldParentType = state.parentType;
      state.parentType = 'reference';
 
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }
 
        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) { continue; }
 
        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
      }
 
      str = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
      max = str.length;
 
      for (pos = 1; pos < max; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 0x5B /* [ */) {
          return false;
        } else if (ch === 0x5D /* ] */) {
          labelEnd = pos;
          break;
        } else if (ch === 0x0A /* \n */) {
          lines++;
        } else if (ch === 0x5C /* \ */) {
          pos++;
          if (pos < max && str.charCodeAt(pos) === 0x0A) {
            lines++;
          }
        }
      }
 
      if (labelEnd < 0 || str.charCodeAt(labelEnd + 1) !== 0x3A/* : */) { return false; }
 
      // [label]:   destination   'title'
      //         ^^^ skip optional whitespace here
      for (pos = labelEnd + 2; pos < max; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 0x0A) {
          lines++;
        } else if (isSpace$6(ch)) ; else {
          break;
        }
      }
 
      // [label]:   destination   'title'
      //            ^^^^^^^^^^^ parse this
      res = state.md.helpers.parseLinkDestination(str, pos, max);
      if (!res.ok) { return false; }
 
      href = state.md.normalizeLink(res.str);
      if (!state.md.validateLink(href)) { return false; }
 
      pos = res.pos;
      lines += res.lines;
 
      // save cursor state, we could require to rollback later
      destEndPos = pos;
      destEndLineNo = lines;
 
      // [label]:   destination   'title'
      //                       ^^^ skipping those spaces
      start = pos;
      for (; pos < max; pos++) {
        ch = str.charCodeAt(pos);
        if (ch === 0x0A) {
          lines++;
        } else if (isSpace$6(ch)) ; else {
          break;
        }
      }
 
      // [label]:   destination   'title'
      //                          ^^^^^^^ parse this
      res = state.md.helpers.parseLinkTitle(str, pos, max);
      if (pos < max && start !== pos && res.ok) {
        title = res.str;
        pos = res.pos;
        lines += res.lines;
      } else {
        title = '';
        pos = destEndPos;
        lines = destEndLineNo;
      }
 
      // skip trailing spaces until the rest of the line
      while (pos < max) {
        ch = str.charCodeAt(pos);
        if (!isSpace$6(ch)) { break; }
        pos++;
      }
 
      if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        if (title) {
          // garbage at the end of the line after title,
          // but it could still be a valid reference if we roll back
          title = '';
          pos = destEndPos;
          lines = destEndLineNo;
          while (pos < max) {
            ch = str.charCodeAt(pos);
            if (!isSpace$6(ch)) { break; }
            pos++;
          }
        }
      }
 
      if (pos < max && str.charCodeAt(pos) !== 0x0A) {
        // garbage at the end of the line
        return false;
      }
 
      label = normalizeReference$2(str.slice(1, labelEnd));
      if (!label) {
        // CommonMark 0.20 disallows empty labels
        return false;
      }
 
      // Reference can not terminate anything. This check is for safety only.
      /*istanbul ignore if*/
      if (silent) { return true; }
 
      if (typeof state.env.references === 'undefined') {
        state.env.references = {};
      }
      if (typeof state.env.references[label] === 'undefined') {
        state.env.references[label] = { title: title, href: href };
      }
 
      state.parentType = oldParentType;
 
      state.line = startLine + lines + 1;
      return true;
    };
 
    var html_blocks = [
      'address',
      'article',
      'aside',
      'base',
      'basefont',
      'blockquote',
      'body',
      'caption',
      'center',
      'col',
      'colgroup',
      'dd',
      'details',
      'dialog',
      'dir',
      'div',
      'dl',
      'dt',
      'fieldset',
      'figcaption',
      'figure',
      'footer',
      'form',
      'frame',
      'frameset',
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'head',
      'header',
      'hr',
      'html',
      'iframe',
      'legend',
      'li',
      'link',
      'main',
      'menu',
      'menuitem',
      'nav',
      'noframes',
      'ol',
      'optgroup',
      'option',
      'p',
      'param',
      'section',
      'source',
      'summary',
      'table',
      'tbody',
      'td',
      'tfoot',
      'th',
      'thead',
      'title',
      'tr',
      'track',
      'ul'
    ];
 
    var html_re = {};
 
    var attr_name     = '[a-zA-Z_:][a-zA-Z0-9:._-]*';
 
    var unquoted      = '[^"\'=<>`\\x00-\\x20]+';
    var single_quoted = "'[^']*'";
    var double_quoted = '"[^"]*"';
 
    var attr_value  = '(?:' + unquoted + '|' + single_quoted + '|' + double_quoted + ')';
 
    var attribute   = '(?:\\s+' + attr_name + '(?:\\s*=\\s*' + attr_value + ')?)';
 
    var open_tag    = '<[A-Za-z][A-Za-z0-9\\-]*' + attribute + '*\\s*\\/?>';
 
    var close_tag   = '<\\/[A-Za-z][A-Za-z0-9\\-]*\\s*>';
    var comment     = '<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->';
    var processing  = '<[?][\\s\\S]*?[?]>';
    var declaration = '<![A-Z]+\\s+[^>]*>';
    var cdata       = '<!\\[CDATA\\[[\\s\\S]*?\\]\\]>';
 
    var HTML_TAG_RE$1 = new RegExp('^(?:' + open_tag + '|' + close_tag + '|' + comment +
                            '|' + processing + '|' + declaration + '|' + cdata + ')');
    var HTML_OPEN_CLOSE_TAG_RE$1 = new RegExp('^(?:' + open_tag + '|' + close_tag + ')');
 
    html_re.HTML_TAG_RE = HTML_TAG_RE$1;
    html_re.HTML_OPEN_CLOSE_TAG_RE = HTML_OPEN_CLOSE_TAG_RE$1;
 
    var block_names = html_blocks;
    var HTML_OPEN_CLOSE_TAG_RE = html_re.HTML_OPEN_CLOSE_TAG_RE;
 
    // An array of opening and corresponding closing sequences for html tags,
    // last argument defines whether it can terminate a paragraph or not
    //
    var HTML_SEQUENCES = [
      [ /^<(script|pre|style|textarea)(?=(\s|>|$))/i, /<\/(script|pre|style|textarea)>/i, true ],
      [ /^<!--/,        /-->/,   true ],
      [ /^<\?/,         /\?>/,   true ],
      [ /^<![A-Z]/,     />/,     true ],
      [ /^<!\[CDATA\[/, /\]\]>/, true ],
      [ new RegExp('^</?(' + block_names.join('|') + ')(?=(\\s|/?>|$))', 'i'), /^$/, true ],
      [ new RegExp(HTML_OPEN_CLOSE_TAG_RE.source + '\\s*$'),  /^$/, false ]
    ];
 
 
    var html_block = function html_block(state, startLine, endLine, silent) {
      var i, nextLine, token, lineText,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      if (!state.md.options.html) { return false; }
 
      if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }
 
      lineText = state.src.slice(pos, max);
 
      for (i = 0; i < HTML_SEQUENCES.length; i++) {
        if (HTML_SEQUENCES[i][0].test(lineText)) { break; }
      }
 
      if (i === HTML_SEQUENCES.length) { return false; }
 
      if (silent) {
        // true if this sequence can be a terminator, false otherwise
        return HTML_SEQUENCES[i][2];
      }
 
      nextLine = startLine + 1;
 
      // If we are here - we detected HTML block.
      // Let's roll down till block end.
      if (!HTML_SEQUENCES[i][1].test(lineText)) {
        for (; nextLine < endLine; nextLine++) {
          if (state.sCount[nextLine] < state.blkIndent) { break; }
 
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];
          lineText = state.src.slice(pos, max);
 
          if (HTML_SEQUENCES[i][1].test(lineText)) {
            if (lineText.length !== 0) { nextLine++; }
            break;
          }
        }
      }
 
      state.line = nextLine;
 
      token         = state.push('html_block', '', 0);
      token.map     = [ startLine, nextLine ];
      token.content = state.getLines(startLine, nextLine, state.blkIndent, true);
 
      return true;
    };
 
    var isSpace$5 = utils$1.isSpace;
 
 
    var heading = function heading(state, startLine, endLine, silent) {
      var ch, level, tmp, token,
          pos = state.bMarks[startLine] + state.tShift[startLine],
          max = state.eMarks[startLine];
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      ch  = state.src.charCodeAt(pos);
 
      if (ch !== 0x23/* # */ || pos >= max) { return false; }
 
      // count heading level
      level = 1;
      ch = state.src.charCodeAt(++pos);
      while (ch === 0x23/* # */ && pos < max && level <= 6) {
        level++;
        ch = state.src.charCodeAt(++pos);
      }
 
      if (level > 6 || (pos < max && !isSpace$5(ch))) { return false; }
 
      if (silent) { return true; }
 
      // Let's cut tails like '    ###  ' from the end of string
 
      max = state.skipSpacesBack(max, pos);
      tmp = state.skipCharsBack(max, 0x23, pos); // #
      if (tmp > pos && isSpace$5(state.src.charCodeAt(tmp - 1))) {
        max = tmp;
      }
 
      state.line = startLine + 1;
 
      token        = state.push('heading_open', 'h' + String(level), 1);
      token.markup = '########'.slice(0, level);
      token.map    = [ startLine, state.line ];
 
      token          = state.push('inline', '', 0);
      token.content  = state.src.slice(pos, max).trim();
      token.map      = [ startLine, state.line ];
      token.children = [];
 
      token        = state.push('heading_close', 'h' + String(level), -1);
      token.markup = '########'.slice(0, level);
 
      return true;
    };
 
    var lheading = function lheading(state, startLine, endLine/*, silent*/) {
      var content, terminate, i, l, token, pos, max, level, marker,
          nextLine = startLine + 1, oldParentType,
          terminatorRules = state.md.block.ruler.getRules('paragraph');
 
      // if it's indented more than 3 spaces, it should be a code block
      if (state.sCount[startLine] - state.blkIndent >= 4) { return false; }
 
      oldParentType = state.parentType;
      state.parentType = 'paragraph'; // use paragraph to match terminatorRules
 
      // jump line-by-line until empty one or EOF
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }
 
        //
        // Check for underline in setext header
        //
        if (state.sCount[nextLine] >= state.blkIndent) {
          pos = state.bMarks[nextLine] + state.tShift[nextLine];
          max = state.eMarks[nextLine];
 
          if (pos < max) {
            marker = state.src.charCodeAt(pos);
 
            if (marker === 0x2D/* - */ || marker === 0x3D/* = */) {
              pos = state.skipChars(pos, marker);
              pos = state.skipSpaces(pos);
 
              if (pos >= max) {
                level = (marker === 0x3D/* = */ ? 1 : 2);
                break;
              }
            }
          }
        }
 
        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) { continue; }
 
        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
      }
 
      if (!level) {
        // Didn't find valid underline
        return false;
      }
 
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
 
      state.line = nextLine + 1;
 
      token          = state.push('heading_open', 'h' + String(level), 1);
      token.markup   = String.fromCharCode(marker);
      token.map      = [ startLine, state.line ];
 
      token          = state.push('inline', '', 0);
      token.content  = content;
      token.map      = [ startLine, state.line - 1 ];
      token.children = [];
 
      token          = state.push('heading_close', 'h' + String(level), -1);
      token.markup   = String.fromCharCode(marker);
 
      state.parentType = oldParentType;
 
      return true;
    };
 
    var paragraph = function paragraph(state, startLine/*, endLine*/) {
      var content, terminate, i, l, token, oldParentType,
          nextLine = startLine + 1,
          terminatorRules = state.md.block.ruler.getRules('paragraph'),
          endLine = state.lineMax;
 
      oldParentType = state.parentType;
      state.parentType = 'paragraph';
 
      // jump line-by-line until empty one or EOF
      for (; nextLine < endLine && !state.isEmpty(nextLine); nextLine++) {
        // this would be a code block normally, but after paragraph
        // it's considered a lazy continuation regardless of what's there
        if (state.sCount[nextLine] - state.blkIndent > 3) { continue; }
 
        // quirk for blockquotes, this line should already be checked by that rule
        if (state.sCount[nextLine] < 0) { continue; }
 
        // Some tags can terminate paragraph without empty line.
        terminate = false;
        for (i = 0, l = terminatorRules.length; i < l; i++) {
          if (terminatorRules[i](state, nextLine, endLine, true)) {
            terminate = true;
            break;
          }
        }
        if (terminate) { break; }
      }
 
      content = state.getLines(startLine, nextLine, state.blkIndent, false).trim();
 
      state.line = nextLine;
 
      token          = state.push('paragraph_open', 'p', 1);
      token.map      = [ startLine, state.line ];
 
      token          = state.push('inline', '', 0);
      token.content  = content;
      token.map      = [ startLine, state.line ];
      token.children = [];
 
      token          = state.push('paragraph_close', 'p', -1);
 
      state.parentType = oldParentType;
 
      return true;
    };
 
    var Token$1 = token;
    var isSpace$4 = utils$1.isSpace;
 
 
    function StateBlock(src, md, env, tokens) {
      var ch, s, start, pos, len, indent, offset, indent_found;
 
      this.src = src;
 
      // link to parser instance
      this.md     = md;
 
      this.env = env;
 
      //
      // Internal state vartiables
      //
 
      this.tokens = tokens;
 
      this.bMarks = [];  // line begin offsets for fast jumps
      this.eMarks = [];  // line end offsets for fast jumps
      this.tShift = [];  // offsets of the first non-space characters (tabs not expanded)
      this.sCount = [];  // indents for each line (tabs expanded)
 
      // An amount of virtual spaces (tabs expanded) between beginning
      // of each line (bMarks) and real beginning of that line.
      //
      // It exists only as a hack because blockquotes override bMarks
      // losing information in the process.
      //
      // It's used only when expanding tabs, you can think about it as
      // an initial tab length, e.g. bsCount=21 applied to string `\t123`
      // means first tab should be expanded to 4-21%4 === 3 spaces.
      //
      this.bsCount = [];
 
      // block parser variables
      this.blkIndent  = 0; // required block content indent (for example, if we are
                           // inside a list, it would be positioned after list marker)
      this.line       = 0; // line index in src
      this.lineMax    = 0; // lines count
      this.tight      = false;  // loose/tight mode for lists
      this.ddIndent   = -1; // indent of the current dd block (-1 if there isn't any)
      this.listIndent = -1; // indent of the current list block (-1 if there isn't any)
 
      // can be 'blockquote', 'list', 'root', 'paragraph' or 'reference'
      // used in lists to determine if they interrupt a paragraph
      this.parentType = 'root';
 
      this.level = 0;
 
      // renderer
      this.result = '';
 
      // Create caches
      // Generate markers.
      s = this.src;
      indent_found = false;
 
      for (start = pos = indent = offset = 0, len = s.length; pos < len; pos++) {
        ch = s.charCodeAt(pos);
 
        if (!indent_found) {
          if (isSpace$4(ch)) {
            indent++;
 
            if (ch === 0x09) {
              offset += 4 - offset % 4;
            } else {
              offset++;
            }
            continue;
          } else {
            indent_found = true;
          }
        }
 
        if (ch === 0x0A || pos === len - 1) {
          if (ch !== 0x0A) { pos++; }
          this.bMarks.push(start);
          this.eMarks.push(pos);
          this.tShift.push(indent);
          this.sCount.push(offset);
          this.bsCount.push(0);
 
          indent_found = false;
          indent = 0;
          offset = 0;
          start = pos + 1;
        }
      }
 
      // Push fake entry to simplify cache bounds checks
      this.bMarks.push(s.length);
      this.eMarks.push(s.length);
      this.tShift.push(0);
      this.sCount.push(0);
      this.bsCount.push(0);
 
      this.lineMax = this.bMarks.length - 1; // don't count last fake line
    }
 
    // Push new token to "stream".
    //
    StateBlock.prototype.push = function (type, tag, nesting) {
      var token = new Token$1(type, tag, nesting);
      token.block = true;
 
      if (nesting < 0) this.level--; // closing tag
      token.level = this.level;
      if (nesting > 0) this.level++; // opening tag
 
      this.tokens.push(token);
      return token;
    };
 
    StateBlock.prototype.isEmpty = function isEmpty(line) {
      return this.bMarks[line] + this.tShift[line] >= this.eMarks[line];
    };
 
    StateBlock.prototype.skipEmptyLines = function skipEmptyLines(from) {
      for (var max = this.lineMax; from < max; from++) {
        if (this.bMarks[from] + this.tShift[from] < this.eMarks[from]) {
          break;
        }
      }
      return from;
    };
 
    // Skip spaces from given position.
    StateBlock.prototype.skipSpaces = function skipSpaces(pos) {
      var ch;
 
      for (var max = this.src.length; pos < max; pos++) {
        ch = this.src.charCodeAt(pos);
        if (!isSpace$4(ch)) { break; }
      }
      return pos;
    };
 
    // Skip spaces from given position in reverse.
    StateBlock.prototype.skipSpacesBack = function skipSpacesBack(pos, min) {
      if (pos <= min) { return pos; }
 
      while (pos > min) {
        if (!isSpace$4(this.src.charCodeAt(--pos))) { return pos + 1; }
      }
      return pos;
    };
 
    // Skip char codes from given position
    StateBlock.prototype.skipChars = function skipChars(pos, code) {
      for (var max = this.src.length; pos < max; pos++) {
        if (this.src.charCodeAt(pos) !== code) { break; }
      }
      return pos;
    };
 
    // Skip char codes reverse from given position - 1
    StateBlock.prototype.skipCharsBack = function skipCharsBack(pos, code, min) {
      if (pos <= min) { return pos; }
 
      while (pos > min) {
        if (code !== this.src.charCodeAt(--pos)) { return pos + 1; }
      }
      return pos;
    };
 
    // cut lines range from source.
    StateBlock.prototype.getLines = function getLines(begin, end, indent, keepLastLF) {
      var i, lineIndent, ch, first, last, queue, lineStart,
          line = begin;
 
      if (begin >= end) {
        return '';
      }
 
      queue = new Array(end - begin);
 
      for (i = 0; line < end; line++, i++) {
        lineIndent = 0;
        lineStart = first = this.bMarks[line];
 
        if (line + 1 < end || keepLastLF) {
          // No need for bounds check because we have fake entry on tail.
          last = this.eMarks[line] + 1;
        } else {
          last = this.eMarks[line];
        }
 
        while (first < last && lineIndent < indent) {
          ch = this.src.charCodeAt(first);
 
          if (isSpace$4(ch)) {
            if (ch === 0x09) {
              lineIndent += 4 - (lineIndent + this.bsCount[line]) % 4;
            } else {
              lineIndent++;
            }
          } else if (first - lineStart < this.tShift[line]) {
            // patched tShift masked characters to look like spaces (blockquotes, list markers)
            lineIndent++;
          } else {
            break;
          }
 
          first++;
        }
 
        if (lineIndent > indent) {
          // partially expanding tabs in code blocks, e.g '\t\tfoobar'
          // with indent=2 becomes '  \tfoobar'
          queue[i] = new Array(lineIndent - indent + 1).join(' ') + this.src.slice(first, last);
        } else {
          queue[i] = this.src.slice(first, last);
        }
      }
 
      return queue.join('');
    };
 
    // re-export Token class to use in block rules
    StateBlock.prototype.Token = Token$1;
 
 
    var state_block = StateBlock;
 
    /** internal
     * class ParserBlock
     *
     * Block-level tokenizer.
     **/
 
 
    var Ruler$1           = ruler;
 
 
    var _rules$1 = [
      // First 2 params - rule name & source. Secondary array - list of rules,
      // which can be terminated by this one.
      [ 'table',      table,      [ 'paragraph', 'reference' ] ],
      [ 'code',       code ],
      [ 'fence',      fence,      [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
      [ 'blockquote', blockquote, [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
      [ 'hr',         hr,         [ 'paragraph', 'reference', 'blockquote', 'list' ] ],
      [ 'list',       list,       [ 'paragraph', 'reference', 'blockquote' ] ],
      [ 'reference',  reference ],
      [ 'html_block', html_block, [ 'paragraph', 'reference', 'blockquote' ] ],
      [ 'heading',    heading,    [ 'paragraph', 'reference', 'blockquote' ] ],
      [ 'lheading',   lheading ],
      [ 'paragraph',  paragraph ]
    ];
 
 
    /**
     * new ParserBlock()
     **/
    function ParserBlock$1() {
      /**
       * ParserBlock#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of block rules.
       **/
      this.ruler = new Ruler$1();
 
      for (var i = 0; i < _rules$1.length; i++) {
        this.ruler.push(_rules$1[i][0], _rules$1[i][1], { alt: (_rules$1[i][2] || []).slice() });
      }
    }
 
 
    // Generate tokens for input range
    //
    ParserBlock$1.prototype.tokenize = function (state, startLine, endLine) {
      var ok, i,
          rules = this.ruler.getRules(''),
          len = rules.length,
          line = startLine,
          hasEmptyLines = false,
          maxNesting = state.md.options.maxNesting;
 
      while (line < endLine) {
        state.line = line = state.skipEmptyLines(line);
        if (line >= endLine) { break; }
 
        // Termination condition for nested calls.
        // Nested calls currently used for blockquotes & lists
        if (state.sCount[line] < state.blkIndent) { break; }
 
        // If nesting level exceeded - skip tail to the end. That's not ordinary
        // situation and we should not care about content.
        if (state.level >= maxNesting) {
          state.line = endLine;
          break;
        }
 
        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.line`
        // - update `state.tokens`
        // - return true
 
        for (i = 0; i < len; i++) {
          ok = rules[i](state, line, endLine, false);
          if (ok) { break; }
        }
 
        // set state.tight if we had an empty line before current tag
        // i.e. latest empty line should not count
        state.tight = !hasEmptyLines;
 
        // paragraph might "eat" one newline after it in nested lists
        if (state.isEmpty(state.line - 1)) {
          hasEmptyLines = true;
        }
 
        line = state.line;
 
        if (line < endLine && state.isEmpty(line)) {
          hasEmptyLines = true;
          line++;
          state.line = line;
        }
      }
    };
 
 
    /**
     * ParserBlock.parse(str, md, env, outTokens)
     *
     * Process input string and push block tokens into `outTokens`
     **/
    ParserBlock$1.prototype.parse = function (src, md, env, outTokens) {
      var state;
 
      if (!src) { return; }
 
      state = new this.State(src, md, env, outTokens);
 
      this.tokenize(state, state.line, state.lineMax);
    };
 
 
    ParserBlock$1.prototype.State = state_block;
 
 
    var parser_block = ParserBlock$1;
 
    // Rule to skip pure text
    // '{}$%@~+=:' reserved for extentions
 
    // !, ", #, $, %, &, ', (, ), *, +, ,, -, ., /, :, ;, <, =, >, ?, @, [, \, ], ^, _, `, {, |, }, or ~
 
    // !!!! Don't confuse with "Markdown ASCII Punctuation" chars
    // http://spec.commonmark.org/0.15/#ascii-punctuation-character
    function isTerminatorChar(ch) {
      switch (ch) {
        case 0x0A/* \n */:
        case 0x21/* ! */:
        case 0x23/* # */:
        case 0x24/* $ */:
        case 0x25/* % */:
        case 0x26/* & */:
        case 0x2A/* * */:
        case 0x2B/* + */:
        case 0x2D/* - */:
        case 0x3A/* : */:
        case 0x3C/* < */:
        case 0x3D/* = */:
        case 0x3E/* > */:
        case 0x40/* @ */:
        case 0x5B/* [ */:
        case 0x5C/* \ */:
        case 0x5D/* ] */:
        case 0x5E/* ^ */:
        case 0x5F/* _ */:
        case 0x60/* ` */:
        case 0x7B/* { */:
        case 0x7D/* } */:
        case 0x7E/* ~ */:
          return true;
        default:
          return false;
      }
    }
 
    var text = function text(state, silent) {
      var pos = state.pos;
 
      while (pos < state.posMax && !isTerminatorChar(state.src.charCodeAt(pos))) {
        pos++;
      }
 
      if (pos === state.pos) { return false; }
 
      if (!silent) { state.pending += state.src.slice(state.pos, pos); }
 
      state.pos = pos;
 
      return true;
    };
 
    // RFC3986: scheme = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
    var SCHEME_RE = /(?:^|[^a-z0-9.+-])([a-z][a-z0-9.+-]*)$/i;
 
 
    var linkify = function linkify(state, silent) {
      var pos, max, match, proto, link, url, fullUrl, token;
 
      if (!state.md.options.linkify) return false;
      if (state.linkLevel > 0) return false;
 
      pos = state.pos;
      max = state.posMax;
 
      if (pos + 3 > max) return false;
      if (state.src.charCodeAt(pos) !== 0x3A/* : */) return false;
      if (state.src.charCodeAt(pos + 1) !== 0x2F/* / */) return false;
      if (state.src.charCodeAt(pos + 2) !== 0x2F/* / */) return false;
 
      match = state.pending.match(SCHEME_RE);
      if (!match) return false;
 
      proto = match[1];
 
      link = state.md.linkify.matchAtStart(state.src.slice(pos - proto.length));
      if (!link) return false;
 
      url = link.url;
 
      // disallow '*' at the end of the link (conflicts with emphasis)
      url = url.replace(/\*+$/, '');
 
      fullUrl = state.md.normalizeLink(url);
      if (!state.md.validateLink(fullUrl)) return false;
 
      if (!silent) {
        state.pending = state.pending.slice(0, -proto.length);
 
        token         = state.push('link_open', 'a', 1);
        token.attrs   = [ [ 'href', fullUrl ] ];
        token.markup  = 'linkify';
        token.info    = 'auto';
 
        token         = state.push('text', '', 0);
        token.content = state.md.normalizeLinkText(url);
 
        token         = state.push('link_close', 'a', -1);
        token.markup  = 'linkify';
        token.info    = 'auto';
      }
 
      state.pos += url.length - proto.length;
      return true;
    };
 
    var isSpace$3 = utils$1.isSpace;
 
 
    var newline = function newline(state, silent) {
      var pmax, max, ws, pos = state.pos;
 
      if (state.src.charCodeAt(pos) !== 0x0A/* \n */) { return false; }
 
      pmax = state.pending.length - 1;
      max = state.posMax;
 
      // '  \n' -> hardbreak
      // Lookup in pending chars is bad practice! Don't copy to other rules!
      // Pending string is stored in concat mode, indexed lookups will cause
      // convertion to flat mode.
      if (!silent) {
        if (pmax >= 0 && state.pending.charCodeAt(pmax) === 0x20) {
          if (pmax >= 1 && state.pending.charCodeAt(pmax - 1) === 0x20) {
            // Find whitespaces tail of pending chars.
            ws = pmax - 1;
            while (ws >= 1 && state.pending.charCodeAt(ws - 1) === 0x20) ws--;
 
            state.pending = state.pending.slice(0, ws);
            state.push('hardbreak', 'br', 0);
          } else {
            state.pending = state.pending.slice(0, -1);
            state.push('softbreak', 'br', 0);
          }
 
        } else {
          state.push('softbreak', 'br', 0);
        }
      }
 
      pos++;
 
      // skip heading spaces for next line
      while (pos < max && isSpace$3(state.src.charCodeAt(pos))) { pos++; }
 
      state.pos = pos;
      return true;
    };
 
    var isSpace$2 = utils$1.isSpace;
 
    var ESCAPED = [];
 
    for (var i = 0; i < 256; i++) { ESCAPED.push(0); }
 
    '\\!"#$%&\'()*+,./:;<=>?@[]^_`{|}~-'
      .split('').forEach(function (ch) { ESCAPED[ch.charCodeAt(0)] = 1; });
 
 
    var _escape = function escape(state, silent) {
      var ch1, ch2, origStr, escapedStr, token, pos = state.pos, max = state.posMax;
 
      if (state.src.charCodeAt(pos) !== 0x5C/* \ */) return false;
      pos++;
 
      // '\' at the end of the inline block
      if (pos >= max) return false;
 
      ch1 = state.src.charCodeAt(pos);
 
      if (ch1 === 0x0A) {
        if (!silent) {
          state.push('hardbreak', 'br', 0);
        }
 
        pos++;
        // skip leading whitespaces from next line
        while (pos < max) {
          ch1 = state.src.charCodeAt(pos);
          if (!isSpace$2(ch1)) break;
          pos++;
        }
 
        state.pos = pos;
        return true;
      }
 
      escapedStr = state.src[pos];
 
      if (ch1 >= 0xD800 && ch1 <= 0xDBFF && pos + 1 < max) {
        ch2 = state.src.charCodeAt(pos + 1);
 
        if (ch2 >= 0xDC00 && ch2 <= 0xDFFF) {
          escapedStr += state.src[pos + 1];
          pos++;
        }
      }
 
      origStr = '\\' + escapedStr;
 
      if (!silent) {
        token = state.push('text_special', '', 0);
 
        if (ch1 < 256 && ESCAPED[ch1] !== 0) {
          token.content = escapedStr;
        } else {
          token.content = origStr;
        }
 
        token.markup = origStr;
        token.info   = 'escape';
      }
 
      state.pos = pos + 1;
      return true;
    };
 
    var backticks = function backtick(state, silent) {
      var start, max, marker, token, matchStart, matchEnd, openerLength, closerLength,
          pos = state.pos,
          ch = state.src.charCodeAt(pos);
 
      if (ch !== 0x60/* ` */) { return false; }
 
      start = pos;
      pos++;
      max = state.posMax;
 
      // scan marker length
      while (pos < max && state.src.charCodeAt(pos) === 0x60/* ` */) { pos++; }
 
      marker = state.src.slice(start, pos);
      openerLength = marker.length;
 
      if (state.backticksScanned && (state.backticks[openerLength] || 0) <= start) {
        if (!silent) state.pending += marker;
        state.pos += openerLength;
        return true;
      }
 
      matchStart = matchEnd = pos;
 
      // Nothing found in the cache, scan until the end of the line (or until marker is found)
      while ((matchStart = state.src.indexOf('`', matchEnd)) !== -1) {
        matchEnd = matchStart + 1;
 
        // scan marker length
        while (matchEnd < max && state.src.charCodeAt(matchEnd) === 0x60/* ` */) { matchEnd++; }
 
        closerLength = matchEnd - matchStart;
 
        if (closerLength === openerLength) {
          // Found matching closer length.
          if (!silent) {
            token     = state.push('code_inline', 'code', 0);
            token.markup  = marker;
            token.content = state.src.slice(pos, matchStart)
              .replace(/\n/g, ' ')
              .replace(/^ (.+) $/, '$1');
          }
          state.pos = matchEnd;
          return true;
        }
 
        // Some different length found, put it in cache as upper limit of where closer can be found
        state.backticks[closerLength] = matchStart;
      }
 
      // Scanned through the end, didn't find anything
      state.backticksScanned = true;
 
      if (!silent) state.pending += marker;
      state.pos += openerLength;
      return true;
    };
 
    var strikethrough = {};
 
    // Insert each marker as a separate text token, and add it to delimiter list
    //
    strikethrough.tokenize = function strikethrough(state, silent) {
      var i, scanned, token, len, ch,
          start = state.pos,
          marker = state.src.charCodeAt(start);
 
      if (silent) { return false; }
 
      if (marker !== 0x7E/* ~ */) { return false; }
 
      scanned = state.scanDelims(state.pos, true);
      len = scanned.length;
      ch = String.fromCharCode(marker);
 
      if (len < 2) { return false; }
 
      if (len % 2) {
        token         = state.push('text', '', 0);
        token.content = ch;
        len--;
      }
 
      for (i = 0; i < len; i += 2) {
        token         = state.push('text', '', 0);
        token.content = ch + ch;
 
        state.delimiters.push({
          marker: marker,
          length: 0,     // disable "rule of 3" length checks meant for emphasis
          token:  state.tokens.length - 1,
          end:    -1,
          open:   scanned.can_open,
          close:  scanned.can_close
        });
      }
 
      state.pos += scanned.length;
 
      return true;
    };
 
 
    function postProcess$1(state, delimiters) {
      var i, j,
          startDelim,
          endDelim,
          token,
          loneMarkers = [],
          max = delimiters.length;
 
      for (i = 0; i < max; i++) {
        startDelim = delimiters[i];
 
        if (startDelim.marker !== 0x7E/* ~ */) {
          continue;
        }
 
        if (startDelim.end === -1) {
          continue;
        }
 
        endDelim = delimiters[startDelim.end];
 
        token         = state.tokens[startDelim.token];
        token.type    = 's_open';
        token.tag     = 's';
        token.nesting = 1;
        token.markup  = '~~';
        token.content = '';
 
        token         = state.tokens[endDelim.token];
        token.type    = 's_close';
        token.tag     = 's';
        token.nesting = -1;
        token.markup  = '~~';
        token.content = '';
 
        if (state.tokens[endDelim.token - 1].type === 'text' &&
            state.tokens[endDelim.token - 1].content === '~') {
 
          loneMarkers.push(endDelim.token - 1);
        }
      }
 
      // If a marker sequence has an odd number of characters, it's splitted
      // like this: `~~~~~` -> `~` + `~~` + `~~`, leaving one marker at the
      // start of the sequence.
      //
      // So, we have to move all those markers after subsequent s_close tags.
      //
      while (loneMarkers.length) {
        i = loneMarkers.pop();
        j = i + 1;
 
        while (j < state.tokens.length && state.tokens[j].type === 's_close') {
          j++;
        }
 
        j--;
 
        if (i !== j) {
          token = state.tokens[j];
          state.tokens[j] = state.tokens[i];
          state.tokens[i] = token;
        }
      }
    }
 
 
    // Walk through delimiter list and replace text tokens with tags
    //
    strikethrough.postProcess = function strikethrough(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;
 
      postProcess$1(state, state.delimiters);
 
      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess$1(state, tokens_meta[curr].delimiters);
        }
      }
    };
 
    var emphasis = {};
 
    // Insert each marker as a separate text token, and add it to delimiter list
    //
    emphasis.tokenize = function emphasis(state, silent) {
      var i, scanned, token,
          start = state.pos,
          marker = state.src.charCodeAt(start);
 
      if (silent) { return false; }
 
      if (marker !== 0x5F /* _ */ && marker !== 0x2A /* * */) { return false; }
 
      scanned = state.scanDelims(state.pos, marker === 0x2A);
 
      for (i = 0; i < scanned.length; i++) {
        token         = state.push('text', '', 0);
        token.content = String.fromCharCode(marker);
 
        state.delimiters.push({
          // Char code of the starting marker (number).
          //
          marker: marker,
 
          // Total length of these series of delimiters.
          //
          length: scanned.length,
 
          // A position of the token this delimiter corresponds to.
          //
          token:  state.tokens.length - 1,
 
          // If this delimiter is matched as a valid opener, `end` will be
          // equal to its position, otherwise it's `-1`.
          //
          end:    -1,
 
          // Boolean flags that determine if this delimiter could open or close
          // an emphasis.
          //
          open:   scanned.can_open,
          close:  scanned.can_close
        });
      }
 
      state.pos += scanned.length;
 
      return true;
    };
 
 
    function postProcess(state, delimiters) {
      var i,
          startDelim,
          endDelim,
          token,
          ch,
          isStrong,
          max = delimiters.length;
 
      for (i = max - 1; i >= 0; i--) {
        startDelim = delimiters[i];
 
        if (startDelim.marker !== 0x5F/* _ */ && startDelim.marker !== 0x2A/* * */) {
          continue;
        }
 
        // Process only opening markers
        if (startDelim.end === -1) {
          continue;
        }
 
        endDelim = delimiters[startDelim.end];
 
        // If the previous delimiter has the same marker and is adjacent to this one,
        // merge those into one strong delimiter.
        //
        // `<em><em>whatever</em></em>` -> `<strong>whatever</strong>`
        //
        isStrong = i > 0 &&
                   delimiters[i - 1].end === startDelim.end + 1 &&
                   // check that first two markers match and adjacent
                   delimiters[i - 1].marker === startDelim.marker &&
                   delimiters[i - 1].token === startDelim.token - 1 &&
                   // check that last two markers are adjacent (we can safely assume they match)
                   delimiters[startDelim.end + 1].token === endDelim.token + 1;
 
        ch = String.fromCharCode(startDelim.marker);
 
        token         = state.tokens[startDelim.token];
        token.type    = isStrong ? 'strong_open' : 'em_open';
        token.tag     = isStrong ? 'strong' : 'em';
        token.nesting = 1;
        token.markup  = isStrong ? ch + ch : ch;
        token.content = '';
 
        token         = state.tokens[endDelim.token];
        token.type    = isStrong ? 'strong_close' : 'em_close';
        token.tag     = isStrong ? 'strong' : 'em';
        token.nesting = -1;
        token.markup  = isStrong ? ch + ch : ch;
        token.content = '';
 
        if (isStrong) {
          state.tokens[delimiters[i - 1].token].content = '';
          state.tokens[delimiters[startDelim.end + 1].token].content = '';
          i--;
        }
      }
    }
 
 
    // Walk through delimiter list and replace text tokens with tags
    //
    emphasis.postProcess = function emphasis(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;
 
      postProcess(state, state.delimiters);
 
      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          postProcess(state, tokens_meta[curr].delimiters);
        }
      }
    };
 
    var normalizeReference$1   = utils$1.normalizeReference;
    var isSpace$1              = utils$1.isSpace;
 
 
    var link = function link(state, silent) {
      var attrs,
          code,
          label,
          labelEnd,
          labelStart,
          pos,
          res,
          ref,
          token,
          href = '',
          title = '',
          oldPos = state.pos,
          max = state.posMax,
          start = state.pos,
          parseReference = true;
 
      if (state.src.charCodeAt(state.pos) !== 0x5B/* [ */) { return false; }
 
      labelStart = state.pos + 1;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos, true);
 
      // parser failed to find ']', so it's not a valid link
      if (labelEnd < 0) { return false; }
 
      pos = labelEnd + 1;
      if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
        //
        // Inline link
        //
 
        // might have found a valid shortcut link, disable reference parsing
        parseReference = false;
 
        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace$1(code) && code !== 0x0A) { break; }
        }
        if (pos >= max) { return false; }
 
        // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = '';
          }
 
          // [link](  <href>  "title"  )
          //                ^^ skipping these spaces
          start = pos;
          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);
            if (!isSpace$1(code) && code !== 0x0A) { break; }
          }
 
          // [link](  <href>  "title"  )
          //                  ^^^^^^^ parsing link title
          res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
          if (pos < max && start !== pos && res.ok) {
            title = res.str;
            pos = res.pos;
 
            // [link](  <href>  "title"  )
            //                         ^^ skipping these spaces
            for (; pos < max; pos++) {
              code = state.src.charCodeAt(pos);
              if (!isSpace$1(code) && code !== 0x0A) { break; }
            }
          }
        }
 
        if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
          // parsing a valid shortcut link failed, fallback to reference
          parseReference = true;
        }
        pos++;
      }
 
      if (parseReference) {
        //
        // Link reference
        //
        if (typeof state.env.references === 'undefined') { return false; }
 
        if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }
 
        // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)
        if (!label) { label = state.src.slice(labelStart, labelEnd); }
 
        ref = state.env.references[normalizeReference$1(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
 
      //
      // We found the end of the link, and know for a fact it's a valid link;
      // so all that's left to do is to call tokenizer.
      //
      if (!silent) {
        state.pos = labelStart;
        state.posMax = labelEnd;
 
        token        = state.push('link_open', 'a', 1);
        token.attrs  = attrs = [ [ 'href', href ] ];
        if (title) {
          attrs.push([ 'title', title ]);
        }
 
        state.linkLevel++;
        state.md.inline.tokenize(state);
        state.linkLevel--;
 
        token        = state.push('link_close', 'a', -1);
      }
 
      state.pos = pos;
      state.posMax = max;
      return true;
    };
 
    var normalizeReference   = utils$1.normalizeReference;
    var isSpace              = utils$1.isSpace;
 
 
    var image = function image(state, silent) {
      var attrs,
          code,
          content,
          label,
          labelEnd,
          labelStart,
          pos,
          ref,
          res,
          title,
          token,
          tokens,
          start,
          href = '',
          oldPos = state.pos,
          max = state.posMax;
 
      if (state.src.charCodeAt(state.pos) !== 0x21/* ! */) { return false; }
      if (state.src.charCodeAt(state.pos + 1) !== 0x5B/* [ */) { return false; }
 
      labelStart = state.pos + 2;
      labelEnd = state.md.helpers.parseLinkLabel(state, state.pos + 1, false);
 
      // parser failed to find ']', so it's not a valid link
      if (labelEnd < 0) { return false; }
 
      pos = labelEnd + 1;
      if (pos < max && state.src.charCodeAt(pos) === 0x28/* ( */) {
        //
        // Inline link
        //
 
        // [link](  <href>  "title"  )
        //        ^^ skipping these spaces
        pos++;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break; }
        }
        if (pos >= max) { return false; }
 
        // [link](  <href>  "title"  )
        //          ^^^^^^ parsing link destination
        start = pos;
        res = state.md.helpers.parseLinkDestination(state.src, pos, state.posMax);
        if (res.ok) {
          href = state.md.normalizeLink(res.str);
          if (state.md.validateLink(href)) {
            pos = res.pos;
          } else {
            href = '';
          }
        }
 
        // [link](  <href>  "title"  )
        //                ^^ skipping these spaces
        start = pos;
        for (; pos < max; pos++) {
          code = state.src.charCodeAt(pos);
          if (!isSpace(code) && code !== 0x0A) { break; }
        }
 
        // [link](  <href>  "title"  )
        //                  ^^^^^^^ parsing link title
        res = state.md.helpers.parseLinkTitle(state.src, pos, state.posMax);
        if (pos < max && start !== pos && res.ok) {
          title = res.str;
          pos = res.pos;
 
          // [link](  <href>  "title"  )
          //                         ^^ skipping these spaces
          for (; pos < max; pos++) {
            code = state.src.charCodeAt(pos);
            if (!isSpace(code) && code !== 0x0A) { break; }
          }
        } else {
          title = '';
        }
 
        if (pos >= max || state.src.charCodeAt(pos) !== 0x29/* ) */) {
          state.pos = oldPos;
          return false;
        }
        pos++;
      } else {
        //
        // Link reference
        //
        if (typeof state.env.references === 'undefined') { return false; }
 
        if (pos < max && state.src.charCodeAt(pos) === 0x5B/* [ */) {
          start = pos + 1;
          pos = state.md.helpers.parseLinkLabel(state, pos);
          if (pos >= 0) {
            label = state.src.slice(start, pos++);
          } else {
            pos = labelEnd + 1;
          }
        } else {
          pos = labelEnd + 1;
        }
 
        // covers label === '' and label === undefined
        // (collapsed reference link and shortcut reference link respectively)
        if (!label) { label = state.src.slice(labelStart, labelEnd); }
 
        ref = state.env.references[normalizeReference(label)];
        if (!ref) {
          state.pos = oldPos;
          return false;
        }
        href = ref.href;
        title = ref.title;
      }
 
      //
      // We found the end of the link, and know for a fact it's a valid link;
      // so all that's left to do is to call tokenizer.
      //
      if (!silent) {
        content = state.src.slice(labelStart, labelEnd);
 
        state.md.inline.parse(
          content,
          state.md,
          state.env,
          tokens = []
        );
 
        token          = state.push('image', 'img', 0);
        token.attrs    = attrs = [ [ 'src', href ], [ 'alt', '' ] ];
        token.children = tokens;
        token.content  = content;
 
        if (title) {
          attrs.push([ 'title', title ]);
        }
      }
 
      state.pos = pos;
      state.posMax = max;
      return true;
    };
 
    /*eslint max-len:0*/
    var EMAIL_RE    = /^([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)$/;
    var AUTOLINK_RE = /^([a-zA-Z][a-zA-Z0-9+.\-]{1,31}):([^<>\x00-\x20]*)$/;
 
 
    var autolink = function autolink(state, silent) {
      var url, fullUrl, token, ch, start, max,
          pos = state.pos;
 
      if (state.src.charCodeAt(pos) !== 0x3C/* < */) { return false; }
 
      start = state.pos;
      max = state.posMax;
 
      for (;;) {
        if (++pos >= max) return false;
 
        ch = state.src.charCodeAt(pos);
 
        if (ch === 0x3C /* < */) return false;
        if (ch === 0x3E /* > */) break;
      }
 
      url = state.src.slice(start + 1, pos);
 
      if (AUTOLINK_RE.test(url)) {
        fullUrl = state.md.normalizeLink(url);
        if (!state.md.validateLink(fullUrl)) { return false; }
 
        if (!silent) {
          token         = state.push('link_open', 'a', 1);
          token.attrs   = [ [ 'href', fullUrl ] ];
          token.markup  = 'autolink';
          token.info    = 'auto';
 
          token         = state.push('text', '', 0);
          token.content = state.md.normalizeLinkText(url);
 
          token         = state.push('link_close', 'a', -1);
          token.markup  = 'autolink';
          token.info    = 'auto';
        }
 
        state.pos += url.length + 2;
        return true;
      }
 
      if (EMAIL_RE.test(url)) {
        fullUrl = state.md.normalizeLink('mailto:' + url);
        if (!state.md.validateLink(fullUrl)) { return false; }
 
        if (!silent) {
          token         = state.push('link_open', 'a', 1);
          token.attrs   = [ [ 'href', fullUrl ] ];
          token.markup  = 'autolink';
          token.info    = 'auto';
 
          token         = state.push('text', '', 0);
          token.content = state.md.normalizeLinkText(url);
 
          token         = state.push('link_close', 'a', -1);
          token.markup  = 'autolink';
          token.info    = 'auto';
        }
 
        state.pos += url.length + 2;
        return true;
      }
 
      return false;
    };
 
    var HTML_TAG_RE = html_re.HTML_TAG_RE;
 
 
    function isLinkOpen(str) {
      return /^<a[>\s]/i.test(str);
    }
    function isLinkClose(str) {
      return /^<\/a\s*>/i.test(str);
    }
 
 
    function isLetter(ch) {
      /*eslint no-bitwise:0*/
      var lc = ch | 0x20; // to lower case
      return (lc >= 0x61/* a */) && (lc <= 0x7a/* z */);
    }
 
 
    var html_inline = function html_inline(state, silent) {
      var ch, match, max, token,
          pos = state.pos;
 
      if (!state.md.options.html) { return false; }
 
      // Check start
      max = state.posMax;
      if (state.src.charCodeAt(pos) !== 0x3C/* < */ ||
          pos + 2 >= max) {
        return false;
      }
 
      // Quick fail on second char
      ch = state.src.charCodeAt(pos + 1);
      if (ch !== 0x21/* ! */ &&
          ch !== 0x3F/* ? */ &&
          ch !== 0x2F/* / */ &&
          !isLetter(ch)) {
        return false;
      }
 
      match = state.src.slice(pos).match(HTML_TAG_RE);
      if (!match) { return false; }
 
      if (!silent) {
        token         = state.push('html_inline', '', 0);
        token.content = state.src.slice(pos, pos + match[0].length);
 
        if (isLinkOpen(token.content))  state.linkLevel++;
        if (isLinkClose(token.content)) state.linkLevel--;
      }
      state.pos += match[0].length;
      return true;
    };
 
    var entities          = entities$1;
    var has               = utils$1.has;
    var isValidEntityCode = utils$1.isValidEntityCode;
    var fromCodePoint     = utils$1.fromCodePoint;
 
 
    var DIGITAL_RE = /^&#((?:x[a-f0-9]{1,6}|[0-9]{1,7}));/i;
    var NAMED_RE   = /^&([a-z][a-z0-9]{1,31});/i;
 
 
    var entity = function entity(state, silent) {
      var ch, code, match, token, pos = state.pos, max = state.posMax;
 
      if (state.src.charCodeAt(pos) !== 0x26/* & */) return false;
 
      if (pos + 1 >= max) return false;
 
      ch = state.src.charCodeAt(pos + 1);
 
      if (ch === 0x23 /* # */) {
        match = state.src.slice(pos).match(DIGITAL_RE);
        if (match) {
          if (!silent) {
            code = match[1][0].toLowerCase() === 'x' ? parseInt(match[1].slice(1), 16) : parseInt(match[1], 10);
 
            token         = state.push('text_special', '', 0);
            token.content = isValidEntityCode(code) ? fromCodePoint(code) : fromCodePoint(0xFFFD);
            token.markup  = match[0];
            token.info    = 'entity';
          }
          state.pos += match[0].length;
          return true;
        }
      } else {
        match = state.src.slice(pos).match(NAMED_RE);
        if (match) {
          if (has(entities, match[1])) {
            if (!silent) {
              token         = state.push('text_special', '', 0);
              token.content = entities[match[1]];
              token.markup  = match[0];
              token.info    = 'entity';
            }
            state.pos += match[0].length;
            return true;
          }
        }
      }
 
      return false;
    };
 
    function processDelimiters(state, delimiters) {
      var closerIdx, openerIdx, closer, opener, minOpenerIdx, newMinOpenerIdx,
          isOddMatch, lastJump,
          openersBottom = {},
          max = delimiters.length;
 
      if (!max) return;
 
      // headerIdx is the first delimiter of the current (where closer is) delimiter run
      var headerIdx = 0;
      var lastTokenIdx = -2; // needs any value lower than -1
      var jumps = [];
 
      for (closerIdx = 0; closerIdx < max; closerIdx++) {
        closer = delimiters[closerIdx];
 
        jumps.push(0);
 
        // markers belong to same delimiter run if:
        //  - they have adjacent tokens
        //  - AND markers are the same
        //
        if (delimiters[headerIdx].marker !== closer.marker || lastTokenIdx !== closer.token - 1) {
          headerIdx = closerIdx;
        }
 
        lastTokenIdx = closer.token;
 
        // Length is only used for emphasis-specific "rule of 3",
        // if it's not defined (in strikethrough or 3rd party plugins),
        // we can default it to 0 to disable those checks.
        //
        closer.length = closer.length || 0;
 
        if (!closer.close) continue;
 
        // Previously calculated lower bounds (previous fails)
        // for each marker, each delimiter length modulo 3,
        // and for whether this closer can be an opener;
        // https://github.com/commonmark/cmark/commit/34250e12ccebdc6372b8b49c44fab57c72443460
        if (!openersBottom.hasOwnProperty(closer.marker)) {
          openersBottom[closer.marker] = [ -1, -1, -1, -1, -1, -1 ];
        }
 
        minOpenerIdx = openersBottom[closer.marker][(closer.open ? 3 : 0) + (closer.length % 3)];
 
        openerIdx = headerIdx - jumps[headerIdx] - 1;
 
        newMinOpenerIdx = openerIdx;
 
        for (; openerIdx > minOpenerIdx; openerIdx -= jumps[openerIdx] + 1) {
          opener = delimiters[openerIdx];
 
          if (opener.marker !== closer.marker) continue;
 
          if (opener.open && opener.end < 0) {
 
            isOddMatch = false;
 
            // from spec:
            //
            // If one of the delimiters can both open and close emphasis, then the
            // sum of the lengths of the delimiter runs containing the opening and
            // closing delimiters must not be a multiple of 3 unless both lengths
            // are multiples of 3.
            //
            if (opener.close || closer.open) {
              if ((opener.length + closer.length) % 3 === 0) {
                if (opener.length % 3 !== 0 || closer.length % 3 !== 0) {
                  isOddMatch = true;
                }
              }
            }
 
            if (!isOddMatch) {
              // If previous delimiter cannot be an opener, we can safely skip
              // the entire sequence in future checks. This is required to make
              // sure algorithm has linear complexity (see *_*_*_*_*_... case).
              //
              lastJump = openerIdx > 0 && !delimiters[openerIdx - 1].open ?
                jumps[openerIdx - 1] + 1 :
                0;
 
              jumps[closerIdx] = closerIdx - openerIdx + lastJump;
              jumps[openerIdx] = lastJump;
 
              closer.open  = false;
              opener.end   = closerIdx;
              opener.close = false;
              newMinOpenerIdx = -1;
              // treat next token as start of run,
              // it optimizes skips in **<...>**a**<...>** pathological case
              lastTokenIdx = -2;
              break;
            }
          }
        }
 
        if (newMinOpenerIdx !== -1) {
          // If match for this delimiter run failed, we want to set lower bound for
          // future lookups. This is required to make sure algorithm has linear
          // complexity.
          //
          // See details here:
          // https://github.com/commonmark/cmark/issues/178#issuecomment-270417442
          //
          openersBottom[closer.marker][(closer.open ? 3 : 0) + ((closer.length || 0) % 3)] = newMinOpenerIdx;
        }
      }
    }
 
 
    var balance_pairs = function link_pairs(state) {
      var curr,
          tokens_meta = state.tokens_meta,
          max = state.tokens_meta.length;
 
      processDelimiters(state, state.delimiters);
 
      for (curr = 0; curr < max; curr++) {
        if (tokens_meta[curr] && tokens_meta[curr].delimiters) {
          processDelimiters(state, tokens_meta[curr].delimiters);
        }
      }
    };
 
    var fragments_join = function fragments_join(state) {
      var curr, last,
          level = 0,
          tokens = state.tokens,
          max = state.tokens.length;
 
      for (curr = last = 0; curr < max; curr++) {
        // re-calculate levels after emphasis/strikethrough turns some text nodes
        // into opening/closing tags
        if (tokens[curr].nesting < 0) level--; // closing tag
        tokens[curr].level = level;
        if (tokens[curr].nesting > 0) level++; // opening tag
 
        if (tokens[curr].type === 'text' &&
            curr + 1 < max &&
            tokens[curr + 1].type === 'text') {
 
          // collapse two adjacent text nodes
          tokens[curr + 1].content = tokens[curr].content + tokens[curr + 1].content;
        } else {
          if (curr !== last) { tokens[last] = tokens[curr]; }
 
          last++;
        }
      }
 
      if (curr !== last) {
        tokens.length = last;
      }
    };
 
    var Token          = token;
    var isWhiteSpace   = utils$1.isWhiteSpace;
    var isPunctChar    = utils$1.isPunctChar;
    var isMdAsciiPunct = utils$1.isMdAsciiPunct;
 
 
    function StateInline(src, md, env, outTokens) {
      this.src = src;
      this.env = env;
      this.md = md;
      this.tokens = outTokens;
      this.tokens_meta = Array(outTokens.length);
 
      this.pos = 0;
      this.posMax = this.src.length;
      this.level = 0;
      this.pending = '';
      this.pendingLevel = 0;
 
      // Stores { start: end } pairs. Useful for backtrack
      // optimization of pairs parse (emphasis, strikes).
      this.cache = {};
 
      // List of emphasis-like delimiters for current tag
      this.delimiters = [];
 
      // Stack of delimiter lists for upper level tags
      this._prev_delimiters = [];
 
      // backtick length => last seen position
      this.backticks = {};
      this.backticksScanned = false;
 
      // Counter used to disable inline linkify-it execution
      // inside <a> and markdown links
      this.linkLevel = 0;
    }
 
 
    // Flush pending text
    //
    StateInline.prototype.pushPending = function () {
      var token = new Token('text', '', 0);
      token.content = this.pending;
      token.level = this.pendingLevel;
      this.tokens.push(token);
      this.pending = '';
      return token;
    };
 
 
    // Push new token to "stream".
    // If pending text exists - flush it as text token
    //
    StateInline.prototype.push = function (type, tag, nesting) {
      if (this.pending) {
        this.pushPending();
      }
 
      var token = new Token(type, tag, nesting);
      var token_meta = null;
 
      if (nesting < 0) {
        // closing tag
        this.level--;
        this.delimiters = this._prev_delimiters.pop();
      }
 
      token.level = this.level;
 
      if (nesting > 0) {
        // opening tag
        this.level++;
        this._prev_delimiters.push(this.delimiters);
        this.delimiters = [];
        token_meta = { delimiters: this.delimiters };
      }
 
      this.pendingLevel = this.level;
      this.tokens.push(token);
      this.tokens_meta.push(token_meta);
      return token;
    };
 
 
    // Scan a sequence of emphasis-like markers, and determine whether
    // it can start an emphasis sequence or end an emphasis sequence.
    //
    //  - start - position to scan from (it should point at a valid marker);
    //  - canSplitWord - determine if these markers can be found inside a word
    //
    StateInline.prototype.scanDelims = function (start, canSplitWord) {
      var pos = start, lastChar, nextChar, count, can_open, can_close,
          isLastWhiteSpace, isLastPunctChar,
          isNextWhiteSpace, isNextPunctChar,
          left_flanking = true,
          right_flanking = true,
          max = this.posMax,
          marker = this.src.charCodeAt(start);
 
      // treat beginning of the line as a whitespace
      lastChar = start > 0 ? this.src.charCodeAt(start - 1) : 0x20;
 
      while (pos < max && this.src.charCodeAt(pos) === marker) { pos++; }
 
      count = pos - start;
 
      // treat end of the line as a whitespace
      nextChar = pos < max ? this.src.charCodeAt(pos) : 0x20;
 
      isLastPunctChar = isMdAsciiPunct(lastChar) || isPunctChar(String.fromCharCode(lastChar));
      isNextPunctChar = isMdAsciiPunct(nextChar) || isPunctChar(String.fromCharCode(nextChar));
 
      isLastWhiteSpace = isWhiteSpace(lastChar);
      isNextWhiteSpace = isWhiteSpace(nextChar);
 
      if (isNextWhiteSpace) {
        left_flanking = false;
      } else if (isNextPunctChar) {
        if (!(isLastWhiteSpace || isLastPunctChar)) {
          left_flanking = false;
        }
      }
 
      if (isLastWhiteSpace) {
        right_flanking = false;
      } else if (isLastPunctChar) {
        if (!(isNextWhiteSpace || isNextPunctChar)) {
          right_flanking = false;
        }
      }
 
      if (!canSplitWord) {
        can_open  = left_flanking  && (!right_flanking || isLastPunctChar);
        can_close = right_flanking && (!left_flanking  || isNextPunctChar);
      } else {
        can_open  = left_flanking;
        can_close = right_flanking;
      }
 
      return {
        can_open:  can_open,
        can_close: can_close,
        length:    count
      };
    };
 
 
    // re-export Token class to use in block rules
    StateInline.prototype.Token = Token;
 
 
    var state_inline = StateInline;
 
    /** internal
     * class ParserInline
     *
     * Tokenizes paragraph content.
     **/
 
 
    var Ruler           = ruler;
 
 
    ////////////////////////////////////////////////////////////////////////////////
    // Parser rules
 
    var _rules = [
      [ 'text',            text ],
      [ 'linkify',         linkify ],
      [ 'newline',         newline ],
      [ 'escape',          _escape ],
      [ 'backticks',       backticks ],
      [ 'strikethrough',   strikethrough.tokenize ],
      [ 'emphasis',        emphasis.tokenize ],
      [ 'link',            link ],
      [ 'image',           image ],
      [ 'autolink',        autolink ],
      [ 'html_inline',     html_inline ],
      [ 'entity',          entity ]
    ];
 
    // `rule2` ruleset was created specifically for emphasis/strikethrough
    // post-processing and may be changed in the future.
    //
    // Don't use this for anything except pairs (plugins working with `balance_pairs`).
    //
    var _rules2 = [
      [ 'balance_pairs',   balance_pairs ],
      [ 'strikethrough',   strikethrough.postProcess ],
      [ 'emphasis',        emphasis.postProcess ],
      // rules for pairs separate '**' into its own text tokens, which may be left unused,
      // rule below merges unused segments back with the rest of the text
      [ 'fragments_join',  fragments_join ]
    ];
 
 
    /**
     * new ParserInline()
     **/
    function ParserInline$1() {
      var i;
 
      /**
       * ParserInline#ruler -> Ruler
       *
       * [[Ruler]] instance. Keep configuration of inline rules.
       **/
      this.ruler = new Ruler();
 
      for (i = 0; i < _rules.length; i++) {
        this.ruler.push(_rules[i][0], _rules[i][1]);
      }
 
      /**
       * ParserInline#ruler2 -> Ruler
       *
       * [[Ruler]] instance. Second ruler used for post-processing
       * (e.g. in emphasis-like rules).
       **/
      this.ruler2 = new Ruler();
 
      for (i = 0; i < _rules2.length; i++) {
        this.ruler2.push(_rules2[i][0], _rules2[i][1]);
      }
    }
 
 
    // Skip single token by running all rules in validation mode;
    // returns `true` if any rule reported success
    //
    ParserInline$1.prototype.skipToken = function (state) {
      var ok, i, pos = state.pos,
          rules = this.ruler.getRules(''),
          len = rules.length,
          maxNesting = state.md.options.maxNesting,
          cache = state.cache;
 
 
      if (typeof cache[pos] !== 'undefined') {
        state.pos = cache[pos];
        return;
      }
 
      if (state.level < maxNesting) {
        for (i = 0; i < len; i++) {
          // Increment state.level and decrement it later to limit recursion.
          // It's harmless to do here, because no tokens are created. But ideally,
          // we'd need a separate private state variable for this purpose.
          //
          state.level++;
          ok = rules[i](state, true);
          state.level--;
 
          if (ok) { break; }
        }
      } else {
        // Too much nesting, just skip until the end of the paragraph.
        //
        // NOTE: this will cause links to behave incorrectly in the following case,
        //       when an amount of `[` is exactly equal to `maxNesting + 1`:
        //
        //       [[[[[[[[[[[[[[[[[[[[[foo]()
        //
        // TODO: remove this workaround when CM standard will allow nested links
        //       (we can replace it by preventing links from being parsed in
        //       validation mode)
        //
        state.pos = state.posMax;
      }
 
      if (!ok) { state.pos++; }
      cache[pos] = state.pos;
    };
 
 
    // Generate tokens for input range
    //
    ParserInline$1.prototype.tokenize = function (state) {
      var ok, i,
          rules = this.ruler.getRules(''),
          len = rules.length,
          end = state.posMax,
          maxNesting = state.md.options.maxNesting;
 
      while (state.pos < end) {
        // Try all possible rules.
        // On success, rule should:
        //
        // - update `state.pos`
        // - update `state.tokens`
        // - return true
 
        if (state.level < maxNesting) {
          for (i = 0; i < len; i++) {
            ok = rules[i](state, false);
            if (ok) { break; }
          }
        }
 
        if (ok) {
          if (state.pos >= end) { break; }
          continue;
        }
 
        state.pending += state.src[state.pos++];
      }
 
      if (state.pending) {
        state.pushPending();
      }
    };
 
 
    /**
     * ParserInline.parse(str, md, env, outTokens)
     *
     * Process input string and push inline tokens into `outTokens`
     **/
    ParserInline$1.prototype.parse = function (str, md, env, outTokens) {
      var i, rules, len;
      var state = new this.State(str, md, env, outTokens);
 
      this.tokenize(state);
 
      rules = this.ruler2.getRules('');
      len = rules.length;
 
      for (i = 0; i < len; i++) {
        rules[i](state);
      }
    };
 
 
    ParserInline$1.prototype.State = state_inline;
 
 
    var parser_inline = ParserInline$1;
 
    var re;
    var hasRequiredRe;
 
    function requireRe () {
        if (hasRequiredRe) return re;
        hasRequiredRe = 1;
 
 
        re = function (opts) {
          var re = {};
          opts = opts || {};
 
          // Use direct extract instead of `regenerate` to reduse browserified size
          re.src_Any = requireRegex$3().source;
          re.src_Cc  = requireRegex$2().source;
          re.src_Z   = requireRegex().source;
          re.src_P   = regex$4.source;
 
          // \p{\Z\P\Cc\CF} (white spaces + control + format + punctuation)
          re.src_ZPCc = [ re.src_Z, re.src_P, re.src_Cc ].join('|');
 
          // \p{\Z\Cc} (white spaces + control)
          re.src_ZCc = [ re.src_Z, re.src_Cc ].join('|');
 
          // Experimental. List of chars, completely prohibited in links
          // because can separate it from other part of text
          var text_separators = '[><\uff5c]';
 
          // All possible word characters (everything without punctuation, spaces & controls)
          // Defined via punctuation & spaces to save space
          // Should be something like \p{\L\N\S\M} (\w but without `_`)
          re.src_pseudo_letter       = '(?:(?!' + text_separators + '|' + re.src_ZPCc + ')' + re.src_Any + ')';
          // The same as abothe but without [0-9]
          // var src_pseudo_letter_non_d = '(?:(?![0-9]|' + src_ZPCc + ')' + src_Any + ')';
 
          ////////////////////////////////////////////////////////////////////////////////
 
          re.src_ip4 =
 
            '(?:(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)';
 
          // Prohibit any of "@/[]()" in user/pass to avoid wrong domain fetch.
          re.src_auth    = '(?:(?:(?!' + re.src_ZCc + '|[@/\\[\\]()]).)+@)?';
 
          re.src_port =
 
            '(?::(?:6(?:[0-4]\\d{3}|5(?:[0-4]\\d{2}|5(?:[0-2]\\d|3[0-5])))|[1-5]?\\d{1,4}))?';
 
          re.src_host_terminator =
 
            '(?=$|' + text_separators + '|' + re.src_ZPCc + ')' +
            '(?!' + (opts['---'] ? '-(?!--)|' : '-|') + '_|:\\d|\\.-|\\.(?!$|' + re.src_ZPCc + '))';
 
          re.src_path =
 
            '(?:' +
              '[/?#]' +
                '(?:' +
                  '(?!' + re.src_ZCc + '|' + text_separators + '|[()[\\]{}.,"\'?!\\-;]).|' +
                  '\\[(?:(?!' + re.src_ZCc + '|\\]).)*\\]|' +
                  '\\((?:(?!' + re.src_ZCc + '|[)]).)*\\)|' +
                  '\\{(?:(?!' + re.src_ZCc + '|[}]).)*\\}|' +
                  '\\"(?:(?!' + re.src_ZCc + '|["]).)+\\"|' +
                  "\\'(?:(?!" + re.src_ZCc + "|[']).)+\\'|" +
                  "\\'(?=" + re.src_pseudo_letter + '|[-])|' +  // allow `I'm_king` if no pair found
                  '\\.{2,}[a-zA-Z0-9%/&]|' + // google has many dots in "google search" links (#66, #81).
                                             // github has ... in commit range links,
                                             // Restrict to
                                             // - english
                                             // - percent-encoded
                                             // - parts of file path
                                             // - params separator
                                             // until more examples found.
                  '\\.(?!' + re.src_ZCc + '|[.]|$)|' +
                  (opts['---'] ?
                    '\\-(?!--(?:[^-]|$))(?:-*)|' // `---` => long dash, terminate
                    :
                    '\\-+|'
                  ) +
                  ',(?!' + re.src_ZCc + '|$)|' +       // allow `,,,` in paths
                  ';(?!' + re.src_ZCc + '|$)|' +       // allow `;` if not followed by space-like char
                  '\\!+(?!' + re.src_ZCc + '|[!]|$)|' +  // allow `!!!` in paths, but not at the end
                  '\\?(?!' + re.src_ZCc + '|[?]|$)' +
                ')+' +
              '|\\/' +
            ')?';
 
          // Allow anything in markdown spec, forbid quote (") at the first position
          // because emails enclosed in quotes are far more common
          re.src_email_name =
 
            '[\\-;:&=\\+\\$,\\.a-zA-Z0-9_][\\-;:&=\\+\\$,\\"\\.a-zA-Z0-9_]*';
 
          re.src_xn =
 
            'xn--[a-z0-9\\-]{1,59}';
 
          // More to read about domain names
          // http://serverfault.com/questions/638260/
 
          re.src_domain_root =
 
            // Allow letters & digits (http://test1)
            '(?:' +
              re.src_xn +
              '|' +
              re.src_pseudo_letter + '{1,63}' +
            ')';
 
          re.src_domain =
 
            '(?:' +
              re.src_xn +
              '|' +
              '(?:' + re.src_pseudo_letter + ')' +
              '|' +
              '(?:' + re.src_pseudo_letter + '(?:-|' + re.src_pseudo_letter + '){0,61}' + re.src_pseudo_letter + ')' +
            ')';
 
          re.src_host =
 
            '(?:' +
            // Don't need IP check, because digits are already allowed in normal domain names
            //   src_ip4 +
            // '|' +
              '(?:(?:(?:' + re.src_domain + ')\\.)*' + re.src_domain/*_root*/ + ')' +
            ')';
 
          re.tpl_host_fuzzy =
 
            '(?:' +
              re.src_ip4 +
            '|' +
              '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))' +
            ')';
 
          re.tpl_host_no_ip_fuzzy =
 
            '(?:(?:(?:' + re.src_domain + ')\\.)+(?:%TLDS%))';
 
          re.src_host_strict =
 
            re.src_host + re.src_host_terminator;
 
          re.tpl_host_fuzzy_strict =
 
            re.tpl_host_fuzzy + re.src_host_terminator;
 
          re.src_host_port_strict =
 
            re.src_host + re.src_port + re.src_host_terminator;
 
          re.tpl_host_port_fuzzy_strict =
 
            re.tpl_host_fuzzy + re.src_port + re.src_host_terminator;
 
          re.tpl_host_port_no_ip_fuzzy_strict =
 
            re.tpl_host_no_ip_fuzzy + re.src_port + re.src_host_terminator;
 
 
          ////////////////////////////////////////////////////////////////////////////////
          // Main rules
 
          // Rude test fuzzy links by host, for quick deny
          re.tpl_host_fuzzy_test =
 
            'localhost|www\\.|\\.\\d{1,3}\\.|(?:\\.(?:%TLDS%)(?:' + re.src_ZPCc + '|>|$))';
 
          re.tpl_email_fuzzy =
 
              '(^|' + text_separators + '|"|\\(|' + re.src_ZCc + ')' +
              '(' + re.src_email_name + '@' + re.tpl_host_fuzzy_strict + ')';
 
          re.tpl_link_fuzzy =
              // Fuzzy link can't be prepended with .:/\- and non punctuation.
              // but can start with > (markdown blockquote)
              '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
              '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_fuzzy_strict + re.src_path + ')';
 
          re.tpl_link_no_ip_fuzzy =
              // Fuzzy link can't be prepended with .:/\- and non punctuation.
              // but can start with > (markdown blockquote)
              '(^|(?![.:/\\-_@])(?:[$+<=>^`|\uff5c]|' + re.src_ZPCc + '))' +
              '((?![$+<=>^`|\uff5c])' + re.tpl_host_port_no_ip_fuzzy_strict + re.src_path + ')';
 
          return re;
        };
        return re;
    }
 
    ////////////////////////////////////////////////////////////////////////////////
    // Helpers
 
    // Merge objects
    //
    function assign(obj /*from1, from2, from3, ...*/) {
      var sources = Array.prototype.slice.call(arguments, 1);
 
      sources.forEach(function (source) {
        if (!source) { return; }
 
        Object.keys(source).forEach(function (key) {
          obj[key] = source[key];
        });
      });
 
      return obj;
    }
 
    function _class(obj) { return Object.prototype.toString.call(obj); }
    function isString(obj) { return _class(obj) === '[object String]'; }
    function isObject(obj) { return _class(obj) === '[object Object]'; }
    function isRegExp(obj) { return _class(obj) === '[object RegExp]'; }
    function isFunction(obj) { return _class(obj) === '[object Function]'; }
 
 
    function escapeRE(str) { return str.replace(/[.?*+^$[\]\\(){}|-]/g, '\\$&'); }
 
    ////////////////////////////////////////////////////////////////////////////////
 
 
    var defaultOptions = {
      fuzzyLink: true,
      fuzzyEmail: true,
      fuzzyIP: false
    };
 
 
    function isOptionsObj(obj) {
      return Object.keys(obj || {}).reduce(function (acc, k) {
        return acc || defaultOptions.hasOwnProperty(k);
      }, false);
    }
 
 
    var defaultSchemas = {
      'http:': {
        validate: function (text, pos, self) {
          var tail = text.slice(pos);
 
          if (!self.re.http) {
            // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.http =  new RegExp(
              '^\\/\\/' + self.re.src_auth + self.re.src_host_port_strict + self.re.src_path, 'i'
            );
          }
          if (self.re.http.test(tail)) {
            return tail.match(self.re.http)[0].length;
          }
          return 0;
        }
      },
      'https:':  'http:',
      'ftp:':    'http:',
      '//':      {
        validate: function (text, pos, self) {
          var tail = text.slice(pos);
 
          if (!self.re.no_http) {
          // compile lazily, because "host"-containing variables can change on tlds update.
            self.re.no_http =  new RegExp(
              '^' +
              self.re.src_auth +
              // Don't allow single-level domains, because of false positives like '//test'
              // with code comments
              '(?:localhost|(?:(?:' + self.re.src_domain + ')\\.)+' + self.re.src_domain_root + ')' +
              self.re.src_port +
              self.re.src_host_terminator +
              self.re.src_path,
 
              'i'
            );
          }
 
          if (self.re.no_http.test(tail)) {
            // should not be `://` & `///`, that protects from errors in protocol name
            if (pos >= 3 && text[pos - 3] === ':') { return 0; }
            if (pos >= 3 && text[pos - 3] === '/') { return 0; }
            return tail.match(self.re.no_http)[0].length;
          }
          return 0;
        }
      },
      'mailto:': {
        validate: function (text, pos, self) {
          var tail = text.slice(pos);
 
          if (!self.re.mailto) {
            self.re.mailto =  new RegExp(
              '^' + self.re.src_email_name + '@' + self.re.src_host_strict, 'i'
            );
          }
          if (self.re.mailto.test(tail)) {
            return tail.match(self.re.mailto)[0].length;
          }
          return 0;
        }
      }
    };
 
    /*eslint-disable max-len*/
 
    // RE pattern for 2-character tlds (autogenerated by ./support/tlds_2char_gen.js)
    var tlds_2ch_src_re = 'a[cdefgilmnoqrstuwxz]|b[abdefghijmnorstvwyz]|c[acdfghiklmnoruvwxyz]|d[ejkmoz]|e[cegrstu]|f[ijkmor]|g[abdefghilmnpqrstuwy]|h[kmnrtu]|i[delmnoqrst]|j[emop]|k[eghimnprwyz]|l[abcikrstuvy]|m[acdeghklmnopqrstuvwxyz]|n[acefgilopruz]|om|p[aefghklmnrstwy]|qa|r[eosuw]|s[abcdeghijklmnortuvxyz]|t[cdfghjklmnortvwz]|u[agksyz]|v[aceginu]|w[fs]|y[et]|z[amw]';
 
    // DON'T try to make PRs with changes. Extend TLDs with LinkifyIt.tlds() instead
    var tlds_default = 'biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф'.split('|');
 
    /*eslint-enable max-len*/
 
    ////////////////////////////////////////////////////////////////////////////////
 
    function resetScanCache(self) {
      self.__index__ = -1;
      self.__text_cache__   = '';
    }
 
    function createValidator(re) {
      return function (text, pos) {
        var tail = text.slice(pos);
 
        if (re.test(tail)) {
          return tail.match(re)[0].length;
        }
        return 0;
      };
    }
 
    function createNormalizer() {
      return function (match, self) {
        self.normalize(match);
      };
    }
 
    // Schemas compiler. Build regexps.
    //
    function compile(self) {
 
      // Load & clone RE patterns.
      var re = self.re = requireRe()(self.__opts__);
 
      // Define dynamic patterns
      var tlds = self.__tlds__.slice();
 
      self.onCompile();
 
      if (!self.__tlds_replaced__) {
        tlds.push(tlds_2ch_src_re);
      }
      tlds.push(re.src_xn);
 
      re.src_tlds = tlds.join('|');
 
      function untpl(tpl) { return tpl.replace('%TLDS%', re.src_tlds); }
 
      re.email_fuzzy      = RegExp(untpl(re.tpl_email_fuzzy), 'i');
      re.link_fuzzy       = RegExp(untpl(re.tpl_link_fuzzy), 'i');
      re.link_no_ip_fuzzy = RegExp(untpl(re.tpl_link_no_ip_fuzzy), 'i');
      re.host_fuzzy_test  = RegExp(untpl(re.tpl_host_fuzzy_test), 'i');
 
      //
      // Compile each schema
      //
 
      var aliases = [];
 
      self.__compiled__ = {}; // Reset compiled data
 
      function schemaError(name, val) {
        throw new Error('(LinkifyIt) Invalid schema "' + name + '": ' + val);
      }
 
      Object.keys(self.__schemas__).forEach(function (name) {
        var val = self.__schemas__[name];
 
        // skip disabled methods
        if (val === null) { return; }
 
        var compiled = { validate: null, link: null };
 
        self.__compiled__[name] = compiled;
 
        if (isObject(val)) {
          if (isRegExp(val.validate)) {
            compiled.validate = createValidator(val.validate);
          } else if (isFunction(val.validate)) {
            compiled.validate = val.validate;
          } else {
            schemaError(name, val);
          }
 
          if (isFunction(val.normalize)) {
            compiled.normalize = val.normalize;
          } else if (!val.normalize) {
            compiled.normalize = createNormalizer();
          } else {
            schemaError(name, val);
          }
 
          return;
        }
 
        if (isString(val)) {
          aliases.push(name);
          return;
        }
 
        schemaError(name, val);
      });
 
      //
      // Compile postponed aliases
      //
 
      aliases.forEach(function (alias) {
        if (!self.__compiled__[self.__schemas__[alias]]) {
          // Silently fail on missed schemas to avoid errons on disable.
          // schemaError(alias, self.__schemas__[alias]);
          return;
        }
 
        self.__compiled__[alias].validate =
          self.__compiled__[self.__schemas__[alias]].validate;
        self.__compiled__[alias].normalize =
          self.__compiled__[self.__schemas__[alias]].normalize;
      });
 
      //
      // Fake record for guessed links
      //
      self.__compiled__[''] = { validate: null, normalize: createNormalizer() };
 
      //
      // Build schema condition
      //
      var slist = Object.keys(self.__compiled__)
                          .filter(function (name) {
                            // Filter disabled & fake schemas
                            return name.length > 0 && self.__compiled__[name];
                          })
                          .map(escapeRE)
                          .join('|');
      // (?!_) cause 1.5x slowdown
      self.re.schema_test     = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'i');
      self.re.schema_search   = RegExp('(^|(?!_)(?:[><\uff5c]|' + re.src_ZPCc + '))(' + slist + ')', 'ig');
      self.re.schema_at_start = RegExp('^' + self.re.schema_search.source, 'i');
 
      self.re.pretest = RegExp(
        '(' + self.re.schema_test.source + ')|(' + self.re.host_fuzzy_test.source + ')|@',
        'i'
      );
 
      //
      // Cleanup
      //
 
      resetScanCache(self);
    }
 
    /**
     * class Match
     *
     * Match result. Single element of array, returned by [[LinkifyIt#match]]
     **/
    function Match(self, shift) {
      var start = self.__index__,
          end   = self.__last_index__,
          text  = self.__text_cache__.slice(start, end);
 
      /**
       * Match#schema -> String
       *
       * Prefix (protocol) for matched string.
       **/
      this.schema    = self.__schema__.toLowerCase();
      /**
       * Match#index -> Number
       *
       * First position of matched string.
       **/
      this.index     = start + shift;
      /**
       * Match#lastIndex -> Number
       *
       * Next position after matched string.
       **/
      this.lastIndex = end + shift;
      /**
       * Match#raw -> String
       *
       * Matched string.
       **/
      this.raw       = text;
      /**
       * Match#text -> String
       *
       * Notmalized text of matched string.
       **/
      this.text      = text;
      /**
       * Match#url -> String
       *
       * Normalized url of matched string.
       **/
      this.url       = text;
    }
 
    function createMatch(self, shift) {
      var match = new Match(self, shift);
 
      self.__compiled__[match.schema].normalize(match, self);
 
      return match;
    }
 
 
    /**
     * class LinkifyIt
     **/
 
    /**
     * new LinkifyIt(schemas, options)
     * - schemas (Object): Optional. Additional schemas to validate (prefix/validator)
     * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
     *
     * Creates new linkifier instance with optional additional schemas.
     * Can be called without `new` keyword for convenience.
     *
     * By default understands:
     *
     * - `http(s)://...` , `ftp://...`, `mailto:...` & `//...` links
     * - "fuzzy" links and emails (example.com, foo@bar.com).
     *
     * `schemas` is an object, where each key/value describes protocol/rule:
     *
     * - __key__ - link prefix (usually, protocol name with `:` at the end, `skype:`
     *   for example). `linkify-it` makes shure that prefix is not preceeded with
     *   alphanumeric char and symbols. Only whitespaces and punctuation allowed.
     * - __value__ - rule to check tail after link prefix
     *   - _String_ - just alias to existing rule
     *   - _Object_
     *     - _validate_ - validator function (should return matched length on success),
     *       or `RegExp`.
     *     - _normalize_ - optional function to normalize text & url of matched result
     *       (for example, for @twitter mentions).
     *
     * `options`:
     *
     * - __fuzzyLink__ - recognige URL-s without `http(s):` prefix. Default `true`.
     * - __fuzzyIP__ - allow IPs in fuzzy links above. Can conflict with some texts
     *   like version numbers. Default `false`.
     * - __fuzzyEmail__ - recognize emails without `mailto:` prefix.
     *
     **/
    function LinkifyIt$1(schemas, options) {
      if (!(this instanceof LinkifyIt$1)) {
        return new LinkifyIt$1(schemas, options);
      }
 
      if (!options) {
        if (isOptionsObj(schemas)) {
          options = schemas;
          schemas = {};
        }
      }
 
      this.__opts__           = assign({}, defaultOptions, options);
 
      // Cache last tested result. Used to skip repeating steps on next `match` call.
      this.__index__          = -1;
      this.__last_index__     = -1; // Next scan position
      this.__schema__         = '';
      this.__text_cache__     = '';
 
      this.__schemas__        = assign({}, defaultSchemas, schemas);
      this.__compiled__       = {};
 
      this.__tlds__           = tlds_default;
      this.__tlds_replaced__  = false;
 
      this.re = {};
 
      compile(this);
    }
 
 
    /** chainable
     * LinkifyIt#add(schema, definition)
     * - schema (String): rule name (fixed pattern prefix)
     * - definition (String|RegExp|Object): schema definition
     *
     * Add new rule definition. See constructor description for details.
     **/
    LinkifyIt$1.prototype.add = function add(schema, definition) {
      this.__schemas__[schema] = definition;
      compile(this);
      return this;
    };
 
 
    /** chainable
     * LinkifyIt#set(options)
     * - options (Object): { fuzzyLink|fuzzyEmail|fuzzyIP: true|false }
     *
     * Set recognition options for links without schema.
     **/
    LinkifyIt$1.prototype.set = function set(options) {
      this.__opts__ = assign(this.__opts__, options);
      return this;
    };
 
 
    /**
     * LinkifyIt#test(text) -> Boolean
     *
     * Searches linkifiable pattern and returns `true` on success or `false` on fail.
     **/
    LinkifyIt$1.prototype.test = function test(text) {
      // Reset scan cache
      this.__text_cache__ = text;
      this.__index__      = -1;
 
      if (!text.length) { return false; }
 
      var m, ml, me, len, shift, next, re, tld_pos, at_pos;
 
      // try to scan for link with schema - that's the most simple rule
      if (this.re.schema_test.test(text)) {
        re = this.re.schema_search;
        re.lastIndex = 0;
        while ((m = re.exec(text)) !== null) {
          len = this.testSchemaAt(text, m[2], re.lastIndex);
          if (len) {
            this.__schema__     = m[2];
            this.__index__      = m.index + m[1].length;
            this.__last_index__ = m.index + m[0].length + len;
            break;
          }
        }
      }
 
      if (this.__opts__.fuzzyLink && this.__compiled__['http:']) {
        // guess schemaless links
        tld_pos = text.search(this.re.host_fuzzy_test);
        if (tld_pos >= 0) {
          // if tld is located after found link - no need to check fuzzy pattern
          if (this.__index__ < 0 || tld_pos < this.__index__) {
            if ((ml = text.match(this.__opts__.fuzzyIP ? this.re.link_fuzzy : this.re.link_no_ip_fuzzy)) !== null) {
 
              shift = ml.index + ml[1].length;
 
              if (this.__index__ < 0 || shift < this.__index__) {
                this.__schema__     = '';
                this.__index__      = shift;
                this.__last_index__ = ml.index + ml[0].length;
              }
            }
          }
        }
      }
 
      if (this.__opts__.fuzzyEmail && this.__compiled__['mailto:']) {
        // guess schemaless emails
        at_pos = text.indexOf('@');
        if (at_pos >= 0) {
          // We can't skip this check, because this cases are possible:
          // 192.168.1.1@gmail.com, my.in@example.com
          if ((me = text.match(this.re.email_fuzzy)) !== null) {
 
            shift = me.index + me[1].length;
            next  = me.index + me[0].length;
 
            if (this.__index__ < 0 || shift < this.__index__ ||
                (shift === this.__index__ && next > this.__last_index__)) {
              this.__schema__     = 'mailto:';
              this.__index__      = shift;
              this.__last_index__ = next;
            }
          }
        }
      }
 
      return this.__index__ >= 0;
    };
 
 
    /**
     * LinkifyIt#pretest(text) -> Boolean
     *
     * Very quick check, that can give false positives. Returns true if link MAY BE
     * can exists. Can be used for speed optimization, when you need to check that
     * link NOT exists.
     **/
    LinkifyIt$1.prototype.pretest = function pretest(text) {
      return this.re.pretest.test(text);
    };
 
 
    /**
     * LinkifyIt#testSchemaAt(text, name, position) -> Number
     * - text (String): text to scan
     * - name (String): rule (schema) name
     * - position (Number): text offset to check from
     *
     * Similar to [[LinkifyIt#test]] but checks only specific protocol tail exactly
     * at given position. Returns length of found pattern (0 on fail).
     **/
    LinkifyIt$1.prototype.testSchemaAt = function testSchemaAt(text, schema, pos) {
      // If not supported schema check requested - terminate
      if (!this.__compiled__[schema.toLowerCase()]) {
        return 0;
      }
      return this.__compiled__[schema.toLowerCase()].validate(text, pos, this);
    };
 
 
    /**
     * LinkifyIt#match(text) -> Array|null
     *
     * Returns array of found link descriptions or `null` on fail. We strongly
     * recommend to use [[LinkifyIt#test]] first, for best speed.
     *
     * ##### Result match description
     *
     * - __schema__ - link schema, can be empty for fuzzy links, or `//` for
     *   protocol-neutral  links.
     * - __index__ - offset of matched text
     * - __lastIndex__ - index of next char after mathch end
     * - __raw__ - matched text
     * - __text__ - normalized text
     * - __url__ - link, generated from matched text
     **/
    LinkifyIt$1.prototype.match = function match(text) {
      var shift = 0, result = [];
 
      // Try to take previous element from cache, if .test() called before
      if (this.__index__ >= 0 && this.__text_cache__ === text) {
        result.push(createMatch(this, shift));
        shift = this.__last_index__;
      }
 
      // Cut head if cache was used
      var tail = shift ? text.slice(shift) : text;
 
      // Scan string until end reached
      while (this.test(tail)) {
        result.push(createMatch(this, shift));
 
        tail = tail.slice(this.__last_index__);
        shift += this.__last_index__;
      }
 
      if (result.length) {
        return result;
      }
 
      return null;
    };
 
 
    /**
     * LinkifyIt#matchAtStart(text) -> Match|null
     *
     * Returns fully-formed (not fuzzy) link if it starts at the beginning
     * of the string, and null otherwise.
     **/
    LinkifyIt$1.prototype.matchAtStart = function matchAtStart(text) {
      // Reset scan cache
      this.__text_cache__ = text;
      this.__index__      = -1;
 
      if (!text.length) return null;
 
      var m = this.re.schema_at_start.exec(text);
      if (!m) return null;
 
      var len = this.testSchemaAt(text, m[2], m[0].length);
      if (!len) return null;
 
      this.__schema__     = m[2];
      this.__index__      = m.index + m[1].length;
      this.__last_index__ = m.index + m[0].length + len;
 
      return createMatch(this, 0);
    };
 
 
    /** chainable
     * LinkifyIt#tlds(list [, keepOld]) -> this
     * - list (Array): list of tlds
     * - keepOld (Boolean): merge with current list if `true` (`false` by default)
     *
     * Load (or merge) new tlds list. Those are user for fuzzy links (without prefix)
     * to avoid false positives. By default this algorythm used:
     *
     * - hostname with any 2-letter root zones are ok.
     * - biz|com|edu|gov|net|org|pro|web|xxx|aero|asia|coop|info|museum|name|shop|рф
     *   are ok.
     * - encoded (`xn--...`) root zones are ok.
     *
     * If list is replaced, then exact match for 2-chars root zones will be checked.
     **/
    LinkifyIt$1.prototype.tlds = function tlds(list, keepOld) {
      list = Array.isArray(list) ? list : [ list ];
 
      if (!keepOld) {
        this.__tlds__ = list.slice();
        this.__tlds_replaced__ = true;
        compile(this);
        return this;
      }
 
      this.__tlds__ = this.__tlds__.concat(list)
                                      .sort()
                                      .filter(function (el, idx, arr) {
                                        return el !== arr[idx - 1];
                                      })
                                      .reverse();
 
      compile(this);
      return this;
    };
 
    /**
     * LinkifyIt#normalize(match)
     *
     * Default normalizer (if schema does not define it's own).
     **/
    LinkifyIt$1.prototype.normalize = function normalize(match) {
 
      // Do minimal possible changes by default. Need to collect feedback prior
      // to move forward https://github.com/markdown-it/linkify-it/issues/1
 
      if (!match.schema) { match.url = 'http://' + match.url; }
 
      if (match.schema === 'mailto:' && !/^mailto:/i.test(match.url)) {
        match.url = 'mailto:' + match.url;
      }
    };
 
 
    /**
     * LinkifyIt#onCompile()
     *
     * Override to modify basic RegExp-s.
     **/
    LinkifyIt$1.prototype.onCompile = function onCompile() {
    };
 
 
    var linkifyIt = LinkifyIt$1;
 
    var _default = {
      options: {
        html:         false,        // Enable HTML tags in source
        xhtmlOut:     false,        // Use '/' to close single tags (<br />)
        breaks:       false,        // Convert '\n' in paragraphs into <br>
        langPrefix:   'language-',  // CSS language prefix for fenced blocks
        linkify:      false,        // autoconvert URL-like texts to links
 
        // Enable some language-neutral replacements + quotes beautification
        typographer:  false,
 
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */
 
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
 
        maxNesting:   100            // Internal protection, recursion limit
      },
 
      components: {
 
        core: {},
        block: {},
        inline: {}
      }
    };
 
    var zero = {
      options: {
        html:         false,        // Enable HTML tags in source
        xhtmlOut:     false,        // Use '/' to close single tags (<br />)
        breaks:       false,        // Convert '\n' in paragraphs into <br>
        langPrefix:   'language-',  // CSS language prefix for fenced blocks
        linkify:      false,        // autoconvert URL-like texts to links
 
        // Enable some language-neutral replacements + quotes beautification
        typographer:  false,
 
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */
 
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
 
        maxNesting:   20            // Internal protection, recursion limit
      },
 
      components: {
 
        core: {
          rules: [
            'normalize',
            'block',
            'inline',
            'text_join'
          ]
        },
 
        block: {
          rules: [
            'paragraph'
          ]
        },
 
        inline: {
          rules: [
            'text'
          ],
          rules2: [
            'balance_pairs',
            'fragments_join'
          ]
        }
      }
    };
 
    var commonmark = {
      options: {
        html:         true,         // Enable HTML tags in source
        xhtmlOut:     true,         // Use '/' to close single tags (<br />)
        breaks:       false,        // Convert '\n' in paragraphs into <br>
        langPrefix:   'language-',  // CSS language prefix for fenced blocks
        linkify:      false,        // autoconvert URL-like texts to links
 
        // Enable some language-neutral replacements + quotes beautification
        typographer:  false,
 
        // Double + single quotes replacement pairs, when typographer enabled,
        // and smartquotes on. Could be either a String or an Array.
        //
        // For example, you can use '«»„“' for Russian, '„“‚‘' for German,
        // and ['«\xA0', '\xA0»', '‹\xA0', '\xA0›'] for French (including nbsp).
        quotes: '\u201c\u201d\u2018\u2019', /* “”‘’ */
 
        // Highlighter function. Should return escaped HTML,
        // or '' if the source string is not changed and should be escaped externaly.
        // If result starts with <pre... internal wrapper is skipped.
        //
        // function (/*str, lang*/) { return ''; }
        //
        highlight: null,
 
        maxNesting:   20            // Internal protection, recursion limit
      },
 
      components: {
 
        core: {
          rules: [
            'normalize',
            'block',
            'inline',
            'text_join'
          ]
        },
 
        block: {
          rules: [
            'blockquote',
            'code',
            'fence',
            'heading',
            'hr',
            'html_block',
            'lheading',
            'list',
            'reference',
            'paragraph'
          ]
        },
 
        inline: {
          rules: [
            'autolink',
            'backticks',
            'emphasis',
            'entity',
            'escape',
            'html_inline',
            'image',
            'link',
            'newline',
            'text'
          ],
          rules2: [
            'balance_pairs',
            'emphasis',
            'fragments_join'
          ]
        }
      }
    };
 
    var utils        = utils$1;
    var helpers      = helpers$1;
    var Renderer     = renderer;
    var ParserCore   = parser_core;
    var ParserBlock  = parser_block;
    var ParserInline = parser_inline;
    var LinkifyIt    = linkifyIt;
    var mdurl        = mdurl$1;
    var punycode     = require$$8;
 
 
    var config = {
      default: _default,
      zero: zero,
      commonmark: commonmark
    };
 
    ////////////////////////////////////////////////////////////////////////////////
    //
    // This validator can prohibit more than really needed to prevent XSS. It's a
    // tradeoff to keep code simple and to be secure by default.
    //
    // If you need different setup - override validator method as you wish. Or
    // replace it with dummy function and use external sanitizer.
    //
 
    var BAD_PROTO_RE = /^(vbscript|javascript|file|data):/;
    var GOOD_DATA_RE = /^data:image\/(gif|png|jpeg|webp);/;
 
    function validateLink(url) {
      // url should be normalized at this point, and existing entities are decoded
      var str = url.trim().toLowerCase();
 
      return BAD_PROTO_RE.test(str) ? (GOOD_DATA_RE.test(str) ? true : false) : true;
    }
 
    ////////////////////////////////////////////////////////////////////////////////
 
 
    var RECODE_HOSTNAME_FOR = [ 'http:', 'https:', 'mailto:' ];
 
    function normalizeLink(url) {
      var parsed = mdurl.parse(url, true);
 
      if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toASCII(parsed.hostname);
          } catch (er) { /**/ }
        }
      }
 
      return mdurl.encode(mdurl.format(parsed));
    }
 
    function normalizeLinkText(url) {
      var parsed = mdurl.parse(url, true);
 
      if (parsed.hostname) {
        // Encode hostnames in urls like:
        // `http://host/`, `https://host/`, `mailto:user@host`, `//host/`
        //
        // We don't encode unknown schemas, because it's likely that we encode
        // something we shouldn't (e.g. `skype:name` treated as `skype:host`)
        //
        if (!parsed.protocol || RECODE_HOSTNAME_FOR.indexOf(parsed.protocol) >= 0) {
          try {
            parsed.hostname = punycode.toUnicode(parsed.hostname);
          } catch (er) { /**/ }
        }
      }
 
      // add '%' to exclude list because of https://github.com/markdown-it/markdown-it/issues/720
      return mdurl.decode(mdurl.format(parsed), mdurl.decode.defaultChars + '%');
    }
 
 
    /**
     * class MarkdownIt
     *
     * Main parser/renderer class.
     *
     * ##### Usage
     *
     * ```javascript
     * // node.js, "classic" way:
     * var MarkdownIt = require('markdown-it'),
     *     md = new MarkdownIt();
     * var result = md.render('# markdown-it rulezz!');
     *
     * // node.js, the same, but with sugar:
     * var md = require('markdown-it')();
     * var result = md.render('# markdown-it rulezz!');
     *
     * // browser without AMD, added to "window" on script load
     * // Note, there are no dash.
     * var md = window.markdownit();
     * var result = md.render('# markdown-it rulezz!');
     * ```
     *
     * Single line rendering, without paragraph wrap:
     *
     * ```javascript
     * var md = require('markdown-it')();
     * var result = md.renderInline('__markdown-it__ rulezz!');
     * ```
     **/
 
    /**
     * new MarkdownIt([presetName, options])
     * - presetName (String): optional, `commonmark` / `zero`
     * - options (Object)
     *
     * Creates parser instanse with given config. Can be called without `new`.
     *
     * ##### presetName
     *
     * MarkdownIt provides named presets as a convenience to quickly
     * enable/disable active syntax rules and options for common use cases.
     *
     * - ["commonmark"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/commonmark.js) -
     *   configures parser to strict [CommonMark](http://commonmark.org/) mode.
     * - [default](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/default.js) -
     *   similar to GFM, used when no preset name given. Enables all available rules,
     *   but still without html, typographer & autolinker.
     * - ["zero"](https://github.com/markdown-it/markdown-it/blob/master/lib/presets/zero.js) -
     *   all rules disabled. Useful to quickly setup your config via `.enable()`.
     *   For example, when you need only `bold` and `italic` markup and nothing else.
     *
     * ##### options:
     *
     * - __html__ - `false`. Set `true` to enable HTML tags in source. Be careful!
     *   That's not safe! You may need external sanitizer to protect output from XSS.
     *   It's better to extend features via plugins, instead of enabling HTML.
     * - __xhtmlOut__ - `false`. Set `true` to add '/' when closing single tags
     *   (`<br />`). This is needed only for full CommonMark compatibility. In real
     *   world you will need HTML output.
     * - __breaks__ - `false`. Set `true` to convert `\n` in paragraphs into `<br>`.
     * - __langPrefix__ - `language-`. CSS language class prefix for fenced blocks.
     *   Can be useful for external highlighters.
     * - __linkify__ - `false`. Set `true` to autoconvert URL-like text to links.
     * - __typographer__  - `false`. Set `true` to enable [some language-neutral
     *   replacement](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/replacements.js) +
     *   quotes beautification (smartquotes).
     * - __quotes__ - `“”‘’`, String or Array. Double + single quotes replacement
     *   pairs, when typographer enabled and smartquotes on. For example, you can
     *   use `'«»„“'` for Russian, `'„“‚‘'` for German, and
     *   `['«\xA0', '\xA0»', '‹\xA0', '\xA0›']` for French (including nbsp).
     * - __highlight__ - `null`. Highlighter function for fenced code blocks.
     *   Highlighter `function (str, lang)` should return escaped HTML. It can also
     *   return empty string if the source was not changed and should be escaped
     *   externaly. If result starts with <pre... internal wrapper is skipped.
     *
     * ##### Example
     *
     * ```javascript
     * // commonmark mode
     * var md = require('markdown-it')('commonmark');
     *
     * // default mode
     * var md = require('markdown-it')();
     *
     * // enable everything
     * var md = require('markdown-it')({
     *   html: true,
     *   linkify: true,
     *   typographer: true
     * });
     * ```
     *
     * ##### Syntax highlighting
     *
     * ```js
     * var hljs = require('highlight.js') // https://highlightjs.org/
     *
     * var md = require('markdown-it')({
     *   highlight: function (str, lang) {
     *     if (lang && hljs.getLanguage(lang)) {
     *       try {
     *         return hljs.highlight(str, { language: lang, ignoreIllegals: true }).value;
     *       } catch (__) {}
     *     }
     *
     *     return ''; // use external default escaping
     *   }
     * });
     * ```
     *
     * Or with full wrapper override (if you need assign class to `<pre>`):
     *
     * ```javascript
     * var hljs = require('highlight.js') // https://highlightjs.org/
     *
     * // Actual default values
     * var md = require('markdown-it')({
     *   highlight: function (str, lang) {
     *     if (lang && hljs.getLanguage(lang)) {
     *       try {
     *         return '<pre class="hljs"><code>' +
     *                hljs.highlight(str, { language: lang, ignoreIllegals: true }).value +
     *                '</code></pre>';
     *       } catch (__) {}
     *     }
     *
     *     return '<pre class="hljs"><code>' + md.utils.escapeHtml(str) + '</code></pre>';
     *   }
     * });
     * ```
     *
     **/
    function MarkdownIt$1(presetName, options) {
      if (!(this instanceof MarkdownIt$1)) {
        return new MarkdownIt$1(presetName, options);
      }
 
      if (!options) {
        if (!utils.isString(presetName)) {
          options = presetName || {};
          presetName = 'default';
        }
      }
 
      /**
       * MarkdownIt#inline -> ParserInline
       *
       * Instance of [[ParserInline]]. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/
      this.inline = new ParserInline();
 
      /**
       * MarkdownIt#block -> ParserBlock
       *
       * Instance of [[ParserBlock]]. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/
      this.block = new ParserBlock();
 
      /**
       * MarkdownIt#core -> Core
       *
       * Instance of [[Core]] chain executor. You may need it to add new rules when
       * writing plugins. For simple rules control use [[MarkdownIt.disable]] and
       * [[MarkdownIt.enable]].
       **/
      this.core = new ParserCore();
 
      /**
       * MarkdownIt#renderer -> Renderer
       *
       * Instance of [[Renderer]]. Use it to modify output look. Or to add rendering
       * rules for new token types, generated by plugins.
       *
       * ##### Example
       *
       * ```javascript
       * var md = require('markdown-it')();
       *
       * function myToken(tokens, idx, options, env, self) {
       *   //...
       *   return result;
       * };
       *
       * md.renderer.rules['my_token'] = myToken
       * ```
       *
       * See [[Renderer]] docs and [source code](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js).
       **/
      this.renderer = new Renderer();
 
      /**
       * MarkdownIt#linkify -> LinkifyIt
       *
       * [linkify-it](https://github.com/markdown-it/linkify-it) instance.
       * Used by [linkify](https://github.com/markdown-it/markdown-it/blob/master/lib/rules_core/linkify.js)
       * rule.
       **/
      this.linkify = new LinkifyIt();
 
      /**
       * MarkdownIt#validateLink(url) -> Boolean
       *
       * Link validation function. CommonMark allows too much in links. By default
       * we disable `javascript:`, `vbscript:`, `file:` schemas, and almost all `data:...` schemas
       * except some embedded image types.
       *
       * You can change this behaviour:
       *
       * ```javascript
       * var md = require('markdown-it')();
       * // enable everything
       * md.validateLink = function () { return true; }
       * ```
       **/
      this.validateLink = validateLink;
 
      /**
       * MarkdownIt#normalizeLink(url) -> String
       *
       * Function used to encode link url to a machine-readable format,
       * which includes url-encoding, punycode, etc.
       **/
      this.normalizeLink = normalizeLink;
 
      /**
       * MarkdownIt#normalizeLinkText(url) -> String
       *
       * Function used to decode link url to a human-readable format`
       **/
      this.normalizeLinkText = normalizeLinkText;
 
 
      // Expose utils & helpers for easy acces from plugins
 
      /**
       * MarkdownIt#utils -> utils
       *
       * Assorted utility functions, useful to write plugins. See details
       * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/common/utils.js).
       **/
      this.utils = utils;
 
      /**
       * MarkdownIt#helpers -> helpers
       *
       * Link components parser functions, useful to write plugins. See details
       * [here](https://github.com/markdown-it/markdown-it/blob/master/lib/helpers).
       **/
      this.helpers = utils.assign({}, helpers);
 
 
      this.options = {};
      this.configure(presetName);
 
      if (options) { this.set(options); }
    }
 
 
    /** chainable
     * MarkdownIt.set(options)
     *
     * Set parser options (in the same format as in constructor). Probably, you
     * will never need it, but you can change options after constructor call.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')()
     *             .set({ html: true, breaks: true })
     *             .set({ typographer, true });
     * ```
     *
     * __Note:__ To achieve the best possible performance, don't modify a
     * `markdown-it` instance options on the fly. If you need multiple configurations
     * it's best to create multiple instances and initialize each with separate
     * config.
     **/
    MarkdownIt$1.prototype.set = function (options) {
      utils.assign(this.options, options);
      return this;
    };
 
 
    /** chainable, internal
     * MarkdownIt.configure(presets)
     *
     * Batch load of all options and compenent settings. This is internal method,
     * and you probably will not need it. But if you will - see available presets
     * and data structure [here](https://github.com/markdown-it/markdown-it/tree/master/lib/presets)
     *
     * We strongly recommend to use presets instead of direct config loads. That
     * will give better compatibility with next versions.
     **/
    MarkdownIt$1.prototype.configure = function (presets) {
      var self = this, presetName;
 
      if (utils.isString(presets)) {
        presetName = presets;
        presets = config[presetName];
        if (!presets) { throw new Error('Wrong `markdown-it` preset "' + presetName + '", check name'); }
      }
 
      if (!presets) { throw new Error('Wrong `markdown-it` preset, can\'t be empty'); }
 
      if (presets.options) { self.set(presets.options); }
 
      if (presets.components) {
        Object.keys(presets.components).forEach(function (name) {
          if (presets.components[name].rules) {
            self[name].ruler.enableOnly(presets.components[name].rules);
          }
          if (presets.components[name].rules2) {
            self[name].ruler2.enableOnly(presets.components[name].rules2);
          }
        });
      }
      return this;
    };
 
 
    /** chainable
     * MarkdownIt.enable(list, ignoreInvalid)
     * - list (String|Array): rule name or list of rule names to enable
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * Enable list or rules. It will automatically find appropriate components,
     * containing rules with given names. If rule not found, and `ignoreInvalid`
     * not set - throws exception.
     *
     * ##### Example
     *
     * ```javascript
     * var md = require('markdown-it')()
     *             .enable(['sub', 'sup'])
     *             .disable('smartquotes');
     * ```
     **/
    MarkdownIt$1.prototype.enable = function (list, ignoreInvalid) {
      var result = [];
 
      if (!Array.isArray(list)) { list = [ list ]; }
 
      [ 'core', 'block', 'inline' ].forEach(function (chain) {
        result = result.concat(this[chain].ruler.enable(list, true));
      }, this);
 
      result = result.concat(this.inline.ruler2.enable(list, true));
 
      var missed = list.filter(function (name) { return result.indexOf(name) < 0; });
 
      if (missed.length && !ignoreInvalid) {
        throw new Error('MarkdownIt. Failed to enable unknown rule(s): ' + missed);
      }
 
      return this;
    };
 
 
    /** chainable
     * MarkdownIt.disable(list, ignoreInvalid)
     * - list (String|Array): rule name or list of rule names to disable.
     * - ignoreInvalid (Boolean): set `true` to ignore errors when rule not found.
     *
     * The same as [[MarkdownIt.enable]], but turn specified rules off.
     **/
    MarkdownIt$1.prototype.disable = function (list, ignoreInvalid) {
      var result = [];
 
      if (!Array.isArray(list)) { list = [ list ]; }
 
      [ 'core', 'block', 'inline' ].forEach(function (chain) {
        result = result.concat(this[chain].ruler.disable(list, true));
      }, this);
 
      result = result.concat(this.inline.ruler2.disable(list, true));
 
      var missed = list.filter(function (name) { return result.indexOf(name) < 0; });
 
      if (missed.length && !ignoreInvalid) {
        throw new Error('MarkdownIt. Failed to disable unknown rule(s): ' + missed);
      }
      return this;
    };
 
 
    /** chainable
     * MarkdownIt.use(plugin, params)
     *
     * Load specified plugin with given params into current parser instance.
     * It's just a sugar to call `plugin(md, params)` with curring.
     *
     * ##### Example
     *
     * ```javascript
     * var iterator = require('markdown-it-for-inline');
     * var md = require('markdown-it')()
     *             .use(iterator, 'foo_replace', 'text', function (tokens, idx) {
     *               tokens[idx].content = tokens[idx].content.replace(/foo/g, 'bar');
     *             });
     * ```
     **/
    MarkdownIt$1.prototype.use = function (plugin /*, params, ... */) {
      var args = [ this ].concat(Array.prototype.slice.call(arguments, 1));
      plugin.apply(plugin, args);
      return this;
    };
 
 
    /** internal
     * MarkdownIt.parse(src, env) -> Array
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Parse input string and return list of block tokens (special token type
     * "inline" will contain list of inline tokens). You should not call this
     * method directly, until you write custom renderer (for example, to produce
     * AST).
     *
     * `env` is used to pass data between "distributed" rules and return additional
     * metadata like reference info, needed for the renderer. It also can be used to
     * inject data in specific cases. Usually, you will be ok to pass `{}`,
     * and then pass updated object to renderer.
     **/
    MarkdownIt$1.prototype.parse = function (src, env) {
      if (typeof src !== 'string') {
        throw new Error('Input data should be a String');
      }
 
      var state = new this.core.State(src, this, env);
 
      this.core.process(state);
 
      return state.tokens;
    };
 
 
    /**
     * MarkdownIt.render(src [, env]) -> String
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Render markdown string into html. It does all magic for you :).
     *
     * `env` can be used to inject additional metadata (`{}` by default).
     * But you will not need it with high probability. See also comment
     * in [[MarkdownIt.parse]].
     **/
    MarkdownIt$1.prototype.render = function (src, env) {
      env = env || {};
 
      return this.renderer.render(this.parse(src, env), this.options, env);
    };
 
 
    /** internal
     * MarkdownIt.parseInline(src, env) -> Array
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * The same as [[MarkdownIt.parse]] but skip all block rules. It returns the
     * block tokens list with the single `inline` element, containing parsed inline
     * tokens in `children` property. Also updates `env` object.
     **/
    MarkdownIt$1.prototype.parseInline = function (src, env) {
      var state = new this.core.State(src, this, env);
 
      state.inlineMode = true;
      this.core.process(state);
 
      return state.tokens;
    };
 
 
    /**
     * MarkdownIt.renderInline(src [, env]) -> String
     * - src (String): source string
     * - env (Object): environment sandbox
     *
     * Similar to [[MarkdownIt.render]] but for single paragraph content. Result
     * will NOT be wrapped into `<p>` tags.
     **/
    MarkdownIt$1.prototype.renderInline = function (src, env) {
      env = env || {};
 
      return this.renderer.render(this.parseInline(src, env), this.options, env);
    };
 
 
    var lib$1 = MarkdownIt$1;
 
    var markdownIt = lib$1;
 
    var MarkdownIt = /*@__PURE__*/getDefaultExportFromCjs(markdownIt);
 
    /* eslint-disable no-multi-assign */
 
    function deepFreeze(obj) {
      if (obj instanceof Map) {
        obj.clear =
          obj.delete =
          obj.set =
            function () {
              throw new Error('map is read-only');
            };
      } else if (obj instanceof Set) {
        obj.add =
          obj.clear =
          obj.delete =
            function () {
              throw new Error('set is read-only');
            };
      }
 
      // Freeze self
      Object.freeze(obj);
 
      Object.getOwnPropertyNames(obj).forEach((name) => {
        const prop = obj[name];
        const type = typeof prop;
 
        // Freeze prop if it is an object or function and also not already frozen
        if ((type === 'object' || type === 'function') && !Object.isFrozen(prop)) {
          deepFreeze(prop);
        }
      });
 
      return obj;
    }
 
    /** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */
    /** @typedef {import('highlight.js').CompiledMode} CompiledMode */
    /** @implements CallbackResponse */
 
    class Response {
      /**
       * @param {CompiledMode} mode
       */
      constructor(mode) {
        // eslint-disable-next-line no-undefined
        if (mode.data === undefined) mode.data = {};
 
        this.data = mode.data;
        this.isMatchIgnored = false;
      }
 
      ignoreMatch() {
        this.isMatchIgnored = true;
      }
    }
 
    /**
     * @param {string} value
     * @returns {string}
     */
    function escapeHTML(value) {
      return value
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#x27;');
    }
 
    /**
     * performs a shallow merge of multiple objects into one
     *
     * @template T
     * @param {T} original
     * @param {Record<string,any>[]} objects
     * @returns {T} a single new object
     */
    function inherit$1(original, ...objects) {
      /** @type Record<string,any> */
      const result = Object.create(null);
 
      for (const key in original) {
        result[key] = original[key];
      }
      objects.forEach(function(obj) {
        for (const key in obj) {
          result[key] = obj[key];
        }
      });
      return /** @type {T} */ (result);
    }
 
    /**
     * @typedef {object} Renderer
     * @property {(text: string) => void} addText
     * @property {(node: Node) => void} openNode
     * @property {(node: Node) => void} closeNode
     * @property {() => string} value
     */
 
    /** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */
    /** @typedef {{walk: (r: Renderer) => void}} Tree */
    /** */
 
    const SPAN_CLOSE = '</span>';
 
    /**
     * Determines if a node needs to be wrapped in <span>
     *
     * @param {Node} node */
    const emitsWrappingTags = (node) => {
      // rarely we can have a sublanguage where language is undefined
      // TODO: track down why
      return !!node.scope;
    };
 
    /**
     *
     * @param {string} name
     * @param {{prefix:string}} options
     */
    const scopeToCSSClass = (name, { prefix }) => {
      // sub-language
      if (name.startsWith("language:")) {
        return name.replace("language:", "language-");
      }
      // tiered scope: comment.line
      if (name.includes(".")) {
        const pieces = name.split(".");
        return [
          `${prefix}${pieces.shift()}`,
          ...(pieces.map((x, i) => `${x}${"_".repeat(i + 1)}`))
        ].join(" ");
      }
      // simple scope
      return `${prefix}${name}`;
    };
 
    /** @type {Renderer} */
    class HTMLRenderer {
      /**
       * Creates a new HTMLRenderer
       *
       * @param {Tree} parseTree - the parse tree (must support `walk` API)
       * @param {{classPrefix: string}} options
       */
      constructor(parseTree, options) {
        this.buffer = "";
        this.classPrefix = options.classPrefix;
        parseTree.walk(this);
      }
 
      /**
       * Adds texts to the output stream
       *
       * @param {string} text */
      addText(text) {
        this.buffer += escapeHTML(text);
      }
 
      /**
       * Adds a node open to the output stream (if needed)
       *
       * @param {Node} node */
      openNode(node) {
        if (!emitsWrappingTags(node)) return;
 
        const className = scopeToCSSClass(node.scope,
          { prefix: this.classPrefix });
        this.span(className);
      }
 
      /**
       * Adds a node close to the output stream (if needed)
       *
       * @param {Node} node */
      closeNode(node) {
        if (!emitsWrappingTags(node)) return;
 
        this.buffer += SPAN_CLOSE;
      }
 
      /**
       * returns the accumulated buffer
      */
      value() {
        return this.buffer;
      }
 
      // helpers
 
      /**
       * Builds a span element
       *
       * @param {string} className */
      span(className) {
        this.buffer += `<span class="${className}">`;
      }
    }
 
    /** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} | string} Node */
    /** @typedef {{scope?: string, language?: string, sublanguage?: boolean, children: Node[]} } DataNode */
    /** @typedef {import('highlight.js').Emitter} Emitter */
    /**  */
 
    /** @returns {DataNode} */
    const newNode = (opts = {}) => {
      /** @type DataNode */
      const result = { children: [] };
      Object.assign(result, opts);
      return result;
    };
 
    class TokenTree {
      constructor() {
        /** @type DataNode */
        this.rootNode = newNode();
        this.stack = [this.rootNode];
      }
 
      get top() {
        return this.stack[this.stack.length - 1];
      }
 
      get root() { return this.rootNode; }
 
      /** @param {Node} node */
      add(node) {
        this.top.children.push(node);
      }
 
      /** @param {string} scope */
      openNode(scope) {
        /** @type Node */
        const node = newNode({ scope });
        this.add(node);
        this.stack.push(node);
      }
 
      closeNode() {
        if (this.stack.length > 1) {
          return this.stack.pop();
        }
        // eslint-disable-next-line no-undefined
        return undefined;
      }
 
      closeAllNodes() {
        while (this.closeNode());
      }
 
      toJSON() {
        return JSON.stringify(this.rootNode, null, 4);
      }
 
      /**
       * @typedef { import("./html_renderer").Renderer } Renderer
       * @param {Renderer} builder
       */
      walk(builder) {
        // this does not
        return this.constructor._walk(builder, this.rootNode);
        // this works
        // return TokenTree._walk(builder, this.rootNode);
      }
 
      /**
       * @param {Renderer} builder
       * @param {Node} node
       */
      static _walk(builder, node) {
        if (typeof node === "string") {
          builder.addText(node);
        } else if (node.children) {
          builder.openNode(node);
          node.children.forEach((child) => this._walk(builder, child));
          builder.closeNode(node);
        }
        return builder;
      }
 
      /**
       * @param {Node} node
       */
      static _collapse(node) {
        if (typeof node === "string") return;
        if (!node.children) return;
 
        if (node.children.every(el => typeof el === "string")) {
          // node.text = node.children.join("");
          // delete node.children;
          node.children = [node.children.join("")];
        } else {
          node.children.forEach((child) => {
            TokenTree._collapse(child);
          });
        }
      }
    }
 
    /**
      Currently this is all private API, but this is the minimal API necessary
      that an Emitter must implement to fully support the parser.
 
      Minimal interface:
 
      - addText(text)
      - __addSublanguage(emitter, subLanguageName)
      - startScope(scope)
      - endScope()
      - finalize()
      - toHTML()
 
    */
 
    /**
     * @implements {Emitter}
     */
    class TokenTreeEmitter extends TokenTree {
      /**
       * @param {*} options
       */
      constructor(options) {
        super();
        this.options = options;
      }
 
      /**
       * @param {string} text
       */
      addText(text) {
        if (text === "") { return; }
 
        this.add(text);
      }
 
      /** @param {string} scope */
      startScope(scope) {
        this.openNode(scope);
      }
 
      endScope() {
        this.closeNode();
      }
 
      /**
       * @param {Emitter & {root: DataNode}} emitter
       * @param {string} name
       */
      __addSublanguage(emitter, name) {
        /** @type DataNode */
        const node = emitter.root;
        if (name) node.scope = `language:${name}`;
 
        this.add(node);
      }
 
      toHTML() {
        const renderer = new HTMLRenderer(this, this.options);
        return renderer.value();
      }
 
      finalize() {
        this.closeAllNodes();
        return true;
      }
    }
 
    /**
     * @param {string} value
     * @returns {RegExp}
     * */
 
    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function source(re) {
      if (!re) return null;
      if (typeof re === "string") return re;
 
      return re.source;
    }
 
    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function lookahead(re) {
      return concat('(?=', re, ')');
    }
 
    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function anyNumberOfTimes(re) {
      return concat('(?:', re, ')*');
    }
 
    /**
     * @param {RegExp | string } re
     * @returns {string}
     */
    function optional(re) {
      return concat('(?:', re, ')?');
    }
 
    /**
     * @param {...(RegExp | string) } args
     * @returns {string}
     */
    function concat(...args) {
      const joined = args.map((x) => source(x)).join("");
      return joined;
    }
 
    /**
     * @param { Array<string | RegExp | Object> } args
     * @returns {object}
     */
    function stripOptionsFromArgs(args) {
      const opts = args[args.length - 1];
 
      if (typeof opts === 'object' && opts.constructor === Object) {
        args.splice(args.length - 1, 1);
        return opts;
      } else {
        return {};
      }
    }
 
    /** @typedef { {capture?: boolean} } RegexEitherOptions */
 
    /**
     * Any of the passed expresssions may match
     *
     * Creates a huge this | this | that | that match
     * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
     * @returns {string}
     */
    function either(...args) {
      /** @type { object & {capture?: boolean} }  */
      const opts = stripOptionsFromArgs(args);
      const joined = '('
        + (opts.capture ? "" : "?:")
        + args.map((x) => source(x)).join("|") + ")";
      return joined;
    }
 
    /**
     * @param {RegExp | string} re
     * @returns {number}
     */
    function countMatchGroups(re) {
      return (new RegExp(re.toString() + '|')).exec('').length - 1;
    }
 
    /**
     * Does lexeme start with a regular expression match at the beginning
     * @param {RegExp} re
     * @param {string} lexeme
     */
    function startsWith(re, lexeme) {
      const match = re && re.exec(lexeme);
      return match && match.index === 0;
    }
 
    // BACKREF_RE matches an open parenthesis or backreference. To avoid
    // an incorrect parse, it additionally matches the following:
    // - [...] elements, where the meaning of parentheses and escapes change
    // - other escape sequences, so we do not misparse escape sequences as
    //   interesting elements
    // - non-matching or lookahead parentheses, which do not capture. These
    //   follow the '(' with a '?'.
    const BACKREF_RE = /\[(?:[^\\\]]|\\.)*\]|\(\??|\\([1-9][0-9]*)|\\./;
 
    // **INTERNAL** Not intended for outside usage
    // join logically computes regexps.join(separator), but fixes the
    // backreferences so they continue to match.
    // it also places each individual regular expression into it's own
    // match group, keeping track of the sequencing of those match groups
    // is currently an exercise for the caller. :-)
    /**
     * @param {(string | RegExp)[]} regexps
     * @param {{joinWith: string}} opts
     * @returns {string}
     */
    function _rewriteBackreferences(regexps, { joinWith }) {
      let numCaptures = 0;
 
      return regexps.map((regex) => {
        numCaptures += 1;
        const offset = numCaptures;
        let re = source(regex);
        let out = '';
 
        while (re.length > 0) {
          const match = BACKREF_RE.exec(re);
          if (!match) {
            out += re;
            break;
          }
          out += re.substring(0, match.index);
          re = re.substring(match.index + match[0].length);
          if (match[0][0] === '\\' && match[1]) {
            // Adjust the backreference.
            out += '\\' + String(Number(match[1]) + offset);
          } else {
            out += match[0];
            if (match[0] === '(') {
              numCaptures++;
            }
          }
        }
        return out;
      }).map(re => `(${re})`).join(joinWith);
    }
 
    /** @typedef {import('highlight.js').Mode} Mode */
    /** @typedef {import('highlight.js').ModeCallback} ModeCallback */
 
    // Common regexps
    const MATCH_NOTHING_RE = /\b\B/;
    const IDENT_RE = '[a-zA-Z]\\w*';
    const UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\w*';
    const NUMBER_RE = '\\b\\d+(\\.\\d+)?';
    const C_NUMBER_RE = '(-?)(\\b0[xX][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)'; // 0x..., 0..., decimal, float
    const BINARY_NUMBER_RE = '\\b(0b[01]+)'; // 0b...
    const RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\*|\\*=|\\+|\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\?|\\[|\\{|\\(|\\^|\\^=|\\||\\|=|\\|\\||~';
 
    /**
    * @param { Partial<Mode> & {binary?: string | RegExp} } opts
    */
    const SHEBANG = (opts = {}) => {
      const beginShebang = /^#![ ]*\//;
      if (opts.binary) {
        opts.begin = concat(
          beginShebang,
          /.*\b/,
          opts.binary,
          /\b.*/);
      }
      return inherit$1({
        scope: 'meta',
        begin: beginShebang,
        end: /$/,
        relevance: 0,
        /** @type {ModeCallback} */
        "on:begin": (m, resp) => {
          if (m.index !== 0) resp.ignoreMatch();
        }
      }, opts);
    };
 
    // Common modes
    const BACKSLASH_ESCAPE = {
      begin: '\\\\[\\s\\S]', relevance: 0
    };
    const APOS_STRING_MODE = {
      scope: 'string',
      begin: '\'',
      end: '\'',
      illegal: '\\n',
      contains: [BACKSLASH_ESCAPE]
    };
    const QUOTE_STRING_MODE = {
      scope: 'string',
      begin: '"',
      end: '"',
      illegal: '\\n',
      contains: [BACKSLASH_ESCAPE]
    };
    const PHRASAL_WORDS_MODE = {
      begin: /\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\b/
    };
    /**
     * Creates a comment mode
     *
     * @param {string | RegExp} begin
     * @param {string | RegExp} end
     * @param {Mode | {}} [modeOptions]
     * @returns {Partial<Mode>}
     */
    const COMMENT = function(begin, end, modeOptions = {}) {
      const mode = inherit$1(
        {
          scope: 'comment',
          begin,
          end,
          contains: []
        },
        modeOptions
      );
      mode.contains.push({
        scope: 'doctag',
        // hack to avoid the space from being included. the space is necessary to
        // match here to prevent the plain text rule below from gobbling up doctags
        begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',
        end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,
        excludeBegin: true,
        relevance: 0
      });
      const ENGLISH_WORD = either(
        // list of common 1 and 2 letter words in English
        "I",
        "a",
        "is",
        "so",
        "us",
        "to",
        "at",
        "if",
        "in",
        "it",
        "on",
        // note: this is not an exhaustive list of contractions, just popular ones
        /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc
        /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.
        /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences
      );
      // looking like plain text, more likely to be a comment
      mode.contains.push(
        {
          // TODO: how to include ", (, ) without breaking grammars that use these for
          // comment delimiters?
          // begin: /[ ]+([()"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()":]?([.][ ]|[ ]|\))){3}/
          // ---
 
          // this tries to find sequences of 3 english words in a row (without any
          // "programming" type syntax) this gives us a strong signal that we've
          // TRULY found a comment - vs perhaps scanning with the wrong language.
          // It's possible to find something that LOOKS like the start of the
          // comment - but then if there is no readable text - good chance it is a
          // false match and not a comment.
          //
          // for a visual example please see:
          // https://github.com/highlightjs/highlight.js/issues/2827
 
          begin: concat(
            /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */
            '(',
            ENGLISH_WORD,
            /[.]?[:]?([.][ ]|[ ])/,
            '){3}') // look for 3 words in a row
        }
      );
      return mode;
    };
    const C_LINE_COMMENT_MODE = COMMENT('//', '$');
    const C_BLOCK_COMMENT_MODE = COMMENT('/\\*', '\\*/');
    const HASH_COMMENT_MODE = COMMENT('#', '$');
    const NUMBER_MODE = {
      scope: 'number',
      begin: NUMBER_RE,
      relevance: 0
    };
    const C_NUMBER_MODE = {
      scope: 'number',
      begin: C_NUMBER_RE,
      relevance: 0
    };
    const BINARY_NUMBER_MODE = {
      scope: 'number',
      begin: BINARY_NUMBER_RE,
      relevance: 0
    };
    const REGEXP_MODE = {
      // this outer rule makes sure we actually have a WHOLE regex and not simply
      // an expression such as:
      //
      //     3 / something
      //
      // (which will then blow up when regex's `illegal` sees the newline)
      begin: /(?=\/[^/\n]*\/)/,
      contains: [{
        scope: 'regexp',
        begin: /\//,
        end: /\/[gimuy]*/,
        illegal: /\n/,
        contains: [
          BACKSLASH_ESCAPE,
          {
            begin: /\[/,
            end: /\]/,
            relevance: 0,
            contains: [BACKSLASH_ESCAPE]
          }
        ]
      }]
    };
    const TITLE_MODE = {
      scope: 'title',
      begin: IDENT_RE,
      relevance: 0
    };
    const UNDERSCORE_TITLE_MODE = {
      scope: 'title',
      begin: UNDERSCORE_IDENT_RE,
      relevance: 0
    };
    const METHOD_GUARD = {
      // excludes method names from keyword processing
      begin: '\\.\\s*' + UNDERSCORE_IDENT_RE,
      relevance: 0
    };
 
    /**
     * Adds end same as begin mechanics to a mode
     *
     * Your mode must include at least a single () match group as that first match
     * group is what is used for comparison
     * @param {Partial<Mode>} mode
     */
    const END_SAME_AS_BEGIN = function(mode) {
      return Object.assign(mode,
        {
          /** @type {ModeCallback} */
          'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },
          /** @type {ModeCallback} */
          'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }
        });
    };
 
    var MODES = /*#__PURE__*/Object.freeze({
      __proto__: null,
      MATCH_NOTHING_RE: MATCH_NOTHING_RE,
      IDENT_RE: IDENT_RE,
      UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,
      NUMBER_RE: NUMBER_RE,
      C_NUMBER_RE: C_NUMBER_RE,
      BINARY_NUMBER_RE: BINARY_NUMBER_RE,
      RE_STARTERS_RE: RE_STARTERS_RE,
      SHEBANG: SHEBANG,
      BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,
      APOS_STRING_MODE: APOS_STRING_MODE,
      QUOTE_STRING_MODE: QUOTE_STRING_MODE,
      PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,
      COMMENT: COMMENT,
      C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,
      C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,
      HASH_COMMENT_MODE: HASH_COMMENT_MODE,
      NUMBER_MODE: NUMBER_MODE,
      C_NUMBER_MODE: C_NUMBER_MODE,
      BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,
      REGEXP_MODE: REGEXP_MODE,
      TITLE_MODE: TITLE_MODE,
      UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE,
      METHOD_GUARD: METHOD_GUARD,
      END_SAME_AS_BEGIN: END_SAME_AS_BEGIN
    });
 
    /**
    @typedef {import('highlight.js').CallbackResponse} CallbackResponse
    @typedef {import('highlight.js').CompilerExt} CompilerExt
    */
 
    // Grammar extensions / plugins
    // See: https://github.com/highlightjs/highlight.js/issues/2833
 
    // Grammar extensions allow "syntactic sugar" to be added to the grammar modes
    // without requiring any underlying changes to the compiler internals.
 
    // `compileMatch` being the perfect small example of now allowing a grammar
    // author to write `match` when they desire to match a single expression rather
    // than being forced to use `begin`.  The extension then just moves `match` into
    // `begin` when it runs.  Ie, no features have been added, but we've just made
    // the experience of writing (and reading grammars) a little bit nicer.
 
    // ------
 
    // TODO: We need negative look-behind support to do this properly
    /**
     * Skip a match if it has a preceding dot
     *
     * This is used for `beginKeywords` to prevent matching expressions such as
     * `bob.keyword.do()`. The mode compiler automatically wires this up as a
     * special _internal_ 'on:begin' callback for modes with `beginKeywords`
     * @param {RegExpMatchArray} match
     * @param {CallbackResponse} response
     */
    function skipIfHasPrecedingDot(match, response) {
      const before = match.input[match.index - 1];
      if (before === ".") {
        response.ignoreMatch();
      }
    }
 
    /**
     *
     * @type {CompilerExt}
     */
    function scopeClassName(mode, _parent) {
      // eslint-disable-next-line no-undefined
      if (mode.className !== undefined) {
        mode.scope = mode.className;
        delete mode.className;
      }
    }
 
    /**
     * `beginKeywords` syntactic sugar
     * @type {CompilerExt}
     */
    function beginKeywords(mode, parent) {
      if (!parent) return;
      if (!mode.beginKeywords) return;
 
      // for languages with keywords that include non-word characters checking for
      // a word boundary is not sufficient, so instead we check for a word boundary
      // or whitespace - this does no harm in any case since our keyword engine
      // doesn't allow spaces in keywords anyways and we still check for the boundary
      // first
      mode.begin = '\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\.)(?=\\b|\\s)';
      mode.__beforeBegin = skipIfHasPrecedingDot;
      mode.keywords = mode.keywords || mode.beginKeywords;
      delete mode.beginKeywords;
 
      // prevents double relevance, the keywords themselves provide
      // relevance, the mode doesn't need to double it
      // eslint-disable-next-line no-undefined
      if (mode.relevance === undefined) mode.relevance = 0;
    }
 
    /**
     * Allow `illegal` to contain an array of illegal values
     * @type {CompilerExt}
     */
    function compileIllegal(mode, _parent) {
      if (!Array.isArray(mode.illegal)) return;
 
      mode.illegal = either(...mode.illegal);
    }
 
    /**
     * `match` to match a single expression for readability
     * @type {CompilerExt}
     */
    function compileMatch(mode, _parent) {
      if (!mode.match) return;
      if (mode.begin || mode.end) throw new Error("begin & end are not supported with match");
 
      mode.begin = mode.match;
      delete mode.match;
    }
 
    /**
     * provides the default 1 relevance to all modes
     * @type {CompilerExt}
     */
    function compileRelevance(mode, _parent) {
      // eslint-disable-next-line no-undefined
      if (mode.relevance === undefined) mode.relevance = 1;
    }
 
    // allow beforeMatch to act as a "qualifier" for the match
    // the full match begin must be [beforeMatch][begin]
    const beforeMatchExt = (mode, parent) => {
      if (!mode.beforeMatch) return;
      // starts conflicts with endsParent which we need to make sure the child
      // rule is not matched multiple times
      if (mode.starts) throw new Error("beforeMatch cannot be used with starts");
 
      const originalMode = Object.assign({}, mode);
      Object.keys(mode).forEach((key) => { delete mode[key]; });
 
      mode.keywords = originalMode.keywords;
      mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));
      mode.starts = {
        relevance: 0,
        contains: [
          Object.assign(originalMode, { endsParent: true })
        ]
      };
      mode.relevance = 0;
 
      delete originalMode.beforeMatch;
    };
 
    // keywords that should have no default relevance value
    const COMMON_KEYWORDS = [
      'of',
      'and',
      'for',
      'in',
      'not',
      'or',
      'if',
      'then',
      'parent', // common variable name
      'list', // common variable name
      'value' // common variable name
    ];
 
    const DEFAULT_KEYWORD_SCOPE = "keyword";
 
    /**
     * Given raw keywords from a language definition, compile them.
     *
     * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords
     * @param {boolean} caseInsensitive
     */
    function compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {
      /** @type {import("highlight.js/private").KeywordDict} */
      const compiledKeywords = Object.create(null);
 
      // input can be a string of keywords, an array of keywords, or a object with
      // named keys representing scopeName (which can then point to a string or array)
      if (typeof rawKeywords === 'string') {
        compileList(scopeName, rawKeywords.split(" "));
      } else if (Array.isArray(rawKeywords)) {
        compileList(scopeName, rawKeywords);
      } else {
        Object.keys(rawKeywords).forEach(function(scopeName) {
          // collapse all our objects back into the parent object
          Object.assign(
            compiledKeywords,
            compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)
          );
        });
      }
      return compiledKeywords;
 
      // ---
 
      /**
       * Compiles an individual list of keywords
       *
       * Ex: "for if when while|5"
       *
       * @param {string} scopeName
       * @param {Array<string>} keywordList
       */
      function compileList(scopeName, keywordList) {
        if (caseInsensitive) {
          keywordList = keywordList.map(x => x.toLowerCase());
        }
        keywordList.forEach(function(keyword) {
          const pair = keyword.split('|');
          compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];
        });
      }
    }
 
    /**
     * Returns the proper score for a given keyword
     *
     * Also takes into account comment keywords, which will be scored 0 UNLESS
     * another score has been manually assigned.
     * @param {string} keyword
     * @param {string} [providedScore]
     */
    function scoreForKeyword(keyword, providedScore) {
      // manual scores always win over common keywords
      // so you can force a score of 1 if you really insist
      if (providedScore) {
        return Number(providedScore);
      }
 
      return commonKeyword(keyword) ? 0 : 1;
    }
 
    /**
     * Determines if a given keyword is common or not
     *
     * @param {string} keyword */
    function commonKeyword(keyword) {
      return COMMON_KEYWORDS.includes(keyword.toLowerCase());
    }
 
    /*
 
    For the reasoning behind this please see:
    https://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419
 
    */
 
    /**
     * @type {Record<string, boolean>}
     */
    const seenDeprecations = {};
 
    /**
     * @param {string} message
     */
    const error = (message) => {
      console.error(message);
    };
 
    /**
     * @param {string} message
     * @param {any} args
     */
    const warn = (message, ...args) => {
      console.log(`WARN: ${message}`, ...args);
    };
 
    /**
     * @param {string} version
     * @param {string} message
     */
    const deprecated = (version, message) => {
      if (seenDeprecations[`${version}/${message}`]) return;
 
      console.log(`Deprecated as of ${version}. ${message}`);
      seenDeprecations[`${version}/${message}`] = true;
    };
 
    /* eslint-disable no-throw-literal */
 
    /**
    @typedef {import('highlight.js').CompiledMode} CompiledMode
    */
 
    const MultiClassError = new Error();
 
    /**
     * Renumbers labeled scope names to account for additional inner match
     * groups that otherwise would break everything.
     *
     * Lets say we 3 match scopes:
     *
     *   { 1 => ..., 2 => ..., 3 => ... }
     *
     * So what we need is a clean match like this:
     *
     *   (a)(b)(c) => [ "a", "b", "c" ]
     *
     * But this falls apart with inner match groups:
     *
     * (a)(((b)))(c) => ["a", "b", "b", "b", "c" ]
     *
     * Our scopes are now "out of alignment" and we're repeating `b` 3 times.
     * What needs to happen is the numbers are remapped:
     *
     *   { 1 => ..., 2 => ..., 5 => ... }
     *
     * We also need to know that the ONLY groups that should be output
     * are 1, 2, and 5.  This function handles this behavior.
     *
     * @param {CompiledMode} mode
     * @param {Array<RegExp | string>} regexes
     * @param {{key: "beginScope"|"endScope"}} opts
     */
    function remapScopeNames(mode, regexes, { key }) {
      let offset = 0;
      const scopeNames = mode[key];
      /** @type Record<number,boolean> */
      const emit = {};
      /** @type Record<number,string> */
      const positions = {};
 
      for (let i = 1; i <= regexes.length; i++) {
        positions[i + offset] = scopeNames[i];
        emit[i + offset] = true;
        offset += countMatchGroups(regexes[i - 1]);
      }
      // we use _emit to keep track of which match groups are "top-level" to avoid double
      // output from inside match groups
      mode[key] = positions;
      mode[key]._emit = emit;
      mode[key]._multi = true;
    }
 
    /**
     * @param {CompiledMode} mode
     */
    function beginMultiClass(mode) {
      if (!Array.isArray(mode.begin)) return;
 
      if (mode.skip || mode.excludeBegin || mode.returnBegin) {
        error("skip, excludeBegin, returnBegin not compatible with beginScope: {}");
        throw MultiClassError;
      }
 
      if (typeof mode.beginScope !== "object" || mode.beginScope === null) {
        error("beginScope must be object");
        throw MultiClassError;
      }
 
      remapScopeNames(mode, mode.begin, { key: "beginScope" });
      mode.begin = _rewriteBackreferences(mode.begin, { joinWith: "" });
    }
 
    /**
     * @param {CompiledMode} mode
     */
    function endMultiClass(mode) {
      if (!Array.isArray(mode.end)) return;
 
      if (mode.skip || mode.excludeEnd || mode.returnEnd) {
        error("skip, excludeEnd, returnEnd not compatible with endScope: {}");
        throw MultiClassError;
      }
 
      if (typeof mode.endScope !== "object" || mode.endScope === null) {
        error("endScope must be object");
        throw MultiClassError;
      }
 
      remapScopeNames(mode, mode.end, { key: "endScope" });
      mode.end = _rewriteBackreferences(mode.end, { joinWith: "" });
    }
 
    /**
     * this exists only to allow `scope: {}` to be used beside `match:`
     * Otherwise `beginScope` would necessary and that would look weird
 
      {
        match: [ /def/, /\w+/ ]
        scope: { 1: "keyword" , 2: "title" }
      }
 
     * @param {CompiledMode} mode
     */
    function scopeSugar(mode) {
      if (mode.scope && typeof mode.scope === "object" && mode.scope !== null) {
        mode.beginScope = mode.scope;
        delete mode.scope;
      }
    }
 
    /**
     * @param {CompiledMode} mode
     */
    function MultiClass(mode) {
      scopeSugar(mode);
 
      if (typeof mode.beginScope === "string") {
        mode.beginScope = { _wrap: mode.beginScope };
      }
      if (typeof mode.endScope === "string") {
        mode.endScope = { _wrap: mode.endScope };
      }
 
      beginMultiClass(mode);
      endMultiClass(mode);
    }
 
    /**
    @typedef {import('highlight.js').Mode} Mode
    @typedef {import('highlight.js').CompiledMode} CompiledMode
    @typedef {import('highlight.js').Language} Language
    @typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
    @typedef {import('highlight.js').CompiledLanguage} CompiledLanguage
    */
 
    // compilation
 
    /**
     * Compiles a language definition result
     *
     * Given the raw result of a language definition (Language), compiles this so
     * that it is ready for highlighting code.
     * @param {Language} language
     * @returns {CompiledLanguage}
     */
    function compileLanguage(language) {
      /**
       * Builds a regex with the case sensitivity of the current language
       *
       * @param {RegExp | string} value
       * @param {boolean} [global]
       */
      function langRe(value, global) {
        return new RegExp(
          source(value),
          'm'
          + (language.case_insensitive ? 'i' : '')
          + (language.unicodeRegex ? 'u' : '')
          + (global ? 'g' : '')
        );
      }
 
      /**
        Stores multiple regular expressions and allows you to quickly search for
        them all in a string simultaneously - returning the first match.  It does
        this by creating a huge (a|b|c) regex - each individual item wrapped with ()
        and joined by `|` - using match groups to track position.  When a match is
        found checking which position in the array has content allows us to figure
        out which of the original regexes / match groups triggered the match.
 
        The match object itself (the result of `Regex.exec`) is returned but also
        enhanced by merging in any meta-data that was registered with the regex.
        This is how we keep track of which mode matched, and what type of rule
        (`illegal`, `begin`, end, etc).
      */
      class MultiRegex {
        constructor() {
          this.matchIndexes = {};
          // @ts-ignore
          this.regexes = [];
          this.matchAt = 1;
          this.position = 0;
        }
 
        // @ts-ignore
        addRule(re, opts) {
          opts.position = this.position++;
          // @ts-ignore
          this.matchIndexes[this.matchAt] = opts;
          this.regexes.push([opts, re]);
          this.matchAt += countMatchGroups(re) + 1;
        }
 
        compile() {
          if (this.regexes.length === 0) {
            // avoids the need to check length every time exec is called
            // @ts-ignore
            this.exec = () => null;
          }
          const terminators = this.regexes.map(el => el[1]);
          this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);
          this.lastIndex = 0;
        }
 
        /** @param {string} s */
        exec(s) {
          this.matcherRe.lastIndex = this.lastIndex;
          const match = this.matcherRe.exec(s);
          if (!match) { return null; }
 
          // eslint-disable-next-line no-undefined
          const i = match.findIndex((el, i) => i > 0 && el !== undefined);
          // @ts-ignore
          const matchData = this.matchIndexes[i];
          // trim off any earlier non-relevant match groups (ie, the other regex
          // match groups that make up the multi-matcher)
          match.splice(0, i);
 
          return Object.assign(match, matchData);
        }
      }
 
      /*
        Created to solve the key deficiently with MultiRegex - there is no way to
        test for multiple matches at a single location.  Why would we need to do
        that?  In the future a more dynamic engine will allow certain matches to be
        ignored.  An example: if we matched say the 3rd regex in a large group but
        decided to ignore it - we'd need to started testing again at the 4th
        regex... but MultiRegex itself gives us no real way to do that.
 
        So what this class creates MultiRegexs on the fly for whatever search
        position they are needed.
 
        NOTE: These additional MultiRegex objects are created dynamically.  For most
        grammars most of the time we will never actually need anything more than the
        first MultiRegex - so this shouldn't have too much overhead.
 
        Say this is our search group, and we match regex3, but wish to ignore it.
 
          regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0
 
        What we need is a new MultiRegex that only includes the remaining
        possibilities:
 
          regex4 | regex5                               ' ie, startAt = 3
 
        This class wraps all that complexity up in a simple API... `startAt` decides
        where in the array of expressions to start doing the matching. It
        auto-increments, so if a match is found at position 2, then startAt will be
        set to 3.  If the end is reached startAt will return to 0.
 
        MOST of the time the parser will be setting startAt manually to 0.
      */
      class ResumableMultiRegex {
        constructor() {
          // @ts-ignore
          this.rules = [];
          // @ts-ignore
          this.multiRegexes = [];
          this.count = 0;
 
          this.lastIndex = 0;
          this.regexIndex = 0;
        }
 
        // @ts-ignore
        getMatcher(index) {
          if (this.multiRegexes[index]) return this.multiRegexes[index];
 
          const matcher = new MultiRegex();
          this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));
          matcher.compile();
          this.multiRegexes[index] = matcher;
          return matcher;
        }
 
        resumingScanAtSamePosition() {
          return this.regexIndex !== 0;
        }
 
        considerAll() {
          this.regexIndex = 0;
        }
 
        // @ts-ignore
        addRule(re, opts) {
          this.rules.push([re, opts]);
          if (opts.type === "begin") this.count++;
        }
 
        /** @param {string} s */
        exec(s) {
          const m = this.getMatcher(this.regexIndex);
          m.lastIndex = this.lastIndex;
          let result = m.exec(s);
 
          // The following is because we have no easy way to say "resume scanning at the
          // existing position but also skip the current rule ONLY". What happens is
          // all prior rules are also skipped which can result in matching the wrong
          // thing. Example of matching "booger":
 
          // our matcher is [string, "booger", number]
          //
          // ....booger....
 
          // if "booger" is ignored then we'd really need a regex to scan from the
          // SAME position for only: [string, number] but ignoring "booger" (if it
          // was the first match), a simple resume would scan ahead who knows how
          // far looking only for "number", ignoring potential string matches (or
          // future "booger" matches that might be valid.)
 
          // So what we do: We execute two matchers, one resuming at the same
          // position, but the second full matcher starting at the position after:
 
          //     /--- resume first regex match here (for [number])
          //     |/---- full match here for [string, "booger", number]
          //     vv
          // ....booger....
 
          // Which ever results in a match first is then used. So this 3-4 step
          // process essentially allows us to say "match at this position, excluding
          // a prior rule that was ignored".
          //
          // 1. Match "booger" first, ignore. Also proves that [string] does non match.
          // 2. Resume matching for [number]
          // 3. Match at index + 1 for [string, "booger", number]
          // 4. If #2 and #3 result in matches, which came first?
          if (this.resumingScanAtSamePosition()) {
            if (result && result.index === this.lastIndex) ; else { // use the second matcher result
              const m2 = this.getMatcher(0);
              m2.lastIndex = this.lastIndex + 1;
              result = m2.exec(s);
            }
          }
 
          if (result) {
            this.regexIndex += result.position + 1;
            if (this.regexIndex === this.count) {
              // wrap-around to considering all matches again
              this.considerAll();
            }
          }
 
          return result;
        }
      }
 
      /**
       * Given a mode, builds a huge ResumableMultiRegex that can be used to walk
       * the content and find matches.
       *
       * @param {CompiledMode} mode
       * @returns {ResumableMultiRegex}
       */
      function buildModeRegex(mode) {
        const mm = new ResumableMultiRegex();
 
        mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: "begin" }));
 
        if (mode.terminatorEnd) {
          mm.addRule(mode.terminatorEnd, { type: "end" });
        }
        if (mode.illegal) {
          mm.addRule(mode.illegal, { type: "illegal" });
        }
 
        return mm;
      }
 
      /** skip vs abort vs ignore
       *
       * @skip   - The mode is still entered and exited normally (and contains rules apply),
       *           but all content is held and added to the parent buffer rather than being
       *           output when the mode ends.  Mostly used with `sublanguage` to build up
       *           a single large buffer than can be parsed by sublanguage.
       *
       *             - The mode begin ands ends normally.
       *             - Content matched is added to the parent mode buffer.
       *             - The parser cursor is moved forward normally.
       *
       * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it
       *           never matched) but DOES NOT continue to match subsequent `contains`
       *           modes.  Abort is bad/suboptimal because it can result in modes
       *           farther down not getting applied because an earlier rule eats the
       *           content but then aborts.
       *
       *             - The mode does not begin.
       *             - Content matched by `begin` is added to the mode buffer.
       *             - The parser cursor is moved forward accordingly.
       *
       * @ignore - Ignores the mode (as if it never matched) and continues to match any
       *           subsequent `contains` modes.  Ignore isn't technically possible with
       *           the current parser implementation.
       *
       *             - The mode does not begin.
       *             - Content matched by `begin` is ignored.
       *             - The parser cursor is not moved forward.
       */
 
      /**
       * Compiles an individual mode
       *
       * This can raise an error if the mode contains certain detectable known logic
       * issues.
       * @param {Mode} mode
       * @param {CompiledMode | null} [parent]
       * @returns {CompiledMode | never}
       */
      function compileMode(mode, parent) {
        const cmode = /** @type CompiledMode */ (mode);
        if (mode.isCompiled) return cmode;
 
        [
          scopeClassName,
          // do this early so compiler extensions generally don't have to worry about
          // the distinction between match/begin
          compileMatch,
          MultiClass,
          beforeMatchExt
        ].forEach(ext => ext(mode, parent));
 
        language.compilerExtensions.forEach(ext => ext(mode, parent));
 
        // __beforeBegin is considered private API, internal use only
        mode.__beforeBegin = null;
 
        [
          beginKeywords,
          // do this later so compiler extensions that come earlier have access to the
          // raw array if they wanted to perhaps manipulate it, etc.
          compileIllegal,
          // default to 1 relevance if not specified
          compileRelevance
        ].forEach(ext => ext(mode, parent));
 
        mode.isCompiled = true;
 
        let keywordPattern = null;
        if (typeof mode.keywords === "object" && mode.keywords.$pattern) {
          // we need a copy because keywords might be compiled multiple times
          // so we can't go deleting $pattern from the original on the first
          // pass
          mode.keywords = Object.assign({}, mode.keywords);
          keywordPattern = mode.keywords.$pattern;
          delete mode.keywords.$pattern;
        }
        keywordPattern = keywordPattern || /\w+/;
 
        if (mode.keywords) {
          mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);
        }
 
        cmode.keywordPatternRe = langRe(keywordPattern, true);
 
        if (parent) {
          if (!mode.begin) mode.begin = /\B|\b/;
          cmode.beginRe = langRe(cmode.begin);
          if (!mode.end && !mode.endsWithParent) mode.end = /\B|\b/;
          if (mode.end) cmode.endRe = langRe(cmode.end);
          cmode.terminatorEnd = source(cmode.end) || '';
          if (mode.endsWithParent && parent.terminatorEnd) {
            cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;
          }
        }
        if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));
        if (!mode.contains) mode.contains = [];
 
        mode.contains = [].concat(...mode.contains.map(function(c) {
          return expandOrCloneMode(c === 'self' ? mode : c);
        }));
        mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });
 
        if (mode.starts) {
          compileMode(mode.starts, parent);
        }
 
        cmode.matcher = buildModeRegex(cmode);
        return cmode;
      }
 
      if (!language.compilerExtensions) language.compilerExtensions = [];
 
      // self is not valid at the top-level
      if (language.contains && language.contains.includes('self')) {
        throw new Error("ERR: contains `self` is not supported at the top-level of a language.  See documentation.");
      }
 
      // we need a null object, which inherit will guarantee
      language.classNameAliases = inherit$1(language.classNameAliases || {});
 
      return compileMode(/** @type Mode */ (language));
    }
 
    /**
     * Determines if a mode has a dependency on it's parent or not
     *
     * If a mode does have a parent dependency then often we need to clone it if
     * it's used in multiple places so that each copy points to the correct parent,
     * where-as modes without a parent can often safely be re-used at the bottom of
     * a mode chain.
     *
     * @param {Mode | null} mode
     * @returns {boolean} - is there a dependency on the parent?
     * */
    function dependencyOnParent(mode) {
      if (!mode) return false;
 
      return mode.endsWithParent || dependencyOnParent(mode.starts);
    }
 
    /**
     * Expands a mode or clones it if necessary
     *
     * This is necessary for modes with parental dependenceis (see notes on
     * `dependencyOnParent`) and for nodes that have `variants` - which must then be
     * exploded into their own individual modes at compile time.
     *
     * @param {Mode} mode
     * @returns {Mode | Mode[]}
     * */
    function expandOrCloneMode(mode) {
      if (mode.variants && !mode.cachedVariants) {
        mode.cachedVariants = mode.variants.map(function(variant) {
          return inherit$1(mode, { variants: null }, variant);
        });
      }
 
      // EXPAND
      // if we have variants then essentially "replace" the mode with the variants
      // this happens in compileMode, where this function is called from
      if (mode.cachedVariants) {
        return mode.cachedVariants;
      }
 
      // CLONE
      // if we have dependencies on parents then we need a unique
      // instance of ourselves, so we can be reused with many
      // different parents without issue
      if (dependencyOnParent(mode)) {
        return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });
      }
 
      if (Object.isFrozen(mode)) {
        return inherit$1(mode);
      }
 
      // no special dependency issues, just return ourselves
      return mode;
    }
 
    var version = "11.8.0";
 
    class HTMLInjectionError extends Error {
      constructor(reason, html) {
        super(reason);
        this.name = "HTMLInjectionError";
        this.html = html;
      }
    }
 
    /*
    Syntax highlighting with language autodetection.
    https://highlightjs.org/
    */
 
 
    /**
    @typedef {import('highlight.js').Mode} Mode
    @typedef {import('highlight.js').CompiledMode} CompiledMode
    @typedef {import('highlight.js').CompiledScope} CompiledScope
    @typedef {import('highlight.js').Language} Language
    @typedef {import('highlight.js').HLJSApi} HLJSApi
    @typedef {import('highlight.js').HLJSPlugin} HLJSPlugin
    @typedef {import('highlight.js').PluginEvent} PluginEvent
    @typedef {import('highlight.js').HLJSOptions} HLJSOptions
    @typedef {import('highlight.js').LanguageFn} LanguageFn
    @typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement
    @typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext
    @typedef {import('highlight.js/private').MatchType} MatchType
    @typedef {import('highlight.js/private').KeywordData} KeywordData
    @typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch
    @typedef {import('highlight.js/private').AnnotatedError} AnnotatedError
    @typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult
    @typedef {import('highlight.js').HighlightOptions} HighlightOptions
    @typedef {import('highlight.js').HighlightResult} HighlightResult
    */
 
 
    const escape = escapeHTML;
    const inherit = inherit$1;
    const NO_MATCH = Symbol("nomatch");
    const MAX_KEYWORD_HITS = 7;
 
    /**
     * @param {any} hljs - object that is extended (legacy)
     * @returns {HLJSApi}
     */
    const HLJS = function(hljs) {
      // Global internal variables used within the highlight.js library.
      /** @type {Record<string, Language>} */
      const languages = Object.create(null);
      /** @type {Record<string, string>} */
      const aliases = Object.create(null);
      /** @type {HLJSPlugin[]} */
      const plugins = [];
 
      // safe/production mode - swallows more errors, tries to keep running
      // even if a single syntax or parse hits a fatal error
      let SAFE_MODE = true;
      const LANGUAGE_NOT_FOUND = "Could not find the language '{}', did you forget to load/include a language module?";
      /** @type {Language} */
      const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };
 
      // Global options used when within external APIs. This is modified when
      // calling the `hljs.configure` function.
      /** @type HLJSOptions */
      let options = {
        ignoreUnescapedHTML: false,
        throwUnescapedHTML: false,
        noHighlightRe: /^(no-?highlight)$/i,
        languageDetectRe: /\blang(?:uage)?-([\w-]+)\b/i,
        classPrefix: 'hljs-',
        cssSelector: 'pre code',
        languages: null,
        // beta configuration options, subject to change, welcome to discuss
        // https://github.com/highlightjs/highlight.js/issues/1086
        __emitter: TokenTreeEmitter
      };
 
      /* Utility functions */
 
      /**
       * Tests a language name to see if highlighting should be skipped
       * @param {string} languageName
       */
      function shouldNotHighlight(languageName) {
        return options.noHighlightRe.test(languageName);
      }
 
      /**
       * @param {HighlightedHTMLElement} block - the HTML element to determine language for
       */
      function blockLanguage(block) {
        let classes = block.className + ' ';
 
        classes += block.parentNode ? block.parentNode.className : '';
 
        // language-* takes precedence over non-prefixed class names.
        const match = options.languageDetectRe.exec(classes);
        if (match) {
          const language = getLanguage(match[1]);
          if (!language) {
            warn(LANGUAGE_NOT_FOUND.replace("{}", match[1]));
            warn("Falling back to no-highlight mode for this block.", block);
          }
          return language ? match[1] : 'no-highlight';
        }
 
        return classes
          .split(/\s+/)
          .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));
      }
 
      /**
       * Core highlighting function.
       *
       * OLD API
       * highlight(lang, code, ignoreIllegals, continuation)
       *
       * NEW API
       * highlight(code, {lang, ignoreIllegals})
       *
       * @param {string} codeOrLanguageName - the language to use for highlighting
       * @param {string | HighlightOptions} optionsOrCode - the code to highlight
       * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
       *
       * @returns {HighlightResult} Result - an object that represents the result
       * @property {string} language - the language name
       * @property {number} relevance - the relevance score
       * @property {string} value - the highlighted HTML code
       * @property {string} code - the original raw code
       * @property {CompiledMode} top - top of the current mode stack
       * @property {boolean} illegal - indicates whether any illegal matches were found
      */
      function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {
        let code = "";
        let languageName = "";
        if (typeof optionsOrCode === "object") {
          code = codeOrLanguageName;
          ignoreIllegals = optionsOrCode.ignoreIllegals;
          languageName = optionsOrCode.language;
        } else {
          // old API
          deprecated("10.7.0", "highlight(lang, code, ...args) has been deprecated.");
          deprecated("10.7.0", "Please use highlight(code, options) instead.\nhttps://github.com/highlightjs/highlight.js/issues/2277");
          languageName = codeOrLanguageName;
          code = optionsOrCode;
        }
 
        // https://github.com/highlightjs/highlight.js/issues/3149
        // eslint-disable-next-line no-undefined
        if (ignoreIllegals === undefined) { ignoreIllegals = true; }
 
        /** @type {BeforeHighlightContext} */
        const context = {
          code,
          language: languageName
        };
        // the plugin can change the desired language or the code to be highlighted
        // just be changing the object it was passed
        fire("before:highlight", context);
 
        // a before plugin can usurp the result completely by providing it's own
        // in which case we don't even need to call highlight
        const result = context.result
          ? context.result
          : _highlight(context.language, context.code, ignoreIllegals);
 
        result.code = context.code;
        // the plugin can change anything in result to suite it
        fire("after:highlight", result);
 
        return result;
      }
 
      /**
       * private highlight that's used internally and does not fire callbacks
       *
       * @param {string} languageName - the language to use for highlighting
       * @param {string} codeToHighlight - the code to highlight
       * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail
       * @param {CompiledMode?} [continuation] - current continuation mode, if any
       * @returns {HighlightResult} - result of the highlight operation
      */
      function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {
        const keywordHits = Object.create(null);
 
        /**
         * Return keyword data if a match is a keyword
         * @param {CompiledMode} mode - current mode
         * @param {string} matchText - the textual match
         * @returns {KeywordData | false}
         */
        function keywordData(mode, matchText) {
          return mode.keywords[matchText];
        }
 
        function processKeywords() {
          if (!top.keywords) {
            emitter.addText(modeBuffer);
            return;
          }
 
          let lastIndex = 0;
          top.keywordPatternRe.lastIndex = 0;
          let match = top.keywordPatternRe.exec(modeBuffer);
          let buf = "";
 
          while (match) {
            buf += modeBuffer.substring(lastIndex, match.index);
            const word = language.case_insensitive ? match[0].toLowerCase() : match[0];
            const data = keywordData(top, word);
            if (data) {
              const [kind, keywordRelevance] = data;
              emitter.addText(buf);
              buf = "";
 
              keywordHits[word] = (keywordHits[word] || 0) + 1;
              if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;
              if (kind.startsWith("_")) {
                // _ implied for relevance only, do not highlight
                // by applying a class name
                buf += match[0];
              } else {
                const cssClass = language.classNameAliases[kind] || kind;
                emitKeyword(match[0], cssClass);
              }
            } else {
              buf += match[0];
            }
            lastIndex = top.keywordPatternRe.lastIndex;
            match = top.keywordPatternRe.exec(modeBuffer);
          }
          buf += modeBuffer.substring(lastIndex);
          emitter.addText(buf);
        }
 
        function processSubLanguage() {
          if (modeBuffer === "") return;
          /** @type HighlightResult */
          let result = null;
 
          if (typeof top.subLanguage === 'string') {
            if (!languages[top.subLanguage]) {
              emitter.addText(modeBuffer);
              return;
            }
            result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);
            continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);
          } else {
            result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);
          }
 
          // Counting embedded language score towards the host language may be disabled
          // with zeroing the containing mode relevance. Use case in point is Markdown that
          // allows XML everywhere and makes every XML snippet to have a much larger Markdown
          // score.
          if (top.relevance > 0) {
            relevance += result.relevance;
          }
          emitter.__addSublanguage(result._emitter, result.language);
        }
 
        function processBuffer() {
          if (top.subLanguage != null) {
            processSubLanguage();
          } else {
            processKeywords();
          }
          modeBuffer = '';
        }
 
        /**
         * @param {string} text
         * @param {string} scope
         */
        function emitKeyword(keyword, scope) {
          if (keyword === "") return;
 
          emitter.startScope(scope);
          emitter.addText(keyword);
          emitter.endScope();
        }
 
        /**
         * @param {CompiledScope} scope
         * @param {RegExpMatchArray} match
         */
        function emitMultiClass(scope, match) {
          let i = 1;
          const max = match.length - 1;
          while (i <= max) {
            if (!scope._emit[i]) { i++; continue; }
            const klass = language.classNameAliases[scope[i]] || scope[i];
            const text = match[i];
            if (klass) {
              emitKeyword(text, klass);
            } else {
              modeBuffer = text;
              processKeywords();
              modeBuffer = "";
            }
            i++;
          }
        }
 
        /**
         * @param {CompiledMode} mode - new mode to start
         * @param {RegExpMatchArray} match
         */
        function startNewMode(mode, match) {
          if (mode.scope && typeof mode.scope === "string") {
            emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);
          }
          if (mode.beginScope) {
            // beginScope just wraps the begin match itself in a scope
            if (mode.beginScope._wrap) {
              emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);
              modeBuffer = "";
            } else if (mode.beginScope._multi) {
              // at this point modeBuffer should just be the match
              emitMultiClass(mode.beginScope, match);
              modeBuffer = "";
            }
          }
 
          top = Object.create(mode, { parent: { value: top } });
          return top;
        }
 
        /**
         * @param {CompiledMode } mode - the mode to potentially end
         * @param {RegExpMatchArray} match - the latest match
         * @param {string} matchPlusRemainder - match plus remainder of content
         * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode
         */
        function endOfMode(mode, match, matchPlusRemainder) {
          let matched = startsWith(mode.endRe, matchPlusRemainder);
 
          if (matched) {
            if (mode["on:end"]) {
              const resp = new Response(mode);
              mode["on:end"](match, resp);
              if (resp.isMatchIgnored) matched = false;
            }
 
            if (matched) {
              while (mode.endsParent && mode.parent) {
                mode = mode.parent;
              }
              return mode;
            }
          }
          // even if on:end fires an `ignore` it's still possible
          // that we might trigger the end node because of a parent mode
          if (mode.endsWithParent) {
            return endOfMode(mode.parent, match, matchPlusRemainder);
          }
        }
 
        /**
         * Handle matching but then ignoring a sequence of text
         *
         * @param {string} lexeme - string containing full match text
         */
        function doIgnore(lexeme) {
          if (top.matcher.regexIndex === 0) {
            // no more regexes to potentially match here, so we move the cursor forward one
            // space
            modeBuffer += lexeme[0];
            return 1;
          } else {
            // no need to move the cursor, we still have additional regexes to try and
            // match at this very spot
            resumeScanAtSamePosition = true;
            return 0;
          }
        }
 
        /**
         * Handle the start of a new potential mode match
         *
         * @param {EnhancedMatch} match - the current match
         * @returns {number} how far to advance the parse cursor
         */
        function doBeginMatch(match) {
          const lexeme = match[0];
          const newMode = match.rule;
 
          const resp = new Response(newMode);
          // first internal before callbacks, then the public ones
          const beforeCallbacks = [newMode.__beforeBegin, newMode["on:begin"]];
          for (const cb of beforeCallbacks) {
            if (!cb) continue;
            cb(match, resp);
            if (resp.isMatchIgnored) return doIgnore(lexeme);
          }
 
          if (newMode.skip) {
            modeBuffer += lexeme;
          } else {
            if (newMode.excludeBegin) {
              modeBuffer += lexeme;
            }
            processBuffer();
            if (!newMode.returnBegin && !newMode.excludeBegin) {
              modeBuffer = lexeme;
            }
          }
          startNewMode(newMode, match);
          return newMode.returnBegin ? 0 : lexeme.length;
        }
 
        /**
         * Handle the potential end of mode
         *
         * @param {RegExpMatchArray} match - the current match
         */
        function doEndMatch(match) {
          const lexeme = match[0];
          const matchPlusRemainder = codeToHighlight.substring(match.index);
 
          const endMode = endOfMode(top, match, matchPlusRemainder);
          if (!endMode) { return NO_MATCH; }
 
          const origin = top;
          if (top.endScope && top.endScope._wrap) {
            processBuffer();
            emitKeyword(lexeme, top.endScope._wrap);
          } else if (top.endScope && top.endScope._multi) {
            processBuffer();
            emitMultiClass(top.endScope, match);
          } else if (origin.skip) {
            modeBuffer += lexeme;
          } else {
            if (!(origin.returnEnd || origin.excludeEnd)) {
              modeBuffer += lexeme;
            }
            processBuffer();
            if (origin.excludeEnd) {
              modeBuffer = lexeme;
            }
          }
          do {
            if (top.scope) {
              emitter.closeNode();
            }
            if (!top.skip && !top.subLanguage) {
              relevance += top.relevance;
            }
            top = top.parent;
          } while (top !== endMode.parent);
          if (endMode.starts) {
            startNewMode(endMode.starts, match);
          }
          return origin.returnEnd ? 0 : lexeme.length;
        }
 
        function processContinuations() {
          const list = [];
          for (let current = top; current !== language; current = current.parent) {
            if (current.scope) {
              list.unshift(current.scope);
            }
          }
          list.forEach(item => emitter.openNode(item));
        }
 
        /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */
        let lastMatch = {};
 
        /**
         *  Process an individual match
         *
         * @param {string} textBeforeMatch - text preceding the match (since the last match)
         * @param {EnhancedMatch} [match] - the match itself
         */
        function processLexeme(textBeforeMatch, match) {
          const lexeme = match && match[0];
 
          // add non-matched text to the current mode buffer
          modeBuffer += textBeforeMatch;
 
          if (lexeme == null) {
            processBuffer();
            return 0;
          }
 
          // we've found a 0 width match and we're stuck, so we need to advance
          // this happens when we have badly behaved rules that have optional matchers to the degree that
          // sometimes they can end up matching nothing at all
          // Ref: https://github.com/highlightjs/highlight.js/issues/2140
          if (lastMatch.type === "begin" && match.type === "end" && lastMatch.index === match.index && lexeme === "") {
            // spit the "skipped" character that our regex choked on back into the output sequence
            modeBuffer += codeToHighlight.slice(match.index, match.index + 1);
            if (!SAFE_MODE) {
              /** @type {AnnotatedError} */
              const err = new Error(`0 width match regex (${languageName})`);
              err.languageName = languageName;
              err.badRule = lastMatch.rule;
              throw err;
            }
            return 1;
          }
          lastMatch = match;
 
          if (match.type === "begin") {
            return doBeginMatch(match);
          } else if (match.type === "illegal" && !ignoreIllegals) {
            // illegal match, we do not continue processing
            /** @type {AnnotatedError} */
            const err = new Error('Illegal lexeme "' + lexeme + '" for mode "' + (top.scope || '<unnamed>') + '"');
            err.mode = top;
            throw err;
          } else if (match.type === "end") {
            const processed = doEndMatch(match);
            if (processed !== NO_MATCH) {
              return processed;
            }
          }
 
          // edge case for when illegal matches $ (end of line) which is technically
          // a 0 width match but not a begin/end match so it's not caught by the
          // first handler (when ignoreIllegals is true)
          if (match.type === "illegal" && lexeme === "") {
            // advance so we aren't stuck in an infinite loop
            return 1;
          }
 
          // infinite loops are BAD, this is a last ditch catch all. if we have a
          // decent number of iterations yet our index (cursor position in our
          // parsing) still 3x behind our index then something is very wrong
          // so we bail
          if (iterations > 100000 && iterations > match.index * 3) {
            const err = new Error('potential infinite loop, way more iterations than matches');
            throw err;
          }
 
          /*
          Why might be find ourselves here?  An potential end match that was
          triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.
          (this could be because a callback requests the match be ignored, etc)
 
          This causes no real harm other than stopping a few times too many.
          */
 
          modeBuffer += lexeme;
          return lexeme.length;
        }
 
        const language = getLanguage(languageName);
        if (!language) {
          error(LANGUAGE_NOT_FOUND.replace("{}", languageName));
          throw new Error('Unknown language: "' + languageName + '"');
        }
 
        const md = compileLanguage(language);
        let result = '';
        /** @type {CompiledMode} */
        let top = continuation || md;
        /** @type Record<string,CompiledMode> */
        const continuations = {}; // keep continuations for sub-languages
        const emitter = new options.__emitter(options);
        processContinuations();
        let modeBuffer = '';
        let relevance = 0;
        let index = 0;
        let iterations = 0;
        let resumeScanAtSamePosition = false;
 
        try {
          if (!language.__emitTokens) {
            top.matcher.considerAll();
 
            for (;;) {
              iterations++;
              if (resumeScanAtSamePosition) {
                // only regexes not matched previously will now be
                // considered for a potential match
                resumeScanAtSamePosition = false;
              } else {
                top.matcher.considerAll();
              }
              top.matcher.lastIndex = index;
 
              const match = top.matcher.exec(codeToHighlight);
              // console.log("match", match[0], match.rule && match.rule.begin)
 
              if (!match) break;
 
              const beforeMatch = codeToHighlight.substring(index, match.index);
              const processedCount = processLexeme(beforeMatch, match);
              index = match.index + processedCount;
            }
            processLexeme(codeToHighlight.substring(index));
          } else {
            language.__emitTokens(codeToHighlight, emitter);
          }
 
          emitter.finalize();
          result = emitter.toHTML();
 
          return {
            language: languageName,
            value: result,
            relevance,
            illegal: false,
            _emitter: emitter,
            _top: top
          };
        } catch (err) {
          if (err.message && err.message.includes('Illegal')) {
            return {
              language: languageName,
              value: escape(codeToHighlight),
              illegal: true,
              relevance: 0,
              _illegalBy: {
                message: err.message,
                index,
                context: codeToHighlight.slice(index - 100, index + 100),
                mode: err.mode,
                resultSoFar: result
              },
              _emitter: emitter
            };
          } else if (SAFE_MODE) {
            return {
              language: languageName,
              value: escape(codeToHighlight),
              illegal: false,
              relevance: 0,
              errorRaised: err,
              _emitter: emitter,
              _top: top
            };
          } else {
            throw err;
          }
        }
      }
 
      /**
       * returns a valid highlight result, without actually doing any actual work,
       * auto highlight starts with this and it's possible for small snippets that
       * auto-detection may not find a better match
       * @param {string} code
       * @returns {HighlightResult}
       */
      function justTextHighlightResult(code) {
        const result = {
          value: escape(code),
          illegal: false,
          relevance: 0,
          _top: PLAINTEXT_LANGUAGE,
          _emitter: new options.__emitter(options)
        };
        result._emitter.addText(code);
        return result;
      }
 
      /**
      Highlighting with language detection. Accepts a string with the code to
      highlight. Returns an object with the following properties:
 
      - language (detected language)
      - relevance (int)
      - value (an HTML string with highlighting markup)
      - secondBest (object with the same structure for second-best heuristically
        detected language, may be absent)
 
        @param {string} code
        @param {Array<string>} [languageSubset]
        @returns {AutoHighlightResult}
      */
      function highlightAuto(code, languageSubset) {
        languageSubset = languageSubset || options.languages || Object.keys(languages);
        const plaintext = justTextHighlightResult(code);
 
        const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>
          _highlight(name, code, false)
        );
        results.unshift(plaintext); // plaintext is always an option
 
        const sorted = results.sort((a, b) => {
          // sort base on relevance
          if (a.relevance !== b.relevance) return b.relevance - a.relevance;
 
          // always award the tie to the base language
          // ie if C++ and Arduino are tied, it's more likely to be C++
          if (a.language && b.language) {
            if (getLanguage(a.language).supersetOf === b.language) {
              return 1;
            } else if (getLanguage(b.language).supersetOf === a.language) {
              return -1;
            }
          }
 
          // otherwise say they are equal, which has the effect of sorting on
          // relevance while preserving the original ordering - which is how ties
          // have historically been settled, ie the language that comes first always
          // wins in the case of a tie
          return 0;
        });
 
        const [best, secondBest] = sorted;
 
        /** @type {AutoHighlightResult} */
        const result = best;
        result.secondBest = secondBest;
 
        return result;
      }
 
      /**
       * Builds new class name for block given the language name
       *
       * @param {HTMLElement} element
       * @param {string} [currentLang]
       * @param {string} [resultLang]
       */
      function updateClassName(element, currentLang, resultLang) {
        const language = (currentLang && aliases[currentLang]) || resultLang;
 
        element.classList.add("hljs");
        element.classList.add(`language-${language}`);
      }
 
      /**
       * Applies highlighting to a DOM node containing code.
       *
       * @param {HighlightedHTMLElement} element - the HTML element to highlight
      */
      function highlightElement(element) {
        /** @type HTMLElement */
        let node = null;
        const language = blockLanguage(element);
 
        if (shouldNotHighlight(language)) return;
 
        fire("before:highlightElement",
          { el: element, language });
 
        // we should be all text, no child nodes (unescaped HTML) - this is possibly
        // an HTML injection attack - it's likely too late if this is already in
        // production (the code has likely already done its damage by the time
        // we're seeing it)... but we yell loudly about this so that hopefully it's
        // more likely to be caught in development before making it to production
        if (element.children.length > 0) {
          if (!options.ignoreUnescapedHTML) {
            console.warn("One of your code blocks includes unescaped HTML. This is a potentially serious security risk.");
            console.warn("https://github.com/highlightjs/highlight.js/wiki/security");
            console.warn("The element with unescaped HTML:");
            console.warn(element);
          }
          if (options.throwUnescapedHTML) {
            const err = new HTMLInjectionError(
              "One of your code blocks includes unescaped HTML.",
              element.innerHTML
            );
            throw err;
          }
        }
 
        node = element;
        const text = node.textContent;
        const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);
 
        element.innerHTML = result.value;
        updateClassName(element, language, result.language);
        element.result = {
          language: result.language,
          // TODO: remove with version 11.0
          re: result.relevance,
          relevance: result.relevance
        };
        if (result.secondBest) {
          element.secondBest = {
            language: result.secondBest.language,
            relevance: result.secondBest.relevance
          };
        }
 
        fire("after:highlightElement", { el: element, result, text });
      }
 
      /**
       * Updates highlight.js global options with the passed options
       *
       * @param {Partial<HLJSOptions>} userOptions
       */
      function configure(userOptions) {
        options = inherit(options, userOptions);
      }
 
      // TODO: remove v12, deprecated
      const initHighlighting = () => {
        highlightAll();
        deprecated("10.6.0", "initHighlighting() deprecated.  Use highlightAll() now.");
      };
 
      // TODO: remove v12, deprecated
      function initHighlightingOnLoad() {
        highlightAll();
        deprecated("10.6.0", "initHighlightingOnLoad() deprecated.  Use highlightAll() now.");
      }
 
      let wantsHighlight = false;
 
      /**
       * auto-highlights all pre>code elements on the page
       */
      function highlightAll() {
        // if we are called too early in the loading process
        if (document.readyState === "loading") {
          wantsHighlight = true;
          return;
        }
 
        const blocks = document.querySelectorAll(options.cssSelector);
        blocks.forEach(highlightElement);
      }
 
      function boot() {
        // if a highlight was requested before DOM was loaded, do now
        if (wantsHighlight) highlightAll();
      }
 
      // make sure we are in the browser environment
      if (typeof window !== 'undefined' && window.addEventListener) {
        window.addEventListener('DOMContentLoaded', boot, false);
      }
 
      /**
       * Register a language grammar module
       *
       * @param {string} languageName
       * @param {LanguageFn} languageDefinition
       */
      function registerLanguage(languageName, languageDefinition) {
        let lang = null;
        try {
          lang = languageDefinition(hljs);
        } catch (error$1) {
          error("Language definition for '{}' could not be registered.".replace("{}", languageName));
          // hard or soft error
          if (!SAFE_MODE) { throw error$1; } else { error(error$1); }
          // languages that have serious errors are replaced with essentially a
          // "plaintext" stand-in so that the code blocks will still get normal
          // css classes applied to them - and one bad language won't break the
          // entire highlighter
          lang = PLAINTEXT_LANGUAGE;
        }
        // give it a temporary name if it doesn't have one in the meta-data
        if (!lang.name) lang.name = languageName;
        languages[languageName] = lang;
        lang.rawDefinition = languageDefinition.bind(null, hljs);
 
        if (lang.aliases) {
          registerAliases(lang.aliases, { languageName });
        }
      }
 
      /**
       * Remove a language grammar module
       *
       * @param {string} languageName
       */
      function unregisterLanguage(languageName) {
        delete languages[languageName];
        for (const alias of Object.keys(aliases)) {
          if (aliases[alias] === languageName) {
            delete aliases[alias];
          }
        }
      }
 
      /**
       * @returns {string[]} List of language internal names
       */
      function listLanguages() {
        return Object.keys(languages);
      }
 
      /**
       * @param {string} name - name of the language to retrieve
       * @returns {Language | undefined}
       */
      function getLanguage(name) {
        name = (name || '').toLowerCase();
        return languages[name] || languages[aliases[name]];
      }
 
      /**
       *
       * @param {string|string[]} aliasList - single alias or list of aliases
       * @param {{languageName: string}} opts
       */
      function registerAliases(aliasList, { languageName }) {
        if (typeof aliasList === 'string') {
          aliasList = [aliasList];
        }
        aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });
      }
 
      /**
       * Determines if a given language has auto-detection enabled
       * @param {string} name - name of the language
       */
      function autoDetection(name) {
        const lang = getLanguage(name);
        return lang && !lang.disableAutodetect;
      }
 
      /**
       * Upgrades the old highlightBlock plugins to the new
       * highlightElement API
       * @param {HLJSPlugin} plugin
       */
      function upgradePluginAPI(plugin) {
        // TODO: remove with v12
        if (plugin["before:highlightBlock"] && !plugin["before:highlightElement"]) {
          plugin["before:highlightElement"] = (data) => {
            plugin["before:highlightBlock"](
              Object.assign({ block: data.el }, data)
            );
          };
        }
        if (plugin["after:highlightBlock"] && !plugin["after:highlightElement"]) {
          plugin["after:highlightElement"] = (data) => {
            plugin["after:highlightBlock"](
              Object.assign({ block: data.el }, data)
            );
          };
        }
      }
 
      /**
       * @param {HLJSPlugin} plugin
       */
      function addPlugin(plugin) {
        upgradePluginAPI(plugin);
        plugins.push(plugin);
      }
 
      /**
       * @param {HLJSPlugin} plugin
       */
      function removePlugin(plugin) {
        const index = plugins.indexOf(plugin);
        if (index !== -1) {
          plugins.splice(index, 1);
        }
      }
 
      /**
       *
       * @param {PluginEvent} event
       * @param {any} args
       */
      function fire(event, args) {
        const cb = event;
        plugins.forEach(function(plugin) {
          if (plugin[cb]) {
            plugin[cb](args);
          }
        });
      }
 
      /**
       * DEPRECATED
       * @param {HighlightedHTMLElement} el
       */
      function deprecateHighlightBlock(el) {
        deprecated("10.7.0", "highlightBlock will be removed entirely in v12.0");
        deprecated("10.7.0", "Please use highlightElement now.");
 
        return highlightElement(el);
      }
 
      /* Interface definition */
      Object.assign(hljs, {
        highlight,
        highlightAuto,
        highlightAll,
        highlightElement,
        // TODO: Remove with v12 API
        highlightBlock: deprecateHighlightBlock,
        configure,
        initHighlighting,
        initHighlightingOnLoad,
        registerLanguage,
        unregisterLanguage,
        listLanguages,
        getLanguage,
        registerAliases,
        autoDetection,
        inherit,
        addPlugin,
        removePlugin
      });
 
      hljs.debugMode = function() { SAFE_MODE = false; };
      hljs.safeMode = function() { SAFE_MODE = true; };
      hljs.versionString = version;
 
      hljs.regex = {
        concat: concat,
        lookahead: lookahead,
        either: either,
        optional: optional,
        anyNumberOfTimes: anyNumberOfTimes
      };
 
      for (const key in MODES) {
        // @ts-ignore
        if (typeof MODES[key] === "object") {
          // @ts-ignore
          deepFreeze(MODES[key]);
        }
      }
 
      // merge all the modes/regexes into our main object
      Object.assign(hljs, MODES);
 
      return hljs;
    };
 
    // Other names for the variable may break build script
    const highlight = HLJS({});
 
    // returns a new instance of the highlighter to be used for extensions
    // check https://github.com/wooorm/lowlight/issues/47
    highlight.newInstance = () => HLJS({});
 
    var core = highlight;
    highlight.HighlightJS = highlight;
    highlight.default = highlight;
 
    /*
    Language: 1C:Enterprise
    Author: Stanislav Belov <stbelov@gmail.com>
    Description: built-in language 1C:Enterprise (v7, v8)
    Category: enterprise
    */
 
    var _1c_1;
    var hasRequired_1c;
 
    function require_1c () {
        if (hasRequired_1c) return _1c_1;
        hasRequired_1c = 1;
        function _1c(hljs) {
          // общий паттерн для определения идентификаторов
          const UNDERSCORE_IDENT_RE = '[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]+';
 
          // v7 уникальные ключевые слова, отсутствующие в v8 ==> keyword
          const v7_keywords =
          'далее ';
 
          // v8 ключевые слова ==> keyword
          const v8_keywords =
          'возврат вызватьисключение выполнить для если и из или иначе иначеесли исключение каждого конецесли '
          + 'конецпопытки конеццикла не новый перейти перем по пока попытка прервать продолжить тогда цикл экспорт ';
 
          // keyword : ключевые слова
          const KEYWORD = v7_keywords + v8_keywords;
 
          // v7 уникальные директивы, отсутствующие в v8 ==> meta-keyword
          const v7_meta_keywords =
          'загрузитьизфайла ';
 
          // v8 ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях ==> meta-keyword
          const v8_meta_keywords =
          'вебклиент вместо внешнеесоединение клиент конецобласти мобильноеприложениеклиент мобильноеприложениесервер '
          + 'наклиенте наклиентенасервере наклиентенасерверебезконтекста насервере насерверебезконтекста область перед '
          + 'после сервер толстыйклиентобычноеприложение толстыйклиентуправляемоеприложение тонкийклиент ';
 
          // meta-keyword : ключевые слова в инструкциях препроцессора, директивах компиляции, аннотациях
          const METAKEYWORD = v7_meta_keywords + v8_meta_keywords;
 
          // v7 системные константы ==> built_in
          const v7_system_constants =
          'разделительстраниц разделительстрок символтабуляции ';
 
          // v7 уникальные методы глобального контекста, отсутствующие в v8 ==> built_in
          const v7_global_context_methods =
          'ansitooem oemtoansi ввестивидсубконто ввестиперечисление ввестипериод ввестиплансчетов выбранныйплансчетов '
          + 'датагод датамесяц датачисло заголовоксистемы значениевстроку значениеизстроки каталогиб каталогпользователя '
          + 'кодсимв конгода конецпериодаби конецрассчитанногопериодаби конецстандартногоинтервала конквартала конмесяца '
          + 'коннедели лог лог10 максимальноеколичествосубконто названиеинтерфейса названиенабораправ назначитьвид '
          + 'назначитьсчет найтиссылки началопериодаби началостандартногоинтервала начгода начквартала начмесяца '
          + 'начнедели номерднягода номерднянедели номернеделигода обработкаожидания основнойжурналрасчетов '
          + 'основнойплансчетов основнойязык очиститьокносообщений периодстр получитьвремята получитьдатута '
          + 'получитьдокументта получитьзначенияотбора получитьпозициюта получитьпустоезначение получитьта '
          + 'префиксавтонумерации пропись пустоезначение разм разобратьпозициюдокумента рассчитатьрегистрына '
          + 'рассчитатьрегистрыпо симв создатьобъект статусвозврата стрколичествострок сформироватьпозициюдокумента '
          + 'счетпокоду текущеевремя типзначения типзначениястр установитьтана установитьтапо фиксшаблон шаблон ';
 
          // v8 методы глобального контекста ==> built_in
          const v8_global_context_methods =
          'acos asin atan base64значение base64строка cos exp log log10 pow sin sqrt tan xmlзначение xmlстрока '
          + 'xmlтип xmlтипзнч активноеокно безопасныйрежим безопасныйрежимразделенияданных булево ввестидату ввестизначение '
          + 'ввестистроку ввестичисло возможностьчтенияxml вопрос восстановитьзначение врег выгрузитьжурналрегистрации '
          + 'выполнитьобработкуоповещения выполнитьпроверкуправдоступа вычислить год данныеформывзначение дата день деньгода '
          + 'деньнедели добавитьмесяц заблокироватьданныедляредактирования заблокироватьработупользователя завершитьработусистемы '
          + 'загрузитьвнешнююкомпоненту закрытьсправку записатьjson записатьxml записатьдатуjson записьжурналарегистрации '
          + 'заполнитьзначениясвойств запроситьразрешениепользователя запуститьприложение запуститьсистему зафиксироватьтранзакцию '
          + 'значениевданныеформы значениевстрокувнутр значениевфайл значениезаполнено значениеизстрокивнутр значениеизфайла '
          + 'изxmlтипа импортмоделиxdto имякомпьютера имяпользователя инициализироватьпредопределенныеданные информацияобошибке '
          + 'каталогбиблиотекимобильногоустройства каталогвременныхфайлов каталогдокументов каталогпрограммы кодироватьстроку '
          + 'кодлокализацииинформационнойбазы кодсимвола командасистемы конецгода конецдня конецквартала конецмесяца конецминуты '
          + 'конецнедели конецчаса конфигурациябазыданныхизмененадинамически конфигурацияизменена копироватьданныеформы '
          + 'копироватьфайл краткоепредставлениеошибки лев макс местноевремя месяц мин минута монопольныйрежим найти '
          + 'найтинедопустимыесимволыxml найтиокнопонавигационнойссылке найтипомеченныенаудаление найтипоссылкам найтифайлы '
          + 'началогода началодня началоквартала началомесяца началоминуты началонедели началочаса начатьзапросразрешенияпользователя '
          + 'начатьзапускприложения начатькопированиефайла начатьперемещениефайла начатьподключениевнешнейкомпоненты '
          + 'начатьподключениерасширенияработыскриптографией начатьподключениерасширенияработысфайлами начатьпоискфайлов '
          + 'начатьполучениекаталогавременныхфайлов начатьполучениекаталогадокументов начатьполучениерабочегокаталогаданныхпользователя '
          + 'начатьполучениефайлов начатьпомещениефайла начатьпомещениефайлов начатьсозданиедвоичныхданныхизфайла начатьсозданиекаталога '
          + 'начатьтранзакцию начатьудалениефайлов начатьустановкувнешнейкомпоненты начатьустановкурасширенияработыскриптографией '
          + 'начатьустановкурасширенияработысфайлами неделягода необходимостьзавершениясоединения номерсеансаинформационнойбазы '
          + 'номерсоединенияинформационнойбазы нрег нстр обновитьинтерфейс обновитьнумерациюобъектов обновитьповторноиспользуемыезначения '
          + 'обработкапрерыванияпользователя объединитьфайлы окр описаниеошибки оповестить оповеститьобизменении '
          + 'отключитьобработчикзапросанастроекклиенталицензирования отключитьобработчикожидания отключитьобработчикоповещения '
          + 'открытьзначение открытьиндекссправки открытьсодержаниесправки открытьсправку открытьформу открытьформумодально '
          + 'отменитьтранзакцию очиститьжурналрегистрации очиститьнастройкипользователя очиститьсообщения параметрыдоступа '
          + 'перейтипонавигационнойссылке переместитьфайл подключитьвнешнююкомпоненту '
          + 'подключитьобработчикзапросанастроекклиенталицензирования подключитьобработчикожидания подключитьобработчикоповещения '
          + 'подключитьрасширениеработыскриптографией подключитьрасширениеработысфайлами подробноепредставлениеошибки '
          + 'показатьвводдаты показатьвводзначения показатьвводстроки показатьвводчисла показатьвопрос показатьзначение '
          + 'показатьинформациюобошибке показатьнакарте показатьоповещениепользователя показатьпредупреждение полноеимяпользователя '
          + 'получитьcomобъект получитьxmlтип получитьадреспоместоположению получитьблокировкусеансов получитьвремязавершенияспящегосеанса '
          + 'получитьвремязасыпанияпассивногосеанса получитьвремяожиданияблокировкиданных получитьданныевыбора '
          + 'получитьдополнительныйпараметрклиенталицензирования получитьдопустимыекодылокализации получитьдопустимыечасовыепояса '
          + 'получитьзаголовокклиентскогоприложения получитьзаголовоксистемы получитьзначенияотборажурналарегистрации '
          + 'получитьидентификаторконфигурации получитьизвременногохранилища получитьимявременногофайла '
          + 'получитьимяклиенталицензирования получитьинформациюэкрановклиента получитьиспользованиежурналарегистрации '
          + 'получитьиспользованиесобытияжурналарегистрации получитькраткийзаголовокприложения получитьмакетоформления '
          + 'получитьмаскувсефайлы получитьмаскувсефайлыклиента получитьмаскувсефайлысервера получитьместоположениепоадресу '
          + 'получитьминимальнуюдлинупаролейпользователей получитьнавигационнуюссылку получитьнавигационнуюссылкуинформационнойбазы '
          + 'получитьобновлениеконфигурациибазыданных получитьобновлениепредопределенныхданныхинформационнойбазы получитьобщиймакет '
          + 'получитьобщуюформу получитьокна получитьоперативнуюотметкувремени получитьотключениебезопасногорежима '
          + 'получитьпараметрыфункциональныхопцийинтерфейса получитьполноеимяпредопределенногозначения '
          + 'получитьпредставлениянавигационныхссылок получитьпроверкусложностипаролейпользователей получитьразделительпути '
          + 'получитьразделительпутиклиента получитьразделительпутисервера получитьсеансыинформационнойбазы '
          + 'получитьскоростьклиентскогосоединения получитьсоединенияинформационнойбазы получитьсообщенияпользователю '
          + 'получитьсоответствиеобъектаиформы получитьсоставстандартногоинтерфейсаodata получитьструктурухранениябазыданных '
          + 'получитьтекущийсеансинформационнойбазы получитьфайл получитьфайлы получитьформу получитьфункциональнуюопцию '
          + 'получитьфункциональнуюопциюинтерфейса получитьчасовойпоясинформационнойбазы пользователиос поместитьвовременноехранилище '
          + 'поместитьфайл поместитьфайлы прав праводоступа предопределенноезначение представлениекодалокализации представлениепериода '
          + 'представлениеправа представлениеприложения представлениесобытияжурналарегистрации представлениечасовогопояса предупреждение '
          + 'прекратитьработусистемы привилегированныйрежим продолжитьвызов прочитатьjson прочитатьxml прочитатьдатуjson пустаястрока '
          + 'рабочийкаталогданныхпользователя разблокироватьданныедляредактирования разделитьфайл разорватьсоединениесвнешнимисточникомданных '
          + 'раскодироватьстроку рольдоступна секунда сигнал символ скопироватьжурналрегистрации смещениелетнеговремени '
          + 'смещениестандартноговремени соединитьбуферыдвоичныхданных создатькаталог создатьфабрикуxdto сокрл сокрлп сокрп сообщить '
          + 'состояние сохранитьзначение сохранитьнастройкипользователя сред стрдлина стрзаканчиваетсяна стрзаменить стрнайти стрначинаетсяс '
          + 'строка строкасоединенияинформационнойбазы стрполучитьстроку стрразделить стрсоединить стрсравнить стрчисловхождений '
          + 'стрчислострок стршаблон текущаядата текущаядатасеанса текущаяуниверсальнаядата текущаяуниверсальнаядатавмиллисекундах '
          + 'текущийвариантинтерфейсаклиентскогоприложения текущийвариантосновногошрифтаклиентскогоприложения текущийкодлокализации '
          + 'текущийрежимзапуска текущийязык текущийязыксистемы тип типзнч транзакцияактивна трег удалитьданныеинформационнойбазы '
          + 'удалитьизвременногохранилища удалитьобъекты удалитьфайлы универсальноевремя установитьбезопасныйрежим '
          + 'установитьбезопасныйрежимразделенияданных установитьблокировкусеансов установитьвнешнююкомпоненту '
          + 'установитьвремязавершенияспящегосеанса установитьвремязасыпанияпассивногосеанса установитьвремяожиданияблокировкиданных '
          + 'установитьзаголовокклиентскогоприложения установитьзаголовоксистемы установитьиспользованиежурналарегистрации '
          + 'установитьиспользованиесобытияжурналарегистрации установитькраткийзаголовокприложения '
          + 'установитьминимальнуюдлинупаролейпользователей установитьмонопольныйрежим установитьнастройкиклиенталицензирования '
          + 'установитьобновлениепредопределенныхданныхинформационнойбазы установитьотключениебезопасногорежима '
          + 'установитьпараметрыфункциональныхопцийинтерфейса установитьпривилегированныйрежим '
          + 'установитьпроверкусложностипаролейпользователей установитьрасширениеработыскриптографией '
          + 'установитьрасширениеработысфайлами установитьсоединениесвнешнимисточникомданных установитьсоответствиеобъектаиформы '
          + 'установитьсоставстандартногоинтерфейсаodata установитьчасовойпоясинформационнойбазы установитьчасовойпояссеанса '
          + 'формат цел час часовойпояс часовойпояссеанса число числопрописью этоадресвременногохранилища ';
 
          // v8 свойства глобального контекста ==> built_in
          const v8_global_context_property =
          'wsссылки библиотекакартинок библиотекамакетовоформлениякомпоновкиданных библиотекастилей бизнеспроцессы '
          + 'внешниеисточникиданных внешниеобработки внешниеотчеты встроенныепокупки главныйинтерфейс главныйстиль '
          + 'документы доставляемыеуведомления журналыдокументов задачи информацияобинтернетсоединении использованиерабочейдаты '
          + 'историяработыпользователя константы критерииотбора метаданные обработки отображениерекламы отправкадоставляемыхуведомлений '
          + 'отчеты панельзадачос параметрзапуска параметрысеанса перечисления планывидоврасчета планывидовхарактеристик '
          + 'планыобмена планысчетов полнотекстовыйпоиск пользователиинформационнойбазы последовательности проверкавстроенныхпокупок '
          + 'рабочаядата расширенияконфигурации регистрыбухгалтерии регистрынакопления регистрырасчета регистрысведений '
          + 'регламентныезадания сериализаторxdto справочники средствагеопозиционирования средствакриптографии средствамультимедиа '
          + 'средстваотображениярекламы средствапочты средствателефонии фабрикаxdto файловыепотоки фоновыезадания хранилищанастроек '
          + 'хранилищевариантовотчетов хранилищенастроекданныхформ хранилищеобщихнастроек хранилищепользовательскихнастроекдинамическихсписков '
          + 'хранилищепользовательскихнастроекотчетов хранилищесистемныхнастроек ';
 
          // built_in : встроенные или библиотечные объекты (константы, классы, функции)
          const BUILTIN =
          v7_system_constants
          + v7_global_context_methods + v8_global_context_methods
          + v8_global_context_property;
 
          // v8 системные наборы значений ==> class
          const v8_system_sets_of_values =
          'webцвета windowsцвета windowsшрифты библиотекакартинок рамкистиля символы цветастиля шрифтыстиля ';
 
          // v8 системные перечисления - интерфейсные ==> class
          const v8_system_enums_interface =
          'автоматическоесохранениеданныхформывнастройках автонумерациявформе автораздвижениесерий '
          + 'анимациядиаграммы вариантвыравниванияэлементовизаголовков вариантуправлениявысотойтаблицы '
          + 'вертикальнаяпрокруткаформы вертикальноеположение вертикальноеположениеэлемента видгруппыформы '
          + 'виддекорацииформы виддополненияэлементаформы видизмененияданных видкнопкиформы видпереключателя '
          + 'видподписейкдиаграмме видполяформы видфлажка влияниеразмеранапузырекдиаграммы горизонтальноеположение '
          + 'горизонтальноеположениеэлемента группировкаколонок группировкаподчиненныхэлементовформы '
          + 'группыиэлементы действиеперетаскивания дополнительныйрежимотображения допустимыедействияперетаскивания '
          + 'интервалмеждуэлементамиформы использованиевывода использованиеполосыпрокрутки '
          + 'используемоезначениеточкибиржевойдиаграммы историявыборапривводе источникзначенийоситочекдиаграммы '
          + 'источникзначенияразмерапузырькадиаграммы категориягруппыкоманд максимумсерий начальноеотображениедерева '
          + 'начальноеотображениесписка обновлениетекстаредактирования ориентациядендрограммы ориентациядиаграммы '
          + 'ориентацияметокдиаграммы ориентацияметоксводнойдиаграммы ориентацияэлементаформы отображениевдиаграмме '
          + 'отображениевлегендедиаграммы отображениегруппыкнопок отображениезаголовкашкалыдиаграммы '
          + 'отображениезначенийсводнойдиаграммы отображениезначенияизмерительнойдиаграммы '
          + 'отображениеинтерваладиаграммыганта отображениекнопки отображениекнопкивыбора отображениеобсужденийформы '
          + 'отображениеобычнойгруппы отображениеотрицательныхзначенийпузырьковойдиаграммы отображениепанелипоиска '
          + 'отображениеподсказки отображениепредупрежденияприредактировании отображениеразметкиполосырегулирования '
          + 'отображениестраницформы отображениетаблицы отображениетекстазначениядиаграммыганта '
          + 'отображениеуправленияобычнойгруппы отображениефигурыкнопки палитрацветовдиаграммы поведениеобычнойгруппы '
          + 'поддержкамасштабадендрограммы поддержкамасштабадиаграммыганта поддержкамасштабасводнойдиаграммы '
          + 'поисквтаблицепривводе положениезаголовкаэлементаформы положениекартинкикнопкиформы '
          + 'положениекартинкиэлементаграфическойсхемы положениекоманднойпанелиформы положениекоманднойпанелиэлементаформы '
          + 'положениеопорнойточкиотрисовки положениеподписейкдиаграмме положениеподписейшкалызначенийизмерительнойдиаграммы '
          + 'положениесостоянияпросмотра положениестрокипоиска положениетекстасоединительнойлинии положениеуправленияпоиском '
          + 'положениешкалывремени порядокотображенияточекгоризонтальнойгистограммы порядоксерийвлегендедиаграммы '
          + 'размеркартинки расположениезаголовкашкалыдиаграммы растягиваниеповертикалидиаграммыганта '
          + 'режимавтоотображениясостояния режимвводастроктаблицы режимвыборанезаполненного режимвыделениядаты '
          + 'режимвыделениястрокитаблицы режимвыделениятаблицы режимизмененияразмера режимизменениясвязанногозначения '
          + 'режимиспользованиядиалогапечати режимиспользованияпараметракоманды режиммасштабированияпросмотра '
          + 'режимосновногоокнаклиентскогоприложения режимоткрытияокнаформы режимотображениявыделения '
          + 'режимотображениягеографическойсхемы режимотображениязначенийсерии режимотрисовкисеткиграфическойсхемы '
          + 'режимполупрозрачностидиаграммы режимпробеловдиаграммы режимразмещениянастранице режимредактированияколонки '
          + 'режимсглаживаниядиаграммы режимсглаживанияиндикатора режимсписказадач сквозноевыравнивание '
          + 'сохранениеданныхформывнастройках способзаполнениятекстазаголовкашкалыдиаграммы '
          + 'способопределенияограничивающегозначениядиаграммы стандартнаягруппакоманд стандартноеоформление '
          + 'статусоповещенияпользователя стильстрелки типаппроксимациилиниитрендадиаграммы типдиаграммы '
          + 'типединицышкалывремени типимпортасерийслоягеографическойсхемы типлиниигеографическойсхемы типлиниидиаграммы '
          + 'типмаркерагеографическойсхемы типмаркерадиаграммы типобластиоформления '
          + 'типорганизацииисточникаданныхгеографическойсхемы типотображениясериислоягеографическойсхемы '
          + 'типотображенияточечногообъектагеографическойсхемы типотображенияшкалыэлементалегендыгеографическойсхемы '
          + 'типпоискаобъектовгеографическойсхемы типпроекциигеографическойсхемы типразмещенияизмерений '
          + 'типразмещенияреквизитовизмерений типрамкиэлементауправления типсводнойдиаграммы '
          + 'типсвязидиаграммыганта типсоединениязначенийпосериямдиаграммы типсоединенияточекдиаграммы '
          + 'типсоединительнойлинии типстороныэлементаграфическойсхемы типформыотчета типшкалырадарнойдиаграммы '
          + 'факторлиниитрендадиаграммы фигуракнопки фигурыграфическойсхемы фиксациявтаблице форматдняшкалывремени '
          + 'форматкартинки ширинаподчиненныхэлементовформы ';
 
          // v8 системные перечисления - свойства прикладных объектов ==> class
          const v8_system_enums_objects_properties =
          'виддвижениябухгалтерии виддвижениянакопления видпериодарегистрарасчета видсчета видточкимаршрутабизнеспроцесса '
          + 'использованиеагрегатарегистранакопления использованиегруппиэлементов использованиережимапроведения '
          + 'использованиесреза периодичностьагрегатарегистранакопления режимавтовремя режимзаписидокумента режимпроведениядокумента ';
 
          // v8 системные перечисления - планы обмена ==> class
          const v8_system_enums_exchange_plans =
          'авторегистрацияизменений допустимыйномерсообщения отправкаэлементаданных получениеэлементаданных ';
 
          // v8 системные перечисления - табличный документ ==> class
          const v8_system_enums_tabular_document =
          'использованиерасшифровкитабличногодокумента ориентациястраницы положениеитоговколоноксводнойтаблицы '
          + 'положениеитоговстроксводнойтаблицы положениетекстаотносительнокартинки расположениезаголовкагруппировкитабличногодокумента '
          + 'способчтениязначенийтабличногодокумента типдвустороннейпечати типзаполненияобластитабличногодокумента '
          + 'типкурсоровтабличногодокумента типлиниирисункатабличногодокумента типлинииячейкитабличногодокумента '
          + 'типнаправленияпереходатабличногодокумента типотображениявыделениятабличногодокумента типотображениялинийсводнойтаблицы '
          + 'типразмещениятекстатабличногодокумента типрисункатабличногодокумента типсмещениятабличногодокумента '
          + 'типузоратабличногодокумента типфайлатабличногодокумента точностьпечати чередованиерасположениястраниц ';
 
          // v8 системные перечисления - планировщик ==> class
          const v8_system_enums_sheduler =
          'отображениевремениэлементовпланировщика ';
 
          // v8 системные перечисления - форматированный документ ==> class
          const v8_system_enums_formatted_document =
          'типфайлаформатированногодокумента ';
 
          // v8 системные перечисления - запрос ==> class
          const v8_system_enums_query =
          'обходрезультатазапроса типзаписизапроса ';
 
          // v8 системные перечисления - построитель отчета ==> class
          const v8_system_enums_report_builder =
          'видзаполнениярасшифровкипостроителяотчета типдобавленияпредставлений типизмеренияпостроителяотчета типразмещенияитогов ';
 
          // v8 системные перечисления - работа с файлами ==> class
          const v8_system_enums_files =
          'доступкфайлу режимдиалогавыборафайла режимоткрытияфайла ';
 
          // v8 системные перечисления - построитель запроса ==> class
          const v8_system_enums_query_builder =
          'типизмеренияпостроителязапроса ';
 
          // v8 системные перечисления - анализ данных ==> class
          const v8_system_enums_data_analysis =
          'видданныханализа методкластеризации типединицыинтервалавременианализаданных типзаполнениятаблицырезультатаанализаданных '
          + 'типиспользованиячисловыхзначенийанализаданных типисточникаданныхпоискаассоциаций типколонкианализаданныхдереворешений '
          + 'типколонкианализаданныхкластеризация типколонкианализаданныхобщаястатистика типколонкианализаданныхпоискассоциаций '
          + 'типколонкианализаданныхпоискпоследовательностей типколонкимоделипрогноза типмерырасстоянияанализаданных '
          + 'типотсеченияправилассоциации типполяанализаданных типстандартизациианализаданных типупорядочиванияправилассоциациианализаданных '
          + 'типупорядочиванияшаблоновпоследовательностейанализаданных типупрощениядереварешений ';
 
          // v8 системные перечисления - xml, json, xs, dom, xdto, web-сервисы ==> class
          const v8_system_enums_xml_json_xs_dom_xdto_ws =
          'wsнаправлениепараметра вариантxpathxs вариантзаписидатыjson вариантпростоготипаxs видгруппымоделиxs видфасетаxdto '
          + 'действиепостроителяdom завершенностьпростоготипаxs завершенностьсоставноготипаxs завершенностьсхемыxs запрещенныеподстановкиxs '
          + 'исключениягруппподстановкиxs категорияиспользованияатрибутаxs категорияограниченияидентичностиxs категорияограниченияпространствименxs '
          + 'методнаследованияxs модельсодержимогоxs назначениетипаxml недопустимыеподстановкиxs обработкапробельныхсимволовxs обработкасодержимогоxs '
          + 'ограничениезначенияxs параметрыотбораузловdom переносстрокjson позициявдокументеdom пробельныесимволыxml типатрибутаxml типзначенияjson '
          + 'типканоническогоxml типкомпонентыxs типпроверкиxml типрезультатаdomxpath типузлаdom типузлаxml формаxml формапредставленияxs '
          + 'форматдатыjson экранированиесимволовjson ';
 
          // v8 системные перечисления - система компоновки данных ==> class
          const v8_system_enums_data_composition_system =
          'видсравнениякомпоновкиданных действиеобработкирасшифровкикомпоновкиданных направлениесортировкикомпоновкиданных '
          + 'расположениевложенныхэлементоврезультатакомпоновкиданных расположениеитоговкомпоновкиданных расположениегруппировкикомпоновкиданных '
          + 'расположениеполейгруппировкикомпоновкиданных расположениеполякомпоновкиданных расположениереквизитовкомпоновкиданных '
          + 'расположениересурсовкомпоновкиданных типбухгалтерскогоостаткакомпоновкиданных типвыводатекстакомпоновкиданных '
          + 'типгруппировкикомпоновкиданных типгруппыэлементовотборакомпоновкиданных типдополненияпериодакомпоновкиданных '
          + 'типзаголовкаполейкомпоновкиданных типмакетагруппировкикомпоновкиданных типмакетаобластикомпоновкиданных типостаткакомпоновкиданных '
          + 'типпериодакомпоновкиданных типразмещениятекстакомпоновкиданных типсвязинаборовданныхкомпоновкиданных типэлементарезультатакомпоновкиданных '
          + 'расположениелегендыдиаграммыкомпоновкиданных типпримененияотборакомпоновкиданных режимотображенияэлементанастройкикомпоновкиданных '
          + 'режимотображениянастроеккомпоновкиданных состояниеэлементанастройкикомпоновкиданных способвосстановлениянастроеккомпоновкиданных '
          + 'режимкомпоновкирезультата использованиепараметракомпоновкиданных автопозицияресурсовкомпоновкиданных '
          + 'вариантиспользованиягруппировкикомпоновкиданных расположениересурсоввдиаграммекомпоновкиданных фиксациякомпоновкиданных '
          + 'использованиеусловногооформлениякомпоновкиданных ';
 
          // v8 системные перечисления - почта ==> class
          const v8_system_enums_email =
          'важностьинтернетпочтовогосообщения обработкатекстаинтернетпочтовогосообщения способкодированияинтернетпочтовоговложения '
          + 'способкодированиянеasciiсимволовинтернетпочтовогосообщения типтекстапочтовогосообщения протоколинтернетпочты '
          + 'статусразборапочтовогосообщения ';
 
          // v8 системные перечисления - журнал регистрации ==> class
          const v8_system_enums_logbook =
          'режимтранзакциизаписижурналарегистрации статустранзакциизаписижурналарегистрации уровеньжурналарегистрации ';
 
          // v8 системные перечисления - криптография ==> class
          const v8_system_enums_cryptography =
          'расположениехранилищасертификатовкриптографии режимвключениясертификатовкриптографии режимпроверкисертификатакриптографии '
          + 'типхранилищасертификатовкриптографии ';
 
          // v8 системные перечисления - ZIP ==> class
          const v8_system_enums_zip =
          'кодировкаименфайловвzipфайле методсжатияzip методшифрованияzip режимвосстановленияпутейфайловzip режимобработкиподкаталоговzip '
          + 'режимсохраненияпутейzip уровеньсжатияzip ';
 
          // v8 системные перечисления -
          // Блокировка данных, Фоновые задания, Автоматизированное тестирование,
          // Доставляемые уведомления, Встроенные покупки, Интернет, Работа с двоичными данными ==> class
          const v8_system_enums_other =
          'звуковоеоповещение направлениепереходакстроке позициявпотоке порядокбайтов режимблокировкиданных режимуправленияблокировкойданных '
          + 'сервисвстроенныхпокупок состояниефоновогозадания типподписчикадоставляемыхуведомлений уровеньиспользованиязащищенногосоединенияftp ';
 
          // v8 системные перечисления - схема запроса ==> class
          const v8_system_enums_request_schema =
          'направлениепорядкасхемызапроса типдополненияпериодамисхемызапроса типконтрольнойточкисхемызапроса типобъединениясхемызапроса '
          + 'типпараметрадоступнойтаблицысхемызапроса типсоединениясхемызапроса ';
 
          // v8 системные перечисления - свойства объектов метаданных ==> class
          const v8_system_enums_properties_of_metadata_objects =
          'httpметод автоиспользованиеобщегореквизита автопрефиксномеразадачи вариантвстроенногоязыка видиерархии видрегистранакопления '
          + 'видтаблицывнешнегоисточникаданных записьдвиженийприпроведении заполнениепоследовательностей индексирование '
          + 'использованиебазыпланавидоврасчета использованиебыстроговыбора использованиеобщегореквизита использованиеподчинения '
          + 'использованиеполнотекстовогопоиска использованиеразделяемыхданныхобщегореквизита использованиереквизита '
          + 'назначениеиспользованияприложения назначениерасширенияконфигурации направлениепередачи обновлениепредопределенныхданных '
          + 'оперативноепроведение основноепредставлениевидарасчета основноепредставлениевидахарактеристики основноепредставлениезадачи '
          + 'основноепредставлениепланаобмена основноепредставлениесправочника основноепредставлениесчета перемещениеграницыприпроведении '
          + 'периодичностьномерабизнеспроцесса периодичностьномерадокумента периодичностьрегистрарасчета периодичностьрегистрасведений '
          + 'повторноеиспользованиевозвращаемыхзначений полнотекстовыйпоискпривводепостроке принадлежностьобъекта проведение '
          + 'разделениеаутентификацииобщегореквизита разделениеданныхобщегореквизита разделениерасширенийконфигурацииобщегореквизита '
          + 'режимавтонумерацииобъектов режимзаписирегистра режимиспользованиямодальности '
          + 'режимиспользованиясинхронныхвызововрасширенийплатформыивнешнихкомпонент режимповторногоиспользованиясеансов '
          + 'режимполученияданныхвыборапривводепостроке режимсовместимости режимсовместимостиинтерфейса '
          + 'режимуправленияблокировкойданныхпоумолчанию сериикодовпланавидовхарактеристик сериикодовпланасчетов '
          + 'сериикодовсправочника созданиепривводе способвыбора способпоискастрокипривводепостроке способредактирования '
          + 'типданныхтаблицывнешнегоисточникаданных типкодапланавидоврасчета типкодасправочника типмакета типномерабизнеспроцесса '
          + 'типномерадокумента типномеразадачи типформы удалениедвижений ';
 
          // v8 системные перечисления - разные ==> class
          const v8_system_enums_differents =
          'важностьпроблемыприменениярасширенияконфигурации вариантинтерфейсаклиентскогоприложения вариантмасштабаформклиентскогоприложения '
          + 'вариантосновногошрифтаклиентскогоприложения вариантстандартногопериода вариантстандартнойдатыначала видграницы видкартинки '
          + 'видотображенияполнотекстовогопоиска видрамки видсравнения видцвета видчисловогозначения видшрифта допустимаядлина допустимыйзнак '
          + 'использованиеbyteordermark использованиеметаданныхполнотекстовогопоиска источникрасширенийконфигурации клавиша кодвозвратадиалога '
          + 'кодировкаxbase кодировкатекста направлениепоиска направлениесортировки обновлениепредопределенныхданных обновлениеприизмененииданных '
          + 'отображениепанелиразделов проверказаполнения режимдиалогавопрос режимзапускаклиентскогоприложения режимокругления режимоткрытияформприложения '
          + 'режимполнотекстовогопоиска скоростьклиентскогосоединения состояниевнешнегоисточникаданных состояниеобновленияконфигурациибазыданных '
          + 'способвыборасертификатаwindows способкодированиястроки статуссообщения типвнешнейкомпоненты типплатформы типповеденияклавишиenter '
          + 'типэлементаинформацииовыполненииобновленияконфигурациибазыданных уровеньизоляциитранзакций хешфункция частидаты';
 
          // class: встроенные наборы значений, системные перечисления (содержат дочерние значения, обращения к которым через разыменование)
          const CLASS =
          v8_system_sets_of_values
          + v8_system_enums_interface
          + v8_system_enums_objects_properties
          + v8_system_enums_exchange_plans
          + v8_system_enums_tabular_document
          + v8_system_enums_sheduler
          + v8_system_enums_formatted_document
          + v8_system_enums_query
          + v8_system_enums_report_builder
          + v8_system_enums_files
          + v8_system_enums_query_builder
          + v8_system_enums_data_analysis
          + v8_system_enums_xml_json_xs_dom_xdto_ws
          + v8_system_enums_data_composition_system
          + v8_system_enums_email
          + v8_system_enums_logbook
          + v8_system_enums_cryptography
          + v8_system_enums_zip
          + v8_system_enums_other
          + v8_system_enums_request_schema
          + v8_system_enums_properties_of_metadata_objects
          + v8_system_enums_differents;
 
          // v8 общие объекты (у объектов есть конструктор, экземпляры создаются методом НОВЫЙ) ==> type
          const v8_shared_object =
          'comобъект ftpсоединение httpзапрос httpсервисответ httpсоединение wsопределения wsпрокси xbase анализданных аннотацияxs '
          + 'блокировкаданных буфердвоичныхданных включениеxs выражениекомпоновкиданных генераторслучайныхчисел географическаясхема '
          + 'географическиекоординаты графическаясхема группамоделиxs данныерасшифровкикомпоновкиданных двоичныеданные дендрограмма '
          + 'диаграмма диаграммаганта диалогвыборафайла диалогвыборацвета диалогвыборашрифта диалограсписаниярегламентногозадания '
          + 'диалогредактированиястандартногопериода диапазон документdom документhtml документацияxs доставляемоеуведомление '
          + 'записьdom записьfastinfoset записьhtml записьjson записьxml записьzipфайла записьданных записьтекста записьузловdom '
          + 'запрос защищенноесоединениеopenssl значенияполейрасшифровкикомпоновкиданных извлечениетекста импортxs интернетпочта '
          + 'интернетпочтовоесообщение интернетпочтовыйпрофиль интернетпрокси интернетсоединение информациядляприложенияxs '
          + 'использованиеатрибутаxs использованиесобытияжурналарегистрации источникдоступныхнастроеккомпоновкиданных '
          + 'итераторузловdom картинка квалификаторыдаты квалификаторыдвоичныхданных квалификаторыстроки квалификаторычисла '
          + 'компоновщикмакетакомпоновкиданных компоновщикнастроеккомпоновкиданных конструктормакетаоформлениякомпоновкиданных '
          + 'конструкторнастроеккомпоновкиданных конструкторформатнойстроки линия макеткомпоновкиданных макетобластикомпоновкиданных '
          + 'макетоформлениякомпоновкиданных маскаxs менеджеркриптографии наборсхемxml настройкикомпоновкиданных настройкисериализацииjson '
          + 'обработкакартинок обработкарасшифровкикомпоновкиданных обходдереваdom объявлениеатрибутаxs объявлениенотацииxs '
          + 'объявлениеэлементаxs описаниеиспользованиясобытиядоступжурналарегистрации '
          + 'описаниеиспользованиясобытияотказвдоступежурналарегистрации описаниеобработкирасшифровкикомпоновкиданных '
          + 'описаниепередаваемогофайла описаниетипов определениегруппыатрибутовxs определениегруппымоделиxs '
          + 'определениеограниченияидентичностиxs определениепростоготипаxs определениесоставноготипаxs определениетипадокументаdom '
          + 'определенияxpathxs отборкомпоновкиданных пакетотображаемыхдокументов параметрвыбора параметркомпоновкиданных '
          + 'параметрызаписиjson параметрызаписиxml параметрычтенияxml переопределениеxs планировщик полеанализаданных '
          + 'полекомпоновкиданных построительdom построительзапроса построительотчета построительотчетаанализаданных '
          + 'построительсхемxml поток потоквпамяти почта почтовоесообщение преобразованиеxsl преобразованиекканоническомуxml '
          + 'процессорвыводарезультатакомпоновкиданныхвколлекциюзначений процессорвыводарезультатакомпоновкиданныхвтабличныйдокумент '
          + 'процессоркомпоновкиданных разыменовательпространствименdom рамка расписаниерегламентногозадания расширенноеимяxml '
          + 'результатчтенияданных своднаядиаграмма связьпараметравыбора связьпотипу связьпотипукомпоновкиданных сериализаторxdto '
          + 'сертификатклиентаwindows сертификатклиентафайл сертификаткриптографии сертификатыудостоверяющихцентровwindows '
          + 'сертификатыудостоверяющихцентровфайл сжатиеданных системнаяинформация сообщениепользователю сочетаниеклавиш '
          + 'сравнениезначений стандартнаядатаначала стандартныйпериод схемаxml схемакомпоновкиданных табличныйдокумент '
          + 'текстовыйдокумент тестируемоеприложение типданныхxml уникальныйидентификатор фабрикаxdto файл файловыйпоток '
          + 'фасетдлиныxs фасетколичестваразрядовдробнойчастиxs фасетмаксимальноговключающегозначенияxs '
          + 'фасетмаксимальногоисключающегозначенияxs фасетмаксимальнойдлиныxs фасетминимальноговключающегозначенияxs '
          + 'фасетминимальногоисключающегозначенияxs фасетминимальнойдлиныxs фасетобразцаxs фасетобщегоколичестваразрядовxs '
          + 'фасетперечисленияxs фасетпробельныхсимволовxs фильтрузловdom форматированнаястрока форматированныйдокумент '
          + 'фрагментxs хешированиеданных хранилищезначения цвет чтениеfastinfoset чтениеhtml чтениеjson чтениеxml чтениеzipфайла '
          + 'чтениеданных чтениетекста чтениеузловdom шрифт элементрезультатакомпоновкиданных ';
 
          // v8 универсальные коллекции значений ==> type
          const v8_universal_collection =
          'comsafearray деревозначений массив соответствие списокзначений структура таблицазначений фиксированнаяструктура '
          + 'фиксированноесоответствие фиксированныймассив ';
 
          // type : встроенные типы
          const TYPE =
          v8_shared_object
          + v8_universal_collection;
 
          // literal : примитивные типы
          const LITERAL = 'null истина ложь неопределено';
 
          // number : числа
          const NUMBERS = hljs.inherit(hljs.NUMBER_MODE);
 
          // string : строки
          const STRINGS = {
            className: 'string',
            begin: '"|\\|',
            end: '"|$',
            contains: [ { begin: '""' } ]
          };
 
          // number : даты
          const DATE = {
            begin: "'",
            end: "'",
            excludeBegin: true,
            excludeEnd: true,
            contains: [
              {
                className: 'number',
                begin: '\\d{4}([\\.\\\\/:-]?\\d{2}){0,5}'
              }
            ]
          };
 
          // comment : комментарии
          const COMMENTS = hljs.inherit(hljs.C_LINE_COMMENT_MODE);
 
          // meta : инструкции препроцессора, директивы компиляции
          const META = {
            className: 'meta',
 
            begin: '#|&',
            end: '$',
            keywords: {
              $pattern: UNDERSCORE_IDENT_RE,
              keyword: KEYWORD + METAKEYWORD
            },
            contains: [ COMMENTS ]
          };
 
          // symbol : метка goto
          const SYMBOL = {
            className: 'symbol',
            begin: '~',
            end: ';|:',
            excludeEnd: true
          };
 
          // function : объявление процедур и функций
          const FUNCTION = {
            className: 'function',
            variants: [
              {
                begin: 'процедура|функция',
                end: '\\)',
                keywords: 'процедура функция'
              },
              {
                begin: 'конецпроцедуры|конецфункции',
                keywords: 'конецпроцедуры конецфункции'
              }
            ],
            contains: [
              {
                begin: '\\(',
                end: '\\)',
                endsParent: true,
                contains: [
                  {
                    className: 'params',
                    begin: UNDERSCORE_IDENT_RE,
                    end: ',',
                    excludeEnd: true,
                    endsWithParent: true,
                    keywords: {
                      $pattern: UNDERSCORE_IDENT_RE,
                      keyword: 'знач',
                      literal: LITERAL
                    },
                    contains: [
                      NUMBERS,
                      STRINGS,
                      DATE
                    ]
                  },
                  COMMENTS
                ]
              },
              hljs.inherit(hljs.TITLE_MODE, { begin: UNDERSCORE_IDENT_RE })
            ]
          };
 
          return {
            name: '1C:Enterprise',
            case_insensitive: true,
            keywords: {
              $pattern: UNDERSCORE_IDENT_RE,
              keyword: KEYWORD,
              built_in: BUILTIN,
              class: CLASS,
              type: TYPE,
              literal: LITERAL
            },
            contains: [
              META,
              FUNCTION,
              COMMENTS,
              SYMBOL,
              NUMBERS,
              STRINGS,
              DATE
            ]
          };
        }
 
        _1c_1 = _1c;
        return _1c_1;
    }
 
    /*
    Language: Augmented Backus-Naur Form
    Author: Alex McKibben <alex@nullscope.net>
    Website: https://tools.ietf.org/html/rfc5234
    Audit: 2020
    */
 
    var abnf_1;
    var hasRequiredAbnf;
 
    function requireAbnf () {
        if (hasRequiredAbnf) return abnf_1;
        hasRequiredAbnf = 1;
        /** @type LanguageFn */
        function abnf(hljs) {
          const regex = hljs.regex;
          const IDENT = /^[a-zA-Z][a-zA-Z0-9-]*/;
 
          const KEYWORDS = [
            "ALPHA",
            "BIT",
            "CHAR",
            "CR",
            "CRLF",
            "CTL",
            "DIGIT",
            "DQUOTE",
            "HEXDIG",
            "HTAB",
            "LF",
            "LWSP",
            "OCTET",
            "SP",
            "VCHAR",
            "WSP"
          ];
 
          const COMMENT = hljs.COMMENT(/;/, /$/);
 
          const TERMINAL_BINARY = {
            scope: "symbol",
            match: /%b[0-1]+(-[0-1]+|(\.[0-1]+)+)?/
          };
 
          const TERMINAL_DECIMAL = {
            scope: "symbol",
            match: /%d[0-9]+(-[0-9]+|(\.[0-9]+)+)?/
          };
 
          const TERMINAL_HEXADECIMAL = {
            scope: "symbol",
            match: /%x[0-9A-F]+(-[0-9A-F]+|(\.[0-9A-F]+)+)?/
          };
 
          const CASE_SENSITIVITY = {
            scope: "symbol",
            match: /%[si](?=".*")/
          };
 
          const RULE_DECLARATION = {
            scope: "attribute",
            match: regex.concat(IDENT, /(?=\s*=)/)
          };
 
          const ASSIGNMENT = {
            scope: "operator",
            match: /=\/?/
          };
 
          return {
            name: 'Augmented Backus-Naur Form',
            illegal: /[!@#$^&',?+~`|:]/,
            keywords: KEYWORDS,
            contains: [
              ASSIGNMENT,
              RULE_DECLARATION,
              COMMENT,
              TERMINAL_BINARY,
              TERMINAL_DECIMAL,
              TERMINAL_HEXADECIMAL,
              CASE_SENSITIVITY,
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE
            ]
          };
        }
 
        abnf_1 = abnf;
        return abnf_1;
    }
 
    /*
     Language: Apache Access Log
     Author: Oleg Efimov <efimovov@gmail.com>
     Description: Apache/Nginx Access Logs
     Website: https://httpd.apache.org/docs/2.4/logs.html#accesslog
     Category: web, logs
     Audit: 2020
     */
 
    var accesslog_1;
    var hasRequiredAccesslog;
 
    function requireAccesslog () {
        if (hasRequiredAccesslog) return accesslog_1;
        hasRequiredAccesslog = 1;
        /** @type LanguageFn */
        function accesslog(hljs) {
          const regex = hljs.regex;
          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
          const HTTP_VERBS = [
            "GET",
            "POST",
            "HEAD",
            "PUT",
            "DELETE",
            "CONNECT",
            "OPTIONS",
            "PATCH",
            "TRACE"
          ];
          return {
            name: 'Apache Access Log',
            contains: [
              // IP
              {
                className: 'number',
                begin: /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?\b/,
                relevance: 5
              },
              // Other numbers
              {
                className: 'number',
                begin: /\b\d+\b/,
                relevance: 0
              },
              // Requests
              {
                className: 'string',
                begin: regex.concat(/"/, regex.either(...HTTP_VERBS)),
                end: /"/,
                keywords: HTTP_VERBS,
                illegal: /\n/,
                relevance: 5,
                contains: [
                  {
                    begin: /HTTP\/[12]\.\d'/,
                    relevance: 5
                  }
                ]
              },
              // Dates
              {
                className: 'string',
                // dates must have a certain length, this prevents matching
                // simple array accesses a[123] and [] and other common patterns
                // found in other languages
                begin: /\[\d[^\]\n]{8,}\]/,
                illegal: /\n/,
                relevance: 1
              },
              {
                className: 'string',
                begin: /\[/,
                end: /\]/,
                illegal: /\n/,
                relevance: 0
              },
              // User agent / relevance boost
              {
                className: 'string',
                begin: /"Mozilla\/\d\.\d \(/,
                end: /"/,
                illegal: /\n/,
                relevance: 3
              },
              // Strings
              {
                className: 'string',
                begin: /"/,
                end: /"/,
                illegal: /\n/,
                relevance: 0
              }
            ]
          };
        }
 
        accesslog_1 = accesslog;
        return accesslog_1;
    }
 
    /*
    Language: ActionScript
    Author: Alexander Myadzel <myadzel@gmail.com>
    Category: scripting
    Audit: 2020
    */
 
    var actionscript_1;
    var hasRequiredActionscript;
 
    function requireActionscript () {
        if (hasRequiredActionscript) return actionscript_1;
        hasRequiredActionscript = 1;
        /** @type LanguageFn */
        function actionscript(hljs) {
          const regex = hljs.regex;
          const IDENT_RE = /[a-zA-Z_$][a-zA-Z0-9_$]*/;
          const PKG_NAME_RE = regex.concat(
            IDENT_RE,
            regex.concat("(\\.", IDENT_RE, ")*")
          );
          const IDENT_FUNC_RETURN_TYPE_RE = /([*]|[a-zA-Z_$][a-zA-Z0-9_$]*)/;
 
          const AS3_REST_ARG_MODE = {
            className: 'rest_arg',
            begin: /[.]{3}/,
            end: IDENT_RE,
            relevance: 10
          };
 
          const KEYWORDS = [
            "as",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "default",
            "delete",
            "do",
            "dynamic",
            "each",
            "else",
            "extends",
            "final",
            "finally",
            "for",
            "function",
            "get",
            "if",
            "implements",
            "import",
            "in",
            "include",
            "instanceof",
            "interface",
            "internal",
            "is",
            "namespace",
            "native",
            "new",
            "override",
            "package",
            "private",
            "protected",
            "public",
            "return",
            "set",
            "static",
            "super",
            "switch",
            "this",
            "throw",
            "try",
            "typeof",
            "use",
            "var",
            "void",
            "while",
            "with"
          ];
          const LITERALS = [
            "true",
            "false",
            "null",
            "undefined"
          ];
 
          return {
            name: 'ActionScript',
            aliases: [ 'as' ],
            keywords: {
              keyword: KEYWORDS,
              literal: LITERALS
            },
            contains: [
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_NUMBER_MODE,
              {
                match: [
                  /\bpackage/,
                  /\s+/,
                  PKG_NAME_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                }
              },
              {
                match: [
                  /\b(?:class|interface|extends|implements)/,
                  /\s+/,
                  IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                }
              },
              {
                className: 'meta',
                beginKeywords: 'import include',
                end: /;/,
                keywords: { keyword: 'import include' }
              },
              {
                beginKeywords: 'function',
                end: /[{;]/,
                excludeEnd: true,
                illegal: /\S/,
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, { className: "title.function" }),
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    contains: [
                      hljs.APOS_STRING_MODE,
                      hljs.QUOTE_STRING_MODE,
                      hljs.C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE,
                      AS3_REST_ARG_MODE
                    ]
                  },
                  { begin: regex.concat(/:\s*/, IDENT_FUNC_RETURN_TYPE_RE) }
                ]
              },
              hljs.METHOD_GUARD
            ],
            illegal: /#/
          };
        }
 
        actionscript_1 = actionscript;
        return actionscript_1;
    }
 
    /*
    Language: Ada
    Author: Lars Schulna <kartoffelbrei.mit.muskatnuss@gmail.org>
    Description: Ada is a general-purpose programming language that has great support for saftey critical and real-time applications.
                 It has been developed by the DoD and thus has been used in military and safety-critical applications (like civil aviation).
                 The first version appeared in the 80s, but it's still actively developed today with
                 the newest standard being Ada2012.
    */
 
    var ada_1;
    var hasRequiredAda;
 
    function requireAda () {
        if (hasRequiredAda) return ada_1;
        hasRequiredAda = 1;
        // We try to support full Ada2012
        //
        // We highlight all appearances of types, keywords, literals (string, char, number, bool)
        // and titles (user defined function/procedure/package)
        // CSS classes are set accordingly
        //
        // Languages causing problems for language detection:
        // xml (broken by Foo : Bar type), elm (broken by Foo : Bar type), vbscript-html (broken by body keyword)
        // sql (ada default.txt has a lot of sql keywords)
 
        /** @type LanguageFn */
        function ada(hljs) {
          // Regular expression for Ada numeric literals.
          // stolen form the VHDL highlighter
 
          // Decimal literal:
          const INTEGER_RE = '\\d(_|\\d)*';
          const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
          const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
 
          // Based literal:
          const BASED_INTEGER_RE = '\\w+';
          const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';
 
          const NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';
 
          // Identifier regex
          const ID_REGEX = '[A-Za-z](_?[A-Za-z0-9.])*';
 
          // bad chars, only allowed in literals
          const BAD_CHARS = `[]\\{\\}%#'"`;
 
          // Ada doesn't have block comments, only line comments
          const COMMENTS = hljs.COMMENT('--', '$');
 
          // variable declarations of the form
          // Foo : Bar := Baz;
          // where only Bar will be highlighted
          const VAR_DECLS = {
            // TODO: These spaces are not required by the Ada syntax
            // however, I have yet to see handwritten Ada code where
            // someone does not put spaces around :
            begin: '\\s+:\\s+',
            end: '\\s*(:=|;|\\)|=>|$)',
            // endsWithParent: true,
            // returnBegin: true,
            illegal: BAD_CHARS,
            contains: [
              {
                // workaround to avoid highlighting
                // named loops and declare blocks
                beginKeywords: 'loop for declare others',
                endsParent: true
              },
              {
                // properly highlight all modifiers
                className: 'keyword',
                beginKeywords: 'not null constant access function procedure in out aliased exception'
              },
              {
                className: 'type',
                begin: ID_REGEX,
                endsParent: true,
                relevance: 0
              }
            ]
          };
 
          const KEYWORDS = [
            "abort",
            "else",
            "new",
            "return",
            "abs",
            "elsif",
            "not",
            "reverse",
            "abstract",
            "end",
            "accept",
            "entry",
            "select",
            "access",
            "exception",
            "of",
            "separate",
            "aliased",
            "exit",
            "or",
            "some",
            "all",
            "others",
            "subtype",
            "and",
            "for",
            "out",
            "synchronized",
            "array",
            "function",
            "overriding",
            "at",
            "tagged",
            "generic",
            "package",
            "task",
            "begin",
            "goto",
            "pragma",
            "terminate",
            "body",
            "private",
            "then",
            "if",
            "procedure",
            "type",
            "case",
            "in",
            "protected",
            "constant",
            "interface",
            "is",
            "raise",
            "use",
            "declare",
            "range",
            "delay",
            "limited",
            "record",
            "when",
            "delta",
            "loop",
            "rem",
            "while",
            "digits",
            "renames",
            "with",
            "do",
            "mod",
            "requeue",
            "xor"
          ];
 
          return {
            name: 'Ada',
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              literal: [
                "True",
                "False"
              ]
            },
            contains: [
              COMMENTS,
              // strings "foobar"
              {
                className: 'string',
                begin: /"/,
                end: /"/,
                contains: [
                  {
                    begin: /""/,
                    relevance: 0
                  }
                ]
              },
              // characters ''
              {
                // character literals always contain one char
                className: 'string',
                begin: /'.'/
              },
              {
                // number literals
                className: 'number',
                begin: NUMBER_RE,
                relevance: 0
              },
              {
                // Attributes
                className: 'symbol',
                begin: "'" + ID_REGEX
              },
              {
                // package definition, maybe inside generic
                className: 'title',
                begin: '(\\bwith\\s+)?(\\bprivate\\s+)?\\bpackage\\s+(\\bbody\\s+)?',
                end: '(is|$)',
                keywords: 'package body',
                excludeBegin: true,
                excludeEnd: true,
                illegal: BAD_CHARS
              },
              {
                // function/procedure declaration/definition
                // maybe inside generic
                begin: '(\\b(with|overriding)\\s+)?\\b(function|procedure)\\s+',
                end: '(\\bis|\\bwith|\\brenames|\\)\\s*;)',
                keywords: 'overriding function procedure with is renames return',
                // we need to re-match the 'function' keyword, so that
                // the title mode below matches only exactly once
                returnBegin: true,
                contains:
                        [
                          COMMENTS,
                          {
                            // name of the function/procedure
                            className: 'title',
                            begin: '(\\bwith\\s+)?\\b(function|procedure)\\s+',
                            end: '(\\(|\\s+|$)',
                            excludeBegin: true,
                            excludeEnd: true,
                            illegal: BAD_CHARS
                          },
                          // 'self'
                          // // parameter types
                          VAR_DECLS,
                          {
                            // return type
                            className: 'type',
                            begin: '\\breturn\\s+',
                            end: '(\\s+|;|$)',
                            keywords: 'return',
                            excludeBegin: true,
                            excludeEnd: true,
                            // we are done with functions
                            endsParent: true,
                            illegal: BAD_CHARS
 
                          }
                        ]
              },
              {
                // new type declarations
                // maybe inside generic
                className: 'type',
                begin: '\\b(sub)?type\\s+',
                end: '\\s+',
                keywords: 'type',
                excludeBegin: true,
                illegal: BAD_CHARS
              },
 
              // see comment above the definition
              VAR_DECLS
 
              // no markup
              // relevance boosters for small snippets
              // {begin: '\\s*=>\\s*'},
              // {begin: '\\s*:=\\s*'},
              // {begin: '\\s+:=\\s+'},
            ]
          };
        }
 
        ada_1 = ada;
        return ada_1;
    }
 
    /*
    Language: AngelScript
    Author: Melissa Geels <melissa@nimble.tools>
    Category: scripting
    Website: https://www.angelcode.com/angelscript/
    */
 
    var angelscript_1;
    var hasRequiredAngelscript;
 
    function requireAngelscript () {
        if (hasRequiredAngelscript) return angelscript_1;
        hasRequiredAngelscript = 1;
        /** @type LanguageFn */
        function angelscript(hljs) {
          const builtInTypeMode = {
            className: 'built_in',
            begin: '\\b(void|bool|int8|int16|int32|int64|int|uint8|uint16|uint32|uint64|uint|string|ref|array|double|float|auto|dictionary)'
          };
 
          const objectHandleMode = {
            className: 'symbol',
            begin: '[a-zA-Z0-9_]+@'
          };
 
          const genericMode = {
            className: 'keyword',
            begin: '<',
            end: '>',
            contains: [
              builtInTypeMode,
              objectHandleMode
            ]
          };
 
          builtInTypeMode.contains = [ genericMode ];
          objectHandleMode.contains = [ genericMode ];
 
          const KEYWORDS = [
            "for",
            "in|0",
            "break",
            "continue",
            "while",
            "do|0",
            "return",
            "if",
            "else",
            "case",
            "switch",
            "namespace",
            "is",
            "cast",
            "or",
            "and",
            "xor",
            "not",
            "get|0",
            "in",
            "inout|10",
            "out",
            "override",
            "set|0",
            "private",
            "public",
            "const",
            "default|0",
            "final",
            "shared",
            "external",
            "mixin|10",
            "enum",
            "typedef",
            "funcdef",
            "this",
            "super",
            "import",
            "from",
            "interface",
            "abstract|0",
            "try",
            "catch",
            "protected",
            "explicit",
            "property"
          ];
 
          return {
            name: 'AngelScript',
            aliases: [ 'asc' ],
 
            keywords: KEYWORDS,
 
            // avoid close detection with C# and JS
            illegal: '(^using\\s+[A-Za-z0-9_\\.]+;$|\\bfunction\\s*[^\\(])',
 
            contains: [
              { // 'strings'
                className: 'string',
                begin: '\'',
                end: '\'',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ],
                relevance: 0
              },
 
              // """heredoc strings"""
              {
                className: 'string',
                begin: '"""',
                end: '"""'
              },
 
              { // "strings"
                className: 'string',
                begin: '"',
                end: '"',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ],
                relevance: 0
              },
 
              hljs.C_LINE_COMMENT_MODE, // single-line comments
              hljs.C_BLOCK_COMMENT_MODE, // comment blocks
 
              { // metadata
                className: 'string',
                begin: '^\\s*\\[',
                end: '\\]'
              },
 
              { // interface or namespace declaration
                beginKeywords: 'interface namespace',
                end: /\{/,
                illegal: '[;.\\-]',
                contains: [
                  { // interface or namespace name
                    className: 'symbol',
                    begin: '[a-zA-Z0-9_]+'
                  }
                ]
              },
 
              { // class declaration
                beginKeywords: 'class',
                end: /\{/,
                illegal: '[;.\\-]',
                contains: [
                  { // class name
                    className: 'symbol',
                    begin: '[a-zA-Z0-9_]+',
                    contains: [
                      {
                        begin: '[:,]\\s*',
                        contains: [
                          {
                            className: 'symbol',
                            begin: '[a-zA-Z0-9_]+'
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
 
              builtInTypeMode, // built-in types
              objectHandleMode, // object handles
 
              { // literals
                className: 'literal',
                begin: '\\b(null|true|false)'
              },
 
              { // numbers
                className: 'number',
                relevance: 0,
                begin: '(-?)(\\b0[xXbBoOdD][a-fA-F0-9]+|(\\b\\d+(\\.\\d*)?f?|\\.\\d+f?)([eE][-+]?\\d+f?)?)'
              }
            ]
          };
        }
 
        angelscript_1 = angelscript;
        return angelscript_1;
    }
 
    /*
    Language: Apache config
    Author: Ruslan Keba <rukeba@gmail.com>
    Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Website: https://httpd.apache.org
    Description: language definition for Apache configuration files (httpd.conf & .htaccess)
    Category: config, web
    Audit: 2020
    */
 
    var apache_1;
    var hasRequiredApache;
 
    function requireApache () {
        if (hasRequiredApache) return apache_1;
        hasRequiredApache = 1;
        /** @type LanguageFn */
        function apache(hljs) {
          const NUMBER_REF = {
            className: 'number',
            begin: /[$%]\d+/
          };
          const NUMBER = {
            className: 'number',
            begin: /\b\d+/
          };
          const IP_ADDRESS = {
            className: "number",
            begin: /\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}(:\d{1,5})?/
          };
          const PORT_NUMBER = {
            className: "number",
            begin: /:\d{1,5}/
          };
          return {
            name: 'Apache config',
            aliases: [ 'apacheconf' ],
            case_insensitive: true,
            contains: [
              hljs.HASH_COMMENT_MODE,
              {
                className: 'section',
                begin: /<\/?/,
                end: />/,
                contains: [
                  IP_ADDRESS,
                  PORT_NUMBER,
                  // low relevance prevents us from claming XML/HTML where this rule would
                  // match strings inside of XML tags
                  hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 })
                ]
              },
              {
                className: 'attribute',
                begin: /\w+/,
                relevance: 0,
                // keywords aren’t needed for highlighting per se, they only boost relevance
                // for a very generally defined mode (starts with a word, ends with line-end
                keywords: { _: [
                  "order",
                  "deny",
                  "allow",
                  "setenv",
                  "rewriterule",
                  "rewriteengine",
                  "rewritecond",
                  "documentroot",
                  "sethandler",
                  "errordocument",
                  "loadmodule",
                  "options",
                  "header",
                  "listen",
                  "serverroot",
                  "servername"
                ] },
                starts: {
                  end: /$/,
                  relevance: 0,
                  keywords: { literal: 'on off all deny allow' },
                  contains: [
                    {
                      className: 'meta',
                      begin: /\s\[/,
                      end: /\]$/
                    },
                    {
                      className: 'variable',
                      begin: /[\$%]\{/,
                      end: /\}/,
                      contains: [
                        'self',
                        NUMBER_REF
                      ]
                    },
                    IP_ADDRESS,
                    NUMBER,
                    hljs.QUOTE_STRING_MODE
                  ]
                }
              }
            ],
            illegal: /\S/
          };
        }
 
        apache_1 = apache;
        return apache_1;
    }
 
    /*
    Language: AppleScript
    Authors: Nathan Grigg <nathan@nathanamy.org>, Dr. Drang <drdrang@gmail.com>
    Category: scripting
    Website: https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html
    Audit: 2020
    */
 
    var applescript_1;
    var hasRequiredApplescript;
 
    function requireApplescript () {
        if (hasRequiredApplescript) return applescript_1;
        hasRequiredApplescript = 1;
        /** @type LanguageFn */
        function applescript(hljs) {
          const regex = hljs.regex;
          const STRING = hljs.inherit(
            hljs.QUOTE_STRING_MODE, { illegal: null });
          const PARAMS = {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            contains: [
              'self',
              hljs.C_NUMBER_MODE,
              STRING
            ]
          };
          const COMMENT_MODE_1 = hljs.COMMENT(/--/, /$/);
          const COMMENT_MODE_2 = hljs.COMMENT(
            /\(\*/,
            /\*\)/,
            { contains: [
              'self', // allow nesting
              COMMENT_MODE_1
            ] }
          );
          const COMMENTS = [
            COMMENT_MODE_1,
            COMMENT_MODE_2,
            hljs.HASH_COMMENT_MODE
          ];
 
          const KEYWORD_PATTERNS = [
            /apart from/,
            /aside from/,
            /instead of/,
            /out of/,
            /greater than/,
            /isn't|(doesn't|does not) (equal|come before|come after|contain)/,
            /(greater|less) than( or equal)?/,
            /(starts?|ends|begins?) with/,
            /contained by/,
            /comes (before|after)/,
            /a (ref|reference)/,
            /POSIX (file|path)/,
            /(date|time) string/,
            /quoted form/
          ];
 
          const BUILT_IN_PATTERNS = [
            /clipboard info/,
            /the clipboard/,
            /info for/,
            /list (disks|folder)/,
            /mount volume/,
            /path to/,
            /(close|open for) access/,
            /(get|set) eof/,
            /current date/,
            /do shell script/,
            /get volume settings/,
            /random number/,
            /set volume/,
            /system attribute/,
            /system info/,
            /time to GMT/,
            /(load|run|store) script/,
            /scripting components/,
            /ASCII (character|number)/,
            /localized string/,
            /choose (application|color|file|file name|folder|from list|remote application|URL)/,
            /display (alert|dialog)/
          ];
 
          return {
            name: 'AppleScript',
            aliases: [ 'osascript' ],
            keywords: {
              keyword:
                'about above after against and around as at back before beginning '
                + 'behind below beneath beside between but by considering '
                + 'contain contains continue copy div does eighth else end equal '
                + 'equals error every exit fifth first for fourth from front '
                + 'get given global if ignoring in into is it its last local me '
                + 'middle mod my ninth not of on onto or over prop property put ref '
                + 'reference repeat returning script second set seventh since '
                + 'sixth some tell tenth that the|0 then third through thru '
                + 'timeout times to transaction try until where while whose with '
                + 'without',
              literal:
                'AppleScript false linefeed return pi quote result space tab true',
              built_in:
                'alias application boolean class constant date file integer list '
                + 'number real record string text '
                + 'activate beep count delay launch log offset read round '
                + 'run say summarize write '
                + 'character characters contents day frontmost id item length '
                + 'month name|0 paragraph paragraphs rest reverse running time version '
                + 'weekday word words year'
            },
            contains: [
              STRING,
              hljs.C_NUMBER_MODE,
              {
                className: 'built_in',
                begin: regex.concat(
                  /\b/,
                  regex.either(...BUILT_IN_PATTERNS),
                  /\b/
                )
              },
              {
                className: 'built_in',
                begin: /^\s*return\b/
              },
              {
                className: 'literal',
                begin:
                  /\b(text item delimiters|current application|missing value)\b/
              },
              {
                className: 'keyword',
                begin: regex.concat(
                  /\b/,
                  regex.either(...KEYWORD_PATTERNS),
                  /\b/
                )
              },
              {
                beginKeywords: 'on',
                illegal: /[${=;\n]/,
                contains: [
                  hljs.UNDERSCORE_TITLE_MODE,
                  PARAMS
                ]
              },
              ...COMMENTS
            ],
            illegal: /\/\/|->|=>|\[\[/
          };
        }
 
        applescript_1 = applescript;
        return applescript_1;
    }
 
    /*
     Language: ArcGIS Arcade
     Category: scripting
     Author: John Foster <jfoster@esri.com>
     Website: https://developers.arcgis.com/arcade/
     Description: ArcGIS Arcade is an expression language used in many Esri ArcGIS products such as Pro, Online, Server, Runtime, JavaScript, and Python
    */
 
    var arcade_1;
    var hasRequiredArcade;
 
    function requireArcade () {
        if (hasRequiredArcade) return arcade_1;
        hasRequiredArcade = 1;
        /** @type LanguageFn */
        function arcade(hljs) {
          const IDENT_RE = '[A-Za-z_][0-9A-Za-z_]*';
          const KEYWORDS = {
            keyword: [
              "if",
              "for",
              "while",
              "var",
              "new",
              "function",
              "do",
              "return",
              "void",
              "else",
              "break"
            ],
            literal: [
              "BackSlash",
              "DoubleQuote",
              "false",
              "ForwardSlash",
              "Infinity",
              "NaN",
              "NewLine",
              "null",
              "PI",
              "SingleQuote",
              "Tab",
              "TextFormatting",
              "true",
              "undefined"
            ],
            built_in: [
              "Abs",
              "Acos",
              "All",
              "Angle",
              "Any",
              "Area",
              "AreaGeodetic",
              "Array",
              "Asin",
              "Atan",
              "Atan2",
              "Attachments",
              "Average",
              "Back",
              "Bearing",
              "Boolean",
              "Buffer",
              "BufferGeodetic",
              "Ceil",
              "Centroid",
              "Clip",
              "Concatenate",
              "Console",
              "Constrain",
              "Contains",
              "ConvertDirection",
              "Cos",
              "Count",
              "Crosses",
              "Cut",
              "Date",
              "DateAdd",
              "DateDiff",
              "Day",
              "Decode",
              "DefaultValue",
              "Densify",
              "DensifyGeodetic",
              "Dictionary",
              "Difference",
              "Disjoint",
              "Distance",
              "DistanceGeodetic",
              "Distinct",
              "Domain",
              "DomainCode",
              "DomainName",
              "EnvelopeIntersects",
              "Equals",
              "Erase",
              "Exp",
              "Expects",
              "Extent",
              "Feature",
              "FeatureSet",
              "FeatureSetByAssociation",
              "FeatureSetById",
              "FeatureSetByName",
              "FeatureSetByPortalItem",
              "FeatureSetByRelationshipName",
              "Filter",
              "Find",
              "First",
              "Floor",
              "FromCharCode",
              "FromCodePoint",
              "FromJSON",
              "GdbVersion",
              "Generalize",
              "Geometry",
              "GetFeatureSet",
              "GetUser",
              "GroupBy",
              "Guid",
              "Hash",
              "HasKey",
              "Hour",
              "IIf",
              "Includes",
              "IndexOf",
              "Insert",
              "Intersection",
              "Intersects",
              "IsEmpty",
              "IsNan",
              "ISOMonth",
              "ISOWeek",
              "ISOWeekday",
              "ISOYear",
              "IsSelfIntersecting",
              "IsSimple",
              "Left|0",
              "Length",
              "Length3D",
              "LengthGeodetic",
              "Log",
              "Lower",
              "Map",
              "Max",
              "Mean",
              "Mid",
              "Millisecond",
              "Min",
              "Minute",
              "Month",
              "MultiPartToSinglePart",
              "Multipoint",
              "NextSequenceValue",
              "None",
              "Now",
              "Number",
              "Offset|0",
              "OrderBy",
              "Overlaps",
              "Point",
              "Polygon",
              "Polyline",
              "Pop",
              "Portal",
              "Pow",
              "Proper",
              "Push",
              "Random",
              "Reduce",
              "Relate",
              "Replace",
              "Resize",
              "Reverse",
              "Right|0",
              "RingIsClockwise",
              "Rotate",
              "Round",
              "Schema",
              "Second",
              "SetGeometry",
              "Simplify",
              "Sin",
              "Slice",
              "Sort",
              "Splice",
              "Split",
              "Sqrt",
              "Stdev",
              "SubtypeCode",
              "SubtypeName",
              "Subtypes",
              "Sum",
              "SymmetricDifference",
              "Tan",
              "Text",
              "Timestamp",
              "ToCharCode",
              "ToCodePoint",
              "Today",
              "ToHex",
              "ToLocal",
              "Top|0",
              "Touches",
              "ToUTC",
              "TrackAccelerationAt",
              "TrackAccelerationWindow",
              "TrackCurrentAcceleration",
              "TrackCurrentDistance",
              "TrackCurrentSpeed",
              "TrackCurrentTime",
              "TrackDistanceAt",
              "TrackDistanceWindow",
              "TrackDuration",
              "TrackFieldWindow",
              "TrackGeometryWindow",
              "TrackIndex",
              "TrackSpeedAt",
              "TrackSpeedWindow",
              "TrackStartTime",
              "TrackWindow",
              "Trim",
              "TypeOf",
              "Union",
              "Upper",
              "UrlEncode",
              "Variance",
              "Week",
              "Weekday",
              "When",
              "Within",
              "Year"
            ]
          };
          const SYMBOL = {
            className: 'symbol',
            begin: '\\$[datastore|feature|layer|map|measure|sourcefeature|sourcelayer|targetfeature|targetlayer|value|view]+'
          };
          const NUMBER = {
            className: 'number',
            variants: [
              { begin: '\\b(0[bB][01]+)' },
              { begin: '\\b(0[oO][0-7]+)' },
              { begin: hljs.C_NUMBER_RE }
            ],
            relevance: 0
          };
          const SUBST = {
            className: 'subst',
            begin: '\\$\\{',
            end: '\\}',
            keywords: KEYWORDS,
            contains: [] // defined later
          };
          const TEMPLATE_STRING = {
            className: 'string',
            begin: '`',
            end: '`',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          };
          SUBST.contains = [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            TEMPLATE_STRING,
            NUMBER,
            hljs.REGEXP_MODE
          ];
          const PARAMS_CONTAINS = SUBST.contains.concat([
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.C_LINE_COMMENT_MODE
          ]);
 
          return {
            name: 'ArcGIS Arcade',
            case_insensitive: true,
            keywords: KEYWORDS,
            contains: [
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              TEMPLATE_STRING,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              SYMBOL,
              NUMBER,
              { // object attr container
                begin: /[{,]\s*/,
                relevance: 0,
                contains: [
                  {
                    begin: IDENT_RE + '\\s*:',
                    returnBegin: true,
                    relevance: 0,
                    contains: [
                      {
                        className: 'attr',
                        begin: IDENT_RE,
                        relevance: 0
                      }
                    ]
                  }
                ]
              },
              { // "value" container
                begin: '(' + hljs.RE_STARTERS_RE + '|\\b(return)\\b)\\s*',
                keywords: 'return',
                contains: [
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  hljs.REGEXP_MODE,
                  {
                    className: 'function',
                    begin: '(\\(.*?\\)|' + IDENT_RE + ')\\s*=>',
                    returnBegin: true,
                    end: '\\s*=>',
                    contains: [
                      {
                        className: 'params',
                        variants: [
                          { begin: IDENT_RE },
                          { begin: /\(\s*\)/ },
                          {
                            begin: /\(/,
                            end: /\)/,
                            excludeBegin: true,
                            excludeEnd: true,
                            keywords: KEYWORDS,
                            contains: PARAMS_CONTAINS
                          }
                        ]
                      }
                    ]
                  }
                ],
                relevance: 0
              },
              {
                beginKeywords: 'function',
                end: /\{/,
                excludeEnd: true,
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, {
                    className: "title.function",
                    begin: IDENT_RE
                  }),
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: true,
                    excludeEnd: true,
                    contains: PARAMS_CONTAINS
                  }
                ],
                illegal: /\[|%/
              },
              { begin: /\$[(.]/ }
            ],
            illegal: /#(?!!)/
          };
        }
 
        arcade_1 = arcade;
        return arcade_1;
    }
 
    /*
    Language: C++
    Category: common, system
    Website: https://isocpp.org
    */
 
    var arduino_1;
    var hasRequiredArduino;
 
    function requireArduino () {
        if (hasRequiredArduino) return arduino_1;
        hasRequiredArduino = 1;
        /** @type LanguageFn */
        function cPlusPlus(hljs) {
          const regex = hljs.regex;
          // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
          // not include such support nor can we be sure all the grammars depending
          // on it would desire this behavior
          const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
          const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
          const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
          const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
          const FUNCTION_TYPE_RE = '(?!struct)('
            + DECLTYPE_AUTO_RE + '|'
            + regex.optional(NAMESPACE_RE)
            + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
          + ')';
 
          const CPP_PRIMITIVE_TYPES = {
            className: 'type',
            begin: '\\b[a-z\\d_]*_t\\b'
          };
 
          // https://en.cppreference.com/w/cpp/language/escape
          // \\ \x \xFF \u2837 \u00323747 \374
          const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
          const STRINGS = {
            className: 'string',
            variants: [
              {
                begin: '(u8?|U|L)?"',
                end: '"',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
                end: '\'',
                illegal: '.'
              },
              hljs.END_SAME_AS_BEGIN({
                begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
                end: /\)([^()\\ ]{0,16})"/
              })
            ]
          };
 
          const NUMBERS = {
            className: 'number',
            variants: [
              { begin: '\\b(0b[01\']+)' },
              { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
              { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
            ],
            relevance: 0
          };
 
          const PREPROCESSOR = {
            className: 'meta',
            begin: /#\s*[a-z]+\b/,
            end: /$/,
            keywords: { keyword:
                'if else elif endif define undef warning error line '
                + 'pragma _Pragma ifdef ifndef include' },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              hljs.inherit(STRINGS, { className: 'string' }),
              {
                className: 'string',
                begin: /<.*?>/
              },
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
 
          const TITLE_MODE = {
            className: 'title',
            begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
            relevance: 0
          };
 
          const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';
 
          // https://en.cppreference.com/w/cpp/keyword
          const RESERVED_KEYWORDS = [
            'alignas',
            'alignof',
            'and',
            'and_eq',
            'asm',
            'atomic_cancel',
            'atomic_commit',
            'atomic_noexcept',
            'auto',
            'bitand',
            'bitor',
            'break',
            'case',
            'catch',
            'class',
            'co_await',
            'co_return',
            'co_yield',
            'compl',
            'concept',
            'const_cast|10',
            'consteval',
            'constexpr',
            'constinit',
            'continue',
            'decltype',
            'default',
            'delete',
            'do',
            'dynamic_cast|10',
            'else',
            'enum',
            'explicit',
            'export',
            'extern',
            'false',
            'final',
            'for',
            'friend',
            'goto',
            'if',
            'import',
            'inline',
            'module',
            'mutable',
            'namespace',
            'new',
            'noexcept',
            'not',
            'not_eq',
            'nullptr',
            'operator',
            'or',
            'or_eq',
            'override',
            'private',
            'protected',
            'public',
            'reflexpr',
            'register',
            'reinterpret_cast|10',
            'requires',
            'return',
            'sizeof',
            'static_assert',
            'static_cast|10',
            'struct',
            'switch',
            'synchronized',
            'template',
            'this',
            'thread_local',
            'throw',
            'transaction_safe',
            'transaction_safe_dynamic',
            'true',
            'try',
            'typedef',
            'typeid',
            'typename',
            'union',
            'using',
            'virtual',
            'volatile',
            'while',
            'xor',
            'xor_eq'
          ];
 
          // https://en.cppreference.com/w/cpp/keyword
          const RESERVED_TYPES = [
            'bool',
            'char',
            'char16_t',
            'char32_t',
            'char8_t',
            'double',
            'float',
            'int',
            'long',
            'short',
            'void',
            'wchar_t',
            'unsigned',
            'signed',
            'const',
            'static'
          ];
 
          const TYPE_HINTS = [
            'any',
            'auto_ptr',
            'barrier',
            'binary_semaphore',
            'bitset',
            'complex',
            'condition_variable',
            'condition_variable_any',
            'counting_semaphore',
            'deque',
            'false_type',
            'future',
            'imaginary',
            'initializer_list',
            'istringstream',
            'jthread',
            'latch',
            'lock_guard',
            'multimap',
            'multiset',
            'mutex',
            'optional',
            'ostringstream',
            'packaged_task',
            'pair',
            'promise',
            'priority_queue',
            'queue',
            'recursive_mutex',
            'recursive_timed_mutex',
            'scoped_lock',
            'set',
            'shared_future',
            'shared_lock',
            'shared_mutex',
            'shared_timed_mutex',
            'shared_ptr',
            'stack',
            'string_view',
            'stringstream',
            'timed_mutex',
            'thread',
            'true_type',
            'tuple',
            'unique_lock',
            'unique_ptr',
            'unordered_map',
            'unordered_multimap',
            'unordered_multiset',
            'unordered_set',
            'variant',
            'vector',
            'weak_ptr',
            'wstring',
            'wstring_view'
          ];
 
          const FUNCTION_HINTS = [
            'abort',
            'abs',
            'acos',
            'apply',
            'as_const',
            'asin',
            'atan',
            'atan2',
            'calloc',
            'ceil',
            'cerr',
            'cin',
            'clog',
            'cos',
            'cosh',
            'cout',
            'declval',
            'endl',
            'exchange',
            'exit',
            'exp',
            'fabs',
            'floor',
            'fmod',
            'forward',
            'fprintf',
            'fputs',
            'free',
            'frexp',
            'fscanf',
            'future',
            'invoke',
            'isalnum',
            'isalpha',
            'iscntrl',
            'isdigit',
            'isgraph',
            'islower',
            'isprint',
            'ispunct',
            'isspace',
            'isupper',
            'isxdigit',
            'labs',
            'launder',
            'ldexp',
            'log',
            'log10',
            'make_pair',
            'make_shared',
            'make_shared_for_overwrite',
            'make_tuple',
            'make_unique',
            'malloc',
            'memchr',
            'memcmp',
            'memcpy',
            'memset',
            'modf',
            'move',
            'pow',
            'printf',
            'putchar',
            'puts',
            'realloc',
            'scanf',
            'sin',
            'sinh',
            'snprintf',
            'sprintf',
            'sqrt',
            'sscanf',
            'std',
            'stderr',
            'stdin',
            'stdout',
            'strcat',
            'strchr',
            'strcmp',
            'strcpy',
            'strcspn',
            'strlen',
            'strncat',
            'strncmp',
            'strncpy',
            'strpbrk',
            'strrchr',
            'strspn',
            'strstr',
            'swap',
            'tan',
            'tanh',
            'terminate',
            'to_underlying',
            'tolower',
            'toupper',
            'vfprintf',
            'visit',
            'vprintf',
            'vsprintf'
          ];
 
          const LITERALS = [
            'NULL',
            'false',
            'nullopt',
            'nullptr',
            'true'
          ];
 
          // https://en.cppreference.com/w/cpp/keyword
          const BUILT_IN = [ '_Pragma' ];
 
          const CPP_KEYWORDS = {
            type: RESERVED_TYPES,
            keyword: RESERVED_KEYWORDS,
            literal: LITERALS,
            built_in: BUILT_IN,
            _type_hints: TYPE_HINTS
          };
 
          const FUNCTION_DISPATCH = {
            className: 'function.dispatch',
            relevance: 0,
            keywords: {
              // Only for relevance, not highlighting.
              _hint: FUNCTION_HINTS },
            begin: regex.concat(
              /\b/,
              /(?!decltype)/,
              /(?!if)/,
              /(?!for)/,
              /(?!switch)/,
              /(?!while)/,
              hljs.IDENT_RE,
              regex.lookahead(/(<[^<>]+>|)\s*\(/))
          };
 
          const EXPRESSION_CONTAINS = [
            FUNCTION_DISPATCH,
            PREPROCESSOR,
            CPP_PRIMITIVE_TYPES,
            C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            NUMBERS,
            STRINGS
          ];
 
          const EXPRESSION_CONTEXT = {
            // This mode covers expression context where we can't expect a function
            // definition and shouldn't highlight anything that looks like one:
            // `return some()`, `else if()`, `(x*sum(1, 2))`
            variants: [
              {
                begin: /=/,
                end: /;/
              },
              {
                begin: /\(/,
                end: /\)/
              },
              {
                beginKeywords: 'new throw return else',
                end: /;/
              }
            ],
            keywords: CPP_KEYWORDS,
            contains: EXPRESSION_CONTAINS.concat([
              {
                begin: /\(/,
                end: /\)/,
                keywords: CPP_KEYWORDS,
                contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
                relevance: 0
              }
            ]),
            relevance: 0
          };
 
          const FUNCTION_DECLARATION = {
            className: 'function',
            begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
            returnBegin: true,
            end: /[{;=]/,
            excludeEnd: true,
            keywords: CPP_KEYWORDS,
            illegal: /[^\w\s\*&:<>.]/,
            contains: [
              { // to prevent it from being confused as the function title
                begin: DECLTYPE_AUTO_RE,
                keywords: CPP_KEYWORDS,
                relevance: 0
              },
              {
                begin: FUNCTION_TITLE,
                returnBegin: true,
                contains: [ TITLE_MODE ],
                relevance: 0
              },
              // needed because we do not have look-behind on the below rule
              // to prevent it from grabbing the final : in a :: pair
              {
                begin: /::/,
                relevance: 0
              },
              // initializers
              {
                begin: /:/,
                endsWithParent: true,
                contains: [
                  STRINGS,
                  NUMBERS
                ]
              },
              // allow for multiple declarations, e.g.:
              // extern void f(int), g(char);
              {
                relevance: 0,
                match: /,/
              },
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: CPP_KEYWORDS,
                relevance: 0,
                contains: [
                  C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRINGS,
                  NUMBERS,
                  CPP_PRIMITIVE_TYPES,
                  // Count matching parentheses.
                  {
                    begin: /\(/,
                    end: /\)/,
                    keywords: CPP_KEYWORDS,
                    relevance: 0,
                    contains: [
                      'self',
                      C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE,
                      STRINGS,
                      NUMBERS,
                      CPP_PRIMITIVE_TYPES
                    ]
                  }
                ]
              },
              CPP_PRIMITIVE_TYPES,
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              PREPROCESSOR
            ]
          };
 
          return {
            name: 'C++',
            aliases: [
              'cc',
              'c++',
              'h++',
              'hpp',
              'hh',
              'hxx',
              'cxx'
            ],
            keywords: CPP_KEYWORDS,
            illegal: '</',
            classNameAliases: { 'function.dispatch': 'built_in' },
            contains: [].concat(
              EXPRESSION_CONTEXT,
              FUNCTION_DECLARATION,
              FUNCTION_DISPATCH,
              EXPRESSION_CONTAINS,
              [
                PREPROCESSOR,
                { // containers: ie, `vector <int> rooms (9);`
                  begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
                  end: '>',
                  keywords: CPP_KEYWORDS,
                  contains: [
                    'self',
                    CPP_PRIMITIVE_TYPES
                  ]
                },
                {
                  begin: hljs.IDENT_RE + '::',
                  keywords: CPP_KEYWORDS
                },
                {
                  match: [
                    // extra complexity to deal with `enum class` and `enum struct`
                    /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
                    /\s+/,
                    /\w+/
                  ],
                  className: {
                    1: 'keyword',
                    3: 'title.class'
                  }
                }
              ])
          };
        }
 
        /*
        Language: Arduino
        Author: Stefania Mellai <s.mellai@arduino.cc>
        Description: The Arduino® Language is a superset of C++. This rules are designed to highlight the Arduino® source code. For info about language see http://www.arduino.cc.
        Website: https://www.arduino.cc
        */
 
        /** @type LanguageFn */
        function arduino(hljs) {
          const ARDUINO_KW = {
            type: [
              "boolean",
              "byte",
              "word",
              "String"
            ],
            built_in: [
              "KeyboardController",
              "MouseController",
              "SoftwareSerial",
              "EthernetServer",
              "EthernetClient",
              "LiquidCrystal",
              "RobotControl",
              "GSMVoiceCall",
              "EthernetUDP",
              "EsploraTFT",
              "HttpClient",
              "RobotMotor",
              "WiFiClient",
              "GSMScanner",
              "FileSystem",
              "Scheduler",
              "GSMServer",
              "YunClient",
              "YunServer",
              "IPAddress",
              "GSMClient",
              "GSMModem",
              "Keyboard",
              "Ethernet",
              "Console",
              "GSMBand",
              "Esplora",
              "Stepper",
              "Process",
              "WiFiUDP",
              "GSM_SMS",
              "Mailbox",
              "USBHost",
              "Firmata",
              "PImage",
              "Client",
              "Server",
              "GSMPIN",
              "FileIO",
              "Bridge",
              "Serial",
              "EEPROM",
              "Stream",
              "Mouse",
              "Audio",
              "Servo",
              "File",
              "Task",
              "GPRS",
              "WiFi",
              "Wire",
              "TFT",
              "GSM",
              "SPI",
              "SD"
            ],
            _hints: [
              "setup",
              "loop",
              "runShellCommandAsynchronously",
              "analogWriteResolution",
              "retrieveCallingNumber",
              "printFirmwareVersion",
              "analogReadResolution",
              "sendDigitalPortPair",
              "noListenOnLocalhost",
              "readJoystickButton",
              "setFirmwareVersion",
              "readJoystickSwitch",
              "scrollDisplayRight",
              "getVoiceCallStatus",
              "scrollDisplayLeft",
              "writeMicroseconds",
              "delayMicroseconds",
              "beginTransmission",
              "getSignalStrength",
              "runAsynchronously",
              "getAsynchronously",
              "listenOnLocalhost",
              "getCurrentCarrier",
              "readAccelerometer",
              "messageAvailable",
              "sendDigitalPorts",
              "lineFollowConfig",
              "countryNameWrite",
              "runShellCommand",
              "readStringUntil",
              "rewindDirectory",
              "readTemperature",
              "setClockDivider",
              "readLightSensor",
              "endTransmission",
              "analogReference",
              "detachInterrupt",
              "countryNameRead",
              "attachInterrupt",
              "encryptionType",
              "readBytesUntil",
              "robotNameWrite",
              "readMicrophone",
              "robotNameRead",
              "cityNameWrite",
              "userNameWrite",
              "readJoystickY",
              "readJoystickX",
              "mouseReleased",
              "openNextFile",
              "scanNetworks",
              "noInterrupts",
              "digitalWrite",
              "beginSpeaker",
              "mousePressed",
              "isActionDone",
              "mouseDragged",
              "displayLogos",
              "noAutoscroll",
              "addParameter",
              "remoteNumber",
              "getModifiers",
              "keyboardRead",
              "userNameRead",
              "waitContinue",
              "processInput",
              "parseCommand",
              "printVersion",
              "readNetworks",
              "writeMessage",
              "blinkVersion",
              "cityNameRead",
              "readMessage",
              "setDataMode",
              "parsePacket",
              "isListening",
              "setBitOrder",
              "beginPacket",
              "isDirectory",
              "motorsWrite",
              "drawCompass",
              "digitalRead",
              "clearScreen",
              "serialEvent",
              "rightToLeft",
              "setTextSize",
              "leftToRight",
              "requestFrom",
              "keyReleased",
              "compassRead",
              "analogWrite",
              "interrupts",
              "WiFiServer",
              "disconnect",
              "playMelody",
              "parseFloat",
              "autoscroll",
              "getPINUsed",
              "setPINUsed",
              "setTimeout",
              "sendAnalog",
              "readSlider",
              "analogRead",
              "beginWrite",
              "createChar",
              "motorsStop",
              "keyPressed",
              "tempoWrite",
              "readButton",
              "subnetMask",
              "debugPrint",
              "macAddress",
              "writeGreen",
              "randomSeed",
              "attachGPRS",
              "readString",
              "sendString",
              "remotePort",
              "releaseAll",
              "mouseMoved",
              "background",
              "getXChange",
              "getYChange",
              "answerCall",
              "getResult",
              "voiceCall",
              "endPacket",
              "constrain",
              "getSocket",
              "writeJSON",
              "getButton",
              "available",
              "connected",
              "findUntil",
              "readBytes",
              "exitValue",
              "readGreen",
              "writeBlue",
              "startLoop",
              "IPAddress",
              "isPressed",
              "sendSysex",
              "pauseMode",
              "gatewayIP",
              "setCursor",
              "getOemKey",
              "tuneWrite",
              "noDisplay",
              "loadImage",
              "switchPIN",
              "onRequest",
              "onReceive",
              "changePIN",
              "playFile",
              "noBuffer",
              "parseInt",
              "overflow",
              "checkPIN",
              "knobRead",
              "beginTFT",
              "bitClear",
              "updateIR",
              "bitWrite",
              "position",
              "writeRGB",
              "highByte",
              "writeRed",
              "setSpeed",
              "readBlue",
              "noStroke",
              "remoteIP",
              "transfer",
              "shutdown",
              "hangCall",
              "beginSMS",
              "endWrite",
              "attached",
              "maintain",
              "noCursor",
              "checkReg",
              "checkPUK",
              "shiftOut",
              "isValid",
              "shiftIn",
              "pulseIn",
              "connect",
              "println",
              "localIP",
              "pinMode",
              "getIMEI",
              "display",
              "noBlink",
              "process",
              "getBand",
              "running",
              "beginSD",
              "drawBMP",
              "lowByte",
              "setBand",
              "release",
              "bitRead",
              "prepare",
              "pointTo",
              "readRed",
              "setMode",
              "noFill",
              "remove",
              "listen",
              "stroke",
              "detach",
              "attach",
              "noTone",
              "exists",
              "buffer",
              "height",
              "bitSet",
              "circle",
              "config",
              "cursor",
              "random",
              "IRread",
              "setDNS",
              "endSMS",
              "getKey",
              "micros",
              "millis",
              "begin",
              "print",
              "write",
              "ready",
              "flush",
              "width",
              "isPIN",
              "blink",
              "clear",
              "press",
              "mkdir",
              "rmdir",
              "close",
              "point",
              "yield",
              "image",
              "BSSID",
              "click",
              "delay",
              "read",
              "text",
              "move",
              "peek",
              "beep",
              "rect",
              "line",
              "open",
              "seek",
              "fill",
              "size",
              "turn",
              "stop",
              "home",
              "find",
              "step",
              "tone",
              "sqrt",
              "RSSI",
              "SSID",
              "end",
              "bit",
              "tan",
              "cos",
              "sin",
              "pow",
              "map",
              "abs",
              "max",
              "min",
              "get",
              "run",
              "put"
            ],
            literal: [
              "DIGITAL_MESSAGE",
              "FIRMATA_STRING",
              "ANALOG_MESSAGE",
              "REPORT_DIGITAL",
              "REPORT_ANALOG",
              "INPUT_PULLUP",
              "SET_PIN_MODE",
              "INTERNAL2V56",
              "SYSTEM_RESET",
              "LED_BUILTIN",
              "INTERNAL1V1",
              "SYSEX_START",
              "INTERNAL",
              "EXTERNAL",
              "DEFAULT",
              "OUTPUT",
              "INPUT",
              "HIGH",
              "LOW"
            ]
          };
 
          const ARDUINO = cPlusPlus(hljs);
 
          const kws = /** @type {Record<string,any>} */ (ARDUINO.keywords);
 
          kws.type = [
            ...kws.type,
            ...ARDUINO_KW.type
          ];
          kws.literal = [
            ...kws.literal,
            ...ARDUINO_KW.literal
          ];
          kws.built_in = [
            ...kws.built_in,
            ...ARDUINO_KW.built_in
          ];
          kws._hints = ARDUINO_KW._hints;
 
          ARDUINO.name = 'Arduino';
          ARDUINO.aliases = [ 'ino' ];
          ARDUINO.supersetOf = "cpp";
 
          return ARDUINO;
        }
 
        arduino_1 = arduino;
        return arduino_1;
    }
 
    /*
    Language: ARM Assembly
    Author: Dan Panzarella <alsoelp@gmail.com>
    Description: ARM Assembly including Thumb and Thumb2 instructions
    Category: assembler
    */
 
    var armasm_1;
    var hasRequiredArmasm;
 
    function requireArmasm () {
        if (hasRequiredArmasm) return armasm_1;
        hasRequiredArmasm = 1;
        /** @type LanguageFn */
        function armasm(hljs) {
          // local labels: %?[FB]?[AT]?\d{1,2}\w+
 
          const COMMENT = { variants: [
            hljs.COMMENT('^[ \\t]*(?=#)', '$', {
              relevance: 0,
              excludeBegin: true
            }),
            hljs.COMMENT('[;@]', '$', { relevance: 0 }),
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE
          ] };
 
          return {
            name: 'ARM Assembly',
            case_insensitive: true,
            aliases: [ 'arm' ],
            keywords: {
              $pattern: '\\.?' + hljs.IDENT_RE,
              meta:
                // GNU preprocs
                '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .arm .thumb .code16 .code32 .force_thumb .thumb_func .ltorg '
                // ARM directives
                + 'ALIAS ALIGN ARM AREA ASSERT ATTR CN CODE CODE16 CODE32 COMMON CP DATA DCB DCD DCDU DCDO DCFD DCFDU DCI DCQ DCQU DCW DCWU DN ELIF ELSE END ENDFUNC ENDIF ENDP ENTRY EQU EXPORT EXPORTAS EXTERN FIELD FILL FUNCTION GBLA GBLL GBLS GET GLOBAL IF IMPORT INCBIN INCLUDE INFO KEEP LCLA LCLL LCLS LTORG MACRO MAP MEND MEXIT NOFP OPT PRESERVE8 PROC QN READONLY RELOC REQUIRE REQUIRE8 RLIST FN ROUT SETA SETL SETS SN SPACE SUBT THUMB THUMBX TTL WHILE WEND ',
              built_in:
                'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 ' // standard registers
                + 'pc lr sp ip sl sb fp ' // typical regs plus backward compatibility
                + 'a1 a2 a3 a4 v1 v2 v3 v4 v5 v6 v7 v8 f0 f1 f2 f3 f4 f5 f6 f7 ' // more regs and fp
                + 'p0 p1 p2 p3 p4 p5 p6 p7 p8 p9 p10 p11 p12 p13 p14 p15 ' // coprocessor regs
                + 'c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 c10 c11 c12 c13 c14 c15 ' // more coproc
                + 'q0 q1 q2 q3 q4 q5 q6 q7 q8 q9 q10 q11 q12 q13 q14 q15 ' // advanced SIMD NEON regs
 
                // program status registers
                + 'cpsr_c cpsr_x cpsr_s cpsr_f cpsr_cx cpsr_cxs cpsr_xs cpsr_xsf cpsr_sf cpsr_cxsf '
                + 'spsr_c spsr_x spsr_s spsr_f spsr_cx spsr_cxs spsr_xs spsr_xsf spsr_sf spsr_cxsf '
 
                // NEON and VFP registers
                + 's0 s1 s2 s3 s4 s5 s6 s7 s8 s9 s10 s11 s12 s13 s14 s15 '
                + 's16 s17 s18 s19 s20 s21 s22 s23 s24 s25 s26 s27 s28 s29 s30 s31 '
                + 'd0 d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 '
                + 'd16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 '
 
                + '{PC} {VAR} {TRUE} {FALSE} {OPT} {CONFIG} {ENDIAN} {CODESIZE} {CPU} {FPU} {ARCHITECTURE} {PCSTOREOFFSET} {ARMASM_VERSION} {INTER} {ROPI} {RWPI} {SWST} {NOSWST} . @'
            },
            contains: [
              {
                className: 'keyword',
                begin: '\\b(' // mnemonics
                    + 'adc|'
                    + '(qd?|sh?|u[qh]?)?add(8|16)?|usada?8|(q|sh?|u[qh]?)?(as|sa)x|'
                    + 'and|adrl?|sbc|rs[bc]|asr|b[lx]?|blx|bxj|cbn?z|tb[bh]|bic|'
                    + 'bfc|bfi|[su]bfx|bkpt|cdp2?|clz|clrex|cmp|cmn|cpsi[ed]|cps|'
                    + 'setend|dbg|dmb|dsb|eor|isb|it[te]{0,3}|lsl|lsr|ror|rrx|'
                    + 'ldm(([id][ab])|f[ds])?|ldr((s|ex)?[bhd])?|movt?|mvn|mra|mar|'
                    + 'mul|[us]mull|smul[bwt][bt]|smu[as]d|smmul|smmla|'
                    + 'mla|umlaal|smlal?([wbt][bt]|d)|mls|smlsl?[ds]|smc|svc|sev|'
                    + 'mia([bt]{2}|ph)?|mrr?c2?|mcrr2?|mrs|msr|orr|orn|pkh(tb|bt)|rbit|'
                    + 'rev(16|sh)?|sel|[su]sat(16)?|nop|pop|push|rfe([id][ab])?|'
                    + 'stm([id][ab])?|str(ex)?[bhd]?|(qd?)?sub|(sh?|q|u[qh]?)?sub(8|16)|'
                    + '[su]xt(a?h|a?b(16)?)|srs([id][ab])?|swpb?|swi|smi|tst|teq|'
                    + 'wfe|wfi|yield'
                + ')'
                + '(eq|ne|cs|cc|mi|pl|vs|vc|hi|ls|ge|lt|gt|le|al|hs|lo)?' // condition codes
                + '[sptrx]?' // legal postfixes
                + '(?=\\s)' // followed by space
              },
              COMMENT,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: '\'',
                end: '[^\\\\]\'',
                relevance: 0
              },
              {
                className: 'title',
                begin: '\\|',
                end: '\\|',
                illegal: '\\n',
                relevance: 0
              },
              {
                className: 'number',
                variants: [
                  { // hex
                    begin: '[#$=]?0x[0-9a-f]+' },
                  { // bin
                    begin: '[#$=]?0b[01]+' },
                  { // literal
                    begin: '[#$=]\\d+' },
                  { // bare number
                    begin: '\\b\\d+' }
                ],
                relevance: 0
              },
              {
                className: 'symbol',
                variants: [
                  { // GNU ARM syntax
                    begin: '^[ \\t]*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' },
                  { // ARM syntax
                    begin: '^[a-z_\\.\\$][a-z0-9_\\.\\$]+' },
                  { // label reference
                    begin: '[=#]\\w+' }
                ],
                relevance: 0
              }
            ]
          };
        }
 
        armasm_1 = armasm;
        return armasm_1;
    }
 
    /*
    Language: HTML, XML
    Website: https://www.w3.org/XML/
    Category: common, web
    Audit: 2020
    */
 
    var xml_1;
    var hasRequiredXml;
 
    function requireXml () {
        if (hasRequiredXml) return xml_1;
        hasRequiredXml = 1;
        /** @type LanguageFn */
        function xml(hljs) {
          const regex = hljs.regex;
          // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar
          // OTHER_NAME_CHARS = /[:\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]/;
          // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods
          // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);;
          // const XML_IDENT_RE = /[A-Z_a-z:\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]+/;
          // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/, regex.optional(/[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*:/), /[A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*/);
          // however, to cater for performance and more Unicode support rely simply on the Unicode letter class
          const TAG_NAME_RE = regex.concat(/[\p{L}_]/u, regex.optional(/[\p{L}0-9_.-]*:/u), /[\p{L}0-9_.-]*/u);
          const XML_IDENT_RE = /[\p{L}0-9._:-]+/u;
          const XML_ENTITIES = {
            className: 'symbol',
            begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/
          };
          const XML_META_KEYWORDS = {
            begin: /\s/,
            contains: [
              {
                className: 'keyword',
                begin: /#?[a-z_][a-z1-9_-]+/,
                illegal: /\n/
              }
            ]
          };
          const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {
            begin: /\(/,
            end: /\)/
          });
          const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string' });
          const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' });
          const TAG_INTERNALS = {
            endsWithParent: true,
            illegal: /</,
            relevance: 0,
            contains: [
              {
                className: 'attr',
                begin: XML_IDENT_RE,
                relevance: 0
              },
              {
                begin: /=\s*/,
                relevance: 0,
                contains: [
                  {
                    className: 'string',
                    endsParent: true,
                    variants: [
                      {
                        begin: /"/,
                        end: /"/,
                        contains: [ XML_ENTITIES ]
                      },
                      {
                        begin: /'/,
                        end: /'/,
                        contains: [ XML_ENTITIES ]
                      },
                      { begin: /[^\s"'=<>`]+/ }
                    ]
                  }
                ]
              }
            ]
          };
          return {
            name: 'HTML, XML',
            aliases: [
              'html',
              'xhtml',
              'rss',
              'atom',
              'xjb',
              'xsd',
              'xsl',
              'plist',
              'wsf',
              'svg'
            ],
            case_insensitive: true,
            unicodeRegex: true,
            contains: [
              {
                className: 'meta',
                begin: /<![a-z]/,
                end: />/,
                relevance: 10,
                contains: [
                  XML_META_KEYWORDS,
                  QUOTE_META_STRING_MODE,
                  APOS_META_STRING_MODE,
                  XML_META_PAR_KEYWORDS,
                  {
                    begin: /\[/,
                    end: /\]/,
                    contains: [
                      {
                        className: 'meta',
                        begin: /<![a-z]/,
                        end: />/,
                        contains: [
                          XML_META_KEYWORDS,
                          XML_META_PAR_KEYWORDS,
                          QUOTE_META_STRING_MODE,
                          APOS_META_STRING_MODE
                        ]
                      }
                    ]
                  }
                ]
              },
              hljs.COMMENT(
                /<!--/,
                /-->/,
                { relevance: 10 }
              ),
              {
                begin: /<!\[CDATA\[/,
                end: /\]\]>/,
                relevance: 10
              },
              XML_ENTITIES,
              // xml processing instructions
              {
                className: 'meta',
                end: /\?>/,
                variants: [
                  {
                    begin: /<\?xml/,
                    relevance: 10,
                    contains: [
                      QUOTE_META_STRING_MODE
                    ]
                  },
                  {
                    begin: /<\?[a-z][a-z0-9]+/,
                  }
                ]
 
              },
              {
                className: 'tag',
                /*
                The lookahead pattern (?=...) ensures that 'begin' only matches
                '<style' as a single word, followed by a whitespace or an
                ending bracket.
                */
                begin: /<style(?=\s|>)/,
                end: />/,
                keywords: { name: 'style' },
                contains: [ TAG_INTERNALS ],
                starts: {
                  end: /<\/style>/,
                  returnEnd: true,
                  subLanguage: [
                    'css',
                    'xml'
                  ]
                }
              },
              {
                className: 'tag',
                // See the comment in the <style tag about the lookahead pattern
                begin: /<script(?=\s|>)/,
                end: />/,
                keywords: { name: 'script' },
                contains: [ TAG_INTERNALS ],
                starts: {
                  end: /<\/script>/,
                  returnEnd: true,
                  subLanguage: [
                    'javascript',
                    'handlebars',
                    'xml'
                  ]
                }
              },
              // we need this for now for jSX
              {
                className: 'tag',
                begin: /<>|<\/>/
              },
              // open tag
              {
                className: 'tag',
                begin: regex.concat(
                  /</,
                  regex.lookahead(regex.concat(
                    TAG_NAME_RE,
                    // <tag/>
                    // <tag>
                    // <tag ...
                    regex.either(/\/>/, />/, /\s/)
                  ))
                ),
                end: /\/?>/,
                contains: [
                  {
                    className: 'name',
                    begin: TAG_NAME_RE,
                    relevance: 0,
                    starts: TAG_INTERNALS
                  }
                ]
              },
              // close tag
              {
                className: 'tag',
                begin: regex.concat(
                  /<\//,
                  regex.lookahead(regex.concat(
                    TAG_NAME_RE, />/
                  ))
                ),
                contains: [
                  {
                    className: 'name',
                    begin: TAG_NAME_RE,
                    relevance: 0
                  },
                  {
                    begin: />/,
                    relevance: 0,
                    endsParent: true
                  }
                ]
              }
            ]
          };
        }
 
        xml_1 = xml;
        return xml_1;
    }
 
    /*
    Language: AsciiDoc
    Requires: xml.js
    Author: Dan Allen <dan.j.allen@gmail.com>
    Website: http://asciidoc.org
    Description: A semantic, text-based document format that can be exported to HTML, DocBook and other backends.
    Category: markup
    */
 
    var asciidoc_1;
    var hasRequiredAsciidoc;
 
    function requireAsciidoc () {
        if (hasRequiredAsciidoc) return asciidoc_1;
        hasRequiredAsciidoc = 1;
        /** @type LanguageFn */
        function asciidoc(hljs) {
          const regex = hljs.regex;
          const HORIZONTAL_RULE = {
            begin: '^\'{3,}[ \\t]*$',
            relevance: 10
          };
          const ESCAPED_FORMATTING = [
            // escaped constrained formatting marks (i.e., \* \_ or \`)
            { begin: /\\[*_`]/ },
            // escaped unconstrained formatting marks (i.e., \\** \\__ or \\``)
            // must ignore until the next formatting marks
            // this rule might not be 100% compliant with Asciidoctor 2.0 but we are entering undefined behavior territory...
            { begin: /\\\\\*{2}[^\n]*?\*{2}/ },
            { begin: /\\\\_{2}[^\n]*_{2}/ },
            { begin: /\\\\`{2}[^\n]*`{2}/ },
            // guard: constrained formatting mark may not be preceded by ":", ";" or
            // "}". match these so the constrained rule doesn't see them
            { begin: /[:;}][*_`](?![*_`])/ }
          ];
          const STRONG = [
            // inline unconstrained strong (single line)
            {
              className: 'strong',
              begin: /\*{2}([^\n]+?)\*{2}/
            },
            // inline unconstrained strong (multi-line)
            {
              className: 'strong',
              begin: regex.concat(
                /\*\*/,
                /((\*(?!\*)|\\[^\n]|[^*\n\\])+\n)+/,
                /(\*(?!\*)|\\[^\n]|[^*\n\\])*/,
                /\*\*/
              ),
              relevance: 0
            },
            // inline constrained strong (single line)
            {
              className: 'strong',
              // must not precede or follow a word character
              begin: /\B\*(\S|\S[^\n]*?\S)\*(?!\w)/
            },
            // inline constrained strong (multi-line)
            {
              className: 'strong',
              // must not precede or follow a word character
              begin: /\*[^\s]([^\n]+\n)+([^\n]+)\*/
            }
          ];
          const EMPHASIS = [
            // inline unconstrained emphasis (single line)
            {
              className: 'emphasis',
              begin: /_{2}([^\n]+?)_{2}/
            },
            // inline unconstrained emphasis (multi-line)
            {
              className: 'emphasis',
              begin: regex.concat(
                /__/,
                /((_(?!_)|\\[^\n]|[^_\n\\])+\n)+/,
                /(_(?!_)|\\[^\n]|[^_\n\\])*/,
                /__/
              ),
              relevance: 0
            },
            // inline constrained emphasis (single line)
            {
              className: 'emphasis',
              // must not precede or follow a word character
              begin: /\b_(\S|\S[^\n]*?\S)_(?!\w)/
            },
            // inline constrained emphasis (multi-line)
            {
              className: 'emphasis',
              // must not precede or follow a word character
              begin: /_[^\s]([^\n]+\n)+([^\n]+)_/
            },
            // inline constrained emphasis using single quote (legacy)
            {
              className: 'emphasis',
              // must not follow a word character or be followed by a single quote or space
              begin: '\\B\'(?![\'\\s])',
              end: '(\\n{2}|\')',
              // allow escaped single quote followed by word char
              contains: [
                {
                  begin: '\\\\\'\\w',
                  relevance: 0
                }
              ],
              relevance: 0
            }
          ];
          const ADMONITION = {
            className: 'symbol',
            begin: '^(NOTE|TIP|IMPORTANT|WARNING|CAUTION):\\s+',
            relevance: 10
          };
          const BULLET_LIST = {
            className: 'bullet',
            begin: '^(\\*+|-+|\\.+|[^\\n]+?::)\\s+'
          };
 
          return {
            name: 'AsciiDoc',
            aliases: [ 'adoc' ],
            contains: [
              // block comment
              hljs.COMMENT(
                '^/{4,}\\n',
                '\\n/{4,}$',
                // can also be done as...
                // '^/{4,}$',
                // '^/{4,}$',
                { relevance: 10 }
              ),
              // line comment
              hljs.COMMENT(
                '^//',
                '$',
                { relevance: 0 }
              ),
              // title
              {
                className: 'title',
                begin: '^\\.\\w.*$'
              },
              // example, admonition & sidebar blocks
              {
                begin: '^[=\\*]{4,}\\n',
                end: '\\n^[=\\*]{4,}$',
                relevance: 10
              },
              // headings
              {
                className: 'section',
                relevance: 10,
                variants: [
                  { begin: '^(={1,6})[ \t].+?([ \t]\\1)?$' },
                  { begin: '^[^\\[\\]\\n]+?\\n[=\\-~\\^\\+]{2,}$' }
                ]
              },
              // document attributes
              {
                className: 'meta',
                begin: '^:.+?:',
                end: '\\s',
                excludeEnd: true,
                relevance: 10
              },
              // block attributes
              {
                className: 'meta',
                begin: '^\\[.+?\\]$',
                relevance: 0
              },
              // quoteblocks
              {
                className: 'quote',
                begin: '^_{4,}\\n',
                end: '\\n_{4,}$',
                relevance: 10
              },
              // listing and literal blocks
              {
                className: 'code',
                begin: '^[\\-\\.]{4,}\\n',
                end: '\\n[\\-\\.]{4,}$',
                relevance: 10
              },
              // passthrough blocks
              {
                begin: '^\\+{4,}\\n',
                end: '\\n\\+{4,}$',
                contains: [
                  {
                    begin: '<',
                    end: '>',
                    subLanguage: 'xml',
                    relevance: 0
                  }
                ],
                relevance: 10
              },
 
              BULLET_LIST,
              ADMONITION,
              ...ESCAPED_FORMATTING,
              ...STRONG,
              ...EMPHASIS,
 
              // inline smart quotes
              {
                className: 'string',
                variants: [
                  { begin: "``.+?''" },
                  { begin: "`.+?'" }
                ]
              },
              // inline unconstrained emphasis
              {
                className: 'code',
                begin: /`{2}/,
                end: /(\n{2}|`{2})/
              },
              // inline code snippets (TODO should get same treatment as strong and emphasis)
              {
                className: 'code',
                begin: '(`.+?`|\\+.+?\\+)',
                relevance: 0
              },
              // indented literal block
              {
                className: 'code',
                begin: '^[ \\t]',
                end: '$',
                relevance: 0
              },
              HORIZONTAL_RULE,
              // images and links
              {
                begin: '(link:)?(http|https|ftp|file|irc|image:?):\\S+?\\[[^[]*?\\]',
                returnBegin: true,
                contains: [
                  {
                    begin: '(link|image:?):',
                    relevance: 0
                  },
                  {
                    className: 'link',
                    begin: '\\w',
                    end: '[^\\[]+',
                    relevance: 0
                  },
                  {
                    className: 'string',
                    begin: '\\[',
                    end: '\\]',
                    excludeBegin: true,
                    excludeEnd: true,
                    relevance: 0
                  }
                ],
                relevance: 10
              }
            ]
          };
        }
 
        asciidoc_1 = asciidoc;
        return asciidoc_1;
    }
 
    /*
    Language: AspectJ
    Author: Hakan Ozler <ozler.hakan@gmail.com>
    Website: https://www.eclipse.org/aspectj/
    Description: Syntax Highlighting for the AspectJ Language which is a general-purpose aspect-oriented extension to the Java programming language.
    Audit: 2020
    */
 
    var aspectj_1;
    var hasRequiredAspectj;
 
    function requireAspectj () {
        if (hasRequiredAspectj) return aspectj_1;
        hasRequiredAspectj = 1;
        /** @type LanguageFn */
        function aspectj(hljs) {
          const regex = hljs.regex;
          const KEYWORDS = [
            "false",
            "synchronized",
            "int",
            "abstract",
            "float",
            "private",
            "char",
            "boolean",
            "static",
            "null",
            "if",
            "const",
            "for",
            "true",
            "while",
            "long",
            "throw",
            "strictfp",
            "finally",
            "protected",
            "import",
            "native",
            "final",
            "return",
            "void",
            "enum",
            "else",
            "extends",
            "implements",
            "break",
            "transient",
            "new",
            "catch",
            "instanceof",
            "byte",
            "super",
            "volatile",
            "case",
            "assert",
            "short",
            "package",
            "default",
            "double",
            "public",
            "try",
            "this",
            "switch",
            "continue",
            "throws",
            "privileged",
            "aspectOf",
            "adviceexecution",
            "proceed",
            "cflowbelow",
            "cflow",
            "initialization",
            "preinitialization",
            "staticinitialization",
            "withincode",
            "target",
            "within",
            "execution",
            "getWithinTypeName",
            "handler",
            "thisJoinPoint",
            "thisJoinPointStaticPart",
            "thisEnclosingJoinPointStaticPart",
            "declare",
            "parents",
            "warning",
            "error",
            "soft",
            "precedence",
            "thisAspectInstance"
          ];
          const SHORTKEYS = [
            "get",
            "set",
            "args",
            "call"
          ];
 
          return {
            name: 'AspectJ',
            keywords: KEYWORDS,
            illegal: /<\/|#/,
            contains: [
              hljs.COMMENT(
                /\/\*\*/,
                /\*\//,
                {
                  relevance: 0,
                  contains: [
                    {
                      // eat up @'s in emails to prevent them to be recognized as doctags
                      begin: /\w+@/,
                      relevance: 0
                    },
                    {
                      className: 'doctag',
                      begin: /@[A-Za-z]+/
                    }
                  ]
                }
              ),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'class',
                beginKeywords: 'aspect',
                end: /[{;=]/,
                excludeEnd: true,
                illegal: /[:;"\[\]]/,
                contains: [
                  { beginKeywords: 'extends implements pertypewithin perthis pertarget percflowbelow percflow issingleton' },
                  hljs.UNDERSCORE_TITLE_MODE,
                  {
                    begin: /\([^\)]*/,
                    end: /[)]+/,
                    keywords: KEYWORDS.concat(SHORTKEYS),
                    excludeEnd: false
                  }
                ]
              },
              {
                className: 'class',
                beginKeywords: 'class interface',
                end: /[{;=]/,
                excludeEnd: true,
                relevance: 0,
                keywords: 'class interface',
                illegal: /[:"\[\]]/,
                contains: [
                  { beginKeywords: 'extends implements' },
                  hljs.UNDERSCORE_TITLE_MODE
                ]
              },
              {
                // AspectJ Constructs
                beginKeywords: 'pointcut after before around throwing returning',
                end: /[)]/,
                excludeEnd: false,
                illegal: /["\[\]]/,
                contains: [
                  {
                    begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
                    returnBegin: true,
                    contains: [ hljs.UNDERSCORE_TITLE_MODE ]
                  }
                ]
              },
              {
                begin: /[:]/,
                returnBegin: true,
                end: /[{;]/,
                relevance: 0,
                excludeEnd: false,
                keywords: KEYWORDS,
                illegal: /["\[\]]/,
                contains: [
                  {
                    begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
                    keywords: KEYWORDS.concat(SHORTKEYS),
                    relevance: 0
                  },
                  hljs.QUOTE_STRING_MODE
                ]
              },
              {
                // this prevents 'new Name(...), or throw ...' from being recognized as a function definition
                beginKeywords: 'new throw',
                relevance: 0
              },
              {
                // the function class is a bit different for AspectJ compared to the Java language
                className: 'function',
                begin: /\w+ +\w+(\.\w+)?\s*\([^\)]*\)\s*((throws)[\w\s,]+)?[\{;]/,
                returnBegin: true,
                end: /[{;=]/,
                keywords: KEYWORDS,
                excludeEnd: true,
                contains: [
                  {
                    begin: regex.concat(hljs.UNDERSCORE_IDENT_RE, /\s*\(/),
                    returnBegin: true,
                    relevance: 0,
                    contains: [ hljs.UNDERSCORE_TITLE_MODE ]
                  },
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    relevance: 0,
                    keywords: KEYWORDS,
                    contains: [
                      hljs.APOS_STRING_MODE,
                      hljs.QUOTE_STRING_MODE,
                      hljs.C_NUMBER_MODE,
                      hljs.C_BLOCK_COMMENT_MODE
                    ]
                  },
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_NUMBER_MODE,
              {
                // annotation is also used in this language
                className: 'meta',
                begin: /@[A-Za-z]+/
              }
            ]
          };
        }
 
        aspectj_1 = aspectj;
        return aspectj_1;
    }
 
    /*
    Language: AutoHotkey
    Author: Seongwon Lee <dlimpid@gmail.com>
    Description: AutoHotkey language definition
    Category: scripting
    */
 
    var autohotkey_1;
    var hasRequiredAutohotkey;
 
    function requireAutohotkey () {
        if (hasRequiredAutohotkey) return autohotkey_1;
        hasRequiredAutohotkey = 1;
        /** @type LanguageFn */
        function autohotkey(hljs) {
          const BACKTICK_ESCAPE = { begin: '`[\\s\\S]' };
 
          return {
            name: 'AutoHotkey',
            case_insensitive: true,
            aliases: [ 'ahk' ],
            keywords: {
              keyword: 'Break Continue Critical Exit ExitApp Gosub Goto New OnExit Pause return SetBatchLines SetTimer Suspend Thread Throw Until ahk_id ahk_class ahk_pid ahk_exe ahk_group',
              literal: 'true false NOT AND OR',
              built_in: 'ComSpec Clipboard ClipboardAll ErrorLevel'
            },
            contains: [
              BACKTICK_ESCAPE,
              hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [ BACKTICK_ESCAPE ] }),
              hljs.COMMENT(';', '$', { relevance: 0 }),
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'number',
                begin: hljs.NUMBER_RE,
                relevance: 0
              },
              {
                // subst would be the most accurate however fails the point of
                // highlighting. variable is comparably the most accurate that actually
                // has some effect
                className: 'variable',
                begin: '%[a-zA-Z0-9#_$@]+%'
              },
              {
                className: 'built_in',
                begin: '^\\s*\\w+\\s*(,|%)'
                // I don't really know if this is totally relevant
              },
              {
                // symbol would be most accurate however is highlighted just like
                // built_in and that makes up a lot of AutoHotkey code meaning that it
                // would fail to highlight anything
                className: 'title',
                variants: [
                  { begin: '^[^\\n";]+::(?!=)' },
                  {
                    begin: '^[^\\n";]+:(?!=)',
                    // zero relevance as it catches a lot of things
                    // followed by a single ':' in many languages
                    relevance: 0
                  }
                ]
              },
              {
                className: 'meta',
                begin: '^\\s*#\\w+',
                end: '$',
                relevance: 0
              },
              {
                className: 'built_in',
                begin: 'A_[a-zA-Z0-9]+'
              },
              {
                // consecutive commas, not for highlighting but just for relevance
                begin: ',\\s*,' }
            ]
          };
        }
 
        autohotkey_1 = autohotkey;
        return autohotkey_1;
    }
 
    /*
    Language: AutoIt
    Author: Manh Tuan <junookyo@gmail.com>
    Description: AutoIt language definition
    Category: scripting
    */
 
    var autoit_1;
    var hasRequiredAutoit;
 
    function requireAutoit () {
        if (hasRequiredAutoit) return autoit_1;
        hasRequiredAutoit = 1;
        /** @type LanguageFn */
        function autoit(hljs) {
          const KEYWORDS = 'ByRef Case Const ContinueCase ContinueLoop '
                + 'Dim Do Else ElseIf EndFunc EndIf EndSelect '
                + 'EndSwitch EndWith Enum Exit ExitLoop For Func '
                + 'Global If In Local Next ReDim Return Select Static '
                + 'Step Switch Then To Until Volatile WEnd While With';
 
          const DIRECTIVES = [
            "EndRegion",
            "forcedef",
            "forceref",
            "ignorefunc",
            "include",
            "include-once",
            "NoTrayIcon",
            "OnAutoItStartRegister",
            "pragma",
            "Region",
            "RequireAdmin",
            "Tidy_Off",
            "Tidy_On",
            "Tidy_Parameters"
          ];
 
          const LITERAL = 'True False And Null Not Or Default';
 
          const BUILT_IN =
                  'Abs ACos AdlibRegister AdlibUnRegister Asc AscW ASin Assign ATan AutoItSetOption AutoItWinGetTitle AutoItWinSetTitle Beep Binary BinaryLen BinaryMid BinaryToString BitAND BitNOT BitOR BitRotate BitShift BitXOR BlockInput Break Call CDTray Ceiling Chr ChrW ClipGet ClipPut ConsoleRead ConsoleWrite ConsoleWriteError ControlClick ControlCommand ControlDisable ControlEnable ControlFocus ControlGetFocus ControlGetHandle ControlGetPos ControlGetText ControlHide ControlListView ControlMove ControlSend ControlSetText ControlShow ControlTreeView Cos Dec DirCopy DirCreate DirGetSize DirMove DirRemove DllCall DllCallAddress DllCallbackFree DllCallbackGetPtr DllCallbackRegister DllClose DllOpen DllStructCreate DllStructGetData DllStructGetPtr DllStructGetSize DllStructSetData DriveGetDrive DriveGetFileSystem DriveGetLabel DriveGetSerial DriveGetType DriveMapAdd DriveMapDel DriveMapGet DriveSetLabel DriveSpaceFree DriveSpaceTotal DriveStatus EnvGet EnvSet EnvUpdate Eval Execute Exp FileChangeDir FileClose FileCopy FileCreateNTFSLink FileCreateShortcut FileDelete FileExists FileFindFirstFile FileFindNextFile FileFlush FileGetAttrib FileGetEncoding FileGetLongName FileGetPos FileGetShortcut FileGetShortName FileGetSize FileGetTime FileGetVersion FileInstall FileMove FileOpen FileOpenDialog FileRead FileReadLine FileReadToArray FileRecycle FileRecycleEmpty FileSaveDialog FileSelectFolder FileSetAttrib FileSetEnd FileSetPos FileSetTime FileWrite FileWriteLine Floor FtpSetProxy FuncName GUICreate GUICtrlCreateAvi GUICtrlCreateButton GUICtrlCreateCheckbox GUICtrlCreateCombo GUICtrlCreateContextMenu GUICtrlCreateDate GUICtrlCreateDummy GUICtrlCreateEdit GUICtrlCreateGraphic GUICtrlCreateGroup GUICtrlCreateIcon GUICtrlCreateInput GUICtrlCreateLabel GUICtrlCreateList GUICtrlCreateListView GUICtrlCreateListViewItem GUICtrlCreateMenu GUICtrlCreateMenuItem GUICtrlCreateMonthCal GUICtrlCreateObj GUICtrlCreatePic GUICtrlCreateProgress GUICtrlCreateRadio GUICtrlCreateSlider GUICtrlCreateTab GUICtrlCreateTabItem GUICtrlCreateTreeView GUICtrlCreateTreeViewItem GUICtrlCreateUpdown GUICtrlDelete GUICtrlGetHandle GUICtrlGetState GUICtrlRead GUICtrlRecvMsg GUICtrlRegisterListViewSort GUICtrlSendMsg GUICtrlSendToDummy GUICtrlSetBkColor GUICtrlSetColor GUICtrlSetCursor GUICtrlSetData GUICtrlSetDefBkColor GUICtrlSetDefColor GUICtrlSetFont GUICtrlSetGraphic GUICtrlSetImage GUICtrlSetLimit GUICtrlSetOnEvent GUICtrlSetPos GUICtrlSetResizing GUICtrlSetState GUICtrlSetStyle GUICtrlSetTip GUIDelete GUIGetCursorInfo GUIGetMsg GUIGetStyle GUIRegisterMsg GUISetAccelerators GUISetBkColor GUISetCoord GUISetCursor GUISetFont GUISetHelp GUISetIcon GUISetOnEvent GUISetState GUISetStyle GUIStartGroup GUISwitch Hex HotKeySet HttpSetProxy HttpSetUserAgent HWnd InetClose InetGet InetGetInfo InetGetSize InetRead IniDelete IniRead IniReadSection IniReadSectionNames IniRenameSection IniWrite IniWriteSection InputBox Int IsAdmin IsArray IsBinary IsBool IsDeclared IsDllStruct IsFloat IsFunc IsHWnd IsInt IsKeyword IsNumber IsObj IsPtr IsString Log MemGetStats Mod MouseClick MouseClickDrag MouseDown MouseGetCursor MouseGetPos MouseMove MouseUp MouseWheel MsgBox Number ObjCreate ObjCreateInterface ObjEvent ObjGet ObjName OnAutoItExitRegister OnAutoItExitUnRegister Ping PixelChecksum PixelGetColor PixelSearch ProcessClose ProcessExists ProcessGetStats ProcessList ProcessSetPriority ProcessWait ProcessWaitClose ProgressOff ProgressOn ProgressSet Ptr Random RegDelete RegEnumKey RegEnumVal RegRead RegWrite Round Run RunAs RunAsWait RunWait Send SendKeepActive SetError SetExtended ShellExecute ShellExecuteWait Shutdown Sin Sleep SoundPlay SoundSetWaveVolume SplashImageOn SplashOff SplashTextOn Sqrt SRandom StatusbarGetText StderrRead StdinWrite StdioClose StdoutRead String StringAddCR StringCompare StringFormat StringFromASCIIArray StringInStr StringIsAlNum StringIsAlpha StringIsASCII StringIsDigit StringIsFloat StringIsInt StringIsLower StringIsSpace StringIsUpper StringIsXDigit StringLeft StringLen StringLower StringMid StringRegExp StringRegExpReplace StringReplace StringReverse StringRight StringSplit StringStripCR StringStripWS StringToASCIIArray StringToBinary StringTrimLeft StringTrimRight StringUpper Tan TCPAccept TCPCloseSocket TCPConnect TCPListen TCPNameToIP TCPRecv TCPSend TCPShutdown, UDPShutdown TCPStartup, UDPStartup TimerDiff TimerInit ToolTip TrayCreateItem TrayCreateMenu TrayGetMsg TrayItemDelete TrayItemGetHandle TrayItemGetState TrayItemGetText TrayItemSetOnEvent TrayItemSetState TrayItemSetText TraySetClick TraySetIcon TraySetOnEvent TraySetPauseIcon TraySetState TraySetToolTip TrayTip UBound UDPBind UDPCloseSocket UDPOpen UDPRecv UDPSend VarGetType WinActivate WinActive WinClose WinExists WinFlash WinGetCaretPos WinGetClassList WinGetClientSize WinGetHandle WinGetPos WinGetProcess WinGetState WinGetText WinGetTitle WinKill WinList WinMenuSelectItem WinMinimizeAll WinMinimizeAllUndo WinMove WinSetOnTop WinSetState WinSetTitle WinSetTrans WinWait WinWaitActive WinWaitClose WinWaitNotActive';
 
          const COMMENT = { variants: [
            hljs.COMMENT(';', '$', { relevance: 0 }),
            hljs.COMMENT('#cs', '#ce'),
            hljs.COMMENT('#comments-start', '#comments-end')
          ] };
 
          const VARIABLE = { begin: '\\$[A-z0-9_]+' };
 
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [
                  {
                    begin: /""/,
                    relevance: 0
                  }
                ]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [
                  {
                    begin: /''/,
                    relevance: 0
                  }
                ]
              }
            ]
          };
 
          const NUMBER = { variants: [
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE
          ] };
 
          const PREPROCESSOR = {
            className: 'meta',
            begin: '#',
            end: '$',
            keywords: { keyword: DIRECTIVES },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              {
                beginKeywords: 'include',
                keywords: { keyword: 'include' },
                end: '$',
                contains: [
                  STRING,
                  {
                    className: 'string',
                    variants: [
                      {
                        begin: '<',
                        end: '>'
                      },
                      {
                        begin: /"/,
                        end: /"/,
                        contains: [
                          {
                            begin: /""/,
                            relevance: 0
                          }
                        ]
                      },
                      {
                        begin: /'/,
                        end: /'/,
                        contains: [
                          {
                            begin: /''/,
                            relevance: 0
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              STRING,
              COMMENT
            ]
          };
 
          const CONSTANT = {
            className: 'symbol',
            // begin: '@',
            // end: '$',
            // keywords: 'AppDataCommonDir AppDataDir AutoItExe AutoItPID AutoItVersion AutoItX64 COM_EventObj CommonFilesDir Compiled ComputerName ComSpec CPUArch CR CRLF DesktopCommonDir DesktopDepth DesktopDir DesktopHeight DesktopRefresh DesktopWidth DocumentsCommonDir error exitCode exitMethod extended FavoritesCommonDir FavoritesDir GUI_CtrlHandle GUI_CtrlId GUI_DragFile GUI_DragId GUI_DropId GUI_WinHandle HomeDrive HomePath HomeShare HotKeyPressed HOUR IPAddress1 IPAddress2 IPAddress3 IPAddress4 KBLayout LF LocalAppDataDir LogonDNSDomain LogonDomain LogonServer MDAY MIN MON MSEC MUILang MyDocumentsDir NumParams OSArch OSBuild OSLang OSServicePack OSType OSVersion ProgramFilesDir ProgramsCommonDir ProgramsDir ScriptDir ScriptFullPath ScriptLineNumber ScriptName SEC StartMenuCommonDir StartMenuDir StartupCommonDir StartupDir SW_DISABLE SW_ENABLE SW_HIDE SW_LOCK SW_MAXIMIZE SW_MINIMIZE SW_RESTORE SW_SHOW SW_SHOWDEFAULT SW_SHOWMAXIMIZED SW_SHOWMINIMIZED SW_SHOWMINNOACTIVE SW_SHOWNA SW_SHOWNOACTIVATE SW_SHOWNORMAL SW_UNLOCK SystemDir TAB TempDir TRAY_ID TrayIconFlashing TrayIconVisible UserName UserProfileDir WDAY WindowsDir WorkingDir YDAY YEAR',
            // relevance: 5
            begin: '@[A-z0-9_]+'
          };
 
          const FUNCTION = {
            beginKeywords: 'Func',
            end: '$',
            illegal: '\\$|\\[|%',
            contains: [
              hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { className: "title.function" }),
              {
                className: 'params',
                begin: '\\(',
                end: '\\)',
                contains: [
                  VARIABLE,
                  STRING,
                  NUMBER
                ]
              }
            ]
          };
 
          return {
            name: 'AutoIt',
            case_insensitive: true,
            illegal: /\/\*/,
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_IN,
              literal: LITERAL
            },
            contains: [
              COMMENT,
              VARIABLE,
              STRING,
              NUMBER,
              PREPROCESSOR,
              CONSTANT,
              FUNCTION
            ]
          };
        }
 
        autoit_1 = autoit;
        return autoit_1;
    }
 
    /*
    Language: AVR Assembly
    Author: Vladimir Ermakov <vooon341@gmail.com>
    Category: assembler
    Website: https://www.microchip.com/webdoc/avrassembler/avrassembler.wb_instruction_list.html
    */
 
    var avrasm_1;
    var hasRequiredAvrasm;
 
    function requireAvrasm () {
        if (hasRequiredAvrasm) return avrasm_1;
        hasRequiredAvrasm = 1;
        /** @type LanguageFn */
        function avrasm(hljs) {
          return {
            name: 'AVR Assembly',
            case_insensitive: true,
            keywords: {
              $pattern: '\\.?' + hljs.IDENT_RE,
              keyword:
                /* mnemonic */
                'adc add adiw and andi asr bclr bld brbc brbs brcc brcs break breq brge brhc brhs '
                + 'brid brie brlo brlt brmi brne brpl brsh brtc brts brvc brvs bset bst call cbi cbr '
                + 'clc clh cli cln clr cls clt clv clz com cp cpc cpi cpse dec eicall eijmp elpm eor '
                + 'fmul fmuls fmulsu icall ijmp in inc jmp ld ldd ldi lds lpm lsl lsr mov movw mul '
                + 'muls mulsu neg nop or ori out pop push rcall ret reti rjmp rol ror sbc sbr sbrc sbrs '
                + 'sec seh sbi sbci sbic sbis sbiw sei sen ser ses set sev sez sleep spm st std sts sub '
                + 'subi swap tst wdr',
              built_in:
                /* general purpose registers */
                'r0 r1 r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 '
                + 'r23 r24 r25 r26 r27 r28 r29 r30 r31 x|0 xh xl y|0 yh yl z|0 zh zl '
                /* IO Registers (ATMega128) */
                + 'ucsr1c udr1 ucsr1a ucsr1b ubrr1l ubrr1h ucsr0c ubrr0h tccr3c tccr3a tccr3b tcnt3h '
                + 'tcnt3l ocr3ah ocr3al ocr3bh ocr3bl ocr3ch ocr3cl icr3h icr3l etimsk etifr tccr1c '
                + 'ocr1ch ocr1cl twcr twdr twar twsr twbr osccal xmcra xmcrb eicra spmcsr spmcr portg '
                + 'ddrg ping portf ddrf sreg sph spl xdiv rampz eicrb eimsk gimsk gicr eifr gifr timsk '
                + 'tifr mcucr mcucsr tccr0 tcnt0 ocr0 assr tccr1a tccr1b tcnt1h tcnt1l ocr1ah ocr1al '
                + 'ocr1bh ocr1bl icr1h icr1l tccr2 tcnt2 ocr2 ocdr wdtcr sfior eearh eearl eedr eecr '
                + 'porta ddra pina portb ddrb pinb portc ddrc pinc portd ddrd pind spdr spsr spcr udr0 '
                + 'ucsr0a ucsr0b ubrr0l acsr admux adcsr adch adcl porte ddre pine pinf',
              meta:
                '.byte .cseg .db .def .device .dseg .dw .endmacro .equ .eseg .exit .include .list '
                + '.listmac .macro .nolist .org .set'
            },
            contains: [
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.COMMENT(
                ';',
                '$',
                { relevance: 0 }
              ),
              hljs.C_NUMBER_MODE, // 0x..., decimal, float
              hljs.BINARY_NUMBER_MODE, // 0b...
              {
                className: 'number',
                begin: '\\b(\\$[a-zA-Z0-9]+|0o[0-7]+)' // $..., 0o...
              },
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: '\'',
                end: '[^\\\\]\'',
                illegal: '[^\\\\][^\']'
              },
              {
                className: 'symbol',
                begin: '^[A-Za-z0-9_.$]+:'
              },
              {
                className: 'meta',
                begin: '#',
                end: '$'
              },
              { // substitution within a macro
                className: 'subst',
                begin: '@[0-9]+'
              }
            ]
          };
        }
 
        avrasm_1 = avrasm;
        return avrasm_1;
    }
 
    /*
    Language: Awk
    Author: Matthew Daly <matthewbdaly@gmail.com>
    Website: https://www.gnu.org/software/gawk/manual/gawk.html
    Description: language definition for Awk scripts
    */
 
    var awk_1;
    var hasRequiredAwk;
 
    function requireAwk () {
        if (hasRequiredAwk) return awk_1;
        hasRequiredAwk = 1;
        /** @type LanguageFn */
        function awk(hljs) {
          const VARIABLE = {
            className: 'variable',
            variants: [
              { begin: /\$[\w\d#@][\w\d_]*/ },
              { begin: /\$\{(.*?)\}/ }
            ]
          };
          const KEYWORDS = 'BEGIN END if else while do for in break continue delete next nextfile function func exit|10';
          const STRING = {
            className: 'string',
            contains: [ hljs.BACKSLASH_ESCAPE ],
            variants: [
              {
                begin: /(u|b)?r?'''/,
                end: /'''/,
                relevance: 10
              },
              {
                begin: /(u|b)?r?"""/,
                end: /"""/,
                relevance: 10
              },
              {
                begin: /(u|r|ur)'/,
                end: /'/,
                relevance: 10
              },
              {
                begin: /(u|r|ur)"/,
                end: /"/,
                relevance: 10
              },
              {
                begin: /(b|br)'/,
                end: /'/
              },
              {
                begin: /(b|br)"/,
                end: /"/
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE
            ]
          };
          return {
            name: 'Awk',
            keywords: { keyword: KEYWORDS },
            contains: [
              VARIABLE,
              STRING,
              hljs.REGEXP_MODE,
              hljs.HASH_COMMENT_MODE,
              hljs.NUMBER_MODE
            ]
          };
        }
 
        awk_1 = awk;
        return awk_1;
    }
 
    /*
    Language: Microsoft X++
    Description: X++ is a language used in Microsoft Dynamics 365, Dynamics AX, and Axapta.
    Author: Dmitri Roudakov <dmitri@roudakov.ru>
    Website: https://dynamics.microsoft.com/en-us/ax-overview/
    Category: enterprise
    */
 
    var axapta_1;
    var hasRequiredAxapta;
 
    function requireAxapta () {
        if (hasRequiredAxapta) return axapta_1;
        hasRequiredAxapta = 1;
        /** @type LanguageFn */
        function axapta(hljs) {
          const IDENT_RE = hljs.UNDERSCORE_IDENT_RE;
          const BUILT_IN_KEYWORDS = [
            'anytype',
            'boolean',
            'byte',
            'char',
            'container',
            'date',
            'double',
            'enum',
            'guid',
            'int',
            'int64',
            'long',
            'real',
            'short',
            'str',
            'utcdatetime',
            'var'
          ];
 
          const LITERAL_KEYWORDS = [
            'default',
            'false',
            'null',
            'true'
          ];
 
          const NORMAL_KEYWORDS = [
            'abstract',
            'as',
            'asc',
            'avg',
            'break',
            'breakpoint',
            'by',
            'byref',
            'case',
            'catch',
            'changecompany',
            'class',
            'client',
            'client',
            'common',
            'const',
            'continue',
            'count',
            'crosscompany',
            'delegate',
            'delete_from',
            'desc',
            'display',
            'div',
            'do',
            'edit',
            'else',
            'eventhandler',
            'exists',
            'extends',
            'final',
            'finally',
            'firstfast',
            'firstonly',
            'firstonly1',
            'firstonly10',
            'firstonly100',
            'firstonly1000',
            'flush',
            'for',
            'forceliterals',
            'forcenestedloop',
            'forceplaceholders',
            'forceselectorder',
            'forupdate',
            'from',
            'generateonly',
            'group',
            'hint',
            'if',
            'implements',
            'in',
            'index',
            'insert_recordset',
            'interface',
            'internal',
            'is',
            'join',
            'like',
            'maxof',
            'minof',
            'mod',
            'namespace',
            'new',
            'next',
            'nofetch',
            'notexists',
            'optimisticlock',
            'order',
            'outer',
            'pessimisticlock',
            'print',
            'private',
            'protected',
            'public',
            'readonly',
            'repeatableread',
            'retry',
            'return',
            'reverse',
            'select',
            'server',
            'setting',
            'static',
            'sum',
            'super',
            'switch',
            'this',
            'throw',
            'try',
            'ttsabort',
            'ttsbegin',
            'ttscommit',
            'unchecked',
            'update_recordset',
            'using',
            'validtimestate',
            'void',
            'where',
            'while'
          ];
 
          const KEYWORDS = {
            keyword: NORMAL_KEYWORDS,
            built_in: BUILT_IN_KEYWORDS,
            literal: LITERAL_KEYWORDS
          };
 
          const CLASS_DEFINITION = {
            variants: [
              { match: [
                /(class|interface)\s+/,
                IDENT_RE,
                /\s+(extends|implements)\s+/,
                IDENT_RE
              ] },
              { match: [
                /class\s+/,
                IDENT_RE
              ] }
            ],
            scope: {
              2: "title.class",
              4: "title.class.inherited"
            },
            keywords: KEYWORDS
          };
 
          return {
            name: 'X++',
            aliases: [ 'x++' ],
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'meta',
                begin: '#',
                end: '$'
              },
              CLASS_DEFINITION
            ]
          };
        }
 
        axapta_1 = axapta;
        return axapta_1;
    }
 
    /*
    Language: Bash
    Author: vah <vahtenberg@gmail.com>
    Contributrors: Benjamin Pannell <contact@sierrasoftworks.com>
    Website: https://www.gnu.org/software/bash/
    Category: common
    */
 
    var bash_1;
    var hasRequiredBash;
 
    function requireBash () {
        if (hasRequiredBash) return bash_1;
        hasRequiredBash = 1;
        /** @type LanguageFn */
        function bash(hljs) {
          const regex = hljs.regex;
          const VAR = {};
          const BRACED_VAR = {
            begin: /\$\{/,
            end: /\}/,
            contains: [
              "self",
              {
                begin: /:-/,
                contains: [ VAR ]
              } // default values
            ]
          };
          Object.assign(VAR, {
            className: 'variable',
            variants: [
              { begin: regex.concat(/\$[\w\d#@][\w\d_]*/,
                // negative look-ahead tries to avoid matching patterns that are not
                // Perl at all like $ident$, @ident@, etc.
                `(?![\\w\\d])(?![$])`) },
              BRACED_VAR
            ]
          });
 
          const SUBST = {
            className: 'subst',
            begin: /\$\(/,
            end: /\)/,
            contains: [ hljs.BACKSLASH_ESCAPE ]
          };
          const HERE_DOC = {
            begin: /<<-?\s*(?=\w+)/,
            starts: { contains: [
              hljs.END_SAME_AS_BEGIN({
                begin: /(\w+)/,
                end: /(\w+)/,
                className: 'string'
              })
            ] }
          };
          const QUOTE_STRING = {
            className: 'string',
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              VAR,
              SUBST
            ]
          };
          SUBST.contains.push(QUOTE_STRING);
          const ESCAPED_QUOTE = {
            className: '',
            begin: /\\"/
 
          };
          const APOS_STRING = {
            className: 'string',
            begin: /'/,
            end: /'/
          };
          const ARITHMETIC = {
            begin: /\$?\(\(/,
            end: /\)\)/,
            contains: [
              {
                begin: /\d+#[0-9a-f]+/,
                className: "number"
              },
              hljs.NUMBER_MODE,
              VAR
            ]
          };
          const SH_LIKE_SHELLS = [
            "fish",
            "bash",
            "zsh",
            "sh",
            "csh",
            "ksh",
            "tcsh",
            "dash",
            "scsh",
          ];
          const KNOWN_SHEBANG = hljs.SHEBANG({
            binary: `(${SH_LIKE_SHELLS.join("|")})`,
            relevance: 10
          });
          const FUNCTION = {
            className: 'function',
            begin: /\w[\w\d_]*\s*\(\s*\)\s*\{/,
            returnBegin: true,
            contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\w[\w\d_]*/ }) ],
            relevance: 0
          };
 
          const KEYWORDS = [
            "if",
            "then",
            "else",
            "elif",
            "fi",
            "for",
            "while",
            "until",
            "in",
            "do",
            "done",
            "case",
            "esac",
            "function",
            "select"
          ];
 
          const LITERALS = [
            "true",
            "false"
          ];
 
          // to consume paths to prevent keyword matches inside them
          const PATH_MODE = { match: /(\/[a-z._-]+)+/ };
 
          // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
          const SHELL_BUILT_INS = [
            "break",
            "cd",
            "continue",
            "eval",
            "exec",
            "exit",
            "export",
            "getopts",
            "hash",
            "pwd",
            "readonly",
            "return",
            "shift",
            "test",
            "times",
            "trap",
            "umask",
            "unset"
          ];
 
          const BASH_BUILT_INS = [
            "alias",
            "bind",
            "builtin",
            "caller",
            "command",
            "declare",
            "echo",
            "enable",
            "help",
            "let",
            "local",
            "logout",
            "mapfile",
            "printf",
            "read",
            "readarray",
            "source",
            "type",
            "typeset",
            "ulimit",
            "unalias"
          ];
 
          const ZSH_BUILT_INS = [
            "autoload",
            "bg",
            "bindkey",
            "bye",
            "cap",
            "chdir",
            "clone",
            "comparguments",
            "compcall",
            "compctl",
            "compdescribe",
            "compfiles",
            "compgroups",
            "compquote",
            "comptags",
            "comptry",
            "compvalues",
            "dirs",
            "disable",
            "disown",
            "echotc",
            "echoti",
            "emulate",
            "fc",
            "fg",
            "float",
            "functions",
            "getcap",
            "getln",
            "history",
            "integer",
            "jobs",
            "kill",
            "limit",
            "log",
            "noglob",
            "popd",
            "print",
            "pushd",
            "pushln",
            "rehash",
            "sched",
            "setcap",
            "setopt",
            "stat",
            "suspend",
            "ttyctl",
            "unfunction",
            "unhash",
            "unlimit",
            "unsetopt",
            "vared",
            "wait",
            "whence",
            "where",
            "which",
            "zcompile",
            "zformat",
            "zftp",
            "zle",
            "zmodload",
            "zparseopts",
            "zprof",
            "zpty",
            "zregexparse",
            "zsocket",
            "zstyle",
            "ztcp"
          ];
 
          const GNU_CORE_UTILS = [
            "chcon",
            "chgrp",
            "chown",
            "chmod",
            "cp",
            "dd",
            "df",
            "dir",
            "dircolors",
            "ln",
            "ls",
            "mkdir",
            "mkfifo",
            "mknod",
            "mktemp",
            "mv",
            "realpath",
            "rm",
            "rmdir",
            "shred",
            "sync",
            "touch",
            "truncate",
            "vdir",
            "b2sum",
            "base32",
            "base64",
            "cat",
            "cksum",
            "comm",
            "csplit",
            "cut",
            "expand",
            "fmt",
            "fold",
            "head",
            "join",
            "md5sum",
            "nl",
            "numfmt",
            "od",
            "paste",
            "ptx",
            "pr",
            "sha1sum",
            "sha224sum",
            "sha256sum",
            "sha384sum",
            "sha512sum",
            "shuf",
            "sort",
            "split",
            "sum",
            "tac",
            "tail",
            "tr",
            "tsort",
            "unexpand",
            "uniq",
            "wc",
            "arch",
            "basename",
            "chroot",
            "date",
            "dirname",
            "du",
            "echo",
            "env",
            "expr",
            "factor",
            // "false", // keyword literal already
            "groups",
            "hostid",
            "id",
            "link",
            "logname",
            "nice",
            "nohup",
            "nproc",
            "pathchk",
            "pinky",
            "printenv",
            "printf",
            "pwd",
            "readlink",
            "runcon",
            "seq",
            "sleep",
            "stat",
            "stdbuf",
            "stty",
            "tee",
            "test",
            "timeout",
            // "true", // keyword literal already
            "tty",
            "uname",
            "unlink",
            "uptime",
            "users",
            "who",
            "whoami",
            "yes"
          ];
 
          return {
            name: 'Bash',
            aliases: [ 'sh' ],
            keywords: {
              $pattern: /\b[a-z][a-z0-9._-]+\b/,
              keyword: KEYWORDS,
              literal: LITERALS,
              built_in: [
                ...SHELL_BUILT_INS,
                ...BASH_BUILT_INS,
                // Shell modifiers
                "set",
                "shopt",
                ...ZSH_BUILT_INS,
                ...GNU_CORE_UTILS
              ]
            },
            contains: [
              KNOWN_SHEBANG, // to catch known shells and boost relevancy
              hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang
              FUNCTION,
              ARITHMETIC,
              hljs.HASH_COMMENT_MODE,
              HERE_DOC,
              PATH_MODE,
              QUOTE_STRING,
              ESCAPED_QUOTE,
              APOS_STRING,
              VAR
            ]
          };
        }
 
        bash_1 = bash;
        return bash_1;
    }
 
    /*
    Language: BASIC
    Author: Raphaël Assénat <raph@raphnet.net>
    Description: Based on the BASIC reference from the Tandy 1000 guide
    Website: https://en.wikipedia.org/wiki/Tandy_1000
    */
 
    var basic_1;
    var hasRequiredBasic;
 
    function requireBasic () {
        if (hasRequiredBasic) return basic_1;
        hasRequiredBasic = 1;
        /** @type LanguageFn */
        function basic(hljs) {
          const KEYWORDS = [
            "ABS",
            "ASC",
            "AND",
            "ATN",
            "AUTO|0",
            "BEEP",
            "BLOAD|10",
            "BSAVE|10",
            "CALL",
            "CALLS",
            "CDBL",
            "CHAIN",
            "CHDIR",
            "CHR$|10",
            "CINT",
            "CIRCLE",
            "CLEAR",
            "CLOSE",
            "CLS",
            "COLOR",
            "COM",
            "COMMON",
            "CONT",
            "COS",
            "CSNG",
            "CSRLIN",
            "CVD",
            "CVI",
            "CVS",
            "DATA",
            "DATE$",
            "DEFDBL",
            "DEFINT",
            "DEFSNG",
            "DEFSTR",
            "DEF|0",
            "SEG",
            "USR",
            "DELETE",
            "DIM",
            "DRAW",
            "EDIT",
            "END",
            "ENVIRON",
            "ENVIRON$",
            "EOF",
            "EQV",
            "ERASE",
            "ERDEV",
            "ERDEV$",
            "ERL",
            "ERR",
            "ERROR",
            "EXP",
            "FIELD",
            "FILES",
            "FIX",
            "FOR|0",
            "FRE",
            "GET",
            "GOSUB|10",
            "GOTO",
            "HEX$",
            "IF",
            "THEN",
            "ELSE|0",
            "INKEY$",
            "INP",
            "INPUT",
            "INPUT#",
            "INPUT$",
            "INSTR",
            "IMP",
            "INT",
            "IOCTL",
            "IOCTL$",
            "KEY",
            "ON",
            "OFF",
            "LIST",
            "KILL",
            "LEFT$",
            "LEN",
            "LET",
            "LINE",
            "LLIST",
            "LOAD",
            "LOC",
            "LOCATE",
            "LOF",
            "LOG",
            "LPRINT",
            "USING",
            "LSET",
            "MERGE",
            "MID$",
            "MKDIR",
            "MKD$",
            "MKI$",
            "MKS$",
            "MOD",
            "NAME",
            "NEW",
            "NEXT",
            "NOISE",
            "NOT",
            "OCT$",
            "ON",
            "OR",
            "PEN",
            "PLAY",
            "STRIG",
            "OPEN",
            "OPTION",
            "BASE",
            "OUT",
            "PAINT",
            "PALETTE",
            "PCOPY",
            "PEEK",
            "PMAP",
            "POINT",
            "POKE",
            "POS",
            "PRINT",
            "PRINT]",
            "PSET",
            "PRESET",
            "PUT",
            "RANDOMIZE",
            "READ",
            "REM",
            "RENUM",
            "RESET|0",
            "RESTORE",
            "RESUME",
            "RETURN|0",
            "RIGHT$",
            "RMDIR",
            "RND",
            "RSET",
            "RUN",
            "SAVE",
            "SCREEN",
            "SGN",
            "SHELL",
            "SIN",
            "SOUND",
            "SPACE$",
            "SPC",
            "SQR",
            "STEP",
            "STICK",
            "STOP",
            "STR$",
            "STRING$",
            "SWAP",
            "SYSTEM",
            "TAB",
            "TAN",
            "TIME$",
            "TIMER",
            "TROFF",
            "TRON",
            "TO",
            "USR",
            "VAL",
            "VARPTR",
            "VARPTR$",
            "VIEW",
            "WAIT",
            "WHILE",
            "WEND",
            "WIDTH",
            "WINDOW",
            "WRITE",
            "XOR"
          ];
 
          return {
            name: 'BASIC',
            case_insensitive: true,
            illegal: '^\.',
            // Support explicitly typed variables that end with $%! or #.
            keywords: {
              $pattern: '[a-zA-Z][a-zA-Z0-9_$%!#]*',
              keyword: KEYWORDS
            },
            contains: [
              hljs.QUOTE_STRING_MODE,
              hljs.COMMENT('REM', '$', { relevance: 10 }),
              hljs.COMMENT('\'', '$', { relevance: 0 }),
              {
                // Match line numbers
                className: 'symbol',
                begin: '^[0-9]+ ',
                relevance: 10
              },
              {
                // Match typed numeric constants (1000, 12.34!, 1.2e5, 1.5#, 1.2D2)
                className: 'number',
                begin: '\\b\\d+(\\.\\d+)?([edED]\\d+)?[#\!]?',
                relevance: 0
              },
              {
                // Match hexadecimal numbers (&Hxxxx)
                className: 'number',
                begin: '(&[hH][0-9a-fA-F]{1,4})'
              },
              {
                // Match octal numbers (&Oxxxxxx)
                className: 'number',
                begin: '(&[oO][0-7]{1,6})'
              }
            ]
          };
        }
 
        basic_1 = basic;
        return basic_1;
    }
 
    /*
    Language: Backus–Naur Form
    Website: https://en.wikipedia.org/wiki/Backus–Naur_form
    Author: Oleg Efimov <efimovov@gmail.com>
    */
 
    var bnf_1;
    var hasRequiredBnf;
 
    function requireBnf () {
        if (hasRequiredBnf) return bnf_1;
        hasRequiredBnf = 1;
        /** @type LanguageFn */
        function bnf(hljs) {
          return {
            name: 'Backus–Naur Form',
            contains: [
              // Attribute
              {
                className: 'attribute',
                begin: /</,
                end: />/
              },
              // Specific
              {
                begin: /::=/,
                end: /$/,
                contains: [
                  {
                    begin: /</,
                    end: />/
                  },
                  // Common
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE
                ]
              }
            ]
          };
        }
 
        bnf_1 = bnf;
        return bnf_1;
    }
 
    /*
    Language: Brainfuck
    Author: Evgeny Stepanischev <imbolk@gmail.com>
    Website: https://esolangs.org/wiki/Brainfuck
    */
 
    var brainfuck_1;
    var hasRequiredBrainfuck;
 
    function requireBrainfuck () {
        if (hasRequiredBrainfuck) return brainfuck_1;
        hasRequiredBrainfuck = 1;
        /** @type LanguageFn */
        function brainfuck(hljs) {
          const LITERAL = {
            className: 'literal',
            begin: /[+-]+/,
            relevance: 0
          };
          return {
            name: 'Brainfuck',
            aliases: [ 'bf' ],
            contains: [
              hljs.COMMENT(
                /[^\[\]\.,\+\-<> \r\n]/,
                /[\[\]\.,\+\-<> \r\n]/,
                {
                  contains: [
                    {
                      match: /[ ]+[^\[\]\.,\+\-<> \r\n]/,
                      relevance: 0
                    }
                  ],
                  returnEnd: true,
                  relevance: 0
                }
              ),
              {
                className: 'title',
                begin: '[\\[\\]]',
                relevance: 0
              },
              {
                className: 'string',
                begin: '[\\.,]',
                relevance: 0
              },
              {
                // this mode works as the only relevance counter
                // it looks ahead to find the start of a run of literals
                // so only the runs are counted as relevant
                begin: /(?=\+\+|--)/,
                contains: [ LITERAL ]
              },
              LITERAL
            ]
          };
        }
 
        brainfuck_1 = brainfuck;
        return brainfuck_1;
    }
 
    /*
    Language: C
    Category: common, system
    Website: https://en.wikipedia.org/wiki/C_(programming_language)
    */
 
    var c_1;
    var hasRequiredC;
 
    function requireC () {
        if (hasRequiredC) return c_1;
        hasRequiredC = 1;
        /** @type LanguageFn */
        function c(hljs) {
          const regex = hljs.regex;
          // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
          // not include such support nor can we be sure all the grammars depending
          // on it would desire this behavior
          const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
          const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
          const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
          const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
          const FUNCTION_TYPE_RE = '('
            + DECLTYPE_AUTO_RE + '|'
            + regex.optional(NAMESPACE_RE)
            + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
          + ')';
 
 
          const TYPES = {
            className: 'type',
            variants: [
              { begin: '\\b[a-z\\d_]*_t\\b' },
              { match: /\batomic_[a-z]{3,6}\b/ }
            ]
 
          };
 
          // https://en.cppreference.com/w/cpp/language/escape
          // \\ \x \xFF \u2837 \u00323747 \374
          const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
          const STRINGS = {
            className: 'string',
            variants: [
              {
                begin: '(u8?|U|L)?"',
                end: '"',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + "|.)",
                end: '\'',
                illegal: '.'
              },
              hljs.END_SAME_AS_BEGIN({
                begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
                end: /\)([^()\\ ]{0,16})"/
              })
            ]
          };
 
          const NUMBERS = {
            className: 'number',
            variants: [
              { begin: '\\b(0b[01\']+)' },
              { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
              { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
            ],
            relevance: 0
          };
 
          const PREPROCESSOR = {
            className: 'meta',
            begin: /#\s*[a-z]+\b/,
            end: /$/,
            keywords: { keyword:
                'if else elif endif define undef warning error line '
                + 'pragma _Pragma ifdef ifndef include' },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              hljs.inherit(STRINGS, { className: 'string' }),
              {
                className: 'string',
                begin: /<.*?>/
              },
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
 
          const TITLE_MODE = {
            className: 'title',
            begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
            relevance: 0
          };
 
          const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';
 
          const C_KEYWORDS = [
            "asm",
            "auto",
            "break",
            "case",
            "continue",
            "default",
            "do",
            "else",
            "enum",
            "extern",
            "for",
            "fortran",
            "goto",
            "if",
            "inline",
            "register",
            "restrict",
            "return",
            "sizeof",
            "struct",
            "switch",
            "typedef",
            "union",
            "volatile",
            "while",
            "_Alignas",
            "_Alignof",
            "_Atomic",
            "_Generic",
            "_Noreturn",
            "_Static_assert",
            "_Thread_local",
            // aliases
            "alignas",
            "alignof",
            "noreturn",
            "static_assert",
            "thread_local",
            // not a C keyword but is, for all intents and purposes, treated exactly like one.
            "_Pragma"
          ];
 
          const C_TYPES = [
            "float",
            "double",
            "signed",
            "unsigned",
            "int",
            "short",
            "long",
            "char",
            "void",
            "_Bool",
            "_Complex",
            "_Imaginary",
            "_Decimal32",
            "_Decimal64",
            "_Decimal128",
            // modifiers
            "const",
            "static",
            // aliases
            "complex",
            "bool",
            "imaginary"
          ];
 
          const KEYWORDS = {
            keyword: C_KEYWORDS,
            type: C_TYPES,
            literal: 'true false NULL',
            // TODO: apply hinting work similar to what was done in cpp.js
            built_in: 'std string wstring cin cout cerr clog stdin stdout stderr stringstream istringstream ostringstream '
              + 'auto_ptr deque list queue stack vector map set pair bitset multiset multimap unordered_set '
              + 'unordered_map unordered_multiset unordered_multimap priority_queue make_pair array shared_ptr abort terminate abs acos '
              + 'asin atan2 atan calloc ceil cosh cos exit exp fabs floor fmod fprintf fputs free frexp '
              + 'fscanf future isalnum isalpha iscntrl isdigit isgraph islower isprint ispunct isspace isupper '
              + 'isxdigit tolower toupper labs ldexp log10 log malloc realloc memchr memcmp memcpy memset modf pow '
              + 'printf putchar puts scanf sinh sin snprintf sprintf sqrt sscanf strcat strchr strcmp '
              + 'strcpy strcspn strlen strncat strncmp strncpy strpbrk strrchr strspn strstr tanh tan '
              + 'vfprintf vprintf vsprintf endl initializer_list unique_ptr',
          };
 
          const EXPRESSION_CONTAINS = [
            PREPROCESSOR,
            TYPES,
            C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            NUMBERS,
            STRINGS
          ];
 
          const EXPRESSION_CONTEXT = {
            // This mode covers expression context where we can't expect a function
            // definition and shouldn't highlight anything that looks like one:
            // `return some()`, `else if()`, `(x*sum(1, 2))`
            variants: [
              {
                begin: /=/,
                end: /;/
              },
              {
                begin: /\(/,
                end: /\)/
              },
              {
                beginKeywords: 'new throw return else',
                end: /;/
              }
            ],
            keywords: KEYWORDS,
            contains: EXPRESSION_CONTAINS.concat([
              {
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS,
                contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
                relevance: 0
              }
            ]),
            relevance: 0
          };
 
          const FUNCTION_DECLARATION = {
            begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
            returnBegin: true,
            end: /[{;=]/,
            excludeEnd: true,
            keywords: KEYWORDS,
            illegal: /[^\w\s\*&:<>.]/,
            contains: [
              { // to prevent it from being confused as the function title
                begin: DECLTYPE_AUTO_RE,
                keywords: KEYWORDS,
                relevance: 0
              },
              {
                begin: FUNCTION_TITLE,
                returnBegin: true,
                contains: [ hljs.inherit(TITLE_MODE, { className: "title.function" }) ],
                relevance: 0
              },
              // allow for multiple declarations, e.g.:
              // extern void f(int), g(char);
              {
                relevance: 0,
                match: /,/
              },
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRINGS,
                  NUMBERS,
                  TYPES,
                  // Count matching parentheses.
                  {
                    begin: /\(/,
                    end: /\)/,
                    keywords: KEYWORDS,
                    relevance: 0,
                    contains: [
                      'self',
                      C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE,
                      STRINGS,
                      NUMBERS,
                      TYPES
                    ]
                  }
                ]
              },
              TYPES,
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              PREPROCESSOR
            ]
          };
 
          return {
            name: "C",
            aliases: [ 'h' ],
            keywords: KEYWORDS,
            // Until differentiations are added between `c` and `cpp`, `c` will
            // not be auto-detected to avoid auto-detect conflicts between C and C++
            disableAutodetect: true,
            illegal: '</',
            contains: [].concat(
              EXPRESSION_CONTEXT,
              FUNCTION_DECLARATION,
              EXPRESSION_CONTAINS,
              [
                PREPROCESSOR,
                {
                  begin: hljs.IDENT_RE + '::',
                  keywords: KEYWORDS
                },
                {
                  className: 'class',
                  beginKeywords: 'enum class struct union',
                  end: /[{;:<>=]/,
                  contains: [
                    { beginKeywords: "final class struct" },
                    hljs.TITLE_MODE
                  ]
                }
              ]),
            exports: {
              preprocessor: PREPROCESSOR,
              strings: STRINGS,
              keywords: KEYWORDS
            }
          };
        }
 
        c_1 = c;
        return c_1;
    }
 
    /*
    Language: C/AL
    Author: Kenneth Fuglsang Christensen <kfuglsang@gmail.com>
    Description: Provides highlighting of Microsoft Dynamics NAV C/AL code files
    Website: https://docs.microsoft.com/en-us/dynamics-nav/programming-in-c-al
    */
 
    var cal_1;
    var hasRequiredCal;
 
    function requireCal () {
        if (hasRequiredCal) return cal_1;
        hasRequiredCal = 1;
        /** @type LanguageFn */
        function cal(hljs) {
          const regex = hljs.regex;
          const KEYWORDS = [
            "div",
            "mod",
            "in",
            "and",
            "or",
            "not",
            "xor",
            "asserterror",
            "begin",
            "case",
            "do",
            "downto",
            "else",
            "end",
            "exit",
            "for",
            "local",
            "if",
            "of",
            "repeat",
            "then",
            "to",
            "until",
            "while",
            "with",
            "var"
          ];
          const LITERALS = 'false true';
          const COMMENT_MODES = [
            hljs.C_LINE_COMMENT_MODE,
            hljs.COMMENT(
              /\{/,
              /\}/,
              { relevance: 0 }
            ),
            hljs.COMMENT(
              /\(\*/,
              /\*\)/,
              { relevance: 10 }
            )
          ];
          const STRING = {
            className: 'string',
            begin: /'/,
            end: /'/,
            contains: [ { begin: /''/ } ]
          };
          const CHAR_STRING = {
            className: 'string',
            begin: /(#\d+)+/
          };
          const DATE = {
            className: 'number',
            begin: '\\b\\d+(\\.\\d+)?(DT|D|T)',
            relevance: 0
          };
          const DBL_QUOTED_VARIABLE = {
            className: 'string', // not a string technically but makes sense to be highlighted in the same style
            begin: '"',
            end: '"'
          };
 
          const PROCEDURE = {
            match: [
              /procedure/,
              /\s+/,
              /[a-zA-Z_][\w@]*/,
              /\s*/
            ],
            scope: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS,
                contains: [
                  STRING,
                  CHAR_STRING,
                  hljs.NUMBER_MODE
                ]
              },
              ...COMMENT_MODES
            ]
          };
 
          const OBJECT_TYPES = [
            "Table",
            "Form",
            "Report",
            "Dataport",
            "Codeunit",
            "XMLport",
            "MenuSuite",
            "Page",
            "Query"
          ];
          const OBJECT = {
            match: [
              /OBJECT/,
              /\s+/,
              regex.either(...OBJECT_TYPES),
              /\s+/,
              /\d+/,
              /\s+(?=[^\s])/,
              /.*/,
              /$/
            ],
            relevance: 3,
            scope: {
              1: "keyword",
              3: "type",
              5: "number",
              7: "title"
            }
          };
 
          const PROPERTY = {
            match: /[\w]+(?=\=)/,
            scope: "attribute",
            relevance: 0
          };
 
          return {
            name: 'C/AL',
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              literal: LITERALS
            },
            illegal: /\/\*/,
            contains: [
              PROPERTY,
              STRING,
              CHAR_STRING,
              DATE,
              DBL_QUOTED_VARIABLE,
              hljs.NUMBER_MODE,
              OBJECT,
              PROCEDURE
            ]
          };
        }
 
        cal_1 = cal;
        return cal_1;
    }
 
    /*
    Language: Cap’n Proto
    Author: Oleg Efimov <efimovov@gmail.com>
    Description: Cap’n Proto message definition format
    Website: https://capnproto.org/capnp-tool.html
    Category: protocols
    */
 
    var capnproto_1;
    var hasRequiredCapnproto;
 
    function requireCapnproto () {
        if (hasRequiredCapnproto) return capnproto_1;
        hasRequiredCapnproto = 1;
        /** @type LanguageFn */
        function capnproto(hljs) {
          const KEYWORDS = [
            "struct",
            "enum",
            "interface",
            "union",
            "group",
            "import",
            "using",
            "const",
            "annotation",
            "extends",
            "in",
            "of",
            "on",
            "as",
            "with",
            "from",
            "fixed"
          ];
          const TYPES = [
            "Void",
            "Bool",
            "Int8",
            "Int16",
            "Int32",
            "Int64",
            "UInt8",
            "UInt16",
            "UInt32",
            "UInt64",
            "Float32",
            "Float64",
            "Text",
            "Data",
            "AnyPointer",
            "AnyStruct",
            "Capability",
            "List"
          ];
          const LITERALS = [
            "true",
            "false"
          ];
          const CLASS_DEFINITION = {
            variants: [
              { match: [
                /(struct|enum|interface)/,
                /\s+/,
                hljs.IDENT_RE
              ] },
              { match: [
                /extends/,
                /\s*\(/,
                hljs.IDENT_RE,
                /\s*\)/
              ] }
            ],
            scope: {
              1: "keyword",
              3: "title.class"
            }
          };
          return {
            name: 'Cap’n Proto',
            aliases: [ 'capnp' ],
            keywords: {
              keyword: KEYWORDS,
              type: TYPES,
              literal: LITERALS
            },
            contains: [
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE,
              hljs.HASH_COMMENT_MODE,
              {
                className: 'meta',
                begin: /@0x[\w\d]{16};/,
                illegal: /\n/
              },
              {
                className: 'symbol',
                begin: /@\d+\b/
              },
              CLASS_DEFINITION
            ]
          };
        }
 
        capnproto_1 = capnproto;
        return capnproto_1;
    }
 
    /*
    Language: Ceylon
    Author: Lucas Werkmeister <mail@lucaswerkmeister.de>
    Website: https://ceylon-lang.org
    */
 
    var ceylon_1;
    var hasRequiredCeylon;
 
    function requireCeylon () {
        if (hasRequiredCeylon) return ceylon_1;
        hasRequiredCeylon = 1;
        /** @type LanguageFn */
        function ceylon(hljs) {
          // 2.3. Identifiers and keywords
          const KEYWORDS = [
            "assembly",
            "module",
            "package",
            "import",
            "alias",
            "class",
            "interface",
            "object",
            "given",
            "value",
            "assign",
            "void",
            "function",
            "new",
            "of",
            "extends",
            "satisfies",
            "abstracts",
            "in",
            "out",
            "return",
            "break",
            "continue",
            "throw",
            "assert",
            "dynamic",
            "if",
            "else",
            "switch",
            "case",
            "for",
            "while",
            "try",
            "catch",
            "finally",
            "then",
            "let",
            "this",
            "outer",
            "super",
            "is",
            "exists",
            "nonempty"
          ];
          // 7.4.1 Declaration Modifiers
          const DECLARATION_MODIFIERS = [
            "shared",
            "abstract",
            "formal",
            "default",
            "actual",
            "variable",
            "late",
            "native",
            "deprecated",
            "final",
            "sealed",
            "annotation",
            "suppressWarnings",
            "small"
          ];
          // 7.4.2 Documentation
          const DOCUMENTATION = [
            "doc",
            "by",
            "license",
            "see",
            "throws",
            "tagged"
          ];
          const SUBST = {
            className: 'subst',
            excludeBegin: true,
            excludeEnd: true,
            begin: /``/,
            end: /``/,
            keywords: KEYWORDS,
            relevance: 10
          };
          const EXPRESSIONS = [
            {
              // verbatim string
              className: 'string',
              begin: '"""',
              end: '"""',
              relevance: 10
            },
            {
              // string literal or template
              className: 'string',
              begin: '"',
              end: '"',
              contains: [ SUBST ]
            },
            {
              // character literal
              className: 'string',
              begin: "'",
              end: "'"
            },
            {
              // numeric literal
              className: 'number',
              begin: '#[0-9a-fA-F_]+|\\$[01_]+|[0-9_]+(?:\\.[0-9_](?:[eE][+-]?\\d+)?)?[kMGTPmunpf]?',
              relevance: 0
            }
          ];
          SUBST.contains = EXPRESSIONS;
 
          return {
            name: 'Ceylon',
            keywords: {
              keyword: KEYWORDS.concat(DECLARATION_MODIFIERS),
              meta: DOCUMENTATION
            },
            illegal: '\\$[^01]|#[^0-9a-fA-F]',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
              {
                // compiler annotation
                className: 'meta',
                begin: '@[a-z]\\w*(?::"[^"]*")?'
              }
            ].concat(EXPRESSIONS)
          };
        }
 
        ceylon_1 = ceylon;
        return ceylon_1;
    }
 
    /*
    Language: Clean
    Author: Camil Staps <info@camilstaps.nl>
    Category: functional
    Website: http://clean.cs.ru.nl
    */
 
    var clean_1;
    var hasRequiredClean;
 
    function requireClean () {
        if (hasRequiredClean) return clean_1;
        hasRequiredClean = 1;
        /** @type LanguageFn */
        function clean(hljs) {
          const KEYWORDS = [
            "if",
            "let",
            "in",
            "with",
            "where",
            "case",
            "of",
            "class",
            "instance",
            "otherwise",
            "implementation",
            "definition",
            "system",
            "module",
            "from",
            "import",
            "qualified",
            "as",
            "special",
            "code",
            "inline",
            "foreign",
            "export",
            "ccall",
            "stdcall",
            "generic",
            "derive",
            "infix",
            "infixl",
            "infixr"
          ];
          return {
            name: 'Clean',
            aliases: [
              'icl',
              'dcl'
            ],
            keywords: {
              keyword: KEYWORDS,
              built_in:
                'Int Real Char Bool',
              literal:
                'True False'
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              { // relevance booster
                begin: '->|<-[|:]?|#!?|>>=|\\{\\||\\|\\}|:==|=:|<>' }
            ]
          };
        }
 
        clean_1 = clean;
        return clean_1;
    }
 
    /*
    Language: Clojure
    Description: Clojure syntax (based on lisp.js)
    Author: mfornos
    Website: https://clojure.org
    Category: lisp
    */
 
    var clojure_1;
    var hasRequiredClojure;
 
    function requireClojure () {
        if (hasRequiredClojure) return clojure_1;
        hasRequiredClojure = 1;
        /** @type LanguageFn */
        function clojure(hljs) {
          const SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&\'';
          const SYMBOL_RE = '[#]?[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:$#]*';
          const globals = 'def defonce defprotocol defstruct defmulti defmethod defn- defn defmacro deftype defrecord';
          const keywords = {
            $pattern: SYMBOL_RE,
            built_in:
              // Clojure keywords
              globals + ' '
              + 'cond apply if-not if-let if not not= =|0 <|0 >|0 <=|0 >=|0 ==|0 +|0 /|0 *|0 -|0 rem '
              + 'quot neg? pos? delay? symbol? keyword? true? false? integer? empty? coll? list? '
              + 'set? ifn? fn? associative? sequential? sorted? counted? reversible? number? decimal? '
              + 'class? distinct? isa? float? rational? reduced? ratio? odd? even? char? seq? vector? '
              + 'string? map? nil? contains? zero? instance? not-every? not-any? libspec? -> ->> .. . '
              + 'inc compare do dotimes mapcat take remove take-while drop letfn drop-last take-last '
              + 'drop-while while intern condp case reduced cycle split-at split-with repeat replicate '
              + 'iterate range merge zipmap declare line-seq sort comparator sort-by dorun doall nthnext '
              + 'nthrest partition eval doseq await await-for let agent atom send send-off release-pending-sends '
              + 'add-watch mapv filterv remove-watch agent-error restart-agent set-error-handler error-handler '
              + 'set-error-mode! error-mode shutdown-agents quote var fn loop recur throw try monitor-enter '
              + 'monitor-exit macroexpand macroexpand-1 for dosync and or '
              + 'when when-not when-let comp juxt partial sequence memoize constantly complement identity assert '
              + 'peek pop doto proxy first rest cons cast coll last butlast '
              + 'sigs reify second ffirst fnext nfirst nnext meta with-meta ns in-ns create-ns import '
              + 'refer keys select-keys vals key val rseq name namespace promise into transient persistent! conj! '
              + 'assoc! dissoc! pop! disj! use class type num float double short byte boolean bigint biginteger '
              + 'bigdec print-method print-dup throw-if printf format load compile get-in update-in pr pr-on newline '
              + 'flush read slurp read-line subvec with-open memfn time re-find re-groups rand-int rand mod locking '
              + 'assert-valid-fdecl alias resolve ref deref refset swap! reset! set-validator! compare-and-set! alter-meta! '
              + 'reset-meta! commute get-validator alter ref-set ref-history-count ref-min-history ref-max-history ensure sync io! '
              + 'new next conj set! to-array future future-call into-array aset gen-class reduce map filter find empty '
              + 'hash-map hash-set sorted-map sorted-map-by sorted-set sorted-set-by vec vector seq flatten reverse assoc dissoc list '
              + 'disj get union difference intersection extend extend-type extend-protocol int nth delay count concat chunk chunk-buffer '
              + 'chunk-append chunk-first chunk-rest max min dec unchecked-inc-int unchecked-inc unchecked-dec-inc unchecked-dec unchecked-negate '
              + 'unchecked-add-int unchecked-add unchecked-subtract-int unchecked-subtract chunk-next chunk-cons chunked-seq? prn vary-meta '
              + 'lazy-seq spread list* str find-keyword keyword symbol gensym force rationalize'
          };
 
          const SYMBOL = {
            begin: SYMBOL_RE,
            relevance: 0
          };
          const NUMBER = {
            scope: 'number',
            relevance: 0,
            variants: [
              { match: /[-+]?0[xX][0-9a-fA-F]+N?/ }, // hexadecimal                 // 0x2a
              { match: /[-+]?0[0-7]+N?/ }, // octal                       // 052
              { match: /[-+]?[1-9][0-9]?[rR][0-9a-zA-Z]+N?/ }, // variable radix from 2 to 36 // 2r101010, 8r52, 36r16
              { match: /[-+]?[0-9]+\/[0-9]+N?/ }, // ratio                       // 1/2
              { match: /[-+]?[0-9]+((\.[0-9]*([eE][+-]?[0-9]+)?M?)|([eE][+-]?[0-9]+M?|M))/ }, // float        // 0.42 4.2E-1M 42E1 42M
              { match: /[-+]?([1-9][0-9]*|0)N?/ }, // int (don't match leading 0) // 42 42N
            ]
          };
          const CHARACTER = {
            scope: 'character',
            variants: [
              { match: /\\o[0-3]?[0-7]{1,2}/ }, // Unicode Octal 0 - 377
              { match: /\\u[0-9a-fA-F]{4}/ }, // Unicode Hex 0000 - FFFF
              { match: /\\(newline|space|tab|formfeed|backspace|return)/ }, // special characters
              {
                match: /\\\S/,
                relevance: 0
              } // any non-whitespace char
            ]
          };
          const REGEX = {
            scope: 'regex',
            begin: /#"/,
            end: /"/,
            contains: [ hljs.BACKSLASH_ESCAPE ]
          };
          const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
          const COMMA = {
            scope: 'punctuation',
            match: /,/,
            relevance: 0
          };
          const COMMENT = hljs.COMMENT(
            ';',
            '$',
            { relevance: 0 }
          );
          const LITERAL = {
            className: 'literal',
            begin: /\b(true|false|nil)\b/
          };
          const COLLECTION = {
            begin: "\\[|(#::?" + SYMBOL_RE + ")?\\{",
            end: '[\\]\\}]',
            relevance: 0
          };
          const KEY = {
            className: 'symbol',
            begin: '[:]{1,2}' + SYMBOL_RE
          };
          const LIST = {
            begin: '\\(',
            end: '\\)'
          };
          const BODY = {
            endsWithParent: true,
            relevance: 0
          };
          const NAME = {
            keywords: keywords,
            className: 'name',
            begin: SYMBOL_RE,
            relevance: 0,
            starts: BODY
          };
          const DEFAULT_CONTAINS = [
            COMMA,
            LIST,
            CHARACTER,
            REGEX,
            STRING,
            COMMENT,
            KEY,
            COLLECTION,
            NUMBER,
            LITERAL,
            SYMBOL
          ];
 
          const GLOBAL = {
            beginKeywords: globals,
            keywords: {
              $pattern: SYMBOL_RE,
              keyword: globals
            },
            end: '(\\[|#|\\d|"|:|\\{|\\)|\\(|$)',
            contains: [
              {
                className: 'title',
                begin: SYMBOL_RE,
                relevance: 0,
                excludeEnd: true,
                // we can only have a single title
                endsParent: true
              }
            ].concat(DEFAULT_CONTAINS)
          };
 
          LIST.contains = [
            GLOBAL,
            NAME,
            BODY
          ];
          BODY.contains = DEFAULT_CONTAINS;
          COLLECTION.contains = DEFAULT_CONTAINS;
 
          return {
            name: 'Clojure',
            aliases: [
              'clj',
              'edn'
            ],
            illegal: /\S/,
            contains: [
              COMMA,
              LIST,
              CHARACTER,
              REGEX,
              STRING,
              COMMENT,
              KEY,
              COLLECTION,
              NUMBER,
              LITERAL
            ]
          };
        }
 
        clojure_1 = clojure;
        return clojure_1;
    }
 
    /*
    Language: Clojure REPL
    Description: Clojure REPL sessions
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Requires: clojure.js
    Website: https://clojure.org
    Category: lisp
    */
 
    var clojureRepl_1;
    var hasRequiredClojureRepl;
 
    function requireClojureRepl () {
        if (hasRequiredClojureRepl) return clojureRepl_1;
        hasRequiredClojureRepl = 1;
        /** @type LanguageFn */
        function clojureRepl(hljs) {
          return {
            name: 'Clojure REPL',
            contains: [
              {
                className: 'meta.prompt',
                begin: /^([\w.-]+|\s*#_)?=>/,
                starts: {
                  end: /$/,
                  subLanguage: 'clojure'
                }
              }
            ]
          };
        }
 
        clojureRepl_1 = clojureRepl;
        return clojureRepl_1;
    }
 
    /*
    Language: CMake
    Description: CMake is an open-source cross-platform system for build automation.
    Author: Igor Kalnitsky <igor@kalnitsky.org>
    Website: https://cmake.org
    */
 
    var cmake_1;
    var hasRequiredCmake;
 
    function requireCmake () {
        if (hasRequiredCmake) return cmake_1;
        hasRequiredCmake = 1;
        /** @type LanguageFn */
        function cmake(hljs) {
          return {
            name: 'CMake',
            aliases: [ 'cmake.in' ],
            case_insensitive: true,
            keywords: { keyword:
                // scripting commands
                'break cmake_host_system_information cmake_minimum_required cmake_parse_arguments '
                + 'cmake_policy configure_file continue elseif else endforeach endfunction endif endmacro '
                + 'endwhile execute_process file find_file find_library find_package find_path '
                + 'find_program foreach function get_cmake_property get_directory_property '
                + 'get_filename_component get_property if include include_guard list macro '
                + 'mark_as_advanced math message option return separate_arguments '
                + 'set_directory_properties set_property set site_name string unset variable_watch while '
                // project commands
                + 'add_compile_definitions add_compile_options add_custom_command add_custom_target '
                + 'add_definitions add_dependencies add_executable add_library add_link_options '
                + 'add_subdirectory add_test aux_source_directory build_command create_test_sourcelist '
                + 'define_property enable_language enable_testing export fltk_wrap_ui '
                + 'get_source_file_property get_target_property get_test_property include_directories '
                + 'include_external_msproject include_regular_expression install link_directories '
                + 'link_libraries load_cache project qt_wrap_cpp qt_wrap_ui remove_definitions '
                + 'set_source_files_properties set_target_properties set_tests_properties source_group '
                + 'target_compile_definitions target_compile_features target_compile_options '
                + 'target_include_directories target_link_directories target_link_libraries '
                + 'target_link_options target_sources try_compile try_run '
                // CTest commands
                + 'ctest_build ctest_configure ctest_coverage ctest_empty_binary_directory ctest_memcheck '
                + 'ctest_read_custom_files ctest_run_script ctest_sleep ctest_start ctest_submit '
                + 'ctest_test ctest_update ctest_upload '
                // deprecated commands
                + 'build_name exec_program export_library_dependencies install_files install_programs '
                + 'install_targets load_command make_directory output_required_files remove '
                + 'subdir_depends subdirs use_mangled_mesa utility_source variable_requires write_file '
                + 'qt5_use_modules qt5_use_package qt5_wrap_cpp '
                // core keywords
                + 'on off true false and or not command policy target test exists is_newer_than '
                + 'is_directory is_symlink is_absolute matches less greater equal less_equal '
                + 'greater_equal strless strgreater strequal strless_equal strgreater_equal version_less '
                + 'version_greater version_equal version_less_equal version_greater_equal in_list defined' },
            contains: [
              {
                className: 'variable',
                begin: /\$\{/,
                end: /\}/
              },
              hljs.COMMENT(/#\[\[/, /]]/),
              hljs.HASH_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE
            ]
          };
        }
 
        cmake_1 = cmake;
        return cmake_1;
    }
 
    var coffeescript_1;
    var hasRequiredCoffeescript;
 
    function requireCoffeescript () {
        if (hasRequiredCoffeescript) return coffeescript_1;
        hasRequiredCoffeescript = 1;
        const KEYWORDS = [
          "as", // for exports
          "in",
          "of",
          "if",
          "for",
          "while",
          "finally",
          "var",
          "new",
          "function",
          "do",
          "return",
          "void",
          "else",
          "break",
          "catch",
          "instanceof",
          "with",
          "throw",
          "case",
          "default",
          "try",
          "switch",
          "continue",
          "typeof",
          "delete",
          "let",
          "yield",
          "const",
          "class",
          // JS handles these with a special rule
          // "get",
          // "set",
          "debugger",
          "async",
          "await",
          "static",
          "import",
          "from",
          "export",
          "extends"
        ];
        const LITERALS = [
          "true",
          "false",
          "null",
          "undefined",
          "NaN",
          "Infinity"
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
        const TYPES = [
          // Fundamental objects
          "Object",
          "Function",
          "Boolean",
          "Symbol",
          // numbers and dates
          "Math",
          "Date",
          "Number",
          "BigInt",
          // text
          "String",
          "RegExp",
          // Indexed collections
          "Array",
          "Float32Array",
          "Float64Array",
          "Int8Array",
          "Uint8Array",
          "Uint8ClampedArray",
          "Int16Array",
          "Int32Array",
          "Uint16Array",
          "Uint32Array",
          "BigInt64Array",
          "BigUint64Array",
          // Keyed collections
          "Set",
          "Map",
          "WeakSet",
          "WeakMap",
          // Structured data
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Atomics",
          "DataView",
          "JSON",
          // Control abstraction objects
          "Promise",
          "Generator",
          "GeneratorFunction",
          "AsyncFunction",
          // Reflection
          "Reflect",
          "Proxy",
          // Internationalization
          "Intl",
          // WebAssembly
          "WebAssembly"
        ];
 
        const ERROR_TYPES = [
          "Error",
          "EvalError",
          "InternalError",
          "RangeError",
          "ReferenceError",
          "SyntaxError",
          "TypeError",
          "URIError"
        ];
 
        const BUILT_IN_GLOBALS = [
          "setInterval",
          "setTimeout",
          "clearInterval",
          "clearTimeout",
 
          "require",
          "exports",
 
          "eval",
          "isFinite",
          "isNaN",
          "parseFloat",
          "parseInt",
          "decodeURI",
          "decodeURIComponent",
          "encodeURI",
          "encodeURIComponent",
          "escape",
          "unescape"
        ];
 
        const BUILT_INS = [].concat(
          BUILT_IN_GLOBALS,
          TYPES,
          ERROR_TYPES
        );
 
        /*
        Language: CoffeeScript
        Author: Dmytrii Nagirniak <dnagir@gmail.com>
        Contributors: Oleg Efimov <efimovov@gmail.com>, Cédric Néhémie <cedric.nehemie@gmail.com>
        Description: CoffeeScript is a programming language that transcompiles to JavaScript. For info about language see http://coffeescript.org/
        Category: scripting
        Website: https://coffeescript.org
        */
 
        /** @type LanguageFn */
        function coffeescript(hljs) {
          const COFFEE_BUILT_INS = [
            'npm',
            'print'
          ];
          const COFFEE_LITERALS = [
            'yes',
            'no',
            'on',
            'off'
          ];
          const COFFEE_KEYWORDS = [
            'then',
            'unless',
            'until',
            'loop',
            'by',
            'when',
            'and',
            'or',
            'is',
            'isnt',
            'not'
          ];
          const NOT_VALID_KEYWORDS = [
            "var",
            "const",
            "let",
            "function",
            "static"
          ];
          const excluding = (list) =>
            (kw) => !list.includes(kw);
          const KEYWORDS$1 = {
            keyword: KEYWORDS.concat(COFFEE_KEYWORDS).filter(excluding(NOT_VALID_KEYWORDS)),
            literal: LITERALS.concat(COFFEE_LITERALS),
            built_in: BUILT_INS.concat(COFFEE_BUILT_INS)
          };
          const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
          const SUBST = {
            className: 'subst',
            begin: /#\{/,
            end: /\}/,
            keywords: KEYWORDS$1
          };
          const EXPRESSIONS = [
            hljs.BINARY_NUMBER_MODE,
            hljs.inherit(hljs.C_NUMBER_MODE, { starts: {
              end: '(\\s*/)?',
              relevance: 0
            } }), // a number tries to eat the following slash to prevent treating it as a regexp
            {
              className: 'string',
              variants: [
                {
                  begin: /'''/,
                  end: /'''/,
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: /"""/,
                  end: /"""/,
                  contains: [
                    hljs.BACKSLASH_ESCAPE,
                    SUBST
                  ]
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    hljs.BACKSLASH_ESCAPE,
                    SUBST
                  ]
                }
              ]
            },
            {
              className: 'regexp',
              variants: [
                {
                  begin: '///',
                  end: '///',
                  contains: [
                    SUBST,
                    hljs.HASH_COMMENT_MODE
                  ]
                },
                {
                  begin: '//[gim]{0,3}(?=\\W)',
                  relevance: 0
                },
                {
                  // regex can't start with space to parse x / 2 / 3 as two divisions
                  // regex can't start with *, and it supports an "illegal" in the main mode
                  begin: /\/(?![ *]).*?(?![\\]).\/[gim]{0,3}(?=\W)/ }
              ]
            },
            { begin: '@' + JS_IDENT_RE // relevance booster
            },
            {
              subLanguage: 'javascript',
              excludeBegin: true,
              excludeEnd: true,
              variants: [
                {
                  begin: '```',
                  end: '```'
                },
                {
                  begin: '`',
                  end: '`'
                }
              ]
            }
          ];
          SUBST.contains = EXPRESSIONS;
 
          const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
          const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
          const PARAMS = {
            className: 'params',
            begin: '\\([^\\(]',
            returnBegin: true,
            /* We need another contained nameless mode to not have every nested
            pair of parens to be called "params" */
            contains: [
              {
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS$1,
                contains: [ 'self' ].concat(EXPRESSIONS)
              }
            ]
          };
 
          const CLASS_DEFINITION = {
            variants: [
              { match: [
                /class\s+/,
                JS_IDENT_RE,
                /\s+extends\s+/,
                JS_IDENT_RE
              ] },
              { match: [
                /class\s+/,
                JS_IDENT_RE
              ] }
            ],
            scope: {
              2: "title.class",
              4: "title.class.inherited"
            },
            keywords: KEYWORDS$1
          };
 
          return {
            name: 'CoffeeScript',
            aliases: [
              'coffee',
              'cson',
              'iced'
            ],
            keywords: KEYWORDS$1,
            illegal: /\/\*/,
            contains: [
              ...EXPRESSIONS,
              hljs.COMMENT('###', '###'),
              hljs.HASH_COMMENT_MODE,
              {
                className: 'function',
                begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
                end: '[-=]>',
                returnBegin: true,
                contains: [
                  TITLE,
                  PARAMS
                ]
              },
              {
                // anonymous function start
                begin: /[:\(,=]\s*/,
                relevance: 0,
                contains: [
                  {
                    className: 'function',
                    begin: POSSIBLE_PARAMS_RE,
                    end: '[-=]>',
                    returnBegin: true,
                    contains: [ PARAMS ]
                  }
                ]
              },
              CLASS_DEFINITION,
              {
                begin: JS_IDENT_RE + ':',
                end: ':',
                returnBegin: true,
                returnEnd: true,
                relevance: 0
              }
            ]
          };
        }
 
        coffeescript_1 = coffeescript;
        return coffeescript_1;
    }
 
    /*
    Language: Coq
    Author: Stephan Boyer <stephan@stephanboyer.com>
    Category: functional
    Website: https://coq.inria.fr
    */
 
    var coq_1;
    var hasRequiredCoq;
 
    function requireCoq () {
        if (hasRequiredCoq) return coq_1;
        hasRequiredCoq = 1;
        /** @type LanguageFn */
        function coq(hljs) {
          const KEYWORDS = [
            "_|0",
            "as",
            "at",
            "cofix",
            "else",
            "end",
            "exists",
            "exists2",
            "fix",
            "for",
            "forall",
            "fun",
            "if",
            "IF",
            "in",
            "let",
            "match",
            "mod",
            "Prop",
            "return",
            "Set",
            "then",
            "Type",
            "using",
            "where",
            "with",
            "Abort",
            "About",
            "Add",
            "Admit",
            "Admitted",
            "All",
            "Arguments",
            "Assumptions",
            "Axiom",
            "Back",
            "BackTo",
            "Backtrack",
            "Bind",
            "Blacklist",
            "Canonical",
            "Cd",
            "Check",
            "Class",
            "Classes",
            "Close",
            "Coercion",
            "Coercions",
            "CoFixpoint",
            "CoInductive",
            "Collection",
            "Combined",
            "Compute",
            "Conjecture",
            "Conjectures",
            "Constant",
            "constr",
            "Constraint",
            "Constructors",
            "Context",
            "Corollary",
            "CreateHintDb",
            "Cut",
            "Declare",
            "Defined",
            "Definition",
            "Delimit",
            "Dependencies",
            "Dependent",
            "Derive",
            "Drop",
            "eauto",
            "End",
            "Equality",
            "Eval",
            "Example",
            "Existential",
            "Existentials",
            "Existing",
            "Export",
            "exporting",
            "Extern",
            "Extract",
            "Extraction",
            "Fact",
            "Field",
            "Fields",
            "File",
            "Fixpoint",
            "Focus",
            "for",
            "From",
            "Function",
            "Functional",
            "Generalizable",
            "Global",
            "Goal",
            "Grab",
            "Grammar",
            "Graph",
            "Guarded",
            "Heap",
            "Hint",
            "HintDb",
            "Hints",
            "Hypotheses",
            "Hypothesis",
            "ident",
            "Identity",
            "If",
            "Immediate",
            "Implicit",
            "Import",
            "Include",
            "Inductive",
            "Infix",
            "Info",
            "Initial",
            "Inline",
            "Inspect",
            "Instance",
            "Instances",
            "Intro",
            "Intros",
            "Inversion",
            "Inversion_clear",
            "Language",
            "Left",
            "Lemma",
            "Let",
            "Libraries",
            "Library",
            "Load",
            "LoadPath",
            "Local",
            "Locate",
            "Ltac",
            "ML",
            "Mode",
            "Module",
            "Modules",
            "Monomorphic",
            "Morphism",
            "Next",
            "NoInline",
            "Notation",
            "Obligation",
            "Obligations",
            "Opaque",
            "Open",
            "Optimize",
            "Options",
            "Parameter",
            "Parameters",
            "Parametric",
            "Path",
            "Paths",
            "pattern",
            "Polymorphic",
            "Preterm",
            "Print",
            "Printing",
            "Program",
            "Projections",
            "Proof",
            "Proposition",
            "Pwd",
            "Qed",
            "Quit",
            "Rec",
            "Record",
            "Recursive",
            "Redirect",
            "Relation",
            "Remark",
            "Remove",
            "Require",
            "Reserved",
            "Reset",
            "Resolve",
            "Restart",
            "Rewrite",
            "Right",
            "Ring",
            "Rings",
            "Save",
            "Scheme",
            "Scope",
            "Scopes",
            "Script",
            "Search",
            "SearchAbout",
            "SearchHead",
            "SearchPattern",
            "SearchRewrite",
            "Section",
            "Separate",
            "Set",
            "Setoid",
            "Show",
            "Solve",
            "Sorted",
            "Step",
            "Strategies",
            "Strategy",
            "Structure",
            "SubClass",
            "Table",
            "Tables",
            "Tactic",
            "Term",
            "Test",
            "Theorem",
            "Time",
            "Timeout",
            "Transparent",
            "Type",
            "Typeclasses",
            "Types",
            "Undelimit",
            "Undo",
            "Unfocus",
            "Unfocused",
            "Unfold",
            "Universe",
            "Universes",
            "Unset",
            "Unshelve",
            "using",
            "Variable",
            "Variables",
            "Variant",
            "Verbose",
            "Visibility",
            "where",
            "with"
          ];
          const BUILT_INS = [
            "abstract",
            "absurd",
            "admit",
            "after",
            "apply",
            "as",
            "assert",
            "assumption",
            "at",
            "auto",
            "autorewrite",
            "autounfold",
            "before",
            "bottom",
            "btauto",
            "by",
            "case",
            "case_eq",
            "cbn",
            "cbv",
            "change",
            "classical_left",
            "classical_right",
            "clear",
            "clearbody",
            "cofix",
            "compare",
            "compute",
            "congruence",
            "constr_eq",
            "constructor",
            "contradict",
            "contradiction",
            "cut",
            "cutrewrite",
            "cycle",
            "decide",
            "decompose",
            "dependent",
            "destruct",
            "destruction",
            "dintuition",
            "discriminate",
            "discrR",
            "do",
            "double",
            "dtauto",
            "eapply",
            "eassumption",
            "eauto",
            "ecase",
            "econstructor",
            "edestruct",
            "ediscriminate",
            "eelim",
            "eexact",
            "eexists",
            "einduction",
            "einjection",
            "eleft",
            "elim",
            "elimtype",
            "enough",
            "equality",
            "erewrite",
            "eright",
            "esimplify_eq",
            "esplit",
            "evar",
            "exact",
            "exactly_once",
            "exfalso",
            "exists",
            "f_equal",
            "fail",
            "field",
            "field_simplify",
            "field_simplify_eq",
            "first",
            "firstorder",
            "fix",
            "fold",
            "fourier",
            "functional",
            "generalize",
            "generalizing",
            "gfail",
            "give_up",
            "has_evar",
            "hnf",
            "idtac",
            "in",
            "induction",
            "injection",
            "instantiate",
            "intro",
            "intro_pattern",
            "intros",
            "intuition",
            "inversion",
            "inversion_clear",
            "is_evar",
            "is_var",
            "lapply",
            "lazy",
            "left",
            "lia",
            "lra",
            "move",
            "native_compute",
            "nia",
            "nsatz",
            "omega",
            "once",
            "pattern",
            "pose",
            "progress",
            "proof",
            "psatz",
            "quote",
            "record",
            "red",
            "refine",
            "reflexivity",
            "remember",
            "rename",
            "repeat",
            "replace",
            "revert",
            "revgoals",
            "rewrite",
            "rewrite_strat",
            "right",
            "ring",
            "ring_simplify",
            "rtauto",
            "set",
            "setoid_reflexivity",
            "setoid_replace",
            "setoid_rewrite",
            "setoid_symmetry",
            "setoid_transitivity",
            "shelve",
            "shelve_unifiable",
            "simpl",
            "simple",
            "simplify_eq",
            "solve",
            "specialize",
            "split",
            "split_Rabs",
            "split_Rmult",
            "stepl",
            "stepr",
            "subst",
            "sum",
            "swap",
            "symmetry",
            "tactic",
            "tauto",
            "time",
            "timeout",
            "top",
            "transitivity",
            "trivial",
            "try",
            "tryif",
            "unfold",
            "unify",
            "until",
            "using",
            "vm_compute",
            "with"
          ];
          return {
            name: 'Coq',
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_INS
            },
            contains: [
              hljs.QUOTE_STRING_MODE,
              hljs.COMMENT('\\(\\*', '\\*\\)'),
              hljs.C_NUMBER_MODE,
              {
                className: 'type',
                excludeBegin: true,
                begin: '\\|\\s*',
                end: '\\w+'
              },
              { // relevance booster
                begin: /[-=]>/ }
            ]
          };
        }
 
        coq_1 = coq;
        return coq_1;
    }
 
    /*
    Language: Caché Object Script
    Author: Nikita Savchenko <zitros.lab@gmail.com>
    Category: enterprise, scripting
    Website: https://cedocs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls
    */
 
    var cos_1;
    var hasRequiredCos;
 
    function requireCos () {
        if (hasRequiredCos) return cos_1;
        hasRequiredCos = 1;
        /** @type LanguageFn */
        function cos(hljs) {
          const STRINGS = {
            className: 'string',
            variants: [
              {
                begin: '"',
                end: '"',
                contains: [
                  { // escaped
                    begin: "\"\"",
                    relevance: 0
                  }
                ]
              }
            ]
          };
 
          const NUMBERS = {
            className: "number",
            begin: "\\b(\\d+(\\.\\d*)?|\\.\\d+)",
            relevance: 0
          };
 
          const COS_KEYWORDS =
            'property parameter class classmethod clientmethod extends as break '
            + 'catch close continue do d|0 else elseif for goto halt hang h|0 if job '
            + 'j|0 kill k|0 lock l|0 merge new open quit q|0 read r|0 return set s|0 '
            + 'tcommit throw trollback try tstart use view while write w|0 xecute x|0 '
            + 'zkill znspace zn ztrap zwrite zw zzdump zzwrite print zbreak zinsert '
            + 'zload zprint zremove zsave zzprint mv mvcall mvcrt mvdim mvprint zquit '
            + 'zsync ascii';
 
          // registered function - no need in them due to all functions are highlighted,
          // but I'll just leave this here.
 
          // "$bit", "$bitcount",
          // "$bitfind", "$bitlogic", "$case", "$char", "$classmethod", "$classname",
          // "$compile", "$data", "$decimal", "$double", "$extract", "$factor",
          // "$find", "$fnumber", "$get", "$increment", "$inumber", "$isobject",
          // "$isvaliddouble", "$isvalidnum", "$justify", "$length", "$list",
          // "$listbuild", "$listdata", "$listfind", "$listfromstring", "$listget",
          // "$listlength", "$listnext", "$listsame", "$listtostring", "$listvalid",
          // "$locate", "$match", "$method", "$name", "$nconvert", "$next",
          // "$normalize", "$now", "$number", "$order", "$parameter", "$piece",
          // "$prefetchoff", "$prefetchon", "$property", "$qlength", "$qsubscript",
          // "$query", "$random", "$replace", "$reverse", "$sconvert", "$select",
          // "$sortbegin", "$sortend", "$stack", "$text", "$translate", "$view",
          // "$wascii", "$wchar", "$wextract", "$wfind", "$wiswide", "$wlength",
          // "$wreverse", "$xecute", "$zabs", "$zarccos", "$zarcsin", "$zarctan",
          // "$zcos", "$zcot", "$zcsc", "$zdate", "$zdateh", "$zdatetime",
          // "$zdatetimeh", "$zexp", "$zhex", "$zln", "$zlog", "$zpower", "$zsec",
          // "$zsin", "$zsqr", "$ztan", "$ztime", "$ztimeh", "$zboolean",
          // "$zconvert", "$zcrc", "$zcyc", "$zdascii", "$zdchar", "$zf",
          // "$ziswide", "$zlascii", "$zlchar", "$zname", "$zposition", "$zqascii",
          // "$zqchar", "$zsearch", "$zseek", "$zstrip", "$zwascii", "$zwchar",
          // "$zwidth", "$zwpack", "$zwbpack", "$zwunpack", "$zwbunpack", "$zzenkaku",
          // "$change", "$mv", "$mvat", "$mvfmt", "$mvfmts", "$mviconv",
          // "$mviconvs", "$mvinmat", "$mvlover", "$mvoconv", "$mvoconvs", "$mvraise",
          // "$mvtrans", "$mvv", "$mvname", "$zbitand", "$zbitcount", "$zbitfind",
          // "$zbitget", "$zbitlen", "$zbitnot", "$zbitor", "$zbitset", "$zbitstr",
          // "$zbitxor", "$zincrement", "$znext", "$zorder", "$zprevious", "$zsort",
          // "device", "$ecode", "$estack", "$etrap", "$halt", "$horolog",
          // "$io", "$job", "$key", "$namespace", "$principal", "$quit", "$roles",
          // "$storage", "$system", "$test", "$this", "$tlevel", "$username",
          // "$x", "$y", "$za", "$zb", "$zchild", "$zeof", "$zeos", "$zerror",
          // "$zhorolog", "$zio", "$zjob", "$zmode", "$znspace", "$zparent", "$zpi",
          // "$zpos", "$zreference", "$zstorage", "$ztimestamp", "$ztimezone",
          // "$ztrap", "$zversion"
 
          return {
            name: 'Caché Object Script',
            case_insensitive: true,
            aliases: [ "cls" ],
            keywords: COS_KEYWORDS,
            contains: [
              NUMBERS,
              STRINGS,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: "comment",
                begin: /;/,
                end: "$",
                relevance: 0
              },
              { // Functions and user-defined functions: write $ztime(60*60*3), $$myFunc(10), $$^Val(1)
                className: "built_in",
                begin: /(?:\$\$?|\.\.)\^?[a-zA-Z]+/
              },
              { // Macro command: quit $$$OK
                className: "built_in",
                begin: /\$\$\$[a-zA-Z]+/
              },
              { // Special (global) variables: write %request.Content; Built-in classes: %Library.Integer
                className: "built_in",
                begin: /%[a-z]+(?:\.[a-z]+)*/
              },
              { // Global variable: set ^globalName = 12 write ^globalName
                className: "symbol",
                begin: /\^%?[a-zA-Z][\w]*/
              },
              { // Some control constructions: do ##class(Package.ClassName).Method(), ##super()
                className: "keyword",
                begin: /##class|##super|#define|#dim/
              },
              // sub-languages: are not fully supported by hljs by 11/15/2015
              // left for the future implementation.
              {
                begin: /&sql\(/,
                end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                subLanguage: "sql"
              },
              {
                begin: /&(js|jscript|javascript)</,
                end: />/,
                excludeBegin: true,
                excludeEnd: true,
                subLanguage: "javascript"
              },
              {
                // this brakes first and last tag, but this is the only way to embed a valid html
                begin: /&html<\s*</,
                end: />\s*>/,
                subLanguage: "xml"
              }
            ]
          };
        }
 
        cos_1 = cos;
        return cos_1;
    }
 
    /*
    Language: C++
    Category: common, system
    Website: https://isocpp.org
    */
 
    var cpp_1;
    var hasRequiredCpp;
 
    function requireCpp () {
        if (hasRequiredCpp) return cpp_1;
        hasRequiredCpp = 1;
        /** @type LanguageFn */
        function cpp(hljs) {
          const regex = hljs.regex;
          // added for historic reasons because `hljs.C_LINE_COMMENT_MODE` does
          // not include such support nor can we be sure all the grammars depending
          // on it would desire this behavior
          const C_LINE_COMMENT_MODE = hljs.COMMENT('//', '$', { contains: [ { begin: /\\\n/ } ] });
          const DECLTYPE_AUTO_RE = 'decltype\\(auto\\)';
          const NAMESPACE_RE = '[a-zA-Z_]\\w*::';
          const TEMPLATE_ARGUMENT_RE = '<[^<>]+>';
          const FUNCTION_TYPE_RE = '(?!struct)('
            + DECLTYPE_AUTO_RE + '|'
            + regex.optional(NAMESPACE_RE)
            + '[a-zA-Z_]\\w*' + regex.optional(TEMPLATE_ARGUMENT_RE)
          + ')';
 
          const CPP_PRIMITIVE_TYPES = {
            className: 'type',
            begin: '\\b[a-z\\d_]*_t\\b'
          };
 
          // https://en.cppreference.com/w/cpp/language/escape
          // \\ \x \xFF \u2837 \u00323747 \374
          const CHARACTER_ESCAPES = '\\\\(x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4,8}|[0-7]{3}|\\S)';
          const STRINGS = {
            className: 'string',
            variants: [
              {
                begin: '(u8?|U|L)?"',
                end: '"',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                begin: '(u8?|U|L)?\'(' + CHARACTER_ESCAPES + '|.)',
                end: '\'',
                illegal: '.'
              },
              hljs.END_SAME_AS_BEGIN({
                begin: /(?:u8?|U|L)?R"([^()\\ ]{0,16})\(/,
                end: /\)([^()\\ ]{0,16})"/
              })
            ]
          };
 
          const NUMBERS = {
            className: 'number',
            variants: [
              { begin: '\\b(0b[01\']+)' },
              { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)((ll|LL|l|L)(u|U)?|(u|U)(ll|LL|l|L)?|f|F|b|B)' },
              { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
            ],
            relevance: 0
          };
 
          const PREPROCESSOR = {
            className: 'meta',
            begin: /#\s*[a-z]+\b/,
            end: /$/,
            keywords: { keyword:
                'if else elif endif define undef warning error line '
                + 'pragma _Pragma ifdef ifndef include' },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              hljs.inherit(STRINGS, { className: 'string' }),
              {
                className: 'string',
                begin: /<.*?>/
              },
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
 
          const TITLE_MODE = {
            className: 'title',
            begin: regex.optional(NAMESPACE_RE) + hljs.IDENT_RE,
            relevance: 0
          };
 
          const FUNCTION_TITLE = regex.optional(NAMESPACE_RE) + hljs.IDENT_RE + '\\s*\\(';
 
          // https://en.cppreference.com/w/cpp/keyword
          const RESERVED_KEYWORDS = [
            'alignas',
            'alignof',
            'and',
            'and_eq',
            'asm',
            'atomic_cancel',
            'atomic_commit',
            'atomic_noexcept',
            'auto',
            'bitand',
            'bitor',
            'break',
            'case',
            'catch',
            'class',
            'co_await',
            'co_return',
            'co_yield',
            'compl',
            'concept',
            'const_cast|10',
            'consteval',
            'constexpr',
            'constinit',
            'continue',
            'decltype',
            'default',
            'delete',
            'do',
            'dynamic_cast|10',
            'else',
            'enum',
            'explicit',
            'export',
            'extern',
            'false',
            'final',
            'for',
            'friend',
            'goto',
            'if',
            'import',
            'inline',
            'module',
            'mutable',
            'namespace',
            'new',
            'noexcept',
            'not',
            'not_eq',
            'nullptr',
            'operator',
            'or',
            'or_eq',
            'override',
            'private',
            'protected',
            'public',
            'reflexpr',
            'register',
            'reinterpret_cast|10',
            'requires',
            'return',
            'sizeof',
            'static_assert',
            'static_cast|10',
            'struct',
            'switch',
            'synchronized',
            'template',
            'this',
            'thread_local',
            'throw',
            'transaction_safe',
            'transaction_safe_dynamic',
            'true',
            'try',
            'typedef',
            'typeid',
            'typename',
            'union',
            'using',
            'virtual',
            'volatile',
            'while',
            'xor',
            'xor_eq'
          ];
 
          // https://en.cppreference.com/w/cpp/keyword
          const RESERVED_TYPES = [
            'bool',
            'char',
            'char16_t',
            'char32_t',
            'char8_t',
            'double',
            'float',
            'int',
            'long',
            'short',
            'void',
            'wchar_t',
            'unsigned',
            'signed',
            'const',
            'static'
          ];
 
          const TYPE_HINTS = [
            'any',
            'auto_ptr',
            'barrier',
            'binary_semaphore',
            'bitset',
            'complex',
            'condition_variable',
            'condition_variable_any',
            'counting_semaphore',
            'deque',
            'false_type',
            'future',
            'imaginary',
            'initializer_list',
            'istringstream',
            'jthread',
            'latch',
            'lock_guard',
            'multimap',
            'multiset',
            'mutex',
            'optional',
            'ostringstream',
            'packaged_task',
            'pair',
            'promise',
            'priority_queue',
            'queue',
            'recursive_mutex',
            'recursive_timed_mutex',
            'scoped_lock',
            'set',
            'shared_future',
            'shared_lock',
            'shared_mutex',
            'shared_timed_mutex',
            'shared_ptr',
            'stack',
            'string_view',
            'stringstream',
            'timed_mutex',
            'thread',
            'true_type',
            'tuple',
            'unique_lock',
            'unique_ptr',
            'unordered_map',
            'unordered_multimap',
            'unordered_multiset',
            'unordered_set',
            'variant',
            'vector',
            'weak_ptr',
            'wstring',
            'wstring_view'
          ];
 
          const FUNCTION_HINTS = [
            'abort',
            'abs',
            'acos',
            'apply',
            'as_const',
            'asin',
            'atan',
            'atan2',
            'calloc',
            'ceil',
            'cerr',
            'cin',
            'clog',
            'cos',
            'cosh',
            'cout',
            'declval',
            'endl',
            'exchange',
            'exit',
            'exp',
            'fabs',
            'floor',
            'fmod',
            'forward',
            'fprintf',
            'fputs',
            'free',
            'frexp',
            'fscanf',
            'future',
            'invoke',
            'isalnum',
            'isalpha',
            'iscntrl',
            'isdigit',
            'isgraph',
            'islower',
            'isprint',
            'ispunct',
            'isspace',
            'isupper',
            'isxdigit',
            'labs',
            'launder',
            'ldexp',
            'log',
            'log10',
            'make_pair',
            'make_shared',
            'make_shared_for_overwrite',
            'make_tuple',
            'make_unique',
            'malloc',
            'memchr',
            'memcmp',
            'memcpy',
            'memset',
            'modf',
            'move',
            'pow',
            'printf',
            'putchar',
            'puts',
            'realloc',
            'scanf',
            'sin',
            'sinh',
            'snprintf',
            'sprintf',
            'sqrt',
            'sscanf',
            'std',
            'stderr',
            'stdin',
            'stdout',
            'strcat',
            'strchr',
            'strcmp',
            'strcpy',
            'strcspn',
            'strlen',
            'strncat',
            'strncmp',
            'strncpy',
            'strpbrk',
            'strrchr',
            'strspn',
            'strstr',
            'swap',
            'tan',
            'tanh',
            'terminate',
            'to_underlying',
            'tolower',
            'toupper',
            'vfprintf',
            'visit',
            'vprintf',
            'vsprintf'
          ];
 
          const LITERALS = [
            'NULL',
            'false',
            'nullopt',
            'nullptr',
            'true'
          ];
 
          // https://en.cppreference.com/w/cpp/keyword
          const BUILT_IN = [ '_Pragma' ];
 
          const CPP_KEYWORDS = {
            type: RESERVED_TYPES,
            keyword: RESERVED_KEYWORDS,
            literal: LITERALS,
            built_in: BUILT_IN,
            _type_hints: TYPE_HINTS
          };
 
          const FUNCTION_DISPATCH = {
            className: 'function.dispatch',
            relevance: 0,
            keywords: {
              // Only for relevance, not highlighting.
              _hint: FUNCTION_HINTS },
            begin: regex.concat(
              /\b/,
              /(?!decltype)/,
              /(?!if)/,
              /(?!for)/,
              /(?!switch)/,
              /(?!while)/,
              hljs.IDENT_RE,
              regex.lookahead(/(<[^<>]+>|)\s*\(/))
          };
 
          const EXPRESSION_CONTAINS = [
            FUNCTION_DISPATCH,
            PREPROCESSOR,
            CPP_PRIMITIVE_TYPES,
            C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            NUMBERS,
            STRINGS
          ];
 
          const EXPRESSION_CONTEXT = {
            // This mode covers expression context where we can't expect a function
            // definition and shouldn't highlight anything that looks like one:
            // `return some()`, `else if()`, `(x*sum(1, 2))`
            variants: [
              {
                begin: /=/,
                end: /;/
              },
              {
                begin: /\(/,
                end: /\)/
              },
              {
                beginKeywords: 'new throw return else',
                end: /;/
              }
            ],
            keywords: CPP_KEYWORDS,
            contains: EXPRESSION_CONTAINS.concat([
              {
                begin: /\(/,
                end: /\)/,
                keywords: CPP_KEYWORDS,
                contains: EXPRESSION_CONTAINS.concat([ 'self' ]),
                relevance: 0
              }
            ]),
            relevance: 0
          };
 
          const FUNCTION_DECLARATION = {
            className: 'function',
            begin: '(' + FUNCTION_TYPE_RE + '[\\*&\\s]+)+' + FUNCTION_TITLE,
            returnBegin: true,
            end: /[{;=]/,
            excludeEnd: true,
            keywords: CPP_KEYWORDS,
            illegal: /[^\w\s\*&:<>.]/,
            contains: [
              { // to prevent it from being confused as the function title
                begin: DECLTYPE_AUTO_RE,
                keywords: CPP_KEYWORDS,
                relevance: 0
              },
              {
                begin: FUNCTION_TITLE,
                returnBegin: true,
                contains: [ TITLE_MODE ],
                relevance: 0
              },
              // needed because we do not have look-behind on the below rule
              // to prevent it from grabbing the final : in a :: pair
              {
                begin: /::/,
                relevance: 0
              },
              // initializers
              {
                begin: /:/,
                endsWithParent: true,
                contains: [
                  STRINGS,
                  NUMBERS
                ]
              },
              // allow for multiple declarations, e.g.:
              // extern void f(int), g(char);
              {
                relevance: 0,
                match: /,/
              },
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: CPP_KEYWORDS,
                relevance: 0,
                contains: [
                  C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  STRINGS,
                  NUMBERS,
                  CPP_PRIMITIVE_TYPES,
                  // Count matching parentheses.
                  {
                    begin: /\(/,
                    end: /\)/,
                    keywords: CPP_KEYWORDS,
                    relevance: 0,
                    contains: [
                      'self',
                      C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE,
                      STRINGS,
                      NUMBERS,
                      CPP_PRIMITIVE_TYPES
                    ]
                  }
                ]
              },
              CPP_PRIMITIVE_TYPES,
              C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              PREPROCESSOR
            ]
          };
 
          return {
            name: 'C++',
            aliases: [
              'cc',
              'c++',
              'h++',
              'hpp',
              'hh',
              'hxx',
              'cxx'
            ],
            keywords: CPP_KEYWORDS,
            illegal: '</',
            classNameAliases: { 'function.dispatch': 'built_in' },
            contains: [].concat(
              EXPRESSION_CONTEXT,
              FUNCTION_DECLARATION,
              FUNCTION_DISPATCH,
              EXPRESSION_CONTAINS,
              [
                PREPROCESSOR,
                { // containers: ie, `vector <int> rooms (9);`
                  begin: '\\b(deque|list|queue|priority_queue|pair|stack|vector|map|set|bitset|multiset|multimap|unordered_map|unordered_set|unordered_multiset|unordered_multimap|array|tuple|optional|variant|function)\\s*<(?!<)',
                  end: '>',
                  keywords: CPP_KEYWORDS,
                  contains: [
                    'self',
                    CPP_PRIMITIVE_TYPES
                  ]
                },
                {
                  begin: hljs.IDENT_RE + '::',
                  keywords: CPP_KEYWORDS
                },
                {
                  match: [
                    // extra complexity to deal with `enum class` and `enum struct`
                    /\b(?:enum(?:\s+(?:class|struct))?|class|struct|union)/,
                    /\s+/,
                    /\w+/
                  ],
                  className: {
                    1: 'keyword',
                    3: 'title.class'
                  }
                }
              ])
          };
        }
 
        cpp_1 = cpp;
        return cpp_1;
    }
 
    /*
    Language: crmsh
    Author: Kristoffer Gronlund <kgronlund@suse.com>
    Website: http://crmsh.github.io
    Description: Syntax Highlighting for the crmsh DSL
    Category: config
    */
 
    var crmsh_1;
    var hasRequiredCrmsh;
 
    function requireCrmsh () {
        if (hasRequiredCrmsh) return crmsh_1;
        hasRequiredCrmsh = 1;
        /** @type LanguageFn */
        function crmsh(hljs) {
          const RESOURCES = 'primitive rsc_template';
          const COMMANDS = 'group clone ms master location colocation order fencing_topology '
              + 'rsc_ticket acl_target acl_group user role '
              + 'tag xml';
          const PROPERTY_SETS = 'property rsc_defaults op_defaults';
          const KEYWORDS = 'params meta operations op rule attributes utilization';
          const OPERATORS = 'read write deny defined not_defined in_range date spec in '
              + 'ref reference attribute type xpath version and or lt gt tag '
              + 'lte gte eq ne \\';
          const TYPES = 'number string';
          const LITERALS = 'Master Started Slave Stopped start promote demote stop monitor true false';
 
          return {
            name: 'crmsh',
            aliases: [
              'crm',
              'pcmk'
            ],
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS + ' ' + OPERATORS + ' ' + TYPES,
              literal: LITERALS
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              {
                beginKeywords: 'node',
                starts: {
                  end: '\\s*([\\w_-]+:)?',
                  starts: {
                    className: 'title',
                    end: '\\s*[\\$\\w_][\\w_-]*'
                  }
                }
              },
              {
                beginKeywords: RESOURCES,
                starts: {
                  className: 'title',
                  end: '\\s*[\\$\\w_][\\w_-]*',
                  starts: { end: '\\s*@?[\\w_][\\w_\\.:-]*' }
                }
              },
              {
                begin: '\\b(' + COMMANDS.split(' ').join('|') + ')\\s+',
                keywords: COMMANDS,
                starts: {
                  className: 'title',
                  end: '[\\$\\w_][\\w_-]*'
                }
              },
              {
                beginKeywords: PROPERTY_SETS,
                starts: {
                  className: 'title',
                  end: '\\s*([\\w_-]+:)?'
                }
              },
              hljs.QUOTE_STRING_MODE,
              {
                className: 'meta',
                begin: '(ocf|systemd|service|lsb):[\\w_:-]+',
                relevance: 0
              },
              {
                className: 'number',
                begin: '\\b\\d+(\\.\\d+)?(ms|s|h|m)?',
                relevance: 0
              },
              {
                className: 'literal',
                begin: '[-]?(infinity|inf)',
                relevance: 0
              },
              {
                className: 'attr',
                begin: /([A-Za-z$_#][\w_-]+)=/,
                relevance: 0
              },
              {
                className: 'tag',
                begin: '</?',
                end: '/?>',
                relevance: 0
              }
            ]
          };
        }
 
        crmsh_1 = crmsh;
        return crmsh_1;
    }
 
    /*
    Language: Crystal
    Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
    Website: https://crystal-lang.org
    */
 
    var crystal_1;
    var hasRequiredCrystal;
 
    function requireCrystal () {
        if (hasRequiredCrystal) return crystal_1;
        hasRequiredCrystal = 1;
        /** @type LanguageFn */
        function crystal(hljs) {
          const INT_SUFFIX = '(_?[ui](8|16|32|64|128))?';
          const FLOAT_SUFFIX = '(_?f(32|64))?';
          const CRYSTAL_IDENT_RE = '[a-zA-Z_]\\w*[!?=]?';
          const CRYSTAL_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|[=!]~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~|]|//|//=|&[-+*]=?|&\\*\\*|\\[\\][=?]?';
          const CRYSTAL_PATH_RE = '[A-Za-z_]\\w*(::\\w+)*(\\?|!)?';
          const CRYSTAL_KEYWORDS = {
            $pattern: CRYSTAL_IDENT_RE,
            keyword:
              'abstract alias annotation as as? asm begin break case class def do else elsif end ensure enum extend for fun if '
              + 'include instance_sizeof is_a? lib macro module next nil? of out pointerof private protected rescue responds_to? '
              + 'return require select self sizeof struct super then type typeof union uninitialized unless until verbatim when while with yield '
              + '__DIR__ __END_LINE__ __FILE__ __LINE__',
            literal: 'false nil true'
          };
          const SUBST = {
            className: 'subst',
            begin: /#\{/,
            end: /\}/,
            keywords: CRYSTAL_KEYWORDS
          };
          // borrowed from Ruby
          const VARIABLE = {
            // negative-look forward attemps to prevent false matches like:
            // @ident@ or $ident$ that might indicate this is not ruby at all
            className: "variable",
            begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
          };
          const EXPANSION = {
            className: 'template-variable',
            variants: [
              {
                begin: '\\{\\{',
                end: '\\}\\}'
              },
              {
                begin: '\\{%',
                end: '%\\}'
              }
            ],
            keywords: CRYSTAL_KEYWORDS
          };
 
          function recursiveParen(begin, end) {
            const
                contains = [
                  {
                    begin: begin,
                    end: end
                  }
                ];
            contains[0].contains = contains;
            return contains;
          }
          const STRING = {
            className: 'string',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ],
            variants: [
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /"/,
                end: /"/
              },
              {
                begin: /`/,
                end: /`/
              },
              {
                begin: '%[Qwi]?\\(',
                end: '\\)',
                contains: recursiveParen('\\(', '\\)')
              },
              {
                begin: '%[Qwi]?\\[',
                end: '\\]',
                contains: recursiveParen('\\[', '\\]')
              },
              {
                begin: '%[Qwi]?\\{',
                end: /\}/,
                contains: recursiveParen(/\{/, /\}/)
              },
              {
                begin: '%[Qwi]?<',
                end: '>',
                contains: recursiveParen('<', '>')
              },
              {
                begin: '%[Qwi]?\\|',
                end: '\\|'
              },
              {
                begin: /<<-\w+$/,
                end: /^\s*\w+$/
              }
            ],
            relevance: 0
          };
          const Q_STRING = {
            className: 'string',
            variants: [
              {
                begin: '%q\\(',
                end: '\\)',
                contains: recursiveParen('\\(', '\\)')
              },
              {
                begin: '%q\\[',
                end: '\\]',
                contains: recursiveParen('\\[', '\\]')
              },
              {
                begin: '%q\\{',
                end: /\}/,
                contains: recursiveParen(/\{/, /\}/)
              },
              {
                begin: '%q<',
                end: '>',
                contains: recursiveParen('<', '>')
              },
              {
                begin: '%q\\|',
                end: '\\|'
              },
              {
                begin: /<<-'\w+'$/,
                end: /^\s*\w+$/
              }
            ],
            relevance: 0
          };
          const REGEXP = {
            begin: '(?!%\\})(' + hljs.RE_STARTERS_RE + '|\\n|\\b(case|if|select|unless|until|when|while)\\b)\\s*',
            keywords: 'case if select unless until when while',
            contains: [
              {
                className: 'regexp',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST
                ],
                variants: [
                  {
                    begin: '//[a-z]*',
                    relevance: 0
                  },
                  {
                    begin: '/(?!\\/)',
                    end: '/[a-z]*'
                  }
                ]
              }
            ],
            relevance: 0
          };
          const REGEXP2 = {
            className: 'regexp',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ],
            variants: [
              {
                begin: '%r\\(',
                end: '\\)',
                contains: recursiveParen('\\(', '\\)')
              },
              {
                begin: '%r\\[',
                end: '\\]',
                contains: recursiveParen('\\[', '\\]')
              },
              {
                begin: '%r\\{',
                end: /\}/,
                contains: recursiveParen(/\{/, /\}/)
              },
              {
                begin: '%r<',
                end: '>',
                contains: recursiveParen('<', '>')
              },
              {
                begin: '%r\\|',
                end: '\\|'
              }
            ],
            relevance: 0
          };
          const ATTRIBUTE = {
            className: 'meta',
            begin: '@\\[',
            end: '\\]',
            contains: [ hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }) ]
          };
          const CRYSTAL_DEFAULT_CONTAINS = [
            EXPANSION,
            STRING,
            Q_STRING,
            REGEXP2,
            REGEXP,
            ATTRIBUTE,
            VARIABLE,
            hljs.HASH_COMMENT_MODE,
            {
              className: 'class',
              beginKeywords: 'class module struct',
              end: '$|;',
              illegal: /=/,
              contains: [
                hljs.HASH_COMMENT_MODE,
                hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE }),
                { // relevance booster for inheritance
                  begin: '<' }
              ]
            },
            {
              className: 'class',
              beginKeywords: 'lib enum union',
              end: '$|;',
              illegal: /=/,
              contains: [
                hljs.HASH_COMMENT_MODE,
                hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
              ]
            },
            {
              beginKeywords: 'annotation',
              end: '$|;',
              illegal: /=/,
              contains: [
                hljs.HASH_COMMENT_MODE,
                hljs.inherit(hljs.TITLE_MODE, { begin: CRYSTAL_PATH_RE })
              ],
              relevance: 2
            },
            {
              className: 'function',
              beginKeywords: 'def',
              end: /\B\b/,
              contains: [
                hljs.inherit(hljs.TITLE_MODE, {
                  begin: CRYSTAL_METHOD_RE,
                  endsParent: true
                })
              ]
            },
            {
              className: 'function',
              beginKeywords: 'fun macro',
              end: /\B\b/,
              contains: [
                hljs.inherit(hljs.TITLE_MODE, {
                  begin: CRYSTAL_METHOD_RE,
                  endsParent: true
                })
              ],
              relevance: 2
            },
            {
              className: 'symbol',
              begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
              relevance: 0
            },
            {
              className: 'symbol',
              begin: ':',
              contains: [
                STRING,
                { begin: CRYSTAL_METHOD_RE }
              ],
              relevance: 0
            },
            {
              className: 'number',
              variants: [
                { begin: '\\b0b([01_]+)' + INT_SUFFIX },
                { begin: '\\b0o([0-7_]+)' + INT_SUFFIX },
                { begin: '\\b0x([A-Fa-f0-9_]+)' + INT_SUFFIX },
                { begin: '\\b([1-9][0-9_]*[0-9]|[0-9])(\\.[0-9][0-9_]*)?([eE]_?[-+]?[0-9_]*)?' + FLOAT_SUFFIX + '(?!_)' },
                { begin: '\\b([1-9][0-9_]*|0)' + INT_SUFFIX }
              ],
              relevance: 0
            }
          ];
          SUBST.contains = CRYSTAL_DEFAULT_CONTAINS;
          EXPANSION.contains = CRYSTAL_DEFAULT_CONTAINS.slice(1); // without EXPANSION
 
          return {
            name: 'Crystal',
            aliases: [ 'cr' ],
            keywords: CRYSTAL_KEYWORDS,
            contains: CRYSTAL_DEFAULT_CONTAINS
          };
        }
 
        crystal_1 = crystal;
        return crystal_1;
    }
 
    /*
    Language: C#
    Author: Jason Diamond <jason@diamond.name>
    Contributor: Nicolas LLOBERA <nllobera@gmail.com>, Pieter Vantorre <pietervantorre@gmail.com>, David Pine <david.pine@microsoft.com>
    Website: https://docs.microsoft.com/dotnet/csharp/
    Category: common
    */
 
    var csharp_1;
    var hasRequiredCsharp;
 
    function requireCsharp () {
        if (hasRequiredCsharp) return csharp_1;
        hasRequiredCsharp = 1;
        /** @type LanguageFn */
        function csharp(hljs) {
          const BUILT_IN_KEYWORDS = [
            'bool',
            'byte',
            'char',
            'decimal',
            'delegate',
            'double',
            'dynamic',
            'enum',
            'float',
            'int',
            'long',
            'nint',
            'nuint',
            'object',
            'sbyte',
            'short',
            'string',
            'ulong',
            'uint',
            'ushort'
          ];
          const FUNCTION_MODIFIERS = [
            'public',
            'private',
            'protected',
            'static',
            'internal',
            'protected',
            'abstract',
            'async',
            'extern',
            'override',
            'unsafe',
            'virtual',
            'new',
            'sealed',
            'partial'
          ];
          const LITERAL_KEYWORDS = [
            'default',
            'false',
            'null',
            'true'
          ];
          const NORMAL_KEYWORDS = [
            'abstract',
            'as',
            'base',
            'break',
            'case',
            'catch',
            'class',
            'const',
            'continue',
            'do',
            'else',
            'event',
            'explicit',
            'extern',
            'finally',
            'fixed',
            'for',
            'foreach',
            'goto',
            'if',
            'implicit',
            'in',
            'interface',
            'internal',
            'is',
            'lock',
            'namespace',
            'new',
            'operator',
            'out',
            'override',
            'params',
            'private',
            'protected',
            'public',
            'readonly',
            'record',
            'ref',
            'return',
            'scoped',
            'sealed',
            'sizeof',
            'stackalloc',
            'static',
            'struct',
            'switch',
            'this',
            'throw',
            'try',
            'typeof',
            'unchecked',
            'unsafe',
            'using',
            'virtual',
            'void',
            'volatile',
            'while'
          ];
          const CONTEXTUAL_KEYWORDS = [
            'add',
            'alias',
            'and',
            'ascending',
            'async',
            'await',
            'by',
            'descending',
            'equals',
            'from',
            'get',
            'global',
            'group',
            'init',
            'into',
            'join',
            'let',
            'nameof',
            'not',
            'notnull',
            'on',
            'or',
            'orderby',
            'partial',
            'remove',
            'select',
            'set',
            'unmanaged',
            'value|0',
            'var',
            'when',
            'where',
            'with',
            'yield'
          ];
 
          const KEYWORDS = {
            keyword: NORMAL_KEYWORDS.concat(CONTEXTUAL_KEYWORDS),
            built_in: BUILT_IN_KEYWORDS,
            literal: LITERAL_KEYWORDS
          };
          const TITLE_MODE = hljs.inherit(hljs.TITLE_MODE, { begin: '[a-zA-Z](\\.?\\w)*' });
          const NUMBERS = {
            className: 'number',
            variants: [
              { begin: '\\b(0b[01\']+)' },
              { begin: '(-?)\\b([\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)(u|U|l|L|ul|UL|f|F|b|B)' },
              { begin: '(-?)(\\b0[xX][a-fA-F0-9\']+|(\\b[\\d\']+(\\.[\\d\']*)?|\\.[\\d\']+)([eE][-+]?[\\d\']+)?)' }
            ],
            relevance: 0
          };
          const VERBATIM_STRING = {
            className: 'string',
            begin: '@"',
            end: '"',
            contains: [ { begin: '""' } ]
          };
          const VERBATIM_STRING_NO_LF = hljs.inherit(VERBATIM_STRING, { illegal: /\n/ });
          const SUBST = {
            className: 'subst',
            begin: /\{/,
            end: /\}/,
            keywords: KEYWORDS
          };
          const SUBST_NO_LF = hljs.inherit(SUBST, { illegal: /\n/ });
          const INTERPOLATED_STRING = {
            className: 'string',
            begin: /\$"/,
            end: '"',
            illegal: /\n/,
            contains: [
              { begin: /\{\{/ },
              { begin: /\}\}/ },
              hljs.BACKSLASH_ESCAPE,
              SUBST_NO_LF
            ]
          };
          const INTERPOLATED_VERBATIM_STRING = {
            className: 'string',
            begin: /\$@"/,
            end: '"',
            contains: [
              { begin: /\{\{/ },
              { begin: /\}\}/ },
              { begin: '""' },
              SUBST
            ]
          };
          const INTERPOLATED_VERBATIM_STRING_NO_LF = hljs.inherit(INTERPOLATED_VERBATIM_STRING, {
            illegal: /\n/,
            contains: [
              { begin: /\{\{/ },
              { begin: /\}\}/ },
              { begin: '""' },
              SUBST_NO_LF
            ]
          });
          SUBST.contains = [
            INTERPOLATED_VERBATIM_STRING,
            INTERPOLATED_STRING,
            VERBATIM_STRING,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            NUMBERS,
            hljs.C_BLOCK_COMMENT_MODE
          ];
          SUBST_NO_LF.contains = [
            INTERPOLATED_VERBATIM_STRING_NO_LF,
            INTERPOLATED_STRING,
            VERBATIM_STRING_NO_LF,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            NUMBERS,
            hljs.inherit(hljs.C_BLOCK_COMMENT_MODE, { illegal: /\n/ })
          ];
          const STRING = { variants: [
            INTERPOLATED_VERBATIM_STRING,
            INTERPOLATED_STRING,
            VERBATIM_STRING,
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ] };
 
          const GENERIC_MODIFIER = {
            begin: "<",
            end: ">",
            contains: [
              { beginKeywords: "in out" },
              TITLE_MODE
            ]
          };
          const TYPE_IDENT_RE = hljs.IDENT_RE + '(<' + hljs.IDENT_RE + '(\\s*,\\s*' + hljs.IDENT_RE + ')*>)?(\\[\\])?';
          const AT_IDENTIFIER = {
            // prevents expressions like `@class` from incorrect flagging
            // `class` as a keyword
            begin: "@" + hljs.IDENT_RE,
            relevance: 0
          };
 
          return {
            name: 'C#',
            aliases: [
              'cs',
              'c#'
            ],
            keywords: KEYWORDS,
            illegal: /::/,
            contains: [
              hljs.COMMENT(
                '///',
                '$',
                {
                  returnBegin: true,
                  contains: [
                    {
                      className: 'doctag',
                      variants: [
                        {
                          begin: '///',
                          relevance: 0
                        },
                        { begin: '<!--|-->' },
                        {
                          begin: '</?',
                          end: '>'
                        }
                      ]
                    }
                  ]
                }
              ),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'meta',
                begin: '#',
                end: '$',
                keywords: { keyword: 'if else elif endif define undef warning error line region endregion pragma checksum' }
              },
              STRING,
              NUMBERS,
              {
                beginKeywords: 'class interface',
                relevance: 0,
                end: /[{;=]/,
                illegal: /[^\s:,]/,
                contains: [
                  { beginKeywords: "where class" },
                  TITLE_MODE,
                  GENERIC_MODIFIER,
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              {
                beginKeywords: 'namespace',
                relevance: 0,
                end: /[{;=]/,
                illegal: /[^\s:]/,
                contains: [
                  TITLE_MODE,
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              {
                beginKeywords: 'record',
                relevance: 0,
                end: /[{;=]/,
                illegal: /[^\s:]/,
                contains: [
                  TITLE_MODE,
                  GENERIC_MODIFIER,
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              {
                // [Attributes("")]
                className: 'meta',
                begin: '^\\s*\\[(?=[\\w])',
                excludeBegin: true,
                end: '\\]',
                excludeEnd: true,
                contains: [
                  {
                    className: 'string',
                    begin: /"/,
                    end: /"/
                  }
                ]
              },
              {
                // Expression keywords prevent 'keyword Name(...)' from being
                // recognized as a function definition
                beginKeywords: 'new return throw await else',
                relevance: 0
              },
              {
                className: 'function',
                begin: '(' + TYPE_IDENT_RE + '\\s+)+' + hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
                returnBegin: true,
                end: /\s*[{;=]/,
                excludeEnd: true,
                keywords: KEYWORDS,
                contains: [
                  // prevents these from being highlighted `title`
                  {
                    beginKeywords: FUNCTION_MODIFIERS.join(" "),
                    relevance: 0
                  },
                  {
                    begin: hljs.IDENT_RE + '\\s*(<[^=]+>\\s*)?\\(',
                    returnBegin: true,
                    contains: [
                      hljs.TITLE_MODE,
                      GENERIC_MODIFIER
                    ],
                    relevance: 0
                  },
                  { match: /\(\)/ },
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: true,
                    excludeEnd: true,
                    keywords: KEYWORDS,
                    relevance: 0,
                    contains: [
                      STRING,
                      NUMBERS,
                      hljs.C_BLOCK_COMMENT_MODE
                    ]
                  },
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              AT_IDENTIFIER
            ]
          };
        }
 
        csharp_1 = csharp;
        return csharp_1;
    }
 
    /*
    Language: CSP
    Description: Content Security Policy definition highlighting
    Author: Taras <oxdef@oxdef.info>
    Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
 
    vim: ts=2 sw=2 st=2
    */
 
    var csp_1;
    var hasRequiredCsp;
 
    function requireCsp () {
        if (hasRequiredCsp) return csp_1;
        hasRequiredCsp = 1;
        /** @type LanguageFn */
        function csp(hljs) {
          const KEYWORDS = [
            "base-uri",
            "child-src",
            "connect-src",
            "default-src",
            "font-src",
            "form-action",
            "frame-ancestors",
            "frame-src",
            "img-src",
            "manifest-src",
            "media-src",
            "object-src",
            "plugin-types",
            "report-uri",
            "sandbox",
            "script-src",
            "style-src",
            "trusted-types",
            "unsafe-hashes",
            "worker-src"
          ];
          return {
            name: 'CSP',
            case_insensitive: false,
            keywords: {
              $pattern: '[a-zA-Z][a-zA-Z0-9_-]*',
              keyword: KEYWORDS
            },
            contains: [
              {
                className: 'string',
                begin: "'",
                end: "'"
              },
              {
                className: 'attribute',
                begin: '^Content',
                end: ':',
                excludeEnd: true
              }
            ]
          };
        }
 
        csp_1 = csp;
        return csp_1;
    }
 
    var css_1;
    var hasRequiredCss;
 
    function requireCss () {
        if (hasRequiredCss) return css_1;
        hasRequiredCss = 1;
        const MODES = (hljs) => {
          return {
            IMPORTANT: {
              scope: 'meta',
              begin: '!important'
            },
            BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
            HEXCOLOR: {
              scope: 'number',
              begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
            },
            FUNCTION_DISPATCH: {
              className: "built_in",
              begin: /[\w-]+(?=\()/
            },
            ATTRIBUTE_SELECTOR_MODE: {
              scope: 'selector-attr',
              begin: /\[/,
              end: /\]/,
              illegal: '$',
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            },
            CSS_NUMBER_MODE: {
              scope: 'number',
              begin: hljs.NUMBER_RE + '(' +
                '%|em|ex|ch|rem' +
                '|vw|vh|vmin|vmax' +
                '|cm|mm|in|pt|pc|px' +
                '|deg|grad|rad|turn' +
                '|s|ms' +
                '|Hz|kHz' +
                '|dpi|dpcm|dppx' +
                ')?',
              relevance: 0
            },
            CSS_VARIABLE: {
              className: "attr",
              begin: /--[A-Za-z][A-Za-z0-9_-]*/
            }
          };
        };
 
        const TAGS = [
          'a',
          'abbr',
          'address',
          'article',
          'aside',
          'audio',
          'b',
          'blockquote',
          'body',
          'button',
          'canvas',
          'caption',
          'cite',
          'code',
          'dd',
          'del',
          'details',
          'dfn',
          'div',
          'dl',
          'dt',
          'em',
          'fieldset',
          'figcaption',
          'figure',
          'footer',
          'form',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'header',
          'hgroup',
          'html',
          'i',
          'iframe',
          'img',
          'input',
          'ins',
          'kbd',
          'label',
          'legend',
          'li',
          'main',
          'mark',
          'menu',
          'nav',
          'object',
          'ol',
          'p',
          'q',
          'quote',
          'samp',
          'section',
          'span',
          'strong',
          'summary',
          'sup',
          'table',
          'tbody',
          'td',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'time',
          'tr',
          'ul',
          'var',
          'video'
        ];
 
        const MEDIA_FEATURES = [
          'any-hover',
          'any-pointer',
          'aspect-ratio',
          'color',
          'color-gamut',
          'color-index',
          'device-aspect-ratio',
          'device-height',
          'device-width',
          'display-mode',
          'forced-colors',
          'grid',
          'height',
          'hover',
          'inverted-colors',
          'monochrome',
          'orientation',
          'overflow-block',
          'overflow-inline',
          'pointer',
          'prefers-color-scheme',
          'prefers-contrast',
          'prefers-reduced-motion',
          'prefers-reduced-transparency',
          'resolution',
          'scan',
          'scripting',
          'update',
          'width',
          // TODO: find a better solution?
          'min-width',
          'max-width',
          'min-height',
          'max-height'
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
        const PSEUDO_CLASSES = [
          'active',
          'any-link',
          'blank',
          'checked',
          'current',
          'default',
          'defined',
          'dir', // dir()
          'disabled',
          'drop',
          'empty',
          'enabled',
          'first',
          'first-child',
          'first-of-type',
          'fullscreen',
          'future',
          'focus',
          'focus-visible',
          'focus-within',
          'has', // has()
          'host', // host or host()
          'host-context', // host-context()
          'hover',
          'indeterminate',
          'in-range',
          'invalid',
          'is', // is()
          'lang', // lang()
          'last-child',
          'last-of-type',
          'left',
          'link',
          'local-link',
          'not', // not()
          'nth-child', // nth-child()
          'nth-col', // nth-col()
          'nth-last-child', // nth-last-child()
          'nth-last-col', // nth-last-col()
          'nth-last-of-type', //nth-last-of-type()
          'nth-of-type', //nth-of-type()
          'only-child',
          'only-of-type',
          'optional',
          'out-of-range',
          'past',
          'placeholder-shown',
          'read-only',
          'read-write',
          'required',
          'right',
          'root',
          'scope',
          'target',
          'target-within',
          'user-invalid',
          'valid',
          'visited',
          'where' // where()
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
        const PSEUDO_ELEMENTS = [
          'after',
          'backdrop',
          'before',
          'cue',
          'cue-region',
          'first-letter',
          'first-line',
          'grammar-error',
          'marker',
          'part',
          'placeholder',
          'selection',
          'slotted',
          'spelling-error'
        ];
 
        const ATTRIBUTES = [
          'align-content',
          'align-items',
          'align-self',
          'all',
          'animation',
          'animation-delay',
          'animation-direction',
          'animation-duration',
          'animation-fill-mode',
          'animation-iteration-count',
          'animation-name',
          'animation-play-state',
          'animation-timing-function',
          'backface-visibility',
          'background',
          'background-attachment',
          'background-blend-mode',
          'background-clip',
          'background-color',
          'background-image',
          'background-origin',
          'background-position',
          'background-repeat',
          'background-size',
          'block-size',
          'border',
          'border-block',
          'border-block-color',
          'border-block-end',
          'border-block-end-color',
          'border-block-end-style',
          'border-block-end-width',
          'border-block-start',
          'border-block-start-color',
          'border-block-start-style',
          'border-block-start-width',
          'border-block-style',
          'border-block-width',
          'border-bottom',
          'border-bottom-color',
          'border-bottom-left-radius',
          'border-bottom-right-radius',
          'border-bottom-style',
          'border-bottom-width',
          'border-collapse',
          'border-color',
          'border-image',
          'border-image-outset',
          'border-image-repeat',
          'border-image-slice',
          'border-image-source',
          'border-image-width',
          'border-inline',
          'border-inline-color',
          'border-inline-end',
          'border-inline-end-color',
          'border-inline-end-style',
          'border-inline-end-width',
          'border-inline-start',
          'border-inline-start-color',
          'border-inline-start-style',
          'border-inline-start-width',
          'border-inline-style',
          'border-inline-width',
          'border-left',
          'border-left-color',
          'border-left-style',
          'border-left-width',
          'border-radius',
          'border-right',
          'border-right-color',
          'border-right-style',
          'border-right-width',
          'border-spacing',
          'border-style',
          'border-top',
          'border-top-color',
          'border-top-left-radius',
          'border-top-right-radius',
          'border-top-style',
          'border-top-width',
          'border-width',
          'bottom',
          'box-decoration-break',
          'box-shadow',
          'box-sizing',
          'break-after',
          'break-before',
          'break-inside',
          'caption-side',
          'caret-color',
          'clear',
          'clip',
          'clip-path',
          'clip-rule',
          'color',
          'column-count',
          'column-fill',
          'column-gap',
          'column-rule',
          'column-rule-color',
          'column-rule-style',
          'column-rule-width',
          'column-span',
          'column-width',
          'columns',
          'contain',
          'content',
          'content-visibility',
          'counter-increment',
          'counter-reset',
          'cue',
          'cue-after',
          'cue-before',
          'cursor',
          'direction',
          'display',
          'empty-cells',
          'filter',
          'flex',
          'flex-basis',
          'flex-direction',
          'flex-flow',
          'flex-grow',
          'flex-shrink',
          'flex-wrap',
          'float',
          'flow',
          'font',
          'font-display',
          'font-family',
          'font-feature-settings',
          'font-kerning',
          'font-language-override',
          'font-size',
          'font-size-adjust',
          'font-smoothing',
          'font-stretch',
          'font-style',
          'font-synthesis',
          'font-variant',
          'font-variant-caps',
          'font-variant-east-asian',
          'font-variant-ligatures',
          'font-variant-numeric',
          'font-variant-position',
          'font-variation-settings',
          'font-weight',
          'gap',
          'glyph-orientation-vertical',
          'grid',
          'grid-area',
          'grid-auto-columns',
          'grid-auto-flow',
          'grid-auto-rows',
          'grid-column',
          'grid-column-end',
          'grid-column-start',
          'grid-gap',
          'grid-row',
          'grid-row-end',
          'grid-row-start',
          'grid-template',
          'grid-template-areas',
          'grid-template-columns',
          'grid-template-rows',
          'hanging-punctuation',
          'height',
          'hyphens',
          'icon',
          'image-orientation',
          'image-rendering',
          'image-resolution',
          'ime-mode',
          'inline-size',
          'isolation',
          'justify-content',
          'left',
          'letter-spacing',
          'line-break',
          'line-height',
          'list-style',
          'list-style-image',
          'list-style-position',
          'list-style-type',
          'margin',
          'margin-block',
          'margin-block-end',
          'margin-block-start',
          'margin-bottom',
          'margin-inline',
          'margin-inline-end',
          'margin-inline-start',
          'margin-left',
          'margin-right',
          'margin-top',
          'marks',
          'mask',
          'mask-border',
          'mask-border-mode',
          'mask-border-outset',
          'mask-border-repeat',
          'mask-border-slice',
          'mask-border-source',
          'mask-border-width',
          'mask-clip',
          'mask-composite',
          'mask-image',
          'mask-mode',
          'mask-origin',
          'mask-position',
          'mask-repeat',
          'mask-size',
          'mask-type',
          'max-block-size',
          'max-height',
          'max-inline-size',
          'max-width',
          'min-block-size',
          'min-height',
          'min-inline-size',
          'min-width',
          'mix-blend-mode',
          'nav-down',
          'nav-index',
          'nav-left',
          'nav-right',
          'nav-up',
          'none',
          'normal',
          'object-fit',
          'object-position',
          'opacity',
          'order',
          'orphans',
          'outline',
          'outline-color',
          'outline-offset',
          'outline-style',
          'outline-width',
          'overflow',
          'overflow-wrap',
          'overflow-x',
          'overflow-y',
          'padding',
          'padding-block',
          'padding-block-end',
          'padding-block-start',
          'padding-bottom',
          'padding-inline',
          'padding-inline-end',
          'padding-inline-start',
          'padding-left',
          'padding-right',
          'padding-top',
          'page-break-after',
          'page-break-before',
          'page-break-inside',
          'pause',
          'pause-after',
          'pause-before',
          'perspective',
          'perspective-origin',
          'pointer-events',
          'position',
          'quotes',
          'resize',
          'rest',
          'rest-after',
          'rest-before',
          'right',
          'row-gap',
          'scroll-margin',
          'scroll-margin-block',
          'scroll-margin-block-end',
          'scroll-margin-block-start',
          'scroll-margin-bottom',
          'scroll-margin-inline',
          'scroll-margin-inline-end',
          'scroll-margin-inline-start',
          'scroll-margin-left',
          'scroll-margin-right',
          'scroll-margin-top',
          'scroll-padding',
          'scroll-padding-block',
          'scroll-padding-block-end',
          'scroll-padding-block-start',
          'scroll-padding-bottom',
          'scroll-padding-inline',
          'scroll-padding-inline-end',
          'scroll-padding-inline-start',
          'scroll-padding-left',
          'scroll-padding-right',
          'scroll-padding-top',
          'scroll-snap-align',
          'scroll-snap-stop',
          'scroll-snap-type',
          'scrollbar-color',
          'scrollbar-gutter',
          'scrollbar-width',
          'shape-image-threshold',
          'shape-margin',
          'shape-outside',
          'speak',
          'speak-as',
          'src', // @font-face
          'tab-size',
          'table-layout',
          'text-align',
          'text-align-all',
          'text-align-last',
          'text-combine-upright',
          'text-decoration',
          'text-decoration-color',
          'text-decoration-line',
          'text-decoration-style',
          'text-emphasis',
          'text-emphasis-color',
          'text-emphasis-position',
          'text-emphasis-style',
          'text-indent',
          'text-justify',
          'text-orientation',
          'text-overflow',
          'text-rendering',
          'text-shadow',
          'text-transform',
          'text-underline-position',
          'top',
          'transform',
          'transform-box',
          'transform-origin',
          'transform-style',
          'transition',
          'transition-delay',
          'transition-duration',
          'transition-property',
          'transition-timing-function',
          'unicode-bidi',
          'vertical-align',
          'visibility',
          'voice-balance',
          'voice-duration',
          'voice-family',
          'voice-pitch',
          'voice-range',
          'voice-rate',
          'voice-stress',
          'voice-volume',
          'white-space',
          'widows',
          'width',
          'will-change',
          'word-break',
          'word-spacing',
          'word-wrap',
          'writing-mode',
          'z-index'
          // reverse makes sure longer attributes `font-weight` are matched fully
          // instead of getting false positives on say `font`
        ].reverse();
 
        /*
        Language: CSS
        Category: common, css, web
        Website: https://developer.mozilla.org/en-US/docs/Web/CSS
        */
 
        /** @type LanguageFn */
        function css(hljs) {
          const regex = hljs.regex;
          const modes = MODES(hljs);
          const VENDOR_PREFIX = { begin: /-(webkit|moz|ms|o)-(?=[a-z])/ };
          const AT_MODIFIERS = "and or not only";
          const AT_PROPERTY_RE = /@-?\w[\w]*(-\w+)*/; // @-webkit-keyframes
          const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
          const STRINGS = [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ];
 
          return {
            name: 'CSS',
            case_insensitive: true,
            illegal: /[=|'\$]/,
            keywords: { keyframePosition: "from to" },
            classNameAliases: {
              // for visual continuity with `tag {}` and because we
              // don't have a great class for this?
              keyframePosition: "selector-tag" },
            contains: [
              modes.BLOCK_COMMENT,
              VENDOR_PREFIX,
              // to recognize keyframe 40% etc which are outside the scope of our
              // attribute value mode
              modes.CSS_NUMBER_MODE,
              {
                className: 'selector-id',
                begin: /#[A-Za-z0-9_-]+/,
                relevance: 0
              },
              {
                className: 'selector-class',
                begin: '\\.' + IDENT_RE,
                relevance: 0
              },
              modes.ATTRIBUTE_SELECTOR_MODE,
              {
                className: 'selector-pseudo',
                variants: [
                  { begin: ':(' + PSEUDO_CLASSES.join('|') + ')' },
                  { begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' }
                ]
              },
              // we may actually need this (12/2020)
              // { // pseudo-selector params
              //   begin: /\(/,
              //   end: /\)/,
              //   contains: [ hljs.CSS_NUMBER_MODE ]
              // },
              modes.CSS_VARIABLE,
              {
                className: 'attribute',
                begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
              },
              // attribute values
              {
                begin: /:/,
                end: /[;}{]/,
                contains: [
                  modes.BLOCK_COMMENT,
                  modes.HEXCOLOR,
                  modes.IMPORTANT,
                  modes.CSS_NUMBER_MODE,
                  ...STRINGS,
                  // needed to highlight these as strings and to avoid issues with
                  // illegal characters that might be inside urls that would tigger the
                  // languages illegal stack
                  {
                    begin: /(url|data-uri)\(/,
                    end: /\)/,
                    relevance: 0, // from keywords
                    keywords: { built_in: "url data-uri" },
                    contains: [
                      ...STRINGS,
                      {
                        className: "string",
                        // any character other than `)` as in `url()` will be the start
                        // of a string, which ends with `)` (from the parent mode)
                        begin: /[^)]/,
                        endsWithParent: true,
                        excludeEnd: true
                      }
                    ]
                  },
                  modes.FUNCTION_DISPATCH
                ]
              },
              {
                begin: regex.lookahead(/@/),
                end: '[{;]',
                relevance: 0,
                illegal: /:/, // break on Less variables @var: ...
                contains: [
                  {
                    className: 'keyword',
                    begin: AT_PROPERTY_RE
                  },
                  {
                    begin: /\s/,
                    endsWithParent: true,
                    excludeEnd: true,
                    relevance: 0,
                    keywords: {
                      $pattern: /[a-z-]+/,
                      keyword: AT_MODIFIERS,
                      attribute: MEDIA_FEATURES.join(" ")
                    },
                    contains: [
                      {
                        begin: /[a-z-]+(?=:)/,
                        className: "attribute"
                      },
                      ...STRINGS,
                      modes.CSS_NUMBER_MODE
                    ]
                  }
                ]
              },
              {
                className: 'selector-tag',
                begin: '\\b(' + TAGS.join('|') + ')\\b'
              }
            ]
          };
        }
 
        css_1 = css;
        return css_1;
    }
 
    /*
    Language: D
    Author: Aleksandar Ruzicic <aleksandar@ruzicic.info>
    Description: D is a language with C-like syntax and static typing. It pragmatically combines efficiency, control, and modeling power, with safety and programmer productivity.
    Version: 1.0a
    Website: https://dlang.org
    Date: 2012-04-08
    */
 
    var d_1;
    var hasRequiredD;
 
    function requireD () {
        if (hasRequiredD) return d_1;
        hasRequiredD = 1;
        /**
         * Known issues:
         *
         * - invalid hex string literals will be recognized as a double quoted strings
         *   but 'x' at the beginning of string will not be matched
         *
         * - delimited string literals are not checked for matching end delimiter
         *   (not possible to do with js regexp)
         *
         * - content of token string is colored as a string (i.e. no keyword coloring inside a token string)
         *   also, content of token string is not validated to contain only valid D tokens
         *
         * - special token sequence rule is not strictly following D grammar (anything following #line
         *   up to the end of line is matched as special token sequence)
         */
 
        /** @type LanguageFn */
        function d(hljs) {
          /**
           * Language keywords
           *
           * @type {Object}
           */
          const D_KEYWORDS = {
            $pattern: hljs.UNDERSCORE_IDENT_RE,
            keyword:
              'abstract alias align asm assert auto body break byte case cast catch class '
              + 'const continue debug default delete deprecated do else enum export extern final '
              + 'finally for foreach foreach_reverse|10 goto if immutable import in inout int '
              + 'interface invariant is lazy macro mixin module new nothrow out override package '
              + 'pragma private protected public pure ref return scope shared static struct '
              + 'super switch synchronized template this throw try typedef typeid typeof union '
              + 'unittest version void volatile while with __FILE__ __LINE__ __gshared|10 '
              + '__thread __traits __DATE__ __EOF__ __TIME__ __TIMESTAMP__ __VENDOR__ __VERSION__',
            built_in:
              'bool cdouble cent cfloat char creal dchar delegate double dstring float function '
              + 'idouble ifloat ireal long real short string ubyte ucent uint ulong ushort wchar '
              + 'wstring',
            literal:
              'false null true'
          };
 
          /**
           * Number literal regexps
           *
           * @type {String}
           */
          const decimal_integer_re = '(0|[1-9][\\d_]*)';
          const decimal_integer_nosus_re = '(0|[1-9][\\d_]*|\\d[\\d_]*|[\\d_]+?\\d)';
          const binary_integer_re = '0[bB][01_]+';
          const hexadecimal_digits_re = '([\\da-fA-F][\\da-fA-F_]*|_[\\da-fA-F][\\da-fA-F_]*)';
          const hexadecimal_integer_re = '0[xX]' + hexadecimal_digits_re;
 
          const decimal_exponent_re = '([eE][+-]?' + decimal_integer_nosus_re + ')';
          const decimal_float_re = '(' + decimal_integer_nosus_re + '(\\.\\d*|' + decimal_exponent_re + ')|'
                        + '\\d+\\.' + decimal_integer_nosus_re + '|'
                        + '\\.' + decimal_integer_re + decimal_exponent_re + '?'
                      + ')';
          const hexadecimal_float_re = '(0[xX]('
                          + hexadecimal_digits_re + '\\.' + hexadecimal_digits_re + '|'
                          + '\\.?' + hexadecimal_digits_re
                         + ')[pP][+-]?' + decimal_integer_nosus_re + ')';
 
          const integer_re = '('
              + decimal_integer_re + '|'
              + binary_integer_re + '|'
               + hexadecimal_integer_re
            + ')';
 
          const float_re = '('
              + hexadecimal_float_re + '|'
              + decimal_float_re
            + ')';
 
          /**
           * Escape sequence supported in D string and character literals
           *
           * @type {String}
           */
          const escape_sequence_re = '\\\\('
                      + '[\'"\\?\\\\abfnrtv]|' // common escapes
                      + 'u[\\dA-Fa-f]{4}|' // four hex digit unicode codepoint
                      + '[0-7]{1,3}|' // one to three octal digit ascii char code
                      + 'x[\\dA-Fa-f]{2}|' // two hex digit ascii char code
                      + 'U[\\dA-Fa-f]{8}' // eight hex digit unicode codepoint
                      + ')|'
                      + '&[a-zA-Z\\d]{2,};'; // named character entity
 
          /**
           * D integer number literals
           *
           * @type {Object}
           */
          const D_INTEGER_MODE = {
            className: 'number',
            begin: '\\b' + integer_re + '(L|u|U|Lu|LU|uL|UL)?',
            relevance: 0
          };
 
          /**
           * [D_FLOAT_MODE description]
           * @type {Object}
           */
          const D_FLOAT_MODE = {
            className: 'number',
            begin: '\\b('
                + float_re + '([fF]|L|i|[fF]i|Li)?|'
                + integer_re + '(i|[fF]i|Li)'
              + ')',
            relevance: 0
          };
 
          /**
           * D character literal
           *
           * @type {Object}
           */
          const D_CHARACTER_MODE = {
            className: 'string',
            begin: '\'(' + escape_sequence_re + '|.)',
            end: '\'',
            illegal: '.'
          };
 
          /**
           * D string escape sequence
           *
           * @type {Object}
           */
          const D_ESCAPE_SEQUENCE = {
            begin: escape_sequence_re,
            relevance: 0
          };
 
          /**
           * D double quoted string literal
           *
           * @type {Object}
           */
          const D_STRING_MODE = {
            className: 'string',
            begin: '"',
            contains: [ D_ESCAPE_SEQUENCE ],
            end: '"[cwd]?'
          };
 
          /**
           * D wysiwyg and delimited string literals
           *
           * @type {Object}
           */
          const D_WYSIWYG_DELIMITED_STRING_MODE = {
            className: 'string',
            begin: '[rq]"',
            end: '"[cwd]?',
            relevance: 5
          };
 
          /**
           * D alternate wysiwyg string literal
           *
           * @type {Object}
           */
          const D_ALTERNATE_WYSIWYG_STRING_MODE = {
            className: 'string',
            begin: '`',
            end: '`[cwd]?'
          };
 
          /**
           * D hexadecimal string literal
           *
           * @type {Object}
           */
          const D_HEX_STRING_MODE = {
            className: 'string',
            begin: 'x"[\\da-fA-F\\s\\n\\r]*"[cwd]?',
            relevance: 10
          };
 
          /**
           * D delimited string literal
           *
           * @type {Object}
           */
          const D_TOKEN_STRING_MODE = {
            className: 'string',
            begin: 'q"\\{',
            end: '\\}"'
          };
 
          /**
           * Hashbang support
           *
           * @type {Object}
           */
          const D_HASHBANG_MODE = {
            className: 'meta',
            begin: '^#!',
            end: '$',
            relevance: 5
          };
 
          /**
           * D special token sequence
           *
           * @type {Object}
           */
          const D_SPECIAL_TOKEN_SEQUENCE_MODE = {
            className: 'meta',
            begin: '#(line)',
            end: '$',
            relevance: 5
          };
 
          /**
           * D attributes
           *
           * @type {Object}
           */
          const D_ATTRIBUTE_MODE = {
            className: 'keyword',
            begin: '@[a-zA-Z_][a-zA-Z_\\d]*'
          };
 
          /**
           * D nesting comment
           *
           * @type {Object}
           */
          const D_NESTING_COMMENT_MODE = hljs.COMMENT(
            '\\/\\+',
            '\\+\\/',
            {
              contains: [ 'self' ],
              relevance: 10
            }
          );
 
          return {
            name: 'D',
            keywords: D_KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              D_NESTING_COMMENT_MODE,
              D_HEX_STRING_MODE,
              D_STRING_MODE,
              D_WYSIWYG_DELIMITED_STRING_MODE,
              D_ALTERNATE_WYSIWYG_STRING_MODE,
              D_TOKEN_STRING_MODE,
              D_FLOAT_MODE,
              D_INTEGER_MODE,
              D_CHARACTER_MODE,
              D_HASHBANG_MODE,
              D_SPECIAL_TOKEN_SEQUENCE_MODE,
              D_ATTRIBUTE_MODE
            ]
          };
        }
 
        d_1 = d;
        return d_1;
    }
 
    /*
    Language: Markdown
    Requires: xml.js
    Author: John Crepezzi <john.crepezzi@gmail.com>
    Website: https://daringfireball.net/projects/markdown/
    Category: common, markup
    */
 
    var markdown_1;
    var hasRequiredMarkdown;
 
    function requireMarkdown () {
        if (hasRequiredMarkdown) return markdown_1;
        hasRequiredMarkdown = 1;
        function markdown(hljs) {
          const regex = hljs.regex;
          const INLINE_HTML = {
            begin: /<\/?[A-Za-z_]/,
            end: '>',
            subLanguage: 'xml',
            relevance: 0
          };
          const HORIZONTAL_RULE = {
            begin: '^[-\\*]{3,}',
            end: '$'
          };
          const CODE = {
            className: 'code',
            variants: [
              // TODO: fix to allow these to work with sublanguage also
              { begin: '(`{3,})[^`](.|\\n)*?\\1`*[ ]*' },
              { begin: '(~{3,})[^~](.|\\n)*?\\1~*[ ]*' },
              // needed to allow markdown as a sublanguage to work
              {
                begin: '```',
                end: '```+[ ]*$'
              },
              {
                begin: '~~~',
                end: '~~~+[ ]*$'
              },
              { begin: '`.+?`' },
              {
                begin: '(?=^( {4}|\\t))',
                // use contains to gobble up multiple lines to allow the block to be whatever size
                // but only have a single open/close tag vs one per line
                contains: [
                  {
                    begin: '^( {4}|\\t)',
                    end: '(\\n)$'
                  }
                ],
                relevance: 0
              }
            ]
          };
          const LIST = {
            className: 'bullet',
            begin: '^[ \t]*([*+-]|(\\d+\\.))(?=\\s+)',
            end: '\\s+',
            excludeEnd: true
          };
          const LINK_REFERENCE = {
            begin: /^\[[^\n]+\]:/,
            returnBegin: true,
            contains: [
              {
                className: 'symbol',
                begin: /\[/,
                end: /\]/,
                excludeBegin: true,
                excludeEnd: true
              },
              {
                className: 'link',
                begin: /:\s*/,
                end: /$/,
                excludeBegin: true
              }
            ]
          };
          const URL_SCHEME = /[A-Za-z][A-Za-z0-9+.-]*/;
          const LINK = {
            variants: [
              // too much like nested array access in so many languages
              // to have any real relevance
              {
                begin: /\[.+?\]\[.*?\]/,
                relevance: 0
              },
              // popular internet URLs
              {
                begin: /\[.+?\]\(((data|javascript|mailto):|(?:http|ftp)s?:\/\/).*?\)/,
                relevance: 2
              },
              {
                begin: regex.concat(/\[.+?\]\(/, URL_SCHEME, /:\/\/.*?\)/),
                relevance: 2
              },
              // relative urls
              {
                begin: /\[.+?\]\([./?&#].*?\)/,
                relevance: 1
              },
              // whatever else, lower relevance (might not be a link at all)
              {
                begin: /\[.*?\]\(.*?\)/,
                relevance: 0
              }
            ],
            returnBegin: true,
            contains: [
              {
                // empty strings for alt or link text
                match: /\[(?=\])/ },
              {
                className: 'string',
                relevance: 0,
                begin: '\\[',
                end: '\\]',
                excludeBegin: true,
                returnEnd: true
              },
              {
                className: 'link',
                relevance: 0,
                begin: '\\]\\(',
                end: '\\)',
                excludeBegin: true,
                excludeEnd: true
              },
              {
                className: 'symbol',
                relevance: 0,
                begin: '\\]\\[',
                end: '\\]',
                excludeBegin: true,
                excludeEnd: true
              }
            ]
          };
          const BOLD = {
            className: 'strong',
            contains: [], // defined later
            variants: [
              {
                begin: /_{2}(?!\s)/,
                end: /_{2}/
              },
              {
                begin: /\*{2}(?!\s)/,
                end: /\*{2}/
              }
            ]
          };
          const ITALIC = {
            className: 'emphasis',
            contains: [], // defined later
            variants: [
              {
                begin: /\*(?![*\s])/,
                end: /\*/
              },
              {
                begin: /_(?![_\s])/,
                end: /_/,
                relevance: 0
              }
            ]
          };
 
          // 3 level deep nesting is not allowed because it would create confusion
          // in cases like `***testing***` because where we don't know if the last
          // `***` is starting a new bold/italic or finishing the last one
          const BOLD_WITHOUT_ITALIC = hljs.inherit(BOLD, { contains: [] });
          const ITALIC_WITHOUT_BOLD = hljs.inherit(ITALIC, { contains: [] });
          BOLD.contains.push(ITALIC_WITHOUT_BOLD);
          ITALIC.contains.push(BOLD_WITHOUT_ITALIC);
 
          let CONTAINABLE = [
            INLINE_HTML,
            LINK
          ];
 
          [
            BOLD,
            ITALIC,
            BOLD_WITHOUT_ITALIC,
            ITALIC_WITHOUT_BOLD
          ].forEach(m => {
            m.contains = m.contains.concat(CONTAINABLE);
          });
 
          CONTAINABLE = CONTAINABLE.concat(BOLD, ITALIC);
 
          const HEADER = {
            className: 'section',
            variants: [
              {
                begin: '^#{1,6}',
                end: '$',
                contains: CONTAINABLE
              },
              {
                begin: '(?=^.+?\\n[=-]{2,}$)',
                contains: [
                  { begin: '^[=-]*$' },
                  {
                    begin: '^',
                    end: "\\n",
                    contains: CONTAINABLE
                  }
                ]
              }
            ]
          };
 
          const BLOCKQUOTE = {
            className: 'quote',
            begin: '^>\\s+',
            contains: CONTAINABLE,
            end: '$'
          };
 
          return {
            name: 'Markdown',
            aliases: [
              'md',
              'mkdown',
              'mkd'
            ],
            contains: [
              HEADER,
              INLINE_HTML,
              LIST,
              BOLD,
              ITALIC,
              BLOCKQUOTE,
              CODE,
              HORIZONTAL_RULE,
              LINK,
              LINK_REFERENCE
            ]
          };
        }
 
        markdown_1 = markdown;
        return markdown_1;
    }
 
    /*
    Language: Dart
    Requires: markdown.js
    Author: Maxim Dikun <dikmax@gmail.com>
    Description: Dart a modern, object-oriented language developed by Google. For more information see https://www.dartlang.org/
    Website: https://dart.dev
    Category: scripting
    */
 
    var dart_1;
    var hasRequiredDart;
 
    function requireDart () {
        if (hasRequiredDart) return dart_1;
        hasRequiredDart = 1;
        /** @type LanguageFn */
        function dart(hljs) {
          const SUBST = {
            className: 'subst',
            variants: [ { begin: '\\$[A-Za-z0-9_]+' } ]
          };
 
          const BRACED_SUBST = {
            className: 'subst',
            variants: [
              {
                begin: /\$\{/,
                end: /\}/
              }
            ],
            keywords: 'true false null this is new super'
          };
 
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: 'r\'\'\'',
                end: '\'\'\''
              },
              {
                begin: 'r"""',
                end: '"""'
              },
              {
                begin: 'r\'',
                end: '\'',
                illegal: '\\n'
              },
              {
                begin: 'r"',
                end: '"',
                illegal: '\\n'
              },
              {
                begin: '\'\'\'',
                end: '\'\'\'',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST,
                  BRACED_SUBST
                ]
              },
              {
                begin: '"""',
                end: '"""',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST,
                  BRACED_SUBST
                ]
              },
              {
                begin: '\'',
                end: '\'',
                illegal: '\\n',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST,
                  BRACED_SUBST
                ]
              },
              {
                begin: '"',
                end: '"',
                illegal: '\\n',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST,
                  BRACED_SUBST
                ]
              }
            ]
          };
          BRACED_SUBST.contains = [
            hljs.C_NUMBER_MODE,
            STRING
          ];
 
          const BUILT_IN_TYPES = [
            // dart:core
            'Comparable',
            'DateTime',
            'Duration',
            'Function',
            'Iterable',
            'Iterator',
            'List',
            'Map',
            'Match',
            'Object',
            'Pattern',
            'RegExp',
            'Set',
            'Stopwatch',
            'String',
            'StringBuffer',
            'StringSink',
            'Symbol',
            'Type',
            'Uri',
            'bool',
            'double',
            'int',
            'num',
            // dart:html
            'Element',
            'ElementList'
          ];
          const NULLABLE_BUILT_IN_TYPES = BUILT_IN_TYPES.map((e) => `${e}?`);
 
          const BASIC_KEYWORDS = [
            "abstract",
            "as",
            "assert",
            "async",
            "await",
            "base",
            "break",
            "case",
            "catch",
            "class",
            "const",
            "continue",
            "covariant",
            "default",
            "deferred",
            "do",
            "dynamic",
            "else",
            "enum",
            "export",
            "extends",
            "extension",
            "external",
            "factory",
            "false",
            "final",
            "finally",
            "for",
            "Function",
            "get",
            "hide",
            "if",
            "implements",
            "import",
            "in",
            "interface",
            "is",
            "late",
            "library",
            "mixin",
            "new",
            "null",
            "on",
            "operator",
            "part",
            "required",
            "rethrow",
            "return",
            "sealed",
            "set",
            "show",
            "static",
            "super",
            "switch",
            "sync",
            "this",
            "throw",
            "true",
            "try",
            "typedef",
            "var",
            "void",
            "when",
            "while",
            "with",
            "yield"
          ];
 
          const KEYWORDS = {
            keyword: BASIC_KEYWORDS,
            built_in:
              BUILT_IN_TYPES
                .concat(NULLABLE_BUILT_IN_TYPES)
                .concat([
                  // dart:core
                  'Never',
                  'Null',
                  'dynamic',
                  'print',
                  // dart:html
                  'document',
                  'querySelector',
                  'querySelectorAll',
                  'window'
                ]),
            $pattern: /[A-Za-z][A-Za-z0-9_]*\??/
          };
 
          return {
            name: 'Dart',
            keywords: KEYWORDS,
            contains: [
              STRING,
              hljs.COMMENT(
                /\/\*\*(?!\/)/,
                /\*\//,
                {
                  subLanguage: 'markdown',
                  relevance: 0
                }
              ),
              hljs.COMMENT(
                /\/{3,} ?/,
                /$/, { contains: [
                  {
                    subLanguage: 'markdown',
                    begin: '.',
                    end: '$',
                    relevance: 0
                  }
                ] }
              ),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'class',
                beginKeywords: 'class interface',
                end: /\{/,
                excludeEnd: true,
                contains: [
                  { beginKeywords: 'extends implements' },
                  hljs.UNDERSCORE_TITLE_MODE
                ]
              },
              hljs.C_NUMBER_MODE,
              {
                className: 'meta',
                begin: '@[A-Za-z]+'
              },
              { begin: '=>' // No markup, just a relevance booster
              }
            ]
          };
        }
 
        dart_1 = dart;
        return dart_1;
    }
 
    /*
    Language: Delphi
    Website: https://www.embarcadero.com/products/delphi
    */
 
    var delphi_1;
    var hasRequiredDelphi;
 
    function requireDelphi () {
        if (hasRequiredDelphi) return delphi_1;
        hasRequiredDelphi = 1;
        /** @type LanguageFn */
        function delphi(hljs) {
          const KEYWORDS = [
            "exports",
            "register",
            "file",
            "shl",
            "array",
            "record",
            "property",
            "for",
            "mod",
            "while",
            "set",
            "ally",
            "label",
            "uses",
            "raise",
            "not",
            "stored",
            "class",
            "safecall",
            "var",
            "interface",
            "or",
            "private",
            "static",
            "exit",
            "index",
            "inherited",
            "to",
            "else",
            "stdcall",
            "override",
            "shr",
            "asm",
            "far",
            "resourcestring",
            "finalization",
            "packed",
            "virtual",
            "out",
            "and",
            "protected",
            "library",
            "do",
            "xorwrite",
            "goto",
            "near",
            "function",
            "end",
            "div",
            "overload",
            "object",
            "unit",
            "begin",
            "string",
            "on",
            "inline",
            "repeat",
            "until",
            "destructor",
            "write",
            "message",
            "program",
            "with",
            "read",
            "initialization",
            "except",
            "default",
            "nil",
            "if",
            "case",
            "cdecl",
            "in",
            "downto",
            "threadvar",
            "of",
            "try",
            "pascal",
            "const",
            "external",
            "constructor",
            "type",
            "public",
            "then",
            "implementation",
            "finally",
            "published",
            "procedure",
            "absolute",
            "reintroduce",
            "operator",
            "as",
            "is",
            "abstract",
            "alias",
            "assembler",
            "bitpacked",
            "break",
            "continue",
            "cppdecl",
            "cvar",
            "enumerator",
            "experimental",
            "platform",
            "deprecated",
            "unimplemented",
            "dynamic",
            "export",
            "far16",
            "forward",
            "generic",
            "helper",
            "implements",
            "interrupt",
            "iochecks",
            "local",
            "name",
            "nodefault",
            "noreturn",
            "nostackframe",
            "oldfpccall",
            "otherwise",
            "saveregisters",
            "softfloat",
            "specialize",
            "strict",
            "unaligned",
            "varargs"
          ];
          const COMMENT_MODES = [
            hljs.C_LINE_COMMENT_MODE,
            hljs.COMMENT(/\{/, /\}/, { relevance: 0 }),
            hljs.COMMENT(/\(\*/, /\*\)/, { relevance: 10 })
          ];
          const DIRECTIVE = {
            className: 'meta',
            variants: [
              {
                begin: /\{\$/,
                end: /\}/
              },
              {
                begin: /\(\*\$/,
                end: /\*\)/
              }
            ]
          };
          const STRING = {
            className: 'string',
            begin: /'/,
            end: /'/,
            contains: [ { begin: /''/ } ]
          };
          const NUMBER = {
            className: 'number',
            relevance: 0,
            // Source: https://www.freepascal.org/docs-html/ref/refse6.html
            variants: [
              {
                // Hexadecimal notation, e.g., $7F.
                begin: '\\$[0-9A-Fa-f]+' },
              {
                // Octal notation, e.g., &42.
                begin: '&[0-7]+' },
              {
                // Binary notation, e.g., %1010.
                begin: '%[01]+' }
            ]
          };
          const CHAR_STRING = {
            className: 'string',
            begin: /(#\d+)+/
          };
          const CLASS = {
            begin: hljs.IDENT_RE + '\\s*=\\s*class\\s*\\(',
            returnBegin: true,
            contains: [ hljs.TITLE_MODE ]
          };
          const FUNCTION = {
            className: 'function',
            beginKeywords: 'function constructor destructor procedure',
            end: /[:;]/,
            keywords: 'function constructor|10 destructor|10 procedure|10',
            contains: [
              hljs.TITLE_MODE,
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS,
                contains: [
                  STRING,
                  CHAR_STRING,
                  DIRECTIVE
                ].concat(COMMENT_MODES)
              },
              DIRECTIVE
            ].concat(COMMENT_MODES)
          };
          return {
            name: 'Delphi',
            aliases: [
              'dpr',
              'dfm',
              'pas',
              'pascal'
            ],
            case_insensitive: true,
            keywords: KEYWORDS,
            illegal: /"|\$[G-Zg-z]|\/\*|<\/|\|/,
            contains: [
              STRING,
              CHAR_STRING,
              hljs.NUMBER_MODE,
              NUMBER,
              CLASS,
              FUNCTION,
              DIRECTIVE
            ].concat(COMMENT_MODES)
          };
        }
 
        delphi_1 = delphi;
        return delphi_1;
    }
 
    /*
    Language: Diff
    Description: Unified and context diff
    Author: Vasily Polovnyov <vast@whiteants.net>
    Website: https://www.gnu.org/software/diffutils/
    Category: common
    */
 
    var diff_1;
    var hasRequiredDiff;
 
    function requireDiff () {
        if (hasRequiredDiff) return diff_1;
        hasRequiredDiff = 1;
        /** @type LanguageFn */
        function diff(hljs) {
          const regex = hljs.regex;
          return {
            name: 'Diff',
            aliases: [ 'patch' ],
            contains: [
              {
                className: 'meta',
                relevance: 10,
                match: regex.either(
                  /^@@ +-\d+,\d+ +\+\d+,\d+ +@@/,
                  /^\*\*\* +\d+,\d+ +\*\*\*\*$/,
                  /^--- +\d+,\d+ +----$/
                )
              },
              {
                className: 'comment',
                variants: [
                  {
                    begin: regex.either(
                      /Index: /,
                      /^index/,
                      /={3,}/,
                      /^-{3}/,
                      /^\*{3} /,
                      /^\+{3}/,
                      /^diff --git/
                    ),
                    end: /$/
                  },
                  { match: /^\*{15}$/ }
                ]
              },
              {
                className: 'addition',
                begin: /^\+/,
                end: /$/
              },
              {
                className: 'deletion',
                begin: /^-/,
                end: /$/
              },
              {
                className: 'addition',
                begin: /^!/,
                end: /$/
              }
            ]
          };
        }
 
        diff_1 = diff;
        return diff_1;
    }
 
    /*
    Language: Django
    Description: Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design.
    Requires: xml.js
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Contributors: Ilya Baryshev <baryshev@gmail.com>
    Website: https://www.djangoproject.com
    Category: template
    */
 
    var django_1;
    var hasRequiredDjango;
 
    function requireDjango () {
        if (hasRequiredDjango) return django_1;
        hasRequiredDjango = 1;
        /** @type LanguageFn */
        function django(hljs) {
          const FILTER = {
            begin: /\|[A-Za-z]+:?/,
            keywords: { name:
                'truncatewords removetags linebreaksbr yesno get_digit timesince random striptags '
                + 'filesizeformat escape linebreaks length_is ljust rjust cut urlize fix_ampersands '
                + 'title floatformat capfirst pprint divisibleby add make_list unordered_list urlencode '
                + 'timeuntil urlizetrunc wordcount stringformat linenumbers slice date dictsort '
                + 'dictsortreversed default_if_none pluralize lower join center default '
                + 'truncatewords_html upper length phone2numeric wordwrap time addslashes slugify first '
                + 'escapejs force_escape iriencode last safe safeseq truncatechars localize unlocalize '
                + 'localtime utc timezone' },
            contains: [
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE
            ]
          };
 
          return {
            name: 'Django',
            aliases: [ 'jinja' ],
            case_insensitive: true,
            subLanguage: 'xml',
            contains: [
              hljs.COMMENT(/\{%\s*comment\s*%\}/, /\{%\s*endcomment\s*%\}/),
              hljs.COMMENT(/\{#/, /#\}/),
              {
                className: 'template-tag',
                begin: /\{%/,
                end: /%\}/,
                contains: [
                  {
                    className: 'name',
                    begin: /\w+/,
                    keywords: { name:
                        'comment endcomment load templatetag ifchanged endifchanged if endif firstof for '
                        + 'endfor ifnotequal endifnotequal widthratio extends include spaceless '
                        + 'endspaceless regroup ifequal endifequal ssi now with cycle url filter '
                        + 'endfilter debug block endblock else autoescape endautoescape csrf_token empty elif '
                        + 'endwith static trans blocktrans endblocktrans get_static_prefix get_media_prefix '
                        + 'plural get_current_language language get_available_languages '
                        + 'get_current_language_bidi get_language_info get_language_info_list localize '
                        + 'endlocalize localtime endlocaltime timezone endtimezone get_current_timezone '
                        + 'verbatim' },
                    starts: {
                      endsWithParent: true,
                      keywords: 'in by as',
                      contains: [ FILTER ],
                      relevance: 0
                    }
                  }
                ]
              },
              {
                className: 'template-variable',
                begin: /\{\{/,
                end: /\}\}/,
                contains: [ FILTER ]
              }
            ]
          };
        }
 
        django_1 = django;
        return django_1;
    }
 
    /*
    Language: DNS Zone
    Author: Tim Schumacher <tim@datenknoten.me>
    Category: config
    Website: https://en.wikipedia.org/wiki/Zone_file
    */
 
    var dns_1;
    var hasRequiredDns;
 
    function requireDns () {
        if (hasRequiredDns) return dns_1;
        hasRequiredDns = 1;
        /** @type LanguageFn */
        function dns(hljs) {
          const KEYWORDS = [
            "IN",
            "A",
            "AAAA",
            "AFSDB",
            "APL",
            "CAA",
            "CDNSKEY",
            "CDS",
            "CERT",
            "CNAME",
            "DHCID",
            "DLV",
            "DNAME",
            "DNSKEY",
            "DS",
            "HIP",
            "IPSECKEY",
            "KEY",
            "KX",
            "LOC",
            "MX",
            "NAPTR",
            "NS",
            "NSEC",
            "NSEC3",
            "NSEC3PARAM",
            "PTR",
            "RRSIG",
            "RP",
            "SIG",
            "SOA",
            "SRV",
            "SSHFP",
            "TA",
            "TKEY",
            "TLSA",
            "TSIG",
            "TXT"
          ];
          return {
            name: 'DNS Zone',
            aliases: [
              'bind',
              'zone'
            ],
            keywords: KEYWORDS,
            contains: [
              hljs.COMMENT(';', '$', { relevance: 0 }),
              {
                className: 'meta',
                begin: /^\$(TTL|GENERATE|INCLUDE|ORIGIN)\b/
              },
              // IPv6
              {
                className: 'number',
                begin: '((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))\\b'
              },
              // IPv4
              {
                className: 'number',
                begin: '((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\b'
              },
              hljs.inherit(hljs.NUMBER_MODE, { begin: /\b\d+[dhwm]?/ })
            ]
          };
        }
 
        dns_1 = dns;
        return dns_1;
    }
 
    /*
    Language: Dockerfile
    Requires: bash.js
    Author: Alexis Hénaut <alexis@henaut.net>
    Description: language definition for Dockerfile files
    Website: https://docs.docker.com/engine/reference/builder/
    Category: config
    */
 
    var dockerfile_1;
    var hasRequiredDockerfile;
 
    function requireDockerfile () {
        if (hasRequiredDockerfile) return dockerfile_1;
        hasRequiredDockerfile = 1;
        /** @type LanguageFn */
        function dockerfile(hljs) {
          const KEYWORDS = [
            "from",
            "maintainer",
            "expose",
            "env",
            "arg",
            "user",
            "onbuild",
            "stopsignal"
          ];
          return {
            name: 'Dockerfile',
            aliases: [ 'docker' ],
            case_insensitive: true,
            keywords: KEYWORDS,
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE,
              {
                beginKeywords: 'run cmd entrypoint volume add copy workdir label healthcheck shell',
                starts: {
                  end: /[^\\]$/,
                  subLanguage: 'bash'
                }
              }
            ],
            illegal: '</'
          };
        }
 
        dockerfile_1 = dockerfile;
        return dockerfile_1;
    }
 
    /*
    Language: Batch file (DOS)
    Author: Alexander Makarov <sam@rmcreative.ru>
    Contributors: Anton Kochkov <anton.kochkov@gmail.com>
    Website: https://en.wikipedia.org/wiki/Batch_file
    */
 
    var dos_1;
    var hasRequiredDos;
 
    function requireDos () {
        if (hasRequiredDos) return dos_1;
        hasRequiredDos = 1;
        /** @type LanguageFn */
        function dos(hljs) {
          const COMMENT = hljs.COMMENT(
            /^\s*@?rem\b/, /$/,
            { relevance: 10 }
          );
          const LABEL = {
            className: 'symbol',
            begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)',
            relevance: 0
          };
          const KEYWORDS = [
            "if",
            "else",
            "goto",
            "for",
            "in",
            "do",
            "call",
            "exit",
            "not",
            "exist",
            "errorlevel",
            "defined",
            "equ",
            "neq",
            "lss",
            "leq",
            "gtr",
            "geq"
          ];
          const BUILT_INS = [
            "prn",
            "nul",
            "lpt3",
            "lpt2",
            "lpt1",
            "con",
            "com4",
            "com3",
            "com2",
            "com1",
            "aux",
            "shift",
            "cd",
            "dir",
            "echo",
            "setlocal",
            "endlocal",
            "set",
            "pause",
            "copy",
            "append",
            "assoc",
            "at",
            "attrib",
            "break",
            "cacls",
            "cd",
            "chcp",
            "chdir",
            "chkdsk",
            "chkntfs",
            "cls",
            "cmd",
            "color",
            "comp",
            "compact",
            "convert",
            "date",
            "dir",
            "diskcomp",
            "diskcopy",
            "doskey",
            "erase",
            "fs",
            "find",
            "findstr",
            "format",
            "ftype",
            "graftabl",
            "help",
            "keyb",
            "label",
            "md",
            "mkdir",
            "mode",
            "more",
            "move",
            "path",
            "pause",
            "print",
            "popd",
            "pushd",
            "promt",
            "rd",
            "recover",
            "rem",
            "rename",
            "replace",
            "restore",
            "rmdir",
            "shift",
            "sort",
            "start",
            "subst",
            "time",
            "title",
            "tree",
            "type",
            "ver",
            "verify",
            "vol",
            // winutils
            "ping",
            "net",
            "ipconfig",
            "taskkill",
            "xcopy",
            "ren",
            "del"
          ];
          return {
            name: 'Batch file (DOS)',
            aliases: [
              'bat',
              'cmd'
            ],
            case_insensitive: true,
            illegal: /\/\*/,
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_INS
            },
            contains: [
              {
                className: 'variable',
                begin: /%%[^ ]|%[^ ]+?%|![^ ]+?!/
              },
              {
                className: 'function',
                begin: LABEL.begin,
                end: 'goto:eof',
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
                  COMMENT
                ]
              },
              {
                className: 'number',
                begin: '\\b\\d+',
                relevance: 0
              },
              COMMENT
            ]
          };
        }
 
        dos_1 = dos;
        return dos_1;
    }
 
    /*
     Language: dsconfig
     Description: dsconfig batch configuration language for LDAP directory servers
     Contributors: Jacob Childress <jacobc@gmail.com>
     Category: enterprise, config
     */
 
    var dsconfig_1;
    var hasRequiredDsconfig;
 
    function requireDsconfig () {
        if (hasRequiredDsconfig) return dsconfig_1;
        hasRequiredDsconfig = 1;
        /** @type LanguageFn */
        function dsconfig(hljs) {
          const QUOTED_PROPERTY = {
            className: 'string',
            begin: /"/,
            end: /"/
          };
          const APOS_PROPERTY = {
            className: 'string',
            begin: /'/,
            end: /'/
          };
          const UNQUOTED_PROPERTY = {
            className: 'string',
            begin: /[\w\-?]+:\w+/,
            end: /\W/,
            relevance: 0
          };
          const VALUELESS_PROPERTY = {
            className: 'string',
            begin: /\w+(\-\w+)*/,
            end: /(?=\W)/,
            relevance: 0
          };
 
          return {
            keywords: 'dsconfig',
            contains: [
              {
                className: 'keyword',
                begin: '^dsconfig',
                end: /\s/,
                excludeEnd: true,
                relevance: 10
              },
              {
                className: 'built_in',
                begin: /(list|create|get|set|delete)-(\w+)/,
                end: /\s/,
                excludeEnd: true,
                illegal: '!@#$%^&*()',
                relevance: 10
              },
              {
                className: 'built_in',
                begin: /--(\w+)/,
                end: /\s/,
                excludeEnd: true
              },
              QUOTED_PROPERTY,
              APOS_PROPERTY,
              UNQUOTED_PROPERTY,
              VALUELESS_PROPERTY,
              hljs.HASH_COMMENT_MODE
            ]
          };
        }
 
        dsconfig_1 = dsconfig;
        return dsconfig_1;
    }
 
    /*
    Language: Device Tree
    Description: *.dts files used in the Linux kernel
    Author: Martin Braun <martin.braun@ettus.com>, Moritz Fischer <moritz.fischer@ettus.com>
    Website: https://elinux.org/Device_Tree_Reference
    Category: config
    */
 
    var dts_1;
    var hasRequiredDts;
 
    function requireDts () {
        if (hasRequiredDts) return dts_1;
        hasRequiredDts = 1;
        /** @type LanguageFn */
        function dts(hljs) {
          const STRINGS = {
            className: 'string',
            variants: [
              hljs.inherit(hljs.QUOTE_STRING_MODE, { begin: '((u8?|U)|L)?"' }),
              {
                begin: '(u8?|U)?R"',
                end: '"',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                begin: '\'\\\\?.',
                end: '\'',
                illegal: '.'
              }
            ]
          };
 
          const NUMBERS = {
            className: 'number',
            variants: [
              { begin: '\\b(\\d+(\\.\\d*)?|\\.\\d+)(u|U|l|L|ul|UL|f|F)' },
              { begin: hljs.C_NUMBER_RE }
            ],
            relevance: 0
          };
 
          const PREPROCESSOR = {
            className: 'meta',
            begin: '#',
            end: '$',
            keywords: { keyword: 'if else elif endif define undef ifdef ifndef' },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              {
                beginKeywords: 'include',
                end: '$',
                keywords: { keyword: 'include' },
                contains: [
                  hljs.inherit(STRINGS, { className: 'string' }),
                  {
                    className: 'string',
                    begin: '<',
                    end: '>',
                    illegal: '\\n'
                  }
                ]
              },
              STRINGS,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
 
          const REFERENCE = {
            className: 'variable',
            begin: /&[a-z\d_]*\b/
          };
 
          const KEYWORD = {
            className: 'keyword',
            begin: '/[a-z][a-z\\d-]*/'
          };
 
          const LABEL = {
            className: 'symbol',
            begin: '^\\s*[a-zA-Z_][a-zA-Z\\d_]*:'
          };
 
          const CELL_PROPERTY = {
            className: 'params',
            relevance: 0,
            begin: '<',
            end: '>',
            contains: [
              NUMBERS,
              REFERENCE
            ]
          };
 
          const NODE = {
            className: 'title.class',
            begin: /[a-zA-Z_][a-zA-Z\d_@-]*(?=\s\{)/,
            relevance: 0.2
          };
 
          const ROOT_NODE = {
            className: 'title.class',
            begin: /^\/(?=\s*\{)/,
            relevance: 10
          };
 
          // TODO: `attribute` might be the right scope here, unsure
          // I'm not sure if all these key names have semantic meaning or not
          const ATTR_NO_VALUE = {
            match: /[a-z][a-z-,]+(?=;)/,
            relevance: 0,
            scope: "attr"
          };
          const ATTR = {
            relevance: 0,
            match: [
              /[a-z][a-z-,]+/,
              /\s*/,
              /=/
            ],
            scope: {
              1: "attr",
              3: "operator"
            }
          };
 
          const PUNC = {
            scope: "punctuation",
            relevance: 0,
            // `};` combined is just to avoid tons of useless punctuation nodes
            match: /\};|[;{}]/
          };
 
          return {
            name: 'Device Tree',
            contains: [
              ROOT_NODE,
              REFERENCE,
              KEYWORD,
              LABEL,
              NODE,
              ATTR,
              ATTR_NO_VALUE,
              CELL_PROPERTY,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              NUMBERS,
              STRINGS,
              PREPROCESSOR,
              PUNC,
              {
                begin: hljs.IDENT_RE + '::',
                keywords: ""
              }
            ]
          };
        }
 
        dts_1 = dts;
        return dts_1;
    }
 
    /*
    Language: Dust
    Requires: xml.js
    Author: Michael Allen <michael.allen@benefitfocus.com>
    Description: Matcher for dust.js templates.
    Website: https://www.dustjs.com
    Category: template
    */
 
    var dust_1;
    var hasRequiredDust;
 
    function requireDust () {
        if (hasRequiredDust) return dust_1;
        hasRequiredDust = 1;
        /** @type LanguageFn */
        function dust(hljs) {
          const EXPRESSION_KEYWORDS = 'if eq ne lt lte gt gte select default math sep';
          return {
            name: 'Dust',
            aliases: [ 'dst' ],
            case_insensitive: true,
            subLanguage: 'xml',
            contains: [
              {
                className: 'template-tag',
                begin: /\{[#\/]/,
                end: /\}/,
                illegal: /;/,
                contains: [
                  {
                    className: 'name',
                    begin: /[a-zA-Z\.-]+/,
                    starts: {
                      endsWithParent: true,
                      relevance: 0,
                      contains: [ hljs.QUOTE_STRING_MODE ]
                    }
                  }
                ]
              },
              {
                className: 'template-variable',
                begin: /\{/,
                end: /\}/,
                illegal: /;/,
                keywords: EXPRESSION_KEYWORDS
              }
            ]
          };
        }
 
        dust_1 = dust;
        return dust_1;
    }
 
    /*
    Language: Extended Backus-Naur Form
    Author: Alex McKibben <alex@nullscope.net>
    Website: https://en.wikipedia.org/wiki/Extended_Backus–Naur_form
    */
 
    var ebnf_1;
    var hasRequiredEbnf;
 
    function requireEbnf () {
        if (hasRequiredEbnf) return ebnf_1;
        hasRequiredEbnf = 1;
        /** @type LanguageFn */
        function ebnf(hljs) {
          const commentMode = hljs.COMMENT(/\(\*/, /\*\)/);
 
          const nonTerminalMode = {
            className: "attribute",
            begin: /^[ ]*[a-zA-Z]+([\s_-]+[a-zA-Z]+)*/
          };
 
          const specialSequenceMode = {
            className: "meta",
            begin: /\?.*\?/
          };
 
          const ruleBodyMode = {
            begin: /=/,
            end: /[.;]/,
            contains: [
              commentMode,
              specialSequenceMode,
              {
                // terminals
                className: 'string',
                variants: [
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  {
                    begin: '`',
                    end: '`'
                  }
                ]
              }
            ]
          };
 
          return {
            name: 'Extended Backus-Naur Form',
            illegal: /\S/,
            contains: [
              commentMode,
              nonTerminalMode,
              ruleBodyMode
            ]
          };
        }
 
        ebnf_1 = ebnf;
        return ebnf_1;
    }
 
    /*
    Language: Elixir
    Author: Josh Adams <josh@isotope11.com>
    Description: language definition for Elixir source code files (.ex and .exs).  Based on ruby language support.
    Category: functional
    Website: https://elixir-lang.org
    */
 
    var elixir_1;
    var hasRequiredElixir;
 
    function requireElixir () {
        if (hasRequiredElixir) return elixir_1;
        hasRequiredElixir = 1;
        /** @type LanguageFn */
        function elixir(hljs) {
          const regex = hljs.regex;
          const ELIXIR_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_.]*(!|\\?)?';
          const ELIXIR_METHOD_RE = '[a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?';
          const KEYWORDS = [
            "after",
            "alias",
            "and",
            "case",
            "catch",
            "cond",
            "defstruct",
            "defguard",
            "do",
            "else",
            "end",
            "fn",
            "for",
            "if",
            "import",
            "in",
            "not",
            "or",
            "quote",
            "raise",
            "receive",
            "require",
            "reraise",
            "rescue",
            "try",
            "unless",
            "unquote",
            "unquote_splicing",
            "use",
            "when",
            "with|0"
          ];
          const LITERALS = [
            "false",
            "nil",
            "true"
          ];
          const KWS = {
            $pattern: ELIXIR_IDENT_RE,
            keyword: KEYWORDS,
            literal: LITERALS
          };
          const SUBST = {
            className: 'subst',
            begin: /#\{/,
            end: /\}/,
            keywords: KWS
          };
          const NUMBER = {
            className: 'number',
            begin: '(\\b0o[0-7_]+)|(\\b0b[01_]+)|(\\b0x[0-9a-fA-F_]+)|(-?\\b[0-9][0-9_]*(\\.[0-9_]+([eE][-+]?[0-9]+)?)?)',
            relevance: 0
          };
          // TODO: could be tightened
          // https://elixir-lang.readthedocs.io/en/latest/intro/18.html
          // but you also need to include closing delemeters in the escape list per
          // individual sigil mode from what I can tell,
          // ie: \} might or might not be an escape depending on the sigil used
          const ESCAPES_RE = /\\[\s\S]/;
          // const ESCAPES_RE = /\\["'\\abdefnrstv0]/;
          const BACKSLASH_ESCAPE = {
            match: ESCAPES_RE,
            scope: "char.escape",
            relevance: 0
          };
          const SIGIL_DELIMITERS = '[/|([{<"\']';
          const SIGIL_DELIMITER_MODES = [
            {
              begin: /"/,
              end: /"/
            },
            {
              begin: /'/,
              end: /'/
            },
            {
              begin: /\//,
              end: /\//
            },
            {
              begin: /\|/,
              end: /\|/
            },
            {
              begin: /\(/,
              end: /\)/
            },
            {
              begin: /\[/,
              end: /\]/
            },
            {
              begin: /\{/,
              end: /\}/
            },
            {
              begin: /</,
              end: />/
            }
          ];
          const escapeSigilEnd = (end) => {
            return {
              scope: "char.escape",
              begin: regex.concat(/\\/, end),
              relevance: 0
            };
          };
          const LOWERCASE_SIGIL = {
            className: 'string',
            begin: '~[a-z]' + '(?=' + SIGIL_DELIMITERS + ')',
            contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
              { contains: [
                escapeSigilEnd(x.end),
                BACKSLASH_ESCAPE,
                SUBST
              ] }
            ))
          };
 
          const UPCASE_SIGIL = {
            className: 'string',
            begin: '~[A-Z]' + '(?=' + SIGIL_DELIMITERS + ')',
            contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
              { contains: [ escapeSigilEnd(x.end) ] }
            ))
          };
 
          const REGEX_SIGIL = {
            className: 'regex',
            variants: [
              {
                begin: '~r' + '(?=' + SIGIL_DELIMITERS + ')',
                contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
                  {
                    end: regex.concat(x.end, /[uismxfU]{0,7}/),
                    contains: [
                      escapeSigilEnd(x.end),
                      BACKSLASH_ESCAPE,
                      SUBST
                    ]
                  }
                ))
              },
              {
                begin: '~R' + '(?=' + SIGIL_DELIMITERS + ')',
                contains: SIGIL_DELIMITER_MODES.map(x => hljs.inherit(x,
                  {
                    end: regex.concat(x.end, /[uismxfU]{0,7}/),
                    contains: [ escapeSigilEnd(x.end) ]
                  })
                )
              }
            ]
          };
 
          const STRING = {
            className: 'string',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ],
            variants: [
              {
                begin: /"""/,
                end: /"""/
              },
              {
                begin: /'''/,
                end: /'''/
              },
              {
                begin: /~S"""/,
                end: /"""/,
                contains: [] // override default
              },
              {
                begin: /~S"/,
                end: /"/,
                contains: [] // override default
              },
              {
                begin: /~S'''/,
                end: /'''/,
                contains: [] // override default
              },
              {
                begin: /~S'/,
                end: /'/,
                contains: [] // override default
              },
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /"/,
                end: /"/
              }
            ]
          };
          const FUNCTION = {
            className: 'function',
            beginKeywords: 'def defp defmacro defmacrop',
            end: /\B\b/, // the mode is ended by the title
            contains: [
              hljs.inherit(hljs.TITLE_MODE, {
                begin: ELIXIR_IDENT_RE,
                endsParent: true
              })
            ]
          };
          const CLASS = hljs.inherit(FUNCTION, {
            className: 'class',
            beginKeywords: 'defimpl defmodule defprotocol defrecord',
            end: /\bdo\b|$|;/
          });
          const ELIXIR_DEFAULT_CONTAINS = [
            STRING,
            REGEX_SIGIL,
            UPCASE_SIGIL,
            LOWERCASE_SIGIL,
            hljs.HASH_COMMENT_MODE,
            CLASS,
            FUNCTION,
            { begin: '::' },
            {
              className: 'symbol',
              begin: ':(?![\\s:])',
              contains: [
                STRING,
                { begin: ELIXIR_METHOD_RE }
              ],
              relevance: 0
            },
            {
              className: 'symbol',
              begin: ELIXIR_IDENT_RE + ':(?!:)',
              relevance: 0
            },
            { // Usage of a module, struct, etc.
              className: 'title.class',
              begin: /(\b[A-Z][a-zA-Z0-9_]+)/,
              relevance: 0
            },
            NUMBER,
            {
              className: 'variable',
              begin: '(\\$\\W)|((\\$|@@?)(\\w+))'
            }
            // -> has been removed, capnproto always uses this grammar construct
          ];
          SUBST.contains = ELIXIR_DEFAULT_CONTAINS;
 
          return {
            name: 'Elixir',
            aliases: [
              'ex',
              'exs'
            ],
            keywords: KWS,
            contains: ELIXIR_DEFAULT_CONTAINS
          };
        }
 
        elixir_1 = elixir;
        return elixir_1;
    }
 
    /*
    Language: Elm
    Author: Janis Voigtlaender <janis.voigtlaender@gmail.com>
    Website: https://elm-lang.org
    Category: functional
    */
 
    var elm_1;
    var hasRequiredElm;
 
    function requireElm () {
        if (hasRequiredElm) return elm_1;
        hasRequiredElm = 1;
        /** @type LanguageFn */
        function elm(hljs) {
          const COMMENT = { variants: [
            hljs.COMMENT('--', '$'),
            hljs.COMMENT(
              /\{-/,
              /-\}/,
              { contains: [ 'self' ] }
            )
          ] };
 
          const CONSTRUCTOR = {
            className: 'type',
            begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (built-in, infix).
            relevance: 0
          };
 
          const LIST = {
            begin: '\\(',
            end: '\\)',
            illegal: '"',
            contains: [
              {
                className: 'type',
                begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'
              },
              COMMENT
            ]
          };
 
          const RECORD = {
            begin: /\{/,
            end: /\}/,
            contains: LIST.contains
          };
 
          const CHARACTER = {
            className: 'string',
            begin: '\'\\\\?.',
            end: '\'',
            illegal: '.'
          };
 
          const KEYWORDS = [
            "let",
            "in",
            "if",
            "then",
            "else",
            "case",
            "of",
            "where",
            "module",
            "import",
            "exposing",
            "type",
            "alias",
            "as",
            "infix",
            "infixl",
            "infixr",
            "port",
            "effect",
            "command",
            "subscription"
          ];
 
          return {
            name: 'Elm',
            keywords: KEYWORDS,
            contains: [
 
              // Top-level constructions.
 
              {
                beginKeywords: 'port effect module',
                end: 'exposing',
                keywords: 'port effect module where command subscription exposing',
                contains: [
                  LIST,
                  COMMENT
                ],
                illegal: '\\W\\.|;'
              },
              {
                begin: 'import',
                end: '$',
                keywords: 'import as exposing',
                contains: [
                  LIST,
                  COMMENT
                ],
                illegal: '\\W\\.|;'
              },
              {
                begin: 'type',
                end: '$',
                keywords: 'type alias',
                contains: [
                  CONSTRUCTOR,
                  LIST,
                  RECORD,
                  COMMENT
                ]
              },
              {
                beginKeywords: 'infix infixl infixr',
                end: '$',
                contains: [
                  hljs.C_NUMBER_MODE,
                  COMMENT
                ]
              },
              {
                begin: 'port',
                end: '$',
                keywords: 'port',
                contains: [ COMMENT ]
              },
 
              // Literals and names.
              CHARACTER,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              CONSTRUCTOR,
              hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }),
              COMMENT,
 
              { // No markup, relevance booster
                begin: '->|<-' }
            ],
            illegal: /;/
          };
        }
 
        elm_1 = elm;
        return elm_1;
    }
 
    /*
    Language: Ruby
    Description: Ruby is a dynamic, open source programming language with a focus on simplicity and productivity.
    Website: https://www.ruby-lang.org/
    Author: Anton Kovalyov <anton@kovalyov.net>
    Contributors: Peter Leonov <gojpeg@yandex.ru>, Vasily Polovnyov <vast@whiteants.net>, Loren Segal <lsegal@soen.ca>, Pascal Hurni <phi@ruby-reactive.org>, Cedric Sohrauer <sohrauer@googlemail.com>
    Category: common
    */
 
    var ruby_1;
    var hasRequiredRuby;
 
    function requireRuby () {
        if (hasRequiredRuby) return ruby_1;
        hasRequiredRuby = 1;
        function ruby(hljs) {
          const regex = hljs.regex;
          const RUBY_METHOD_RE = '([a-zA-Z_]\\w*[!?=]?|[-+~]@|<<|>>|=~|===?|<=>|[<>]=?|\\*\\*|[-/+%^&*~`|]|\\[\\]=?)';
          // TODO: move concepts like CAMEL_CASE into `modes.js`
          const CLASS_NAME_RE = regex.either(
            /\b([A-Z]+[a-z0-9]+)+/,
            // ends in caps
            /\b([A-Z]+[a-z0-9]+)+[A-Z]+/,
          )
          ;
          const CLASS_NAME_WITH_NAMESPACE_RE = regex.concat(CLASS_NAME_RE, /(::\w+)*/);
          // very popular ruby built-ins that one might even assume
          // are actual keywords (despite that not being the case)
          const PSEUDO_KWS = [
            "include",
            "extend",
            "prepend",
            "public",
            "private",
            "protected",
            "raise",
            "throw"
          ];
          const RUBY_KEYWORDS = {
            "variable.constant": [
              "__FILE__",
              "__LINE__",
              "__ENCODING__"
            ],
            "variable.language": [
              "self",
              "super",
            ],
            keyword: [
              "alias",
              "and",
              "begin",
              "BEGIN",
              "break",
              "case",
              "class",
              "defined",
              "do",
              "else",
              "elsif",
              "end",
              "END",
              "ensure",
              "for",
              "if",
              "in",
              "module",
              "next",
              "not",
              "or",
              "redo",
              "require",
              "rescue",
              "retry",
              "return",
              "then",
              "undef",
              "unless",
              "until",
              "when",
              "while",
              "yield",
              ...PSEUDO_KWS
            ],
            built_in: [
              "proc",
              "lambda",
              "attr_accessor",
              "attr_reader",
              "attr_writer",
              "define_method",
              "private_constant",
              "module_function"
            ],
            literal: [
              "true",
              "false",
              "nil"
            ]
          };
          const YARDOCTAG = {
            className: 'doctag',
            begin: '@[A-Za-z]+'
          };
          const IRB_OBJECT = {
            begin: '#<',
            end: '>'
          };
          const COMMENT_MODES = [
            hljs.COMMENT(
              '#',
              '$',
              { contains: [ YARDOCTAG ] }
            ),
            hljs.COMMENT(
              '^=begin',
              '^=end',
              {
                contains: [ YARDOCTAG ],
                relevance: 10
              }
            ),
            hljs.COMMENT('^__END__', hljs.MATCH_NOTHING_RE)
          ];
          const SUBST = {
            className: 'subst',
            begin: /#\{/,
            end: /\}/,
            keywords: RUBY_KEYWORDS
          };
          const STRING = {
            className: 'string',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ],
            variants: [
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /"/,
                end: /"/
              },
              {
                begin: /`/,
                end: /`/
              },
              {
                begin: /%[qQwWx]?\(/,
                end: /\)/
              },
              {
                begin: /%[qQwWx]?\[/,
                end: /\]/
              },
              {
                begin: /%[qQwWx]?\{/,
                end: /\}/
              },
              {
                begin: /%[qQwWx]?</,
                end: />/
              },
              {
                begin: /%[qQwWx]?\//,
                end: /\//
              },
              {
                begin: /%[qQwWx]?%/,
                end: /%/
              },
              {
                begin: /%[qQwWx]?-/,
                end: /-/
              },
              {
                begin: /%[qQwWx]?\|/,
                end: /\|/
              },
              // in the following expressions, \B in the beginning suppresses recognition of ?-sequences
              // where ? is the last character of a preceding identifier, as in: `func?4`
              { begin: /\B\?(\\\d{1,3})/ },
              { begin: /\B\?(\\x[A-Fa-f0-9]{1,2})/ },
              { begin: /\B\?(\\u\{?[A-Fa-f0-9]{1,6}\}?)/ },
              { begin: /\B\?(\\M-\\C-|\\M-\\c|\\c\\M-|\\M-|\\C-\\M-)[\x20-\x7e]/ },
              { begin: /\B\?\\(c|C-)[\x20-\x7e]/ },
              { begin: /\B\?\\?\S/ },
              // heredocs
              {
                // this guard makes sure that we have an entire heredoc and not a false
                // positive (auto-detect, etc.)
                begin: regex.concat(
                  /<<[-~]?'?/,
                  regex.lookahead(/(\w+)(?=\W)[^\n]*\n(?:[^\n]*\n)*?\s*\1\b/)
                ),
                contains: [
                  hljs.END_SAME_AS_BEGIN({
                    begin: /(\w+)/,
                    end: /(\w+)/,
                    contains: [
                      hljs.BACKSLASH_ESCAPE,
                      SUBST
                    ]
                  })
                ]
              }
            ]
          };
 
          // Ruby syntax is underdocumented, but this grammar seems to be accurate
          // as of version 2.7.2 (confirmed with (irb and `Ripper.sexp(...)`)
          // https://docs.ruby-lang.org/en/2.7.0/doc/syntax/literals_rdoc.html#label-Numbers
          const decimal = '[1-9](_?[0-9])*|0';
          const digits = '[0-9](_?[0-9])*';
          const NUMBER = {
            className: 'number',
            relevance: 0,
            variants: [
              // decimal integer/float, optionally exponential or rational, optionally imaginary
              { begin: `\\b(${decimal})(\\.(${digits}))?([eE][+-]?(${digits})|r)?i?\\b` },
 
              // explicit decimal/binary/octal/hexadecimal integer,
              // optionally rational and/or imaginary
              { begin: "\\b0[dD][0-9](_?[0-9])*r?i?\\b" },
              { begin: "\\b0[bB][0-1](_?[0-1])*r?i?\\b" },
              { begin: "\\b0[oO][0-7](_?[0-7])*r?i?\\b" },
              { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*r?i?\\b" },
 
              // 0-prefixed implicit octal integer, optionally rational and/or imaginary
              { begin: "\\b0(_?[0-7])+r?i?\\b" }
            ]
          };
 
          const PARAMS = {
            variants: [
              {
                match: /\(\)/,
              },
              {
                className: 'params',
                begin: /\(/,
                end: /(?=\))/,
                excludeBegin: true,
                endsParent: true,
                keywords: RUBY_KEYWORDS,
              }
            ]
          };
 
          const INCLUDE_EXTEND = {
            match: [
              /(include|extend)\s+/,
              CLASS_NAME_WITH_NAMESPACE_RE
            ],
            scope: {
              2: "title.class"
            },
            keywords: RUBY_KEYWORDS
          };
 
          const CLASS_DEFINITION = {
            variants: [
              {
                match: [
                  /class\s+/,
                  CLASS_NAME_WITH_NAMESPACE_RE,
                  /\s+<\s+/,
                  CLASS_NAME_WITH_NAMESPACE_RE
                ]
              },
              {
                match: [
                  /\b(class|module)\s+/,
                  CLASS_NAME_WITH_NAMESPACE_RE
                ]
              }
            ],
            scope: {
              2: "title.class",
              4: "title.class.inherited"
            },
            keywords: RUBY_KEYWORDS
          };
 
          const UPPER_CASE_CONSTANT = {
            relevance: 0,
            match: /\b[A-Z][A-Z_0-9]+\b/,
            className: "variable.constant"
          };
 
          const METHOD_DEFINITION = {
            match: [
              /def/, /\s+/,
              RUBY_METHOD_RE
            ],
            scope: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              PARAMS
            ]
          };
 
          const OBJECT_CREATION = {
            relevance: 0,
            match: [
              CLASS_NAME_WITH_NAMESPACE_RE,
              /\.new[. (]/
            ],
            scope: {
              1: "title.class"
            }
          };
 
          // CamelCase
          const CLASS_REFERENCE = {
            relevance: 0,
            match: CLASS_NAME_RE,
            scope: "title.class"
          };
 
          const RUBY_DEFAULT_CONTAINS = [
            STRING,
            CLASS_DEFINITION,
            INCLUDE_EXTEND,
            OBJECT_CREATION,
            UPPER_CASE_CONSTANT,
            CLASS_REFERENCE,
            METHOD_DEFINITION,
            {
              // swallow namespace qualifiers before symbols
              begin: hljs.IDENT_RE + '::' },
            {
              className: 'symbol',
              begin: hljs.UNDERSCORE_IDENT_RE + '(!|\\?)?:',
              relevance: 0
            },
            {
              className: 'symbol',
              begin: ':(?!\\s)',
              contains: [
                STRING,
                { begin: RUBY_METHOD_RE }
              ],
              relevance: 0
            },
            NUMBER,
            {
              // negative-look forward attempts to prevent false matches like:
              // @ident@ or $ident$ that might indicate this is not ruby at all
              className: "variable",
              begin: '(\\$\\W)|((\\$|@@?)(\\w+))(?=[^@$?])' + `(?![A-Za-z])(?![@$?'])`
            },
            {
              className: 'params',
              begin: /\|/,
              end: /\|/,
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0, // this could be a lot of things (in other languages) other than params
              keywords: RUBY_KEYWORDS
            },
            { // regexp container
              begin: '(' + hljs.RE_STARTERS_RE + '|unless)\\s*',
              keywords: 'unless',
              contains: [
                {
                  className: 'regexp',
                  contains: [
                    hljs.BACKSLASH_ESCAPE,
                    SUBST
                  ],
                  illegal: /\n/,
                  variants: [
                    {
                      begin: '/',
                      end: '/[a-z]*'
                    },
                    {
                      begin: /%r\{/,
                      end: /\}[a-z]*/
                    },
                    {
                      begin: '%r\\(',
                      end: '\\)[a-z]*'
                    },
                    {
                      begin: '%r!',
                      end: '![a-z]*'
                    },
                    {
                      begin: '%r\\[',
                      end: '\\][a-z]*'
                    }
                  ]
                }
              ].concat(IRB_OBJECT, COMMENT_MODES),
              relevance: 0
            }
          ].concat(IRB_OBJECT, COMMENT_MODES);
 
          SUBST.contains = RUBY_DEFAULT_CONTAINS;
          PARAMS.contains = RUBY_DEFAULT_CONTAINS;
 
          // >>
          // ?>
          const SIMPLE_PROMPT = "[>?]>";
          // irb(main):001:0>
          const DEFAULT_PROMPT = "[\\w#]+\\(\\w+\\):\\d+:\\d+[>*]";
          const RVM_PROMPT = "(\\w+-)?\\d+\\.\\d+\\.\\d+(p\\d+)?[^\\d][^>]+>";
 
          const IRB_DEFAULT = [
            {
              begin: /^\s*=>/,
              starts: {
                end: '$',
                contains: RUBY_DEFAULT_CONTAINS
              }
            },
            {
              className: 'meta.prompt',
              begin: '^(' + SIMPLE_PROMPT + "|" + DEFAULT_PROMPT + '|' + RVM_PROMPT + ')(?=[ ])',
              starts: {
                end: '$',
                keywords: RUBY_KEYWORDS,
                contains: RUBY_DEFAULT_CONTAINS
              }
            }
          ];
 
          COMMENT_MODES.unshift(IRB_OBJECT);
 
          return {
            name: 'Ruby',
            aliases: [
              'rb',
              'gemspec',
              'podspec',
              'thor',
              'irb'
            ],
            keywords: RUBY_KEYWORDS,
            illegal: /\/\*/,
            contains: [ hljs.SHEBANG({ binary: "ruby" }) ]
              .concat(IRB_DEFAULT)
              .concat(COMMENT_MODES)
              .concat(RUBY_DEFAULT_CONTAINS)
          };
        }
 
        ruby_1 = ruby;
        return ruby_1;
    }
 
    /*
    Language: ERB (Embedded Ruby)
    Requires: xml.js, ruby.js
    Author: Lucas Mazza <lucastmazza@gmail.com>
    Contributors: Kassio Borges <kassioborgesm@gmail.com>
    Description: "Bridge" language defining fragments of Ruby in HTML within <% .. %>
    Website: https://ruby-doc.org/stdlib-2.6.5/libdoc/erb/rdoc/ERB.html
    Category: template
    */
 
    var erb_1;
    var hasRequiredErb;
 
    function requireErb () {
        if (hasRequiredErb) return erb_1;
        hasRequiredErb = 1;
        /** @type LanguageFn */
        function erb(hljs) {
          return {
            name: 'ERB',
            subLanguage: 'xml',
            contains: [
              hljs.COMMENT('<%#', '%>'),
              {
                begin: '<%[%=-]?',
                end: '[%-]?%>',
                subLanguage: 'ruby',
                excludeBegin: true,
                excludeEnd: true
              }
            ]
          };
        }
 
        erb_1 = erb;
        return erb_1;
    }
 
    /*
    Language: Erlang REPL
    Author: Sergey Ignatov <sergey@ignatov.spb.su>
    Website: https://www.erlang.org
    Category: functional
    */
 
    var erlangRepl_1;
    var hasRequiredErlangRepl;
 
    function requireErlangRepl () {
        if (hasRequiredErlangRepl) return erlangRepl_1;
        hasRequiredErlangRepl = 1;
        /** @type LanguageFn */
        function erlangRepl(hljs) {
          const regex = hljs.regex;
          return {
            name: 'Erlang REPL',
            keywords: {
              built_in:
                'spawn spawn_link self',
              keyword:
                'after and andalso|10 band begin bnot bor bsl bsr bxor case catch cond div end fun if '
                + 'let not of or orelse|10 query receive rem try when xor'
            },
            contains: [
              {
                className: 'meta.prompt',
                begin: '^[0-9]+> ',
                relevance: 10
              },
              hljs.COMMENT('%', '$'),
              {
                className: 'number',
                begin: '\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)',
                relevance: 0
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              { begin: regex.concat(
                /\?(::)?/,
                /([A-Z]\w*)/, // at least one identifier
                /((::)[A-Z]\w*)*/ // perhaps more
              ) },
              { begin: '->' },
              { begin: 'ok' },
              { begin: '!' },
              {
                begin: '(\\b[a-z\'][a-zA-Z0-9_\']*:[a-z\'][a-zA-Z0-9_\']*)|(\\b[a-z\'][a-zA-Z0-9_\']*)',
                relevance: 0
              },
              {
                begin: '[A-Z][a-zA-Z0-9_\']*',
                relevance: 0
              }
            ]
          };
        }
 
        erlangRepl_1 = erlangRepl;
        return erlangRepl_1;
    }
 
    /*
    Language: Erlang
    Description: Erlang is a general-purpose functional language, with strict evaluation, single assignment, and dynamic typing.
    Author: Nikolay Zakharov <nikolay.desh@gmail.com>, Dmitry Kovega <arhibot@gmail.com>
    Website: https://www.erlang.org
    Category: functional
    */
 
    var erlang_1;
    var hasRequiredErlang;
 
    function requireErlang () {
        if (hasRequiredErlang) return erlang_1;
        hasRequiredErlang = 1;
        /** @type LanguageFn */
        function erlang(hljs) {
          const BASIC_ATOM_RE = '[a-z\'][a-zA-Z0-9_\']*';
          const FUNCTION_NAME_RE = '(' + BASIC_ATOM_RE + ':' + BASIC_ATOM_RE + '|' + BASIC_ATOM_RE + ')';
          const ERLANG_RESERVED = {
            keyword:
              'after and andalso|10 band begin bnot bor bsl bzr bxor case catch cond div end fun if '
              + 'let not of orelse|10 query receive rem try when xor',
            literal:
              'false true'
          };
 
          const COMMENT = hljs.COMMENT('%', '$');
          const NUMBER = {
            className: 'number',
            begin: '\\b(\\d+(_\\d+)*#[a-fA-F0-9]+(_[a-fA-F0-9]+)*|\\d+(_\\d+)*(\\.\\d+(_\\d+)*)?([eE][-+]?\\d+)?)',
            relevance: 0
          };
          const NAMED_FUN = { begin: 'fun\\s+' + BASIC_ATOM_RE + '/\\d+' };
          const FUNCTION_CALL = {
            begin: FUNCTION_NAME_RE + '\\(',
            end: '\\)',
            returnBegin: true,
            relevance: 0,
            contains: [
              {
                begin: FUNCTION_NAME_RE,
                relevance: 0
              },
              {
                begin: '\\(',
                end: '\\)',
                endsWithParent: true,
                returnEnd: true,
                relevance: 0
                // "contains" defined later
              }
            ]
          };
          const TUPLE = {
            begin: /\{/,
            end: /\}/,
            relevance: 0
            // "contains" defined later
          };
          const VAR1 = {
            begin: '\\b_([A-Z][A-Za-z0-9_]*)?',
            relevance: 0
          };
          const VAR2 = {
            begin: '[A-Z][a-zA-Z0-9_]*',
            relevance: 0
          };
          const RECORD_ACCESS = {
            begin: '#' + hljs.UNDERSCORE_IDENT_RE,
            relevance: 0,
            returnBegin: true,
            contains: [
              {
                begin: '#' + hljs.UNDERSCORE_IDENT_RE,
                relevance: 0
              },
              {
                begin: /\{/,
                end: /\}/,
                relevance: 0
                // "contains" defined later
              }
            ]
          };
 
          const BLOCK_STATEMENTS = {
            beginKeywords: 'fun receive if try case',
            end: 'end',
            keywords: ERLANG_RESERVED
          };
          BLOCK_STATEMENTS.contains = [
            COMMENT,
            NAMED_FUN,
            hljs.inherit(hljs.APOS_STRING_MODE, { className: '' }),
            BLOCK_STATEMENTS,
            FUNCTION_CALL,
            hljs.QUOTE_STRING_MODE,
            NUMBER,
            TUPLE,
            VAR1,
            VAR2,
            RECORD_ACCESS
          ];
 
          const BASIC_MODES = [
            COMMENT,
            NAMED_FUN,
            BLOCK_STATEMENTS,
            FUNCTION_CALL,
            hljs.QUOTE_STRING_MODE,
            NUMBER,
            TUPLE,
            VAR1,
            VAR2,
            RECORD_ACCESS
          ];
          FUNCTION_CALL.contains[1].contains = BASIC_MODES;
          TUPLE.contains = BASIC_MODES;
          RECORD_ACCESS.contains[1].contains = BASIC_MODES;
 
          const DIRECTIVES = [
            "-module",
            "-record",
            "-undef",
            "-export",
            "-ifdef",
            "-ifndef",
            "-author",
            "-copyright",
            "-doc",
            "-vsn",
            "-import",
            "-include",
            "-include_lib",
            "-compile",
            "-define",
            "-else",
            "-endif",
            "-file",
            "-behaviour",
            "-behavior",
            "-spec"
          ];
 
          const PARAMS = {
            className: 'params',
            begin: '\\(',
            end: '\\)',
            contains: BASIC_MODES
          };
          return {
            name: 'Erlang',
            aliases: [ 'erl' ],
            keywords: ERLANG_RESERVED,
            illegal: '(</|\\*=|\\+=|-=|/\\*|\\*/|\\(\\*|\\*\\))',
            contains: [
              {
                className: 'function',
                begin: '^' + BASIC_ATOM_RE + '\\s*\\(',
                end: '->',
                returnBegin: true,
                illegal: '\\(|#|//|/\\*|\\\\|:|;',
                contains: [
                  PARAMS,
                  hljs.inherit(hljs.TITLE_MODE, { begin: BASIC_ATOM_RE })
                ],
                starts: {
                  end: ';|\\.',
                  keywords: ERLANG_RESERVED,
                  contains: BASIC_MODES
                }
              },
              COMMENT,
              {
                begin: '^-',
                end: '\\.',
                relevance: 0,
                excludeEnd: true,
                returnBegin: true,
                keywords: {
                  $pattern: '-' + hljs.IDENT_RE,
                  keyword: DIRECTIVES.map(x => `${x}|1.5`).join(" ")
                },
                contains: [ PARAMS ]
              },
              NUMBER,
              hljs.QUOTE_STRING_MODE,
              RECORD_ACCESS,
              VAR1,
              VAR2,
              TUPLE,
              { begin: /\.$/ } // relevance booster
            ]
          };
        }
 
        erlang_1 = erlang;
        return erlang_1;
    }
 
    /*
    Language: Excel formulae
    Author: Victor Zhou <OiCMudkips@users.noreply.github.com>
    Description: Excel formulae
    Website: https://products.office.com/en-us/excel/
    */
 
    var excel_1;
    var hasRequiredExcel;
 
    function requireExcel () {
        if (hasRequiredExcel) return excel_1;
        hasRequiredExcel = 1;
        /** @type LanguageFn */
        function excel(hljs) {
          // built-in functions imported from https://web.archive.org/web/20160513042710/https://support.office.com/en-us/article/Excel-functions-alphabetical-b3944572-255d-4efb-bb96-c6d90033e188
          const BUILT_INS = [
            "ABS",
            "ACCRINT",
            "ACCRINTM",
            "ACOS",
            "ACOSH",
            "ACOT",
            "ACOTH",
            "AGGREGATE",
            "ADDRESS",
            "AMORDEGRC",
            "AMORLINC",
            "AND",
            "ARABIC",
            "AREAS",
            "ASC",
            "ASIN",
            "ASINH",
            "ATAN",
            "ATAN2",
            "ATANH",
            "AVEDEV",
            "AVERAGE",
            "AVERAGEA",
            "AVERAGEIF",
            "AVERAGEIFS",
            "BAHTTEXT",
            "BASE",
            "BESSELI",
            "BESSELJ",
            "BESSELK",
            "BESSELY",
            "BETADIST",
            "BETA.DIST",
            "BETAINV",
            "BETA.INV",
            "BIN2DEC",
            "BIN2HEX",
            "BIN2OCT",
            "BINOMDIST",
            "BINOM.DIST",
            "BINOM.DIST.RANGE",
            "BINOM.INV",
            "BITAND",
            "BITLSHIFT",
            "BITOR",
            "BITRSHIFT",
            "BITXOR",
            "CALL",
            "CEILING",
            "CEILING.MATH",
            "CEILING.PRECISE",
            "CELL",
            "CHAR",
            "CHIDIST",
            "CHIINV",
            "CHITEST",
            "CHISQ.DIST",
            "CHISQ.DIST.RT",
            "CHISQ.INV",
            "CHISQ.INV.RT",
            "CHISQ.TEST",
            "CHOOSE",
            "CLEAN",
            "CODE",
            "COLUMN",
            "COLUMNS",
            "COMBIN",
            "COMBINA",
            "COMPLEX",
            "CONCAT",
            "CONCATENATE",
            "CONFIDENCE",
            "CONFIDENCE.NORM",
            "CONFIDENCE.T",
            "CONVERT",
            "CORREL",
            "COS",
            "COSH",
            "COT",
            "COTH",
            "COUNT",
            "COUNTA",
            "COUNTBLANK",
            "COUNTIF",
            "COUNTIFS",
            "COUPDAYBS",
            "COUPDAYS",
            "COUPDAYSNC",
            "COUPNCD",
            "COUPNUM",
            "COUPPCD",
            "COVAR",
            "COVARIANCE.P",
            "COVARIANCE.S",
            "CRITBINOM",
            "CSC",
            "CSCH",
            "CUBEKPIMEMBER",
            "CUBEMEMBER",
            "CUBEMEMBERPROPERTY",
            "CUBERANKEDMEMBER",
            "CUBESET",
            "CUBESETCOUNT",
            "CUBEVALUE",
            "CUMIPMT",
            "CUMPRINC",
            "DATE",
            "DATEDIF",
            "DATEVALUE",
            "DAVERAGE",
            "DAY",
            "DAYS",
            "DAYS360",
            "DB",
            "DBCS",
            "DCOUNT",
            "DCOUNTA",
            "DDB",
            "DEC2BIN",
            "DEC2HEX",
            "DEC2OCT",
            "DECIMAL",
            "DEGREES",
            "DELTA",
            "DEVSQ",
            "DGET",
            "DISC",
            "DMAX",
            "DMIN",
            "DOLLAR",
            "DOLLARDE",
            "DOLLARFR",
            "DPRODUCT",
            "DSTDEV",
            "DSTDEVP",
            "DSUM",
            "DURATION",
            "DVAR",
            "DVARP",
            "EDATE",
            "EFFECT",
            "ENCODEURL",
            "EOMONTH",
            "ERF",
            "ERF.PRECISE",
            "ERFC",
            "ERFC.PRECISE",
            "ERROR.TYPE",
            "EUROCONVERT",
            "EVEN",
            "EXACT",
            "EXP",
            "EXPON.DIST",
            "EXPONDIST",
            "FACT",
            "FACTDOUBLE",
            "FALSE|0",
            "F.DIST",
            "FDIST",
            "F.DIST.RT",
            "FILTERXML",
            "FIND",
            "FINDB",
            "F.INV",
            "F.INV.RT",
            "FINV",
            "FISHER",
            "FISHERINV",
            "FIXED",
            "FLOOR",
            "FLOOR.MATH",
            "FLOOR.PRECISE",
            "FORECAST",
            "FORECAST.ETS",
            "FORECAST.ETS.CONFINT",
            "FORECAST.ETS.SEASONALITY",
            "FORECAST.ETS.STAT",
            "FORECAST.LINEAR",
            "FORMULATEXT",
            "FREQUENCY",
            "F.TEST",
            "FTEST",
            "FV",
            "FVSCHEDULE",
            "GAMMA",
            "GAMMA.DIST",
            "GAMMADIST",
            "GAMMA.INV",
            "GAMMAINV",
            "GAMMALN",
            "GAMMALN.PRECISE",
            "GAUSS",
            "GCD",
            "GEOMEAN",
            "GESTEP",
            "GETPIVOTDATA",
            "GROWTH",
            "HARMEAN",
            "HEX2BIN",
            "HEX2DEC",
            "HEX2OCT",
            "HLOOKUP",
            "HOUR",
            "HYPERLINK",
            "HYPGEOM.DIST",
            "HYPGEOMDIST",
            "IF",
            "IFERROR",
            "IFNA",
            "IFS",
            "IMABS",
            "IMAGINARY",
            "IMARGUMENT",
            "IMCONJUGATE",
            "IMCOS",
            "IMCOSH",
            "IMCOT",
            "IMCSC",
            "IMCSCH",
            "IMDIV",
            "IMEXP",
            "IMLN",
            "IMLOG10",
            "IMLOG2",
            "IMPOWER",
            "IMPRODUCT",
            "IMREAL",
            "IMSEC",
            "IMSECH",
            "IMSIN",
            "IMSINH",
            "IMSQRT",
            "IMSUB",
            "IMSUM",
            "IMTAN",
            "INDEX",
            "INDIRECT",
            "INFO",
            "INT",
            "INTERCEPT",
            "INTRATE",
            "IPMT",
            "IRR",
            "ISBLANK",
            "ISERR",
            "ISERROR",
            "ISEVEN",
            "ISFORMULA",
            "ISLOGICAL",
            "ISNA",
            "ISNONTEXT",
            "ISNUMBER",
            "ISODD",
            "ISREF",
            "ISTEXT",
            "ISO.CEILING",
            "ISOWEEKNUM",
            "ISPMT",
            "JIS",
            "KURT",
            "LARGE",
            "LCM",
            "LEFT",
            "LEFTB",
            "LEN",
            "LENB",
            "LINEST",
            "LN",
            "LOG",
            "LOG10",
            "LOGEST",
            "LOGINV",
            "LOGNORM.DIST",
            "LOGNORMDIST",
            "LOGNORM.INV",
            "LOOKUP",
            "LOWER",
            "MATCH",
            "MAX",
            "MAXA",
            "MAXIFS",
            "MDETERM",
            "MDURATION",
            "MEDIAN",
            "MID",
            "MIDBs",
            "MIN",
            "MINIFS",
            "MINA",
            "MINUTE",
            "MINVERSE",
            "MIRR",
            "MMULT",
            "MOD",
            "MODE",
            "MODE.MULT",
            "MODE.SNGL",
            "MONTH",
            "MROUND",
            "MULTINOMIAL",
            "MUNIT",
            "N",
            "NA",
            "NEGBINOM.DIST",
            "NEGBINOMDIST",
            "NETWORKDAYS",
            "NETWORKDAYS.INTL",
            "NOMINAL",
            "NORM.DIST",
            "NORMDIST",
            "NORMINV",
            "NORM.INV",
            "NORM.S.DIST",
            "NORMSDIST",
            "NORM.S.INV",
            "NORMSINV",
            "NOT",
            "NOW",
            "NPER",
            "NPV",
            "NUMBERVALUE",
            "OCT2BIN",
            "OCT2DEC",
            "OCT2HEX",
            "ODD",
            "ODDFPRICE",
            "ODDFYIELD",
            "ODDLPRICE",
            "ODDLYIELD",
            "OFFSET",
            "OR",
            "PDURATION",
            "PEARSON",
            "PERCENTILE.EXC",
            "PERCENTILE.INC",
            "PERCENTILE",
            "PERCENTRANK.EXC",
            "PERCENTRANK.INC",
            "PERCENTRANK",
            "PERMUT",
            "PERMUTATIONA",
            "PHI",
            "PHONETIC",
            "PI",
            "PMT",
            "POISSON.DIST",
            "POISSON",
            "POWER",
            "PPMT",
            "PRICE",
            "PRICEDISC",
            "PRICEMAT",
            "PROB",
            "PRODUCT",
            "PROPER",
            "PV",
            "QUARTILE",
            "QUARTILE.EXC",
            "QUARTILE.INC",
            "QUOTIENT",
            "RADIANS",
            "RAND",
            "RANDBETWEEN",
            "RANK.AVG",
            "RANK.EQ",
            "RANK",
            "RATE",
            "RECEIVED",
            "REGISTER.ID",
            "REPLACE",
            "REPLACEB",
            "REPT",
            "RIGHT",
            "RIGHTB",
            "ROMAN",
            "ROUND",
            "ROUNDDOWN",
            "ROUNDUP",
            "ROW",
            "ROWS",
            "RRI",
            "RSQ",
            "RTD",
            "SEARCH",
            "SEARCHB",
            "SEC",
            "SECH",
            "SECOND",
            "SERIESSUM",
            "SHEET",
            "SHEETS",
            "SIGN",
            "SIN",
            "SINH",
            "SKEW",
            "SKEW.P",
            "SLN",
            "SLOPE",
            "SMALL",
            "SQL.REQUEST",
            "SQRT",
            "SQRTPI",
            "STANDARDIZE",
            "STDEV",
            "STDEV.P",
            "STDEV.S",
            "STDEVA",
            "STDEVP",
            "STDEVPA",
            "STEYX",
            "SUBSTITUTE",
            "SUBTOTAL",
            "SUM",
            "SUMIF",
            "SUMIFS",
            "SUMPRODUCT",
            "SUMSQ",
            "SUMX2MY2",
            "SUMX2PY2",
            "SUMXMY2",
            "SWITCH",
            "SYD",
            "T",
            "TAN",
            "TANH",
            "TBILLEQ",
            "TBILLPRICE",
            "TBILLYIELD",
            "T.DIST",
            "T.DIST.2T",
            "T.DIST.RT",
            "TDIST",
            "TEXT",
            "TEXTJOIN",
            "TIME",
            "TIMEVALUE",
            "T.INV",
            "T.INV.2T",
            "TINV",
            "TODAY",
            "TRANSPOSE",
            "TREND",
            "TRIM",
            "TRIMMEAN",
            "TRUE|0",
            "TRUNC",
            "T.TEST",
            "TTEST",
            "TYPE",
            "UNICHAR",
            "UNICODE",
            "UPPER",
            "VALUE",
            "VAR",
            "VAR.P",
            "VAR.S",
            "VARA",
            "VARP",
            "VARPA",
            "VDB",
            "VLOOKUP",
            "WEBSERVICE",
            "WEEKDAY",
            "WEEKNUM",
            "WEIBULL",
            "WEIBULL.DIST",
            "WORKDAY",
            "WORKDAY.INTL",
            "XIRR",
            "XNPV",
            "XOR",
            "YEAR",
            "YEARFRAC",
            "YIELD",
            "YIELDDISC",
            "YIELDMAT",
            "Z.TEST",
            "ZTEST"
          ];
          return {
            name: 'Excel formulae',
            aliases: [
              'xlsx',
              'xls'
            ],
            case_insensitive: true,
            keywords: {
              $pattern: /[a-zA-Z][\w\.]*/,
              built_in: BUILT_INS
            },
            contains: [
              {
                /* matches a beginning equal sign found in Excel formula examples */
                begin: /^=/,
                end: /[^=]/,
                returnEnd: true,
                illegal: /=/, /* only allow single equal sign at front of line */
                relevance: 10
              },
              /* technically, there can be more than 2 letters in column names, but this prevents conflict with some keywords */
              {
                /* matches a reference to a single cell */
                className: 'symbol',
                begin: /\b[A-Z]{1,2}\d+\b/,
                end: /[^\d]/,
                excludeEnd: true,
                relevance: 0
              },
              {
                /* matches a reference to a range of cells */
                className: 'symbol',
                begin: /[A-Z]{0,2}\d*:[A-Z]{0,2}\d*/,
                relevance: 0
              },
              hljs.BACKSLASH_ESCAPE,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'number',
                begin: hljs.NUMBER_RE + '(%)?',
                relevance: 0
              },
              /* Excel formula comments are done by putting the comment in a function call to N() */
              hljs.COMMENT(/\bN\(/, /\)/,
                {
                  excludeBegin: true,
                  excludeEnd: true,
                  illegal: /\n/
                })
            ]
          };
        }
 
        excel_1 = excel;
        return excel_1;
    }
 
    /*
    Language: FIX
    Author: Brent Bradbury <brent@brentium.com>
    */
 
    var fix_1;
    var hasRequiredFix;
 
    function requireFix () {
        if (hasRequiredFix) return fix_1;
        hasRequiredFix = 1;
        /** @type LanguageFn */
        function fix(hljs) {
          return {
            name: 'FIX',
            contains: [
              {
                begin: /[^\u2401\u0001]+/,
                end: /[\u2401\u0001]/,
                excludeEnd: true,
                returnBegin: true,
                returnEnd: false,
                contains: [
                  {
                    begin: /([^\u2401\u0001=]+)/,
                    end: /=([^\u2401\u0001=]+)/,
                    returnEnd: true,
                    returnBegin: false,
                    className: 'attr'
                  },
                  {
                    begin: /=/,
                    end: /([\u2401\u0001])/,
                    excludeEnd: true,
                    excludeBegin: true,
                    className: 'string'
                  }
                ]
              }
            ],
            case_insensitive: true
          };
        }
 
        fix_1 = fix;
        return fix_1;
    }
 
    /*
     Language: Flix
     Category: functional
     Author: Magnus Madsen <mmadsen@uwaterloo.ca>
     Website: https://flix.dev/
     */
 
    var flix_1;
    var hasRequiredFlix;
 
    function requireFlix () {
        if (hasRequiredFlix) return flix_1;
        hasRequiredFlix = 1;
        /** @type LanguageFn */
        function flix(hljs) {
          const CHAR = {
            className: 'string',
            begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
          };
 
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: '"',
                end: '"'
              }
            ]
          };
 
          const NAME = {
            className: 'title',
            relevance: 0,
            begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/
          };
 
          const METHOD = {
            className: 'function',
            beginKeywords: 'def',
            end: /[:={\[(\n;]/,
            excludeEnd: true,
            contains: [ NAME ]
          };
 
          return {
            name: 'Flix',
            keywords: {
              keyword: [
                "case",
                "class",
                "def",
                "else",
                "enum",
                "if",
                "impl",
                "import",
                "in",
                "lat",
                "rel",
                "index",
                "let",
                "match",
                "namespace",
                "switch",
                "type",
                "yield",
                "with"
              ],
              literal: [
                "true",
                "false"
              ]
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              CHAR,
              STRING,
              METHOD,
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        flix_1 = flix;
        return flix_1;
    }
 
    /*
    Language: Fortran
    Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
    Website: https://en.wikipedia.org/wiki/Fortran
    Category: scientific
    */
 
    var fortran_1;
    var hasRequiredFortran;
 
    function requireFortran () {
        if (hasRequiredFortran) return fortran_1;
        hasRequiredFortran = 1;
        /** @type LanguageFn */
        function fortran(hljs) {
          const regex = hljs.regex;
          const PARAMS = {
            className: 'params',
            begin: '\\(',
            end: '\\)'
          };
 
          const COMMENT = { variants: [
            hljs.COMMENT('!', '$', { relevance: 0 }),
            // allow FORTRAN 77 style comments
            hljs.COMMENT('^C[ ]', '$', { relevance: 0 }),
            hljs.COMMENT('^C$', '$', { relevance: 0 })
          ] };
 
          // regex in both fortran and irpf90 should match
          const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
          const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
          const NUMBER = {
            className: 'number',
            variants: [
              { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
              { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
              { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
            ],
            relevance: 0
          };
 
          const FUNCTION_DEF = {
            className: 'function',
            beginKeywords: 'subroutine function program',
            illegal: '[${=\\n]',
            contains: [
              hljs.UNDERSCORE_TITLE_MODE,
              PARAMS
            ]
          };
 
          const STRING = {
            className: 'string',
            relevance: 0,
            variants: [
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE
            ]
          };
 
          const KEYWORDS = [
            "kind",
            "do",
            "concurrent",
            "local",
            "shared",
            "while",
            "private",
            "call",
            "intrinsic",
            "where",
            "elsewhere",
            "type",
            "endtype",
            "endmodule",
            "endselect",
            "endinterface",
            "end",
            "enddo",
            "endif",
            "if",
            "forall",
            "endforall",
            "only",
            "contains",
            "default",
            "return",
            "stop",
            "then",
            "block",
            "endblock",
            "endassociate",
            "public",
            "subroutine|10",
            "function",
            "program",
            ".and.",
            ".or.",
            ".not.",
            ".le.",
            ".eq.",
            ".ge.",
            ".gt.",
            ".lt.",
            "goto",
            "save",
            "else",
            "use",
            "module",
            "select",
            "case",
            "access",
            "blank",
            "direct",
            "exist",
            "file",
            "fmt",
            "form",
            "formatted",
            "iostat",
            "name",
            "named",
            "nextrec",
            "number",
            "opened",
            "rec",
            "recl",
            "sequential",
            "status",
            "unformatted",
            "unit",
            "continue",
            "format",
            "pause",
            "cycle",
            "exit",
            "c_null_char",
            "c_alert",
            "c_backspace",
            "c_form_feed",
            "flush",
            "wait",
            "decimal",
            "round",
            "iomsg",
            "synchronous",
            "nopass",
            "non_overridable",
            "pass",
            "protected",
            "volatile",
            "abstract",
            "extends",
            "import",
            "non_intrinsic",
            "value",
            "deferred",
            "generic",
            "final",
            "enumerator",
            "class",
            "associate",
            "bind",
            "enum",
            "c_int",
            "c_short",
            "c_long",
            "c_long_long",
            "c_signed_char",
            "c_size_t",
            "c_int8_t",
            "c_int16_t",
            "c_int32_t",
            "c_int64_t",
            "c_int_least8_t",
            "c_int_least16_t",
            "c_int_least32_t",
            "c_int_least64_t",
            "c_int_fast8_t",
            "c_int_fast16_t",
            "c_int_fast32_t",
            "c_int_fast64_t",
            "c_intmax_t",
            "C_intptr_t",
            "c_float",
            "c_double",
            "c_long_double",
            "c_float_complex",
            "c_double_complex",
            "c_long_double_complex",
            "c_bool",
            "c_char",
            "c_null_ptr",
            "c_null_funptr",
            "c_new_line",
            "c_carriage_return",
            "c_horizontal_tab",
            "c_vertical_tab",
            "iso_c_binding",
            "c_loc",
            "c_funloc",
            "c_associated",
            "c_f_pointer",
            "c_ptr",
            "c_funptr",
            "iso_fortran_env",
            "character_storage_size",
            "error_unit",
            "file_storage_size",
            "input_unit",
            "iostat_end",
            "iostat_eor",
            "numeric_storage_size",
            "output_unit",
            "c_f_procpointer",
            "ieee_arithmetic",
            "ieee_support_underflow_control",
            "ieee_get_underflow_mode",
            "ieee_set_underflow_mode",
            "newunit",
            "contiguous",
            "recursive",
            "pad",
            "position",
            "action",
            "delim",
            "readwrite",
            "eor",
            "advance",
            "nml",
            "interface",
            "procedure",
            "namelist",
            "include",
            "sequence",
            "elemental",
            "pure",
            "impure",
            "integer",
            "real",
            "character",
            "complex",
            "logical",
            "codimension",
            "dimension",
            "allocatable|10",
            "parameter",
            "external",
            "implicit|10",
            "none",
            "double",
            "precision",
            "assign",
            "intent",
            "optional",
            "pointer",
            "target",
            "in",
            "out",
            "common",
            "equivalence",
            "data"
          ];
          const LITERALS = [
            ".False.",
            ".True."
          ];
          const BUILT_INS = [
            "alog",
            "alog10",
            "amax0",
            "amax1",
            "amin0",
            "amin1",
            "amod",
            "cabs",
            "ccos",
            "cexp",
            "clog",
            "csin",
            "csqrt",
            "dabs",
            "dacos",
            "dasin",
            "datan",
            "datan2",
            "dcos",
            "dcosh",
            "ddim",
            "dexp",
            "dint",
            "dlog",
            "dlog10",
            "dmax1",
            "dmin1",
            "dmod",
            "dnint",
            "dsign",
            "dsin",
            "dsinh",
            "dsqrt",
            "dtan",
            "dtanh",
            "float",
            "iabs",
            "idim",
            "idint",
            "idnint",
            "ifix",
            "isign",
            "max0",
            "max1",
            "min0",
            "min1",
            "sngl",
            "algama",
            "cdabs",
            "cdcos",
            "cdexp",
            "cdlog",
            "cdsin",
            "cdsqrt",
            "cqabs",
            "cqcos",
            "cqexp",
            "cqlog",
            "cqsin",
            "cqsqrt",
            "dcmplx",
            "dconjg",
            "derf",
            "derfc",
            "dfloat",
            "dgamma",
            "dimag",
            "dlgama",
            "iqint",
            "qabs",
            "qacos",
            "qasin",
            "qatan",
            "qatan2",
            "qcmplx",
            "qconjg",
            "qcos",
            "qcosh",
            "qdim",
            "qerf",
            "qerfc",
            "qexp",
            "qgamma",
            "qimag",
            "qlgama",
            "qlog",
            "qlog10",
            "qmax1",
            "qmin1",
            "qmod",
            "qnint",
            "qsign",
            "qsin",
            "qsinh",
            "qsqrt",
            "qtan",
            "qtanh",
            "abs",
            "acos",
            "aimag",
            "aint",
            "anint",
            "asin",
            "atan",
            "atan2",
            "char",
            "cmplx",
            "conjg",
            "cos",
            "cosh",
            "exp",
            "ichar",
            "index",
            "int",
            "log",
            "log10",
            "max",
            "min",
            "nint",
            "sign",
            "sin",
            "sinh",
            "sqrt",
            "tan",
            "tanh",
            "print",
            "write",
            "dim",
            "lge",
            "lgt",
            "lle",
            "llt",
            "mod",
            "nullify",
            "allocate",
            "deallocate",
            "adjustl",
            "adjustr",
            "all",
            "allocated",
            "any",
            "associated",
            "bit_size",
            "btest",
            "ceiling",
            "count",
            "cshift",
            "date_and_time",
            "digits",
            "dot_product",
            "eoshift",
            "epsilon",
            "exponent",
            "floor",
            "fraction",
            "huge",
            "iand",
            "ibclr",
            "ibits",
            "ibset",
            "ieor",
            "ior",
            "ishft",
            "ishftc",
            "lbound",
            "len_trim",
            "matmul",
            "maxexponent",
            "maxloc",
            "maxval",
            "merge",
            "minexponent",
            "minloc",
            "minval",
            "modulo",
            "mvbits",
            "nearest",
            "pack",
            "present",
            "product",
            "radix",
            "random_number",
            "random_seed",
            "range",
            "repeat",
            "reshape",
            "rrspacing",
            "scale",
            "scan",
            "selected_int_kind",
            "selected_real_kind",
            "set_exponent",
            "shape",
            "size",
            "spacing",
            "spread",
            "sum",
            "system_clock",
            "tiny",
            "transpose",
            "trim",
            "ubound",
            "unpack",
            "verify",
            "achar",
            "iachar",
            "transfer",
            "dble",
            "entry",
            "dprod",
            "cpu_time",
            "command_argument_count",
            "get_command",
            "get_command_argument",
            "get_environment_variable",
            "is_iostat_end",
            "ieee_arithmetic",
            "ieee_support_underflow_control",
            "ieee_get_underflow_mode",
            "ieee_set_underflow_mode",
            "is_iostat_eor",
            "move_alloc",
            "new_line",
            "selected_char_kind",
            "same_type_as",
            "extends_type_of",
            "acosh",
            "asinh",
            "atanh",
            "bessel_j0",
            "bessel_j1",
            "bessel_jn",
            "bessel_y0",
            "bessel_y1",
            "bessel_yn",
            "erf",
            "erfc",
            "erfc_scaled",
            "gamma",
            "log_gamma",
            "hypot",
            "norm2",
            "atomic_define",
            "atomic_ref",
            "execute_command_line",
            "leadz",
            "trailz",
            "storage_size",
            "merge_bits",
            "bge",
            "bgt",
            "ble",
            "blt",
            "dshiftl",
            "dshiftr",
            "findloc",
            "iall",
            "iany",
            "iparity",
            "image_index",
            "lcobound",
            "ucobound",
            "maskl",
            "maskr",
            "num_images",
            "parity",
            "popcnt",
            "poppar",
            "shifta",
            "shiftl",
            "shiftr",
            "this_image",
            "sync",
            "change",
            "team",
            "co_broadcast",
            "co_max",
            "co_min",
            "co_sum",
            "co_reduce"
          ];
          return {
            name: 'Fortran',
            case_insensitive: true,
            aliases: [
              'f90',
              'f95'
            ],
            keywords: {
              keyword: KEYWORDS,
              literal: LITERALS,
              built_in: BUILT_INS
            },
            illegal: /\/\*/,
            contains: [
              STRING,
              FUNCTION_DEF,
              // allow `C = value` for assignments so they aren't misdetected
              // as Fortran 77 style comments
              {
                begin: /^C\s*=(?!=)/,
                relevance: 0
              },
              COMMENT,
              NUMBER
            ]
          };
        }
 
        fortran_1 = fortran;
        return fortran_1;
    }
 
    /**
     * @param {string} value
     * @returns {RegExp}
     * */
 
    var fsharp_1;
    var hasRequiredFsharp;
 
    function requireFsharp () {
        if (hasRequiredFsharp) return fsharp_1;
        hasRequiredFsharp = 1;
        function escape(value) {
          return new RegExp(value.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&'), 'm');
        }
 
        /**
         * @param {RegExp | string } re
         * @returns {string}
         */
        function source(re) {
          if (!re) return null;
          if (typeof re === "string") return re;
 
          return re.source;
        }
 
        /**
         * @param {RegExp | string } re
         * @returns {string}
         */
        function lookahead(re) {
          return concat('(?=', re, ')');
        }
 
        /**
         * @param {...(RegExp | string) } args
         * @returns {string}
         */
        function concat(...args) {
          const joined = args.map((x) => source(x)).join("");
          return joined;
        }
 
        /**
         * @param { Array<string | RegExp | Object> } args
         * @returns {object}
         */
        function stripOptionsFromArgs(args) {
          const opts = args[args.length - 1];
 
          if (typeof opts === 'object' && opts.constructor === Object) {
            args.splice(args.length - 1, 1);
            return opts;
          } else {
            return {};
          }
        }
 
        /** @typedef { {capture?: boolean} } RegexEitherOptions */
 
        /**
         * Any of the passed expresssions may match
         *
         * Creates a huge this | this | that | that match
         * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
         * @returns {string}
         */
        function either(...args) {
          /** @type { object & {capture?: boolean} }  */
          const opts = stripOptionsFromArgs(args);
          const joined = '('
            + (opts.capture ? "" : "?:")
            + args.map((x) => source(x)).join("|") + ")";
          return joined;
        }
 
        /*
        Language: F#
        Author: Jonas Follesø <jonas@follesoe.no>
        Contributors: Troy Kershaw <hello@troykershaw.com>, Henrik Feldt <henrik@haf.se>, Melvyn Laïly <melvyn.laily@gmail.com>
        Website: https://docs.microsoft.com/en-us/dotnet/fsharp/
        Category: functional
        */
 
        /** @type LanguageFn */
        function fsharp(hljs) {
          const KEYWORDS = [
            "abstract",
            "and",
            "as",
            "assert",
            "base",
            "begin",
            "class",
            "default",
            "delegate",
            "do",
            "done",
            "downcast",
            "downto",
            "elif",
            "else",
            "end",
            "exception",
            "extern",
            // "false", // literal
            "finally",
            "fixed",
            "for",
            "fun",
            "function",
            "global",
            "if",
            "in",
            "inherit",
            "inline",
            "interface",
            "internal",
            "lazy",
            "let",
            "match",
            "member",
            "module",
            "mutable",
            "namespace",
            "new",
            // "not", // built_in
            // "null", // literal
            "of",
            "open",
            "or",
            "override",
            "private",
            "public",
            "rec",
            "return",
            "static",
            "struct",
            "then",
            "to",
            // "true", // literal
            "try",
            "type",
            "upcast",
            "use",
            "val",
            "void",
            "when",
            "while",
            "with",
            "yield"
          ];
 
          const BANG_KEYWORD_MODE = {
            // monad builder keywords (matches before non-bang keywords)
            scope: 'keyword',
            match: /\b(yield|return|let|do|match|use)!/
          };
 
          const PREPROCESSOR_KEYWORDS = [
            "if",
            "else",
            "endif",
            "line",
            "nowarn",
            "light",
            "r",
            "i",
            "I",
            "load",
            "time",
            "help",
            "quit"
          ];
 
          const LITERALS = [
            "true",
            "false",
            "null",
            "Some",
            "None",
            "Ok",
            "Error",
            "infinity",
            "infinityf",
            "nan",
            "nanf"
          ];
 
          const SPECIAL_IDENTIFIERS = [
            "__LINE__",
            "__SOURCE_DIRECTORY__",
            "__SOURCE_FILE__"
          ];
 
          // Since it's possible to re-bind/shadow names (e.g. let char = 'c'),
          // these builtin types should only be matched when a type name is expected.
          const KNOWN_TYPES = [
            // basic types
            "bool",
            "byte",
            "sbyte",
            "int8",
            "int16",
            "int32",
            "uint8",
            "uint16",
            "uint32",
            "int",
            "uint",
            "int64",
            "uint64",
            "nativeint",
            "unativeint",
            "decimal",
            "float",
            "double",
            "float32",
            "single",
            "char",
            "string",
            "unit",
            "bigint",
            // other native types or lowercase aliases
            "option",
            "voption",
            "list",
            "array",
            "seq",
            "byref",
            "exn",
            "inref",
            "nativeptr",
            "obj",
            "outref",
            "voidptr",
            // other important FSharp types
            "Result"
          ];
 
          const BUILTINS = [
            // Somewhat arbitrary list of builtin functions and values.
            // Most of them are declared in Microsoft.FSharp.Core
            // I tried to stay relevant by adding only the most idiomatic
            // and most used symbols that are not already declared as types.
            "not",
            "ref",
            "raise",
            "reraise",
            "dict",
            "readOnlyDict",
            "set",
            "get",
            "enum",
            "sizeof",
            "typeof",
            "typedefof",
            "nameof",
            "nullArg",
            "invalidArg",
            "invalidOp",
            "id",
            "fst",
            "snd",
            "ignore",
            "lock",
            "using",
            "box",
            "unbox",
            "tryUnbox",
            "printf",
            "printfn",
            "sprintf",
            "eprintf",
            "eprintfn",
            "fprintf",
            "fprintfn",
            "failwith",
            "failwithf"
          ];
 
          const ALL_KEYWORDS = {
            keyword: KEYWORDS,
            literal: LITERALS,
            built_in: BUILTINS,
            'variable.constant': SPECIAL_IDENTIFIERS
          };
 
          // (* potentially multi-line Meta Language style comment *)
          const ML_COMMENT =
            hljs.COMMENT(/\(\*(?!\))/, /\*\)/, {
              contains: ["self"]
            });
          // Either a multi-line (* Meta Language style comment *) or a single line // C style comment.
          const COMMENT = {
            variants: [
              ML_COMMENT,
              hljs.C_LINE_COMMENT_MODE,
            ]
          };
 
          // Most identifiers can contain apostrophes
          const IDENTIFIER_RE = /[a-zA-Z_](\w|')*/;
 
          const QUOTED_IDENTIFIER = {
            scope: 'variable',
            begin: /``/,
            end: /``/
          };
 
          // 'a or ^a where a can be a ``quoted identifier``
          const BEGIN_GENERIC_TYPE_SYMBOL_RE = /\B('|\^)/;
          const GENERIC_TYPE_SYMBOL = {
            scope: 'symbol',
            variants: [
              // the type name is a quoted identifier:
              { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, /``.*?``/) },
              // the type name is a normal identifier (we don't use IDENTIFIER_RE because there cannot be another apostrophe here):
              { match: concat(BEGIN_GENERIC_TYPE_SYMBOL_RE, hljs.UNDERSCORE_IDENT_RE) }
            ],
            relevance: 0
          };
 
          const makeOperatorMode = function({ includeEqual }) {
            // List or symbolic operator characters from the FSharp Spec 4.1, minus the dot, and with `?` added, used for nullable operators.
            let allOperatorChars;
            if (includeEqual)
              allOperatorChars = "!%&*+-/<=>@^|~?";
            else
              allOperatorChars = "!%&*+-/<>@^|~?";
            const OPERATOR_CHARS = Array.from(allOperatorChars);
            const OPERATOR_CHAR_RE = concat('[', ...OPERATOR_CHARS.map(escape), ']');
            // The lone dot operator is special. It cannot be redefined, and we don't want to highlight it. It can be used as part of a multi-chars operator though.
            const OPERATOR_CHAR_OR_DOT_RE = either(OPERATOR_CHAR_RE, /\./);
            // When a dot is present, it must be followed by another operator char:
            const OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE = concat(OPERATOR_CHAR_OR_DOT_RE, lookahead(OPERATOR_CHAR_OR_DOT_RE));
            const SYMBOLIC_OPERATOR_RE = either(
              concat(OPERATOR_FIRST_CHAR_OF_MULTIPLE_RE, OPERATOR_CHAR_OR_DOT_RE, '*'), // Matches at least 2 chars operators
              concat(OPERATOR_CHAR_RE, '+'), // Matches at least one char operators
            );
            return {
              scope: 'operator',
              match: either(
                // symbolic operators:
                SYMBOLIC_OPERATOR_RE,
                // other symbolic keywords:
                // Type casting and conversion operators:
                /:\?>/,
                /:\?/,
                /:>/,
                /:=/, // Reference cell assignment
                /::?/, // : or ::
                /\$/), // A single $ can be used as an operator
              relevance: 0
            };
          };
 
          const OPERATOR = makeOperatorMode({ includeEqual: true });
          // This variant is used when matching '=' should end a parent mode:
          const OPERATOR_WITHOUT_EQUAL = makeOperatorMode({ includeEqual: false });
 
          const makeTypeAnnotationMode = function(prefix, prefixScope) {
            return {
              begin: concat( // a type annotation is a
                prefix,            // should be a colon or the 'of' keyword
                lookahead(   // that has to be followed by
                  concat(
                    /\s*/,         // optional space
                    either(  // then either of:
                      /\w/,        // word
                      /'/,         // generic type name
                      /\^/,        // generic type name
                      /#/,         // flexible type name
                      /``/,        // quoted type name
                      /\(/,        // parens type expression
                      /{\|/,       // anonymous type annotation
              )))),
              beginScope: prefixScope,
              // BUG: because ending with \n is necessary for some cases, multi-line type annotations are not properly supported.
              // Examples where \n is required at the end:
              // - abstract member definitions in classes: abstract Property : int * string
              // - return type annotations: let f f' = f' () : returnTypeAnnotation
              // - record fields definitions: { A : int \n B : string }
              end: lookahead(
                either(
                  /\n/,
                  /=/)),
              relevance: 0,
              // we need the known types, and we need the type constraint keywords and literals. e.g.: when 'a : null
              keywords: hljs.inherit(ALL_KEYWORDS, { type: KNOWN_TYPES }),
              contains: [
                COMMENT,
                GENERIC_TYPE_SYMBOL,
                hljs.inherit(QUOTED_IDENTIFIER, { scope: null }), // match to avoid strange patterns inside that may break the parsing
                OPERATOR_WITHOUT_EQUAL
              ]
            };
          };
 
          const TYPE_ANNOTATION = makeTypeAnnotationMode(/:/, 'operator');
          const DISCRIMINATED_UNION_TYPE_ANNOTATION = makeTypeAnnotationMode(/\bof\b/, 'keyword');
 
          // type MyType<'a> = ...
          const TYPE_DECLARATION = {
            begin: [
              /(^|\s+)/, // prevents matching the following: `match s.stype with`
              /type/,
              /\s+/,
              IDENTIFIER_RE
            ],
            beginScope: {
              2: 'keyword',
              4: 'title.class'
            },
            end: lookahead(/\(|=|$/),
            keywords: ALL_KEYWORDS, // match keywords in type constraints. e.g.: when 'a : null
            contains: [
              COMMENT,
              hljs.inherit(QUOTED_IDENTIFIER, { scope: null }), // match to avoid strange patterns inside that may break the parsing
              GENERIC_TYPE_SYMBOL,
              {
                // For visual consistency, highlight type brackets as operators.
                scope: 'operator',
                match: /<|>/
              },
              TYPE_ANNOTATION // generic types can have constraints, which are type annotations. e.g. type MyType<'T when 'T : delegate<obj * string>> =
            ]
          };
 
          const COMPUTATION_EXPRESSION = {
            // computation expressions:
            scope: 'computation-expression',
            // BUG: might conflict with record deconstruction. e.g. let f { Name = name } = name // will highlight f
            match: /\b[_a-z]\w*(?=\s*\{)/
          };
 
          const PREPROCESSOR = {
            // preprocessor directives and fsi commands:
            begin: [
              /^\s*/,
              concat(/#/, either(...PREPROCESSOR_KEYWORDS)),
              /\b/
            ],
            beginScope: { 2: 'meta' },
            end: lookahead(/\s|$/)
          };
 
          // TODO: this definition is missing support for type suffixes and octal notation.
          // BUG: range operator without any space is wrongly interpreted as a single number (e.g. 1..10 )
          const NUMBER = {
            variants: [
              hljs.BINARY_NUMBER_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
 
          // All the following string definitions are potentially multi-line.
          // BUG: these definitions are missing support for byte strings (suffixed with B)
 
          // "..."
          const QUOTED_STRING = {
            scope: 'string',
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE
            ]
          };
          // @"..."
          const VERBATIM_STRING = {
            scope: 'string',
            begin: /@"/,
            end: /"/,
            contains: [
              {
                match: /""/ // escaped "
              },
              hljs.BACKSLASH_ESCAPE
            ]
          };
          // """..."""
          const TRIPLE_QUOTED_STRING = {
            scope: 'string',
            begin: /"""/,
            end: /"""/,
            relevance: 2
          };
          const SUBST = {
            scope: 'subst',
            begin: /\{/,
            end: /\}/,
            keywords: ALL_KEYWORDS
          };
          // $"...{1+1}..."
          const INTERPOLATED_STRING = {
            scope: 'string',
            begin: /\$"/,
            end: /"/,
            contains: [
              {
                match: /\{\{/ // escaped {
              },
              {
                match: /\}\}/ // escaped }
              },
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          };
          // $@"...{1+1}..."
          const INTERPOLATED_VERBATIM_STRING = {
            scope: 'string',
            begin: /(\$@|@\$)"/,
            end: /"/,
            contains: [
              {
                match: /\{\{/ // escaped {
              },
              {
                match: /\}\}/ // escaped }
              },
              {
                match: /""/
              },
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          };
          // $"""...{1+1}..."""
          const INTERPOLATED_TRIPLE_QUOTED_STRING = {
            scope: 'string',
            begin: /\$"""/,
            end: /"""/,
            contains: [
              {
                match: /\{\{/ // escaped {
              },
              {
                match: /\}\}/ // escaped }
              },
              SUBST
            ],
            relevance: 2
          };
          // '.'
          const CHAR_LITERAL = {
            scope: 'string',
            match: concat(
              /'/,
              either(
                /[^\\']/, // either a single non escaped char...
                /\\(?:.|\d{3}|x[a-fA-F\d]{2}|u[a-fA-F\d]{4}|U[a-fA-F\d]{8})/ // ...or an escape sequence
              ),
              /'/
            )
          };
          // F# allows a lot of things inside string placeholders.
          // Things that don't currently seem allowed by the compiler: types definition, attributes usage.
          // (Strictly speaking, some of the followings are only allowed inside triple quoted interpolated strings...)
          SUBST.contains = [
            INTERPOLATED_VERBATIM_STRING,
            INTERPOLATED_STRING,
            VERBATIM_STRING,
            QUOTED_STRING,
            CHAR_LITERAL,
            BANG_KEYWORD_MODE,
            COMMENT,
            QUOTED_IDENTIFIER,
            TYPE_ANNOTATION,
            COMPUTATION_EXPRESSION,
            PREPROCESSOR,
            NUMBER,
            GENERIC_TYPE_SYMBOL,
            OPERATOR
          ];
          const STRING = {
            variants: [
              INTERPOLATED_TRIPLE_QUOTED_STRING,
              INTERPOLATED_VERBATIM_STRING,
              INTERPOLATED_STRING,
              TRIPLE_QUOTED_STRING,
              VERBATIM_STRING,
              QUOTED_STRING,
              CHAR_LITERAL
            ]
          };
 
          return {
            name: 'F#',
            aliases: [
              'fs',
              'f#'
            ],
            keywords: ALL_KEYWORDS,
            illegal: /\/\*/,
            classNameAliases: {
              'computation-expression': 'keyword'
            },
            contains: [
              BANG_KEYWORD_MODE,
              STRING,
              COMMENT,
              QUOTED_IDENTIFIER,
              TYPE_DECLARATION,
              {
                // e.g. [<Attributes("")>] or [<``module``: MyCustomAttributeThatWorksOnModules>]
                // or [<Sealed; NoEquality; NoComparison; CompiledName("FSharpAsync`1")>]
                scope: 'meta',
                begin: /\[</,
                end: />\]/,
                relevance: 2,
                contains: [
                  QUOTED_IDENTIFIER,
                  // can contain any constant value
                  TRIPLE_QUOTED_STRING,
                  VERBATIM_STRING,
                  QUOTED_STRING,
                  CHAR_LITERAL,
                  NUMBER
                ]
              },
              DISCRIMINATED_UNION_TYPE_ANNOTATION,
              TYPE_ANNOTATION,
              COMPUTATION_EXPRESSION,
              PREPROCESSOR,
              NUMBER,
              GENERIC_TYPE_SYMBOL,
              OPERATOR
            ]
          };
        }
 
        fsharp_1 = fsharp;
        return fsharp_1;
    }
 
    /*
     Language: GAMS
     Author: Stefan Bechert <stefan.bechert@gmx.net>
     Contributors: Oleg Efimov <efimovov@gmail.com>, Mikko Kouhia <mikko.kouhia@iki.fi>
     Description: The General Algebraic Modeling System language
     Website: https://www.gams.com
     Category: scientific
     */
 
    var gams_1;
    var hasRequiredGams;
 
    function requireGams () {
        if (hasRequiredGams) return gams_1;
        hasRequiredGams = 1;
        /** @type LanguageFn */
        function gams(hljs) {
          const regex = hljs.regex;
          const KEYWORDS = {
            keyword:
              'abort acronym acronyms alias all and assign binary card diag display '
              + 'else eq file files for free ge gt if integer le loop lt maximizing '
              + 'minimizing model models ne negative no not option options or ord '
              + 'positive prod put putpage puttl repeat sameas semicont semiint smax '
              + 'smin solve sos1 sos2 sum system table then until using while xor yes',
            literal:
              'eps inf na',
            built_in:
              'abs arccos arcsin arctan arctan2 Beta betaReg binomial ceil centropy '
              + 'cos cosh cvPower div div0 eDist entropy errorf execSeed exp fact '
              + 'floor frac gamma gammaReg log logBeta logGamma log10 log2 mapVal max '
              + 'min mod ncpCM ncpF ncpVUpow ncpVUsin normal pi poly power '
              + 'randBinomial randLinear randTriangle round rPower sigmoid sign '
              + 'signPower sin sinh slexp sllog10 slrec sqexp sqlog10 sqr sqrec sqrt '
              + 'tan tanh trunc uniform uniformInt vcPower bool_and bool_eqv bool_imp '
              + 'bool_not bool_or bool_xor ifThen rel_eq rel_ge rel_gt rel_le rel_lt '
              + 'rel_ne gday gdow ghour gleap gmillisec gminute gmonth gsecond gyear '
              + 'jdate jnow jstart jtime errorLevel execError gamsRelease gamsVersion '
              + 'handleCollect handleDelete handleStatus handleSubmit heapFree '
              + 'heapLimit heapSize jobHandle jobKill jobStatus jobTerminate '
              + 'licenseLevel licenseStatus maxExecError sleep timeClose timeComp '
              + 'timeElapsed timeExec timeStart'
          };
          const PARAMS = {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true
          };
          const SYMBOLS = {
            className: 'symbol',
            variants: [
              { begin: /=[lgenxc]=/ },
              { begin: /\$/ }
            ]
          };
          const QSTR = { // One-line quoted comment string
            className: 'comment',
            variants: [
              {
                begin: '\'',
                end: '\''
              },
              {
                begin: '"',
                end: '"'
              }
            ],
            illegal: '\\n',
            contains: [ hljs.BACKSLASH_ESCAPE ]
          };
          const ASSIGNMENT = {
            begin: '/',
            end: '/',
            keywords: KEYWORDS,
            contains: [
              QSTR,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
          const COMMENT_WORD = /[a-z0-9&#*=?@\\><:,()$[\]_.{}!+%^-]+/;
          const DESCTEXT = { // Parameter/set/variable description text
            begin: /[a-z][a-z0-9_]*(\([a-z0-9_, ]*\))?[ \t]+/,
            excludeBegin: true,
            end: '$',
            endsWithParent: true,
            contains: [
              QSTR,
              ASSIGNMENT,
              {
                className: 'comment',
                // one comment word, then possibly more
                begin: regex.concat(
                  COMMENT_WORD,
                  // [ ] because \s would be too broad (matching newlines)
                  regex.anyNumberOfTimes(regex.concat(/[ ]+/, COMMENT_WORD))
                ),
                relevance: 0
              }
            ]
          };
 
          return {
            name: 'GAMS',
            aliases: [ 'gms' ],
            case_insensitive: true,
            keywords: KEYWORDS,
            contains: [
              hljs.COMMENT(/^\$ontext/, /^\$offtext/),
              {
                className: 'meta',
                begin: '^\\$[a-z0-9]+',
                end: '$',
                returnBegin: true,
                contains: [
                  {
                    className: 'keyword',
                    begin: '^\\$[a-z0-9]+'
                  }
                ]
              },
              hljs.COMMENT('^\\*', '$'),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              // Declarations
              {
                beginKeywords:
                  'set sets parameter parameters variable variables '
                  + 'scalar scalars equation equations',
                end: ';',
                contains: [
                  hljs.COMMENT('^\\*', '$'),
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.APOS_STRING_MODE,
                  ASSIGNMENT,
                  DESCTEXT
                ]
              },
              { // table environment
                beginKeywords: 'table',
                end: ';',
                returnBegin: true,
                contains: [
                  { // table header row
                    beginKeywords: 'table',
                    end: '$',
                    contains: [ DESCTEXT ]
                  },
                  hljs.COMMENT('^\\*', '$'),
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.APOS_STRING_MODE,
                  hljs.C_NUMBER_MODE
                  // Table does not contain DESCTEXT or ASSIGNMENT
                ]
              },
              // Function definitions
              {
                className: 'function',
                begin: /^[a-z][a-z0-9_,\-+' ()$]+\.{2}/,
                returnBegin: true,
                contains: [
                  { // Function title
                    className: 'title',
                    begin: /^[a-z0-9_]+/
                  },
                  PARAMS,
                  SYMBOLS
                ]
              },
              hljs.C_NUMBER_MODE,
              SYMBOLS
            ]
          };
        }
 
        gams_1 = gams;
        return gams_1;
    }
 
    /*
    Language: GAUSS
    Author: Matt Evans <matt@aptech.com>
    Description: GAUSS Mathematical and Statistical language
    Website: https://www.aptech.com
    Category: scientific
    */
 
    var gauss_1;
    var hasRequiredGauss;
 
    function requireGauss () {
        if (hasRequiredGauss) return gauss_1;
        hasRequiredGauss = 1;
        function gauss(hljs) {
          const KEYWORDS = {
            keyword: 'bool break call callexe checkinterrupt clear clearg closeall cls comlog compile '
                      + 'continue create debug declare delete disable dlibrary dllcall do dos ed edit else '
                      + 'elseif enable end endfor endif endp endo errorlog errorlogat expr external fn '
                      + 'for format goto gosub graph if keyword let lib library line load loadarray loadexe '
                      + 'loadf loadk loadm loadp loads loadx local locate loopnextindex lprint lpwidth lshow '
                      + 'matrix msym ndpclex new open output outwidth plot plotsym pop prcsn print '
                      + 'printdos proc push retp return rndcon rndmod rndmult rndseed run save saveall screen '
                      + 'scroll setarray show sparse stop string struct system trace trap threadfor '
                      + 'threadendfor threadbegin threadjoin threadstat threadend until use while winprint '
                      + 'ne ge le gt lt and xor or not eq eqv',
            built_in: 'abs acf aconcat aeye amax amean AmericanBinomCall AmericanBinomCall_Greeks AmericanBinomCall_ImpVol '
                      + 'AmericanBinomPut AmericanBinomPut_Greeks AmericanBinomPut_ImpVol AmericanBSCall AmericanBSCall_Greeks '
                      + 'AmericanBSCall_ImpVol AmericanBSPut AmericanBSPut_Greeks AmericanBSPut_ImpVol amin amult annotationGetDefaults '
                      + 'annotationSetBkd annotationSetFont annotationSetLineColor annotationSetLineStyle annotationSetLineThickness '
                      + 'annualTradingDays arccos arcsin areshape arrayalloc arrayindex arrayinit arraytomat asciiload asclabel astd '
                      + 'astds asum atan atan2 atranspose axmargin balance band bandchol bandcholsol bandltsol bandrv bandsolpd bar '
                      + 'base10 begwind besselj bessely beta box boxcox cdfBeta cdfBetaInv cdfBinomial cdfBinomialInv cdfBvn cdfBvn2 '
                      + 'cdfBvn2e cdfCauchy cdfCauchyInv cdfChic cdfChii cdfChinc cdfChincInv cdfExp cdfExpInv cdfFc cdfFnc cdfFncInv '
                      + 'cdfGam cdfGenPareto cdfHyperGeo cdfLaplace cdfLaplaceInv cdfLogistic cdfLogisticInv cdfmControlCreate cdfMvn '
                      + 'cdfMvn2e cdfMvnce cdfMvne cdfMvt2e cdfMvtce cdfMvte cdfN cdfN2 cdfNc cdfNegBinomial cdfNegBinomialInv cdfNi '
                      + 'cdfPoisson cdfPoissonInv cdfRayleigh cdfRayleighInv cdfTc cdfTci cdfTnc cdfTvn cdfWeibull cdfWeibullInv cdir '
                      + 'ceil ChangeDir chdir chiBarSquare chol choldn cholsol cholup chrs close code cols colsf combinate combinated '
                      + 'complex con cond conj cons ConScore contour conv convertsatostr convertstrtosa corrm corrms corrvc corrx corrxs '
                      + 'cos cosh counts countwts crossprd crout croutp csrcol csrlin csvReadM csvReadSA cumprodc cumsumc curve cvtos '
                      + 'datacreate datacreatecomplex datalist dataload dataloop dataopen datasave date datestr datestring datestrymd '
                      + 'dayinyr dayofweek dbAddDatabase dbClose dbCommit dbCreateQuery dbExecQuery dbGetConnectOptions dbGetDatabaseName '
                      + 'dbGetDriverName dbGetDrivers dbGetHostName dbGetLastErrorNum dbGetLastErrorText dbGetNumericalPrecPolicy '
                      + 'dbGetPassword dbGetPort dbGetTableHeaders dbGetTables dbGetUserName dbHasFeature dbIsDriverAvailable dbIsOpen '
                      + 'dbIsOpenError dbOpen dbQueryBindValue dbQueryClear dbQueryCols dbQueryExecPrepared dbQueryFetchAllM dbQueryFetchAllSA '
                      + 'dbQueryFetchOneM dbQueryFetchOneSA dbQueryFinish dbQueryGetBoundValue dbQueryGetBoundValues dbQueryGetField '
                      + 'dbQueryGetLastErrorNum dbQueryGetLastErrorText dbQueryGetLastInsertID dbQueryGetLastQuery dbQueryGetPosition '
                      + 'dbQueryIsActive dbQueryIsForwardOnly dbQueryIsNull dbQueryIsSelect dbQueryIsValid dbQueryPrepare dbQueryRows '
                      + 'dbQuerySeek dbQuerySeekFirst dbQuerySeekLast dbQuerySeekNext dbQuerySeekPrevious dbQuerySetForwardOnly '
                      + 'dbRemoveDatabase dbRollback dbSetConnectOptions dbSetDatabaseName dbSetHostName dbSetNumericalPrecPolicy '
                      + 'dbSetPort dbSetUserName dbTransaction DeleteFile delif delrows denseToSp denseToSpRE denToZero design det detl '
                      + 'dfft dffti diag diagrv digamma doswin DOSWinCloseall DOSWinOpen dotfeq dotfeqmt dotfge dotfgemt dotfgt dotfgtmt '
                      + 'dotfle dotflemt dotflt dotfltmt dotfne dotfnemt draw drop dsCreate dstat dstatmt dstatmtControlCreate dtdate dtday '
                      + 'dttime dttodtv dttostr dttoutc dtvnormal dtvtodt dtvtoutc dummy dummybr dummydn eig eigh eighv eigv elapsedTradingDays '
                      + 'endwind envget eof eqSolve eqSolvemt eqSolvemtControlCreate eqSolvemtOutCreate eqSolveset erf erfc erfccplx erfcplx error '
                      + 'etdays ethsec etstr EuropeanBinomCall EuropeanBinomCall_Greeks EuropeanBinomCall_ImpVol EuropeanBinomPut '
                      + 'EuropeanBinomPut_Greeks EuropeanBinomPut_ImpVol EuropeanBSCall EuropeanBSCall_Greeks EuropeanBSCall_ImpVol '
                      + 'EuropeanBSPut EuropeanBSPut_Greeks EuropeanBSPut_ImpVol exctsmpl exec execbg exp extern eye fcheckerr fclearerr feq '
                      + 'feqmt fflush fft ffti fftm fftmi fftn fge fgemt fgets fgetsa fgetsat fgetst fgt fgtmt fileinfo filesa fle flemt '
                      + 'floor flt fltmt fmod fne fnemt fonts fopen formatcv formatnv fputs fputst fseek fstrerror ftell ftocv ftos ftostrC '
                      + 'gamma gammacplx gammaii gausset gdaAppend gdaCreate gdaDStat gdaDStatMat gdaGetIndex gdaGetName gdaGetNames gdaGetOrders '
                      + 'gdaGetType gdaGetTypes gdaGetVarInfo gdaIsCplx gdaLoad gdaPack gdaRead gdaReadByIndex gdaReadSome gdaReadSparse '
                      + 'gdaReadStruct gdaReportVarInfo gdaSave gdaUpdate gdaUpdateAndPack gdaVars gdaWrite gdaWrite32 gdaWriteSome getarray '
                      + 'getdims getf getGAUSShome getmatrix getmatrix4D getname getnamef getNextTradingDay getNextWeekDay getnr getorders '
                      + 'getpath getPreviousTradingDay getPreviousWeekDay getRow getscalar3D getscalar4D getTrRow getwind glm gradcplx gradMT '
                      + 'gradMTm gradMTT gradMTTm gradp graphprt graphset hasimag header headermt hess hessMT hessMTg hessMTgw hessMTm '
                      + 'hessMTmw hessMTT hessMTTg hessMTTgw hessMTTm hessMTw hessp hist histf histp hsec imag indcv indexcat indices indices2 '
                      + 'indicesf indicesfn indnv indsav integrate1d integrateControlCreate intgrat2 intgrat3 inthp1 inthp2 inthp3 inthp4 '
                      + 'inthpControlCreate intquad1 intquad2 intquad3 intrleav intrleavsa intrsect intsimp inv invpd invswp iscplx iscplxf '
                      + 'isden isinfnanmiss ismiss key keyav keyw lag lag1 lagn lapEighb lapEighi lapEighvb lapEighvi lapgEig lapgEigh lapgEighv '
                      + 'lapgEigv lapgSchur lapgSvdcst lapgSvds lapgSvdst lapSvdcusv lapSvds lapSvdusv ldlp ldlsol linSolve listwise ln lncdfbvn '
                      + 'lncdfbvn2 lncdfmvn lncdfn lncdfn2 lncdfnc lnfact lngammacplx lnpdfmvn lnpdfmvt lnpdfn lnpdft loadd loadstruct loadwind '
                      + 'loess loessmt loessmtControlCreate log loglog logx logy lower lowmat lowmat1 ltrisol lu lusol machEpsilon make makevars '
                      + 'makewind margin matalloc matinit mattoarray maxbytes maxc maxindc maxv maxvec mbesselei mbesselei0 mbesselei1 mbesseli '
                      + 'mbesseli0 mbesseli1 meanc median mergeby mergevar minc minindc minv miss missex missrv moment momentd movingave '
                      + 'movingaveExpwgt movingaveWgt nextindex nextn nextnevn nextwind ntos null null1 numCombinations ols olsmt olsmtControlCreate '
                      + 'olsqr olsqr2 olsqrmt ones optn optnevn orth outtyp pacf packedToSp packr parse pause pdfCauchy pdfChi pdfExp pdfGenPareto '
                      + 'pdfHyperGeo pdfLaplace pdfLogistic pdfn pdfPoisson pdfRayleigh pdfWeibull pi pinv pinvmt plotAddArrow plotAddBar plotAddBox '
                      + 'plotAddHist plotAddHistF plotAddHistP plotAddPolar plotAddScatter plotAddShape plotAddTextbox plotAddTS plotAddXY plotArea '
                      + 'plotBar plotBox plotClearLayout plotContour plotCustomLayout plotGetDefaults plotHist plotHistF plotHistP plotLayout '
                      + 'plotLogLog plotLogX plotLogY plotOpenWindow plotPolar plotSave plotScatter plotSetAxesPen plotSetBar plotSetBarFill '
                      + 'plotSetBarStacked plotSetBkdColor plotSetFill plotSetGrid plotSetLegend plotSetLineColor plotSetLineStyle plotSetLineSymbol '
                      + 'plotSetLineThickness plotSetNewWindow plotSetTitle plotSetWhichYAxis plotSetXAxisShow plotSetXLabel plotSetXRange '
                      + 'plotSetXTicInterval plotSetXTicLabel plotSetYAxisShow plotSetYLabel plotSetYRange plotSetZAxisShow plotSetZLabel '
                      + 'plotSurface plotTS plotXY polar polychar polyeval polygamma polyint polymake polymat polymroot polymult polyroot '
                      + 'pqgwin previousindex princomp printfm printfmt prodc psi putarray putf putvals pvCreate pvGetIndex pvGetParNames '
                      + 'pvGetParVector pvLength pvList pvPack pvPacki pvPackm pvPackmi pvPacks pvPacksi pvPacksm pvPacksmi pvPutParVector '
                      + 'pvTest pvUnpack QNewton QNewtonmt QNewtonmtControlCreate QNewtonmtOutCreate QNewtonSet QProg QProgmt QProgmtInCreate '
                      + 'qqr qqre qqrep qr qre qrep qrsol qrtsol qtyr qtyre qtyrep quantile quantiled qyr qyre qyrep qz rank rankindx readr '
                      + 'real reclassify reclassifyCuts recode recserar recsercp recserrc rerun rescale reshape rets rev rfft rffti rfftip rfftn '
                      + 'rfftnp rfftp rndBernoulli rndBeta rndBinomial rndCauchy rndChiSquare rndCon rndCreateState rndExp rndGamma rndGeo rndGumbel '
                      + 'rndHyperGeo rndi rndKMbeta rndKMgam rndKMi rndKMn rndKMnb rndKMp rndKMu rndKMvm rndLaplace rndLCbeta rndLCgam rndLCi rndLCn '
                      + 'rndLCnb rndLCp rndLCu rndLCvm rndLogNorm rndMTu rndMVn rndMVt rndn rndnb rndNegBinomial rndp rndPoisson rndRayleigh '
                      + 'rndStateSkip rndu rndvm rndWeibull rndWishart rotater round rows rowsf rref sampleData satostrC saved saveStruct savewind '
                      + 'scale scale3d scalerr scalinfnanmiss scalmiss schtoc schur searchsourcepath seekr select selif seqa seqm setdif setdifsa '
                      + 'setvars setvwrmode setwind shell shiftr sin singleindex sinh sleep solpd sortc sortcc sortd sorthc sorthcc sortind '
                      + 'sortindc sortmc sortr sortrc spBiconjGradSol spChol spConjGradSol spCreate spDenseSubmat spDiagRvMat spEigv spEye spLDL '
                      + 'spline spLU spNumNZE spOnes spreadSheetReadM spreadSheetReadSA spreadSheetWrite spScale spSubmat spToDense spTrTDense '
                      + 'spTScalar spZeros sqpSolve sqpSolveMT sqpSolveMTControlCreate sqpSolveMTlagrangeCreate sqpSolveMToutCreate sqpSolveSet '
                      + 'sqrt statements stdc stdsc stocv stof strcombine strindx strlen strput strrindx strsect strsplit strsplitPad strtodt '
                      + 'strtof strtofcplx strtriml strtrimr strtrunc strtruncl strtruncpad strtruncr submat subscat substute subvec sumc sumr '
                      + 'surface svd svd1 svd2 svdcusv svds svdusv sysstate tab tan tanh tempname '
                      + 'time timedt timestr timeutc title tkf2eps tkf2ps tocart todaydt toeplitz token topolar trapchk '
                      + 'trigamma trimr trunc type typecv typef union unionsa uniqindx uniqindxsa unique uniquesa upmat upmat1 upper utctodt '
                      + 'utctodtv utrisol vals varCovMS varCovXS varget vargetl varmall varmares varput varputl vartypef vcm vcms vcx vcxs '
                      + 'vec vech vecr vector vget view viewxyz vlist vnamecv volume vput vread vtypecv wait waitc walkindex where window '
                      + 'writer xlabel xlsGetSheetCount xlsGetSheetSize xlsGetSheetTypes xlsMakeRange xlsReadM xlsReadSA xlsWrite xlsWriteM '
                      + 'xlsWriteSA xpnd xtics xy xyz ylabel ytics zeros zeta zlabel ztics cdfEmpirical dot h5create h5open h5read h5readAttribute '
                      + 'h5write h5writeAttribute ldl plotAddErrorBar plotAddSurface plotCDFEmpirical plotSetColormap plotSetContourLabels '
                      + 'plotSetLegendFont plotSetTextInterpreter plotSetXTicCount plotSetYTicCount plotSetZLevels powerm strjoin sylvester '
                      + 'strtrim',
            literal: 'DB_AFTER_LAST_ROW DB_ALL_TABLES DB_BATCH_OPERATIONS DB_BEFORE_FIRST_ROW DB_BLOB DB_EVENT_NOTIFICATIONS '
                     + 'DB_FINISH_QUERY DB_HIGH_PRECISION DB_LAST_INSERT_ID DB_LOW_PRECISION_DOUBLE DB_LOW_PRECISION_INT32 '
                     + 'DB_LOW_PRECISION_INT64 DB_LOW_PRECISION_NUMBERS DB_MULTIPLE_RESULT_SETS DB_NAMED_PLACEHOLDERS '
                     + 'DB_POSITIONAL_PLACEHOLDERS DB_PREPARED_QUERIES DB_QUERY_SIZE DB_SIMPLE_LOCKING DB_SYSTEM_TABLES DB_TABLES '
                     + 'DB_TRANSACTIONS DB_UNICODE DB_VIEWS __STDIN __STDOUT __STDERR __FILE_DIR'
          };
 
          const AT_COMMENT_MODE = hljs.COMMENT('@', '@');
 
          const PREPROCESSOR =
          {
            className: 'meta',
            begin: '#',
            end: '$',
            keywords: { keyword: 'define definecs|10 undef ifdef ifndef iflight ifdllcall ifmac ifos2win ifunix else endif lineson linesoff srcfile srcline' },
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              {
                beginKeywords: 'include',
                end: '$',
                keywords: { keyword: 'include' },
                contains: [
                  {
                    className: 'string',
                    begin: '"',
                    end: '"',
                    illegal: '\\n'
                  }
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              AT_COMMENT_MODE
            ]
          };
 
          const STRUCT_TYPE =
          {
            begin: /\bstruct\s+/,
            end: /\s/,
            keywords: "struct",
            contains: [
              {
                className: "type",
                begin: hljs.UNDERSCORE_IDENT_RE,
                relevance: 0
              }
            ]
          };
 
          // only for definitions
          const PARSE_PARAMS = [
            {
              className: 'params',
              begin: /\(/,
              end: /\)/,
              excludeBegin: true,
              excludeEnd: true,
              endsWithParent: true,
              relevance: 0,
              contains: [
                { // dots
                  className: 'literal',
                  begin: /\.\.\./
                },
                hljs.C_NUMBER_MODE,
                hljs.C_BLOCK_COMMENT_MODE,
                AT_COMMENT_MODE,
                STRUCT_TYPE
              ]
            }
          ];
 
          const FUNCTION_DEF =
          {
            className: "title",
            begin: hljs.UNDERSCORE_IDENT_RE,
            relevance: 0
          };
 
          const DEFINITION = function(beginKeywords, end, inherits) {
            const mode = hljs.inherit(
              {
                className: "function",
                beginKeywords: beginKeywords,
                end: end,
                excludeEnd: true,
                contains: [].concat(PARSE_PARAMS)
              },
              inherits || {}
            );
            mode.contains.push(FUNCTION_DEF);
            mode.contains.push(hljs.C_NUMBER_MODE);
            mode.contains.push(hljs.C_BLOCK_COMMENT_MODE);
            mode.contains.push(AT_COMMENT_MODE);
            return mode;
          };
 
          const BUILT_IN_REF =
          { // these are explicitly named internal function calls
            className: 'built_in',
            begin: '\\b(' + KEYWORDS.built_in.split(' ').join('|') + ')\\b'
          };
 
          const STRING_REF =
          {
            className: 'string',
            begin: '"',
            end: '"',
            contains: [ hljs.BACKSLASH_ESCAPE ],
            relevance: 0
          };
 
          const FUNCTION_REF =
          {
            // className: "fn_ref",
            begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
            returnBegin: true,
            keywords: KEYWORDS,
            relevance: 0,
            contains: [
              { beginKeywords: KEYWORDS.keyword },
              BUILT_IN_REF,
              { // ambiguously named function calls get a relevance of 0
                className: 'built_in',
                begin: hljs.UNDERSCORE_IDENT_RE,
                relevance: 0
              }
            ]
          };
 
          const FUNCTION_REF_PARAMS =
          {
            // className: "fn_ref_params",
            begin: /\(/,
            end: /\)/,
            relevance: 0,
            keywords: {
              built_in: KEYWORDS.built_in,
              literal: KEYWORDS.literal
            },
            contains: [
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              AT_COMMENT_MODE,
              BUILT_IN_REF,
              FUNCTION_REF,
              STRING_REF,
              'self'
            ]
          };
 
          FUNCTION_REF.contains.push(FUNCTION_REF_PARAMS);
 
          return {
            name: 'GAUSS',
            aliases: [ 'gss' ],
            case_insensitive: true, // language is case-insensitive
            keywords: KEYWORDS,
            illegal: /(\{[%#]|[%#]\}| <- )/,
            contains: [
              hljs.C_NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              AT_COMMENT_MODE,
              STRING_REF,
              PREPROCESSOR,
              {
                className: 'keyword',
                begin: /\bexternal (matrix|string|array|sparse matrix|struct|proc|keyword|fn)/
              },
              DEFINITION('proc keyword', ';'),
              DEFINITION('fn', '='),
              {
                beginKeywords: 'for threadfor',
                end: /;/,
                // end: /\(/,
                relevance: 0,
                contains: [
                  hljs.C_BLOCK_COMMENT_MODE,
                  AT_COMMENT_MODE,
                  FUNCTION_REF_PARAMS
                ]
              },
              { // custom method guard
                // excludes method names from keyword processing
                variants: [
                  { begin: hljs.UNDERSCORE_IDENT_RE + '\\.' + hljs.UNDERSCORE_IDENT_RE },
                  { begin: hljs.UNDERSCORE_IDENT_RE + '\\s*=' }
                ],
                relevance: 0
              },
              FUNCTION_REF,
              STRUCT_TYPE
            ]
          };
        }
 
        gauss_1 = gauss;
        return gauss_1;
    }
 
    /*
     Language: G-code (ISO 6983)
     Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
     Description: G-code syntax highlighter for Fanuc and other common CNC machine tool controls.
     Website: https://www.sis.se/api/document/preview/911952/
     */
 
    var gcode_1;
    var hasRequiredGcode;
 
    function requireGcode () {
        if (hasRequiredGcode) return gcode_1;
        hasRequiredGcode = 1;
        function gcode(hljs) {
          const GCODE_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
          const GCODE_CLOSE_RE = '%';
          const GCODE_KEYWORDS = {
            $pattern: GCODE_IDENT_RE,
            keyword: 'IF DO WHILE ENDWHILE CALL ENDIF SUB ENDSUB GOTO REPEAT ENDREPEAT '
              + 'EQ LT GT NE GE LE OR XOR'
          };
          const GCODE_START = {
            className: 'meta',
            begin: '([O])([0-9]+)'
          };
          const NUMBER = hljs.inherit(hljs.C_NUMBER_MODE, { begin: '([-+]?((\\.\\d+)|(\\d+)(\\.\\d*)?))|' + hljs.C_NUMBER_RE });
          const GCODE_CODE = [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.COMMENT(/\(/, /\)/),
            NUMBER,
            hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
            hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
            {
              className: 'name',
              begin: '([G])([0-9]+\\.?[0-9]?)'
            },
            {
              className: 'name',
              begin: '([M])([0-9]+\\.?[0-9]?)'
            },
            {
              className: 'attr',
              begin: '(VC|VS|#)',
              end: '(\\d+)'
            },
            {
              className: 'attr',
              begin: '(VZOFX|VZOFY|VZOFZ)'
            },
            {
              className: 'built_in',
              begin: '(ATAN|ABS|ACOS|ASIN|SIN|COS|EXP|FIX|FUP|ROUND|LN|TAN)(\\[)',
              contains: [ NUMBER ],
              end: '\\]'
            },
            {
              className: 'symbol',
              variants: [
                {
                  begin: 'N',
                  end: '\\d+',
                  illegal: '\\W'
                }
              ]
            }
          ];
 
          return {
            name: 'G-code (ISO 6983)',
            aliases: [ 'nc' ],
            // Some implementations (CNC controls) of G-code are interoperable with uppercase and lowercase letters seamlessly.
            // However, most prefer all uppercase and uppercase is customary.
            case_insensitive: true,
            keywords: GCODE_KEYWORDS,
            contains: [
              {
                className: 'meta',
                begin: GCODE_CLOSE_RE
              },
              GCODE_START
            ].concat(GCODE_CODE)
          };
        }
 
        gcode_1 = gcode;
        return gcode_1;
    }
 
    /*
     Language: Gherkin
     Author: Sam Pikesley (@pikesley) <sam.pikesley@theodi.org>
     Description: Gherkin is the format for cucumber specifications. It is a domain specific language which helps you to describe business behavior without the need to go into detail of implementation.
     Website: https://cucumber.io/docs/gherkin/
     */
 
    var gherkin_1;
    var hasRequiredGherkin;
 
    function requireGherkin () {
        if (hasRequiredGherkin) return gherkin_1;
        hasRequiredGherkin = 1;
        function gherkin(hljs) {
          return {
            name: 'Gherkin',
            aliases: [ 'feature' ],
            keywords: 'Feature Background Ability Business\ Need Scenario Scenarios Scenario\ Outline Scenario\ Template Examples Given And Then But When',
            contains: [
              {
                className: 'symbol',
                begin: '\\*',
                relevance: 0
              },
              {
                className: 'meta',
                begin: '@[^@\\s]+'
              },
              {
                begin: '\\|',
                end: '\\|\\w*$',
                contains: [
                  {
                    className: 'string',
                    begin: '[^|]+'
                  }
                ]
              },
              {
                className: 'variable',
                begin: '<',
                end: '>'
              },
              hljs.HASH_COMMENT_MODE,
              {
                className: 'string',
                begin: '"""',
                end: '"""'
              },
              hljs.QUOTE_STRING_MODE
            ]
          };
        }
 
        gherkin_1 = gherkin;
        return gherkin_1;
    }
 
    /*
    Language: GLSL
    Description: OpenGL Shading Language
    Author: Sergey Tikhomirov <sergey@tikhomirov.io>
    Website: https://en.wikipedia.org/wiki/OpenGL_Shading_Language
    Category: graphics
    */
 
    var glsl_1;
    var hasRequiredGlsl;
 
    function requireGlsl () {
        if (hasRequiredGlsl) return glsl_1;
        hasRequiredGlsl = 1;
        function glsl(hljs) {
          return {
            name: 'GLSL',
            keywords: {
              keyword:
                // Statements
                'break continue discard do else for if return while switch case default '
                // Qualifiers
                + 'attribute binding buffer ccw centroid centroid varying coherent column_major const cw '
                + 'depth_any depth_greater depth_less depth_unchanged early_fragment_tests equal_spacing '
                + 'flat fractional_even_spacing fractional_odd_spacing highp in index inout invariant '
                + 'invocations isolines layout line_strip lines lines_adjacency local_size_x local_size_y '
                + 'local_size_z location lowp max_vertices mediump noperspective offset origin_upper_left '
                + 'out packed patch pixel_center_integer point_mode points precise precision quads r11f_g11f_b10f '
                + 'r16 r16_snorm r16f r16i r16ui r32f r32i r32ui r8 r8_snorm r8i r8ui readonly restrict '
                + 'rg16 rg16_snorm rg16f rg16i rg16ui rg32f rg32i rg32ui rg8 rg8_snorm rg8i rg8ui rgb10_a2 '
                + 'rgb10_a2ui rgba16 rgba16_snorm rgba16f rgba16i rgba16ui rgba32f rgba32i rgba32ui rgba8 '
                + 'rgba8_snorm rgba8i rgba8ui row_major sample shared smooth std140 std430 stream triangle_strip '
                + 'triangles triangles_adjacency uniform varying vertices volatile writeonly',
              type:
                'atomic_uint bool bvec2 bvec3 bvec4 dmat2 dmat2x2 dmat2x3 dmat2x4 dmat3 dmat3x2 dmat3x3 '
                + 'dmat3x4 dmat4 dmat4x2 dmat4x3 dmat4x4 double dvec2 dvec3 dvec4 float iimage1D iimage1DArray '
                + 'iimage2D iimage2DArray iimage2DMS iimage2DMSArray iimage2DRect iimage3D iimageBuffer '
                + 'iimageCube iimageCubeArray image1D image1DArray image2D image2DArray image2DMS image2DMSArray '
                + 'image2DRect image3D imageBuffer imageCube imageCubeArray int isampler1D isampler1DArray '
                + 'isampler2D isampler2DArray isampler2DMS isampler2DMSArray isampler2DRect isampler3D '
                + 'isamplerBuffer isamplerCube isamplerCubeArray ivec2 ivec3 ivec4 mat2 mat2x2 mat2x3 '
                + 'mat2x4 mat3 mat3x2 mat3x3 mat3x4 mat4 mat4x2 mat4x3 mat4x4 sampler1D sampler1DArray '
                + 'sampler1DArrayShadow sampler1DShadow sampler2D sampler2DArray sampler2DArrayShadow '
                + 'sampler2DMS sampler2DMSArray sampler2DRect sampler2DRectShadow sampler2DShadow sampler3D '
                + 'samplerBuffer samplerCube samplerCubeArray samplerCubeArrayShadow samplerCubeShadow '
                + 'image1D uimage1DArray uimage2D uimage2DArray uimage2DMS uimage2DMSArray uimage2DRect '
                + 'uimage3D uimageBuffer uimageCube uimageCubeArray uint usampler1D usampler1DArray '
                + 'usampler2D usampler2DArray usampler2DMS usampler2DMSArray usampler2DRect usampler3D '
                + 'samplerBuffer usamplerCube usamplerCubeArray uvec2 uvec3 uvec4 vec2 vec3 vec4 void',
              built_in:
                // Constants
                'gl_MaxAtomicCounterBindings gl_MaxAtomicCounterBufferSize gl_MaxClipDistances gl_MaxClipPlanes '
                + 'gl_MaxCombinedAtomicCounterBuffers gl_MaxCombinedAtomicCounters gl_MaxCombinedImageUniforms '
                + 'gl_MaxCombinedImageUnitsAndFragmentOutputs gl_MaxCombinedTextureImageUnits gl_MaxComputeAtomicCounterBuffers '
                + 'gl_MaxComputeAtomicCounters gl_MaxComputeImageUniforms gl_MaxComputeTextureImageUnits '
                + 'gl_MaxComputeUniformComponents gl_MaxComputeWorkGroupCount gl_MaxComputeWorkGroupSize '
                + 'gl_MaxDrawBuffers gl_MaxFragmentAtomicCounterBuffers gl_MaxFragmentAtomicCounters '
                + 'gl_MaxFragmentImageUniforms gl_MaxFragmentInputComponents gl_MaxFragmentInputVectors '
                + 'gl_MaxFragmentUniformComponents gl_MaxFragmentUniformVectors gl_MaxGeometryAtomicCounterBuffers '
                + 'gl_MaxGeometryAtomicCounters gl_MaxGeometryImageUniforms gl_MaxGeometryInputComponents '
                + 'gl_MaxGeometryOutputComponents gl_MaxGeometryOutputVertices gl_MaxGeometryTextureImageUnits '
                + 'gl_MaxGeometryTotalOutputComponents gl_MaxGeometryUniformComponents gl_MaxGeometryVaryingComponents '
                + 'gl_MaxImageSamples gl_MaxImageUnits gl_MaxLights gl_MaxPatchVertices gl_MaxProgramTexelOffset '
                + 'gl_MaxTessControlAtomicCounterBuffers gl_MaxTessControlAtomicCounters gl_MaxTessControlImageUniforms '
                + 'gl_MaxTessControlInputComponents gl_MaxTessControlOutputComponents gl_MaxTessControlTextureImageUnits '
                + 'gl_MaxTessControlTotalOutputComponents gl_MaxTessControlUniformComponents '
                + 'gl_MaxTessEvaluationAtomicCounterBuffers gl_MaxTessEvaluationAtomicCounters '
                + 'gl_MaxTessEvaluationImageUniforms gl_MaxTessEvaluationInputComponents gl_MaxTessEvaluationOutputComponents '
                + 'gl_MaxTessEvaluationTextureImageUnits gl_MaxTessEvaluationUniformComponents '
                + 'gl_MaxTessGenLevel gl_MaxTessPatchComponents gl_MaxTextureCoords gl_MaxTextureImageUnits '
                + 'gl_MaxTextureUnits gl_MaxVaryingComponents gl_MaxVaryingFloats gl_MaxVaryingVectors '
                + 'gl_MaxVertexAtomicCounterBuffers gl_MaxVertexAtomicCounters gl_MaxVertexAttribs gl_MaxVertexImageUniforms '
                + 'gl_MaxVertexOutputComponents gl_MaxVertexOutputVectors gl_MaxVertexTextureImageUnits '
                + 'gl_MaxVertexUniformComponents gl_MaxVertexUniformVectors gl_MaxViewports gl_MinProgramTexelOffset '
                // Variables
                + 'gl_BackColor gl_BackLightModelProduct gl_BackLightProduct gl_BackMaterial '
                + 'gl_BackSecondaryColor gl_ClipDistance gl_ClipPlane gl_ClipVertex gl_Color '
                + 'gl_DepthRange gl_EyePlaneQ gl_EyePlaneR gl_EyePlaneS gl_EyePlaneT gl_Fog gl_FogCoord '
                + 'gl_FogFragCoord gl_FragColor gl_FragCoord gl_FragData gl_FragDepth gl_FrontColor '
                + 'gl_FrontFacing gl_FrontLightModelProduct gl_FrontLightProduct gl_FrontMaterial '
                + 'gl_FrontSecondaryColor gl_GlobalInvocationID gl_InstanceID gl_InvocationID gl_Layer gl_LightModel '
                + 'gl_LightSource gl_LocalInvocationID gl_LocalInvocationIndex gl_ModelViewMatrix '
                + 'gl_ModelViewMatrixInverse gl_ModelViewMatrixInverseTranspose gl_ModelViewMatrixTranspose '
                + 'gl_ModelViewProjectionMatrix gl_ModelViewProjectionMatrixInverse gl_ModelViewProjectionMatrixInverseTranspose '
                + 'gl_ModelViewProjectionMatrixTranspose gl_MultiTexCoord0 gl_MultiTexCoord1 gl_MultiTexCoord2 '
                + 'gl_MultiTexCoord3 gl_MultiTexCoord4 gl_MultiTexCoord5 gl_MultiTexCoord6 gl_MultiTexCoord7 '
                + 'gl_Normal gl_NormalMatrix gl_NormalScale gl_NumSamples gl_NumWorkGroups gl_ObjectPlaneQ '
                + 'gl_ObjectPlaneR gl_ObjectPlaneS gl_ObjectPlaneT gl_PatchVerticesIn gl_Point gl_PointCoord '
                + 'gl_PointSize gl_Position gl_PrimitiveID gl_PrimitiveIDIn gl_ProjectionMatrix gl_ProjectionMatrixInverse '
                + 'gl_ProjectionMatrixInverseTranspose gl_ProjectionMatrixTranspose gl_SampleID gl_SampleMask '
                + 'gl_SampleMaskIn gl_SamplePosition gl_SecondaryColor gl_TessCoord gl_TessLevelInner gl_TessLevelOuter '
                + 'gl_TexCoord gl_TextureEnvColor gl_TextureMatrix gl_TextureMatrixInverse gl_TextureMatrixInverseTranspose '
                + 'gl_TextureMatrixTranspose gl_Vertex gl_VertexID gl_ViewportIndex gl_WorkGroupID gl_WorkGroupSize gl_in gl_out '
                // Functions
                + 'EmitStreamVertex EmitVertex EndPrimitive EndStreamPrimitive abs acos acosh all any asin '
                + 'asinh atan atanh atomicAdd atomicAnd atomicCompSwap atomicCounter atomicCounterDecrement '
                + 'atomicCounterIncrement atomicExchange atomicMax atomicMin atomicOr atomicXor barrier '
                + 'bitCount bitfieldExtract bitfieldInsert bitfieldReverse ceil clamp cos cosh cross '
                + 'dFdx dFdy degrees determinant distance dot equal exp exp2 faceforward findLSB findMSB '
                + 'floatBitsToInt floatBitsToUint floor fma fract frexp ftransform fwidth greaterThan '
                + 'greaterThanEqual groupMemoryBarrier imageAtomicAdd imageAtomicAnd imageAtomicCompSwap '
                + 'imageAtomicExchange imageAtomicMax imageAtomicMin imageAtomicOr imageAtomicXor imageLoad '
                + 'imageSize imageStore imulExtended intBitsToFloat interpolateAtCentroid interpolateAtOffset '
                + 'interpolateAtSample inverse inversesqrt isinf isnan ldexp length lessThan lessThanEqual log '
                + 'log2 matrixCompMult max memoryBarrier memoryBarrierAtomicCounter memoryBarrierBuffer '
                + 'memoryBarrierImage memoryBarrierShared min mix mod modf noise1 noise2 noise3 noise4 '
                + 'normalize not notEqual outerProduct packDouble2x32 packHalf2x16 packSnorm2x16 packSnorm4x8 '
                + 'packUnorm2x16 packUnorm4x8 pow radians reflect refract round roundEven shadow1D shadow1DLod '
                + 'shadow1DProj shadow1DProjLod shadow2D shadow2DLod shadow2DProj shadow2DProjLod sign sin sinh '
                + 'smoothstep sqrt step tan tanh texelFetch texelFetchOffset texture texture1D texture1DLod '
                + 'texture1DProj texture1DProjLod texture2D texture2DLod texture2DProj texture2DProjLod '
                + 'texture3D texture3DLod texture3DProj texture3DProjLod textureCube textureCubeLod '
                + 'textureGather textureGatherOffset textureGatherOffsets textureGrad textureGradOffset '
                + 'textureLod textureLodOffset textureOffset textureProj textureProjGrad textureProjGradOffset '
                + 'textureProjLod textureProjLodOffset textureProjOffset textureQueryLevels textureQueryLod '
                + 'textureSize transpose trunc uaddCarry uintBitsToFloat umulExtended unpackDouble2x32 '
                + 'unpackHalf2x16 unpackSnorm2x16 unpackSnorm4x8 unpackUnorm2x16 unpackUnorm4x8 usubBorrow',
              literal: 'true false'
            },
            illegal: '"',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'meta',
                begin: '#',
                end: '$'
              }
            ]
          };
        }
 
        glsl_1 = glsl;
        return glsl_1;
    }
 
    /*
    Language: GML
    Author: Meseta <meseta@gmail.com>
    Description: Game Maker Language for GameMaker Studio 2
    Website: https://docs2.yoyogames.com
    Category: scripting
    */
 
    var gml_1;
    var hasRequiredGml;
 
    function requireGml () {
        if (hasRequiredGml) return gml_1;
        hasRequiredGml = 1;
        function gml(hljs) {
          const KEYWORDS = [
            "#endregion",
            "#macro",
            "#region",
            "and",
            "begin",
            "break",
            "case",
            "constructor",
            "continue",
            "default",
            "delete",
            "div",
            "do",
            "else",
            "end",
            "enum",
            "exit",
            "for",
            "function",
            "globalvar",
            "if",
            "mod",
            "not",
            "or",
            "repeat",
            "return",
            "switch",
            "then",
            "until",
            "var",
            "while",
            "with",
            "xor"
          ];
          const BUILT_INS = [
            "abs",
            "achievement_available",
            "achievement_event",
            "achievement_get_challenges",
            "achievement_get_info",
            "achievement_get_pic",
            "achievement_increment",
            "achievement_load_friends",
            "achievement_load_leaderboard",
            "achievement_load_progress",
            "achievement_login",
            "achievement_login_status",
            "achievement_logout",
            "achievement_post",
            "achievement_post_score",
            "achievement_reset",
            "achievement_send_challenge",
            "achievement_show",
            "achievement_show_achievements",
            "achievement_show_challenge_notifications",
            "achievement_show_leaderboards",
            "action_inherited",
            "action_kill_object",
            "ads_disable",
            "ads_enable",
            "ads_engagement_active",
            "ads_engagement_available",
            "ads_engagement_launch",
            "ads_event",
            "ads_event_preload",
            "ads_get_display_height",
            "ads_get_display_width",
            "ads_interstitial_available",
            "ads_interstitial_display",
            "ads_move",
            "ads_set_reward_callback",
            "ads_setup",
            "alarm_get",
            "alarm_set",
            "analytics_event",
            "analytics_event_ext",
            "angle_difference",
            "ansi_char",
            "application_get_position",
            "application_surface_draw_enable",
            "application_surface_enable",
            "application_surface_is_enabled",
            "arccos",
            "arcsin",
            "arctan",
            "arctan2",
            "array_copy",
            "array_create",
            "array_delete",
            "array_equals",
            "array_height_2d",
            "array_insert",
            "array_length",
            "array_length_1d",
            "array_length_2d",
            "array_pop",
            "array_push",
            "array_resize",
            "array_sort",
            "asset_get_index",
            "asset_get_type",
            "audio_channel_num",
            "audio_create_buffer_sound",
            "audio_create_play_queue",
            "audio_create_stream",
            "audio_create_sync_group",
            "audio_debug",
            "audio_destroy_stream",
            "audio_destroy_sync_group",
            "audio_emitter_create",
            "audio_emitter_exists",
            "audio_emitter_falloff",
            "audio_emitter_free",
            "audio_emitter_gain",
            "audio_emitter_get_gain",
            "audio_emitter_get_listener_mask",
            "audio_emitter_get_pitch",
            "audio_emitter_get_vx",
            "audio_emitter_get_vy",
            "audio_emitter_get_vz",
            "audio_emitter_get_x",
            "audio_emitter_get_y",
            "audio_emitter_get_z",
            "audio_emitter_pitch",
            "audio_emitter_position",
            "audio_emitter_set_listener_mask",
            "audio_emitter_velocity",
            "audio_exists",
            "audio_falloff_set_model",
            "audio_free_buffer_sound",
            "audio_free_play_queue",
            "audio_get_listener_count",
            "audio_get_listener_info",
            "audio_get_listener_mask",
            "audio_get_master_gain",
            "audio_get_name",
            "audio_get_recorder_count",
            "audio_get_recorder_info",
            "audio_get_type",
            "audio_group_is_loaded",
            "audio_group_load",
            "audio_group_load_progress",
            "audio_group_name",
            "audio_group_set_gain",
            "audio_group_stop_all",
            "audio_group_unload",
            "audio_is_paused",
            "audio_is_playing",
            "audio_listener_get_data",
            "audio_listener_orientation",
            "audio_listener_position",
            "audio_listener_set_orientation",
            "audio_listener_set_position",
            "audio_listener_set_velocity",
            "audio_listener_velocity",
            "audio_master_gain",
            "audio_music_gain",
            "audio_music_is_playing",
            "audio_pause_all",
            "audio_pause_music",
            "audio_pause_sound",
            "audio_pause_sync_group",
            "audio_play_in_sync_group",
            "audio_play_music",
            "audio_play_sound",
            "audio_play_sound_at",
            "audio_play_sound_on",
            "audio_queue_sound",
            "audio_resume_all",
            "audio_resume_music",
            "audio_resume_sound",
            "audio_resume_sync_group",
            "audio_set_listener_mask",
            "audio_set_master_gain",
            "audio_sound_gain",
            "audio_sound_get_gain",
            "audio_sound_get_listener_mask",
            "audio_sound_get_pitch",
            "audio_sound_get_track_position",
            "audio_sound_length",
            "audio_sound_pitch",
            "audio_sound_set_listener_mask",
            "audio_sound_set_track_position",
            "audio_start_recording",
            "audio_start_sync_group",
            "audio_stop_all",
            "audio_stop_music",
            "audio_stop_recording",
            "audio_stop_sound",
            "audio_stop_sync_group",
            "audio_sync_group_debug",
            "audio_sync_group_get_track_pos",
            "audio_sync_group_is_playing",
            "audio_system",
            "background_get_height",
            "background_get_width",
            "base64_decode",
            "base64_encode",
            "browser_input_capture",
            "buffer_async_group_begin",
            "buffer_async_group_end",
            "buffer_async_group_option",
            "buffer_base64_decode",
            "buffer_base64_decode_ext",
            "buffer_base64_encode",
            "buffer_copy",
            "buffer_copy_from_vertex_buffer",
            "buffer_create",
            "buffer_create_from_vertex_buffer",
            "buffer_create_from_vertex_buffer_ext",
            "buffer_delete",
            "buffer_exists",
            "buffer_fill",
            "buffer_get_address",
            "buffer_get_alignment",
            "buffer_get_size",
            "buffer_get_surface",
            "buffer_get_type",
            "buffer_load",
            "buffer_load_async",
            "buffer_load_ext",
            "buffer_load_partial",
            "buffer_md5",
            "buffer_peek",
            "buffer_poke",
            "buffer_read",
            "buffer_resize",
            "buffer_save",
            "buffer_save_async",
            "buffer_save_ext",
            "buffer_seek",
            "buffer_set_surface",
            "buffer_sha1",
            "buffer_sizeof",
            "buffer_tell",
            "buffer_write",
            "camera_apply",
            "camera_create",
            "camera_create_view",
            "camera_destroy",
            "camera_get_active",
            "camera_get_begin_script",
            "camera_get_default",
            "camera_get_end_script",
            "camera_get_proj_mat",
            "camera_get_update_script",
            "camera_get_view_angle",
            "camera_get_view_border_x",
            "camera_get_view_border_y",
            "camera_get_view_height",
            "camera_get_view_mat",
            "camera_get_view_speed_x",
            "camera_get_view_speed_y",
            "camera_get_view_target",
            "camera_get_view_width",
            "camera_get_view_x",
            "camera_get_view_y",
            "camera_set_begin_script",
            "camera_set_default",
            "camera_set_end_script",
            "camera_set_proj_mat",
            "camera_set_update_script",
            "camera_set_view_angle",
            "camera_set_view_border",
            "camera_set_view_mat",
            "camera_set_view_pos",
            "camera_set_view_size",
            "camera_set_view_speed",
            "camera_set_view_target",
            "ceil",
            "choose",
            "chr",
            "clamp",
            "clickable_add",
            "clickable_add_ext",
            "clickable_change",
            "clickable_change_ext",
            "clickable_delete",
            "clickable_exists",
            "clickable_set_style",
            "clipboard_get_text",
            "clipboard_has_text",
            "clipboard_set_text",
            "cloud_file_save",
            "cloud_string_save",
            "cloud_synchronise",
            "code_is_compiled",
            "collision_circle",
            "collision_circle_list",
            "collision_ellipse",
            "collision_ellipse_list",
            "collision_line",
            "collision_line_list",
            "collision_point",
            "collision_point_list",
            "collision_rectangle",
            "collision_rectangle_list",
            "color_get_blue",
            "color_get_green",
            "color_get_hue",
            "color_get_red",
            "color_get_saturation",
            "color_get_value",
            "colour_get_blue",
            "colour_get_green",
            "colour_get_hue",
            "colour_get_red",
            "colour_get_saturation",
            "colour_get_value",
            "cos",
            "darccos",
            "darcsin",
            "darctan",
            "darctan2",
            "date_compare_date",
            "date_compare_datetime",
            "date_compare_time",
            "date_create_datetime",
            "date_current_datetime",
            "date_date_of",
            "date_date_string",
            "date_datetime_string",
            "date_day_span",
            "date_days_in_month",
            "date_days_in_year",
            "date_get_day",
            "date_get_day_of_year",
            "date_get_hour",
            "date_get_hour_of_year",
            "date_get_minute",
            "date_get_minute_of_year",
            "date_get_month",
            "date_get_second",
            "date_get_second_of_year",
            "date_get_timezone",
            "date_get_week",
            "date_get_weekday",
            "date_get_year",
            "date_hour_span",
            "date_inc_day",
            "date_inc_hour",
            "date_inc_minute",
            "date_inc_month",
            "date_inc_second",
            "date_inc_week",
            "date_inc_year",
            "date_is_today",
            "date_leap_year",
            "date_minute_span",
            "date_month_span",
            "date_second_span",
            "date_set_timezone",
            "date_time_of",
            "date_time_string",
            "date_valid_datetime",
            "date_week_span",
            "date_year_span",
            "dcos",
            "debug_event",
            "debug_get_callstack",
            "degtorad",
            "device_get_tilt_x",
            "device_get_tilt_y",
            "device_get_tilt_z",
            "device_is_keypad_open",
            "device_mouse_check_button",
            "device_mouse_check_button_pressed",
            "device_mouse_check_button_released",
            "device_mouse_dbclick_enable",
            "device_mouse_raw_x",
            "device_mouse_raw_y",
            "device_mouse_x",
            "device_mouse_x_to_gui",
            "device_mouse_y",
            "device_mouse_y_to_gui",
            "directory_create",
            "directory_destroy",
            "directory_exists",
            "display_get_dpi_x",
            "display_get_dpi_y",
            "display_get_gui_height",
            "display_get_gui_width",
            "display_get_height",
            "display_get_orientation",
            "display_get_sleep_margin",
            "display_get_timing_method",
            "display_get_width",
            "display_mouse_get_x",
            "display_mouse_get_y",
            "display_mouse_set",
            "display_reset",
            "display_set_gui_maximise",
            "display_set_gui_maximize",
            "display_set_gui_size",
            "display_set_sleep_margin",
            "display_set_timing_method",
            "display_set_ui_visibility",
            "distance_to_object",
            "distance_to_point",
            "dot_product",
            "dot_product_3d",
            "dot_product_3d_normalised",
            "dot_product_3d_normalized",
            "dot_product_normalised",
            "dot_product_normalized",
            "draw_arrow",
            "draw_background",
            "draw_background_ext",
            "draw_background_part_ext",
            "draw_background_tiled",
            "draw_button",
            "draw_circle",
            "draw_circle_color",
            "draw_circle_colour",
            "draw_clear",
            "draw_clear_alpha",
            "draw_ellipse",
            "draw_ellipse_color",
            "draw_ellipse_colour",
            "draw_enable_alphablend",
            "draw_enable_drawevent",
            "draw_enable_swf_aa",
            "draw_flush",
            "draw_get_alpha",
            "draw_get_color",
            "draw_get_colour",
            "draw_get_lighting",
            "draw_get_swf_aa_level",
            "draw_getpixel",
            "draw_getpixel_ext",
            "draw_healthbar",
            "draw_highscore",
            "draw_light_define_ambient",
            "draw_light_define_direction",
            "draw_light_define_point",
            "draw_light_enable",
            "draw_light_get",
            "draw_light_get_ambient",
            "draw_line",
            "draw_line_color",
            "draw_line_colour",
            "draw_line_width",
            "draw_line_width_color",
            "draw_line_width_colour",
            "draw_path",
            "draw_point",
            "draw_point_color",
            "draw_point_colour",
            "draw_primitive_begin",
            "draw_primitive_begin_texture",
            "draw_primitive_end",
            "draw_rectangle",
            "draw_rectangle_color",
            "draw_rectangle_colour",
            "draw_roundrect",
            "draw_roundrect_color",
            "draw_roundrect_color_ext",
            "draw_roundrect_colour",
            "draw_roundrect_colour_ext",
            "draw_roundrect_ext",
            "draw_self",
            "draw_set_alpha",
            "draw_set_alpha_test",
            "draw_set_alpha_test_ref_value",
            "draw_set_blend_mode",
            "draw_set_blend_mode_ext",
            "draw_set_circle_precision",
            "draw_set_color",
            "draw_set_color_write_enable",
            "draw_set_colour",
            "draw_set_font",
            "draw_set_halign",
            "draw_set_lighting",
            "draw_set_swf_aa_level",
            "draw_set_valign",
            "draw_skeleton",
            "draw_skeleton_collision",
            "draw_skeleton_instance",
            "draw_skeleton_time",
            "draw_sprite",
            "draw_sprite_ext",
            "draw_sprite_general",
            "draw_sprite_part",
            "draw_sprite_part_ext",
            "draw_sprite_pos",
            "draw_sprite_stretched",
            "draw_sprite_stretched_ext",
            "draw_sprite_tiled",
            "draw_sprite_tiled_ext",
            "draw_surface",
            "draw_surface_ext",
            "draw_surface_general",
            "draw_surface_part",
            "draw_surface_part_ext",
            "draw_surface_stretched",
            "draw_surface_stretched_ext",
            "draw_surface_tiled",
            "draw_surface_tiled_ext",
            "draw_text",
            "draw_text_color",
            "draw_text_colour",
            "draw_text_ext",
            "draw_text_ext_color",
            "draw_text_ext_colour",
            "draw_text_ext_transformed",
            "draw_text_ext_transformed_color",
            "draw_text_ext_transformed_colour",
            "draw_text_transformed",
            "draw_text_transformed_color",
            "draw_text_transformed_colour",
            "draw_texture_flush",
            "draw_tile",
            "draw_tilemap",
            "draw_triangle",
            "draw_triangle_color",
            "draw_triangle_colour",
            "draw_vertex",
            "draw_vertex_color",
            "draw_vertex_colour",
            "draw_vertex_texture",
            "draw_vertex_texture_color",
            "draw_vertex_texture_colour",
            "ds_exists",
            "ds_grid_add",
            "ds_grid_add_disk",
            "ds_grid_add_grid_region",
            "ds_grid_add_region",
            "ds_grid_clear",
            "ds_grid_copy",
            "ds_grid_create",
            "ds_grid_destroy",
            "ds_grid_get",
            "ds_grid_get_disk_max",
            "ds_grid_get_disk_mean",
            "ds_grid_get_disk_min",
            "ds_grid_get_disk_sum",
            "ds_grid_get_max",
            "ds_grid_get_mean",
            "ds_grid_get_min",
            "ds_grid_get_sum",
            "ds_grid_height",
            "ds_grid_multiply",
            "ds_grid_multiply_disk",
            "ds_grid_multiply_grid_region",
            "ds_grid_multiply_region",
            "ds_grid_read",
            "ds_grid_resize",
            "ds_grid_set",
            "ds_grid_set_disk",
            "ds_grid_set_grid_region",
            "ds_grid_set_region",
            "ds_grid_shuffle",
            "ds_grid_sort",
            "ds_grid_value_disk_exists",
            "ds_grid_value_disk_x",
            "ds_grid_value_disk_y",
            "ds_grid_value_exists",
            "ds_grid_value_x",
            "ds_grid_value_y",
            "ds_grid_width",
            "ds_grid_write",
            "ds_list_add",
            "ds_list_clear",
            "ds_list_copy",
            "ds_list_create",
            "ds_list_delete",
            "ds_list_destroy",
            "ds_list_empty",
            "ds_list_find_index",
            "ds_list_find_value",
            "ds_list_insert",
            "ds_list_mark_as_list",
            "ds_list_mark_as_map",
            "ds_list_read",
            "ds_list_replace",
            "ds_list_set",
            "ds_list_shuffle",
            "ds_list_size",
            "ds_list_sort",
            "ds_list_write",
            "ds_map_add",
            "ds_map_add_list",
            "ds_map_add_map",
            "ds_map_clear",
            "ds_map_copy",
            "ds_map_create",
            "ds_map_delete",
            "ds_map_destroy",
            "ds_map_empty",
            "ds_map_exists",
            "ds_map_find_first",
            "ds_map_find_last",
            "ds_map_find_next",
            "ds_map_find_previous",
            "ds_map_find_value",
            "ds_map_read",
            "ds_map_replace",
            "ds_map_replace_list",
            "ds_map_replace_map",
            "ds_map_secure_load",
            "ds_map_secure_load_buffer",
            "ds_map_secure_save",
            "ds_map_secure_save_buffer",
            "ds_map_set",
            "ds_map_size",
            "ds_map_write",
            "ds_priority_add",
            "ds_priority_change_priority",
            "ds_priority_clear",
            "ds_priority_copy",
            "ds_priority_create",
            "ds_priority_delete_max",
            "ds_priority_delete_min",
            "ds_priority_delete_value",
            "ds_priority_destroy",
            "ds_priority_empty",
            "ds_priority_find_max",
            "ds_priority_find_min",
            "ds_priority_find_priority",
            "ds_priority_read",
            "ds_priority_size",
            "ds_priority_write",
            "ds_queue_clear",
            "ds_queue_copy",
            "ds_queue_create",
            "ds_queue_dequeue",
            "ds_queue_destroy",
            "ds_queue_empty",
            "ds_queue_enqueue",
            "ds_queue_head",
            "ds_queue_read",
            "ds_queue_size",
            "ds_queue_tail",
            "ds_queue_write",
            "ds_set_precision",
            "ds_stack_clear",
            "ds_stack_copy",
            "ds_stack_create",
            "ds_stack_destroy",
            "ds_stack_empty",
            "ds_stack_pop",
            "ds_stack_push",
            "ds_stack_read",
            "ds_stack_size",
            "ds_stack_top",
            "ds_stack_write",
            "dsin",
            "dtan",
            "effect_clear",
            "effect_create_above",
            "effect_create_below",
            "environment_get_variable",
            "event_inherited",
            "event_perform",
            "event_perform_object",
            "event_user",
            "exp",
            "external_call",
            "external_define",
            "external_free",
            "facebook_accesstoken",
            "facebook_check_permission",
            "facebook_dialog",
            "facebook_graph_request",
            "facebook_init",
            "facebook_launch_offerwall",
            "facebook_login",
            "facebook_logout",
            "facebook_post_message",
            "facebook_request_publish_permissions",
            "facebook_request_read_permissions",
            "facebook_send_invite",
            "facebook_status",
            "facebook_user_id",
            "file_attributes",
            "file_bin_close",
            "file_bin_open",
            "file_bin_position",
            "file_bin_read_byte",
            "file_bin_rewrite",
            "file_bin_seek",
            "file_bin_size",
            "file_bin_write_byte",
            "file_copy",
            "file_delete",
            "file_exists",
            "file_find_close",
            "file_find_first",
            "file_find_next",
            "file_rename",
            "file_text_close",
            "file_text_eof",
            "file_text_eoln",
            "file_text_open_append",
            "file_text_open_from_string",
            "file_text_open_read",
            "file_text_open_write",
            "file_text_read_real",
            "file_text_read_string",
            "file_text_readln",
            "file_text_write_real",
            "file_text_write_string",
            "file_text_writeln",
            "filename_change_ext",
            "filename_dir",
            "filename_drive",
            "filename_ext",
            "filename_name",
            "filename_path",
            "floor",
            "font_add",
            "font_add_enable_aa",
            "font_add_get_enable_aa",
            "font_add_sprite",
            "font_add_sprite_ext",
            "font_delete",
            "font_exists",
            "font_get_bold",
            "font_get_first",
            "font_get_fontname",
            "font_get_italic",
            "font_get_last",
            "font_get_name",
            "font_get_size",
            "font_get_texture",
            "font_get_uvs",
            "font_replace",
            "font_replace_sprite",
            "font_replace_sprite_ext",
            "font_set_cache_size",
            "font_texture_page_size",
            "frac",
            "game_end",
            "game_get_speed",
            "game_load",
            "game_load_buffer",
            "game_restart",
            "game_save",
            "game_save_buffer",
            "game_set_speed",
            "gamepad_axis_count",
            "gamepad_axis_value",
            "gamepad_button_check",
            "gamepad_button_check_pressed",
            "gamepad_button_check_released",
            "gamepad_button_count",
            "gamepad_button_value",
            "gamepad_get_axis_deadzone",
            "gamepad_get_button_threshold",
            "gamepad_get_description",
            "gamepad_get_device_count",
            "gamepad_is_connected",
            "gamepad_is_supported",
            "gamepad_set_axis_deadzone",
            "gamepad_set_button_threshold",
            "gamepad_set_color",
            "gamepad_set_colour",
            "gamepad_set_vibration",
            "gesture_double_tap_distance",
            "gesture_double_tap_time",
            "gesture_drag_distance",
            "gesture_drag_time",
            "gesture_flick_speed",
            "gesture_get_double_tap_distance",
            "gesture_get_double_tap_time",
            "gesture_get_drag_distance",
            "gesture_get_drag_time",
            "gesture_get_flick_speed",
            "gesture_get_pinch_angle_away",
            "gesture_get_pinch_angle_towards",
            "gesture_get_pinch_distance",
            "gesture_get_rotate_angle",
            "gesture_get_rotate_time",
            "gesture_get_tap_count",
            "gesture_pinch_angle_away",
            "gesture_pinch_angle_towards",
            "gesture_pinch_distance",
            "gesture_rotate_angle",
            "gesture_rotate_time",
            "gesture_tap_count",
            "get_integer",
            "get_integer_async",
            "get_login_async",
            "get_open_filename",
            "get_open_filename_ext",
            "get_save_filename",
            "get_save_filename_ext",
            "get_string",
            "get_string_async",
            "get_timer",
            "gml_pragma",
            "gml_release_mode",
            "gpu_get_alphatestenable",
            "gpu_get_alphatestfunc",
            "gpu_get_alphatestref",
            "gpu_get_blendenable",
            "gpu_get_blendmode",
            "gpu_get_blendmode_dest",
            "gpu_get_blendmode_destalpha",
            "gpu_get_blendmode_ext",
            "gpu_get_blendmode_ext_sepalpha",
            "gpu_get_blendmode_src",
            "gpu_get_blendmode_srcalpha",
            "gpu_get_colorwriteenable",
            "gpu_get_colourwriteenable",
            "gpu_get_cullmode",
            "gpu_get_fog",
            "gpu_get_lightingenable",
            "gpu_get_state",
            "gpu_get_tex_filter",
            "gpu_get_tex_filter_ext",
            "gpu_get_tex_max_aniso",
            "gpu_get_tex_max_aniso_ext",
            "gpu_get_tex_max_mip",
            "gpu_get_tex_max_mip_ext",
            "gpu_get_tex_min_mip",
            "gpu_get_tex_min_mip_ext",
            "gpu_get_tex_mip_bias",
            "gpu_get_tex_mip_bias_ext",
            "gpu_get_tex_mip_enable",
            "gpu_get_tex_mip_enable_ext",
            "gpu_get_tex_mip_filter",
            "gpu_get_tex_mip_filter_ext",
            "gpu_get_tex_repeat",
            "gpu_get_tex_repeat_ext",
            "gpu_get_texfilter",
            "gpu_get_texfilter_ext",
            "gpu_get_texrepeat",
            "gpu_get_texrepeat_ext",
            "gpu_get_zfunc",
            "gpu_get_ztestenable",
            "gpu_get_zwriteenable",
            "gpu_pop_state",
            "gpu_push_state",
            "gpu_set_alphatestenable",
            "gpu_set_alphatestfunc",
            "gpu_set_alphatestref",
            "gpu_set_blendenable",
            "gpu_set_blendmode",
            "gpu_set_blendmode_ext",
            "gpu_set_blendmode_ext_sepalpha",
            "gpu_set_colorwriteenable",
            "gpu_set_colourwriteenable",
            "gpu_set_cullmode",
            "gpu_set_fog",
            "gpu_set_lightingenable",
            "gpu_set_state",
            "gpu_set_tex_filter",
            "gpu_set_tex_filter_ext",
            "gpu_set_tex_max_aniso",
            "gpu_set_tex_max_aniso_ext",
            "gpu_set_tex_max_mip",
            "gpu_set_tex_max_mip_ext",
            "gpu_set_tex_min_mip",
            "gpu_set_tex_min_mip_ext",
            "gpu_set_tex_mip_bias",
            "gpu_set_tex_mip_bias_ext",
            "gpu_set_tex_mip_enable",
            "gpu_set_tex_mip_enable_ext",
            "gpu_set_tex_mip_filter",
            "gpu_set_tex_mip_filter_ext",
            "gpu_set_tex_repeat",
            "gpu_set_tex_repeat_ext",
            "gpu_set_texfilter",
            "gpu_set_texfilter_ext",
            "gpu_set_texrepeat",
            "gpu_set_texrepeat_ext",
            "gpu_set_zfunc",
            "gpu_set_ztestenable",
            "gpu_set_zwriteenable",
            "highscore_add",
            "highscore_clear",
            "highscore_name",
            "highscore_value",
            "http_get",
            "http_get_file",
            "http_post_string",
            "http_request",
            "iap_acquire",
            "iap_activate",
            "iap_consume",
            "iap_enumerate_products",
            "iap_product_details",
            "iap_purchase_details",
            "iap_restore_all",
            "iap_status",
            "ini_close",
            "ini_key_delete",
            "ini_key_exists",
            "ini_open",
            "ini_open_from_string",
            "ini_read_real",
            "ini_read_string",
            "ini_section_delete",
            "ini_section_exists",
            "ini_write_real",
            "ini_write_string",
            "instance_activate_all",
            "instance_activate_layer",
            "instance_activate_object",
            "instance_activate_region",
            "instance_change",
            "instance_copy",
            "instance_create",
            "instance_create_depth",
            "instance_create_layer",
            "instance_deactivate_all",
            "instance_deactivate_layer",
            "instance_deactivate_object",
            "instance_deactivate_region",
            "instance_destroy",
            "instance_exists",
            "instance_find",
            "instance_furthest",
            "instance_id_get",
            "instance_nearest",
            "instance_number",
            "instance_place",
            "instance_place_list",
            "instance_position",
            "instance_position_list",
            "int64",
            "io_clear",
            "irandom",
            "irandom_range",
            "is_array",
            "is_bool",
            "is_infinity",
            "is_int32",
            "is_int64",
            "is_matrix",
            "is_method",
            "is_nan",
            "is_numeric",
            "is_ptr",
            "is_real",
            "is_string",
            "is_struct",
            "is_undefined",
            "is_vec3",
            "is_vec4",
            "json_decode",
            "json_encode",
            "keyboard_check",
            "keyboard_check_direct",
            "keyboard_check_pressed",
            "keyboard_check_released",
            "keyboard_clear",
            "keyboard_get_map",
            "keyboard_get_numlock",
            "keyboard_key_press",
            "keyboard_key_release",
            "keyboard_set_map",
            "keyboard_set_numlock",
            "keyboard_unset_map",
            "keyboard_virtual_height",
            "keyboard_virtual_hide",
            "keyboard_virtual_show",
            "keyboard_virtual_status",
            "layer_add_instance",
            "layer_background_alpha",
            "layer_background_blend",
            "layer_background_change",
            "layer_background_create",
            "layer_background_destroy",
            "layer_background_exists",
            "layer_background_get_alpha",
            "layer_background_get_blend",
            "layer_background_get_htiled",
            "layer_background_get_id",
            "layer_background_get_index",
            "layer_background_get_speed",
            "layer_background_get_sprite",
            "layer_background_get_stretch",
            "layer_background_get_visible",
            "layer_background_get_vtiled",
            "layer_background_get_xscale",
            "layer_background_get_yscale",
            "layer_background_htiled",
            "layer_background_index",
            "layer_background_speed",
            "layer_background_sprite",
            "layer_background_stretch",
            "layer_background_visible",
            "layer_background_vtiled",
            "layer_background_xscale",
            "layer_background_yscale",
            "layer_create",
            "layer_depth",
            "layer_destroy",
            "layer_destroy_instances",
            "layer_element_move",
            "layer_exists",
            "layer_force_draw_depth",
            "layer_get_all",
            "layer_get_all_elements",
            "layer_get_depth",
            "layer_get_element_layer",
            "layer_get_element_type",
            "layer_get_forced_depth",
            "layer_get_hspeed",
            "layer_get_id",
            "layer_get_id_at_depth",
            "layer_get_name",
            "layer_get_script_begin",
            "layer_get_script_end",
            "layer_get_shader",
            "layer_get_target_room",
            "layer_get_visible",
            "layer_get_vspeed",
            "layer_get_x",
            "layer_get_y",
            "layer_has_instance",
            "layer_hspeed",
            "layer_instance_get_instance",
            "layer_is_draw_depth_forced",
            "layer_reset_target_room",
            "layer_script_begin",
            "layer_script_end",
            "layer_set_target_room",
            "layer_set_visible",
            "layer_shader",
            "layer_sprite_alpha",
            "layer_sprite_angle",
            "layer_sprite_blend",
            "layer_sprite_change",
            "layer_sprite_create",
            "layer_sprite_destroy",
            "layer_sprite_exists",
            "layer_sprite_get_alpha",
            "layer_sprite_get_angle",
            "layer_sprite_get_blend",
            "layer_sprite_get_id",
            "layer_sprite_get_index",
            "layer_sprite_get_speed",
            "layer_sprite_get_sprite",
            "layer_sprite_get_x",
            "layer_sprite_get_xscale",
            "layer_sprite_get_y",
            "layer_sprite_get_yscale",
            "layer_sprite_index",
            "layer_sprite_speed",
            "layer_sprite_x",
            "layer_sprite_xscale",
            "layer_sprite_y",
            "layer_sprite_yscale",
            "layer_tile_alpha",
            "layer_tile_blend",
            "layer_tile_change",
            "layer_tile_create",
            "layer_tile_destroy",
            "layer_tile_exists",
            "layer_tile_get_alpha",
            "layer_tile_get_blend",
            "layer_tile_get_region",
            "layer_tile_get_sprite",
            "layer_tile_get_visible",
            "layer_tile_get_x",
            "layer_tile_get_xscale",
            "layer_tile_get_y",
            "layer_tile_get_yscale",
            "layer_tile_region",
            "layer_tile_visible",
            "layer_tile_x",
            "layer_tile_xscale",
            "layer_tile_y",
            "layer_tile_yscale",
            "layer_tilemap_create",
            "layer_tilemap_destroy",
            "layer_tilemap_exists",
            "layer_tilemap_get_id",
            "layer_vspeed",
            "layer_x",
            "layer_y",
            "lengthdir_x",
            "lengthdir_y",
            "lerp",
            "ln",
            "load_csv",
            "log10",
            "log2",
            "logn",
            "make_color_hsv",
            "make_color_rgb",
            "make_colour_hsv",
            "make_colour_rgb",
            "math_get_epsilon",
            "math_set_epsilon",
            "matrix_build",
            "matrix_build_identity",
            "matrix_build_lookat",
            "matrix_build_projection_ortho",
            "matrix_build_projection_perspective",
            "matrix_build_projection_perspective_fov",
            "matrix_get",
            "matrix_multiply",
            "matrix_set",
            "matrix_stack_clear",
            "matrix_stack_is_empty",
            "matrix_stack_multiply",
            "matrix_stack_pop",
            "matrix_stack_push",
            "matrix_stack_set",
            "matrix_stack_top",
            "matrix_transform_vertex",
            "max",
            "md5_file",
            "md5_string_unicode",
            "md5_string_utf8",
            "mean",
            "median",
            "merge_color",
            "merge_colour",
            "min",
            "motion_add",
            "motion_set",
            "mouse_check_button",
            "mouse_check_button_pressed",
            "mouse_check_button_released",
            "mouse_clear",
            "mouse_wheel_down",
            "mouse_wheel_up",
            "move_bounce_all",
            "move_bounce_solid",
            "move_contact_all",
            "move_contact_solid",
            "move_outside_all",
            "move_outside_solid",
            "move_random",
            "move_snap",
            "move_towards_point",
            "move_wrap",
            "mp_grid_add_cell",
            "mp_grid_add_instances",
            "mp_grid_add_rectangle",
            "mp_grid_clear_all",
            "mp_grid_clear_cell",
            "mp_grid_clear_rectangle",
            "mp_grid_create",
            "mp_grid_destroy",
            "mp_grid_draw",
            "mp_grid_get_cell",
            "mp_grid_path",
            "mp_grid_to_ds_grid",
            "mp_linear_path",
            "mp_linear_path_object",
            "mp_linear_step",
            "mp_linear_step_object",
            "mp_potential_path",
            "mp_potential_path_object",
            "mp_potential_settings",
            "mp_potential_step",
            "mp_potential_step_object",
            "network_connect",
            "network_connect_raw",
            "network_create_server",
            "network_create_server_raw",
            "network_create_socket",
            "network_create_socket_ext",
            "network_destroy",
            "network_resolve",
            "network_send_broadcast",
            "network_send_packet",
            "network_send_raw",
            "network_send_udp",
            "network_send_udp_raw",
            "network_set_config",
            "network_set_timeout",
            "object_exists",
            "object_get_depth",
            "object_get_mask",
            "object_get_name",
            "object_get_parent",
            "object_get_persistent",
            "object_get_physics",
            "object_get_solid",
            "object_get_sprite",
            "object_get_visible",
            "object_is_ancestor",
            "object_set_mask",
            "object_set_persistent",
            "object_set_solid",
            "object_set_sprite",
            "object_set_visible",
            "ord",
            "os_get_config",
            "os_get_info",
            "os_get_language",
            "os_get_region",
            "os_is_network_connected",
            "os_is_paused",
            "os_lock_orientation",
            "os_powersave_enable",
            "parameter_count",
            "parameter_string",
            "part_emitter_burst",
            "part_emitter_clear",
            "part_emitter_create",
            "part_emitter_destroy",
            "part_emitter_destroy_all",
            "part_emitter_exists",
            "part_emitter_region",
            "part_emitter_stream",
            "part_particles_clear",
            "part_particles_count",
            "part_particles_create",
            "part_particles_create_color",
            "part_particles_create_colour",
            "part_system_automatic_draw",
            "part_system_automatic_update",
            "part_system_clear",
            "part_system_create",
            "part_system_create_layer",
            "part_system_depth",
            "part_system_destroy",
            "part_system_draw_order",
            "part_system_drawit",
            "part_system_exists",
            "part_system_get_layer",
            "part_system_layer",
            "part_system_position",
            "part_system_update",
            "part_type_alpha1",
            "part_type_alpha2",
            "part_type_alpha3",
            "part_type_blend",
            "part_type_clear",
            "part_type_color1",
            "part_type_color2",
            "part_type_color3",
            "part_type_color_hsv",
            "part_type_color_mix",
            "part_type_color_rgb",
            "part_type_colour1",
            "part_type_colour2",
            "part_type_colour3",
            "part_type_colour_hsv",
            "part_type_colour_mix",
            "part_type_colour_rgb",
            "part_type_create",
            "part_type_death",
            "part_type_destroy",
            "part_type_direction",
            "part_type_exists",
            "part_type_gravity",
            "part_type_life",
            "part_type_orientation",
            "part_type_scale",
            "part_type_shape",
            "part_type_size",
            "part_type_speed",
            "part_type_sprite",
            "part_type_step",
            "path_add",
            "path_add_point",
            "path_append",
            "path_assign",
            "path_change_point",
            "path_clear_points",
            "path_delete",
            "path_delete_point",
            "path_duplicate",
            "path_end",
            "path_exists",
            "path_flip",
            "path_get_closed",
            "path_get_kind",
            "path_get_length",
            "path_get_name",
            "path_get_number",
            "path_get_point_speed",
            "path_get_point_x",
            "path_get_point_y",
            "path_get_precision",
            "path_get_speed",
            "path_get_time",
            "path_get_x",
            "path_get_y",
            "path_insert_point",
            "path_mirror",
            "path_rescale",
            "path_reverse",
            "path_rotate",
            "path_set_closed",
            "path_set_kind",
            "path_set_precision",
            "path_shift",
            "path_start",
            "physics_apply_angular_impulse",
            "physics_apply_force",
            "physics_apply_impulse",
            "physics_apply_local_force",
            "physics_apply_local_impulse",
            "physics_apply_torque",
            "physics_draw_debug",
            "physics_fixture_add_point",
            "physics_fixture_bind",
            "physics_fixture_bind_ext",
            "physics_fixture_create",
            "physics_fixture_delete",
            "physics_fixture_set_angular_damping",
            "physics_fixture_set_awake",
            "physics_fixture_set_box_shape",
            "physics_fixture_set_chain_shape",
            "physics_fixture_set_circle_shape",
            "physics_fixture_set_collision_group",
            "physics_fixture_set_density",
            "physics_fixture_set_edge_shape",
            "physics_fixture_set_friction",
            "physics_fixture_set_kinematic",
            "physics_fixture_set_linear_damping",
            "physics_fixture_set_polygon_shape",
            "physics_fixture_set_restitution",
            "physics_fixture_set_sensor",
            "physics_get_density",
            "physics_get_friction",
            "physics_get_restitution",
            "physics_joint_delete",
            "physics_joint_distance_create",
            "physics_joint_enable_motor",
            "physics_joint_friction_create",
            "physics_joint_gear_create",
            "physics_joint_get_value",
            "physics_joint_prismatic_create",
            "physics_joint_pulley_create",
            "physics_joint_revolute_create",
            "physics_joint_rope_create",
            "physics_joint_set_value",
            "physics_joint_weld_create",
            "physics_joint_wheel_create",
            "physics_mass_properties",
            "physics_particle_count",
            "physics_particle_create",
            "physics_particle_delete",
            "physics_particle_delete_region_box",
            "physics_particle_delete_region_circle",
            "physics_particle_delete_region_poly",
            "physics_particle_draw",
            "physics_particle_draw_ext",
            "physics_particle_get_damping",
            "physics_particle_get_data",
            "physics_particle_get_data_particle",
            "physics_particle_get_density",
            "physics_particle_get_gravity_scale",
            "physics_particle_get_group_flags",
            "physics_particle_get_max_count",
            "physics_particle_get_radius",
            "physics_particle_group_add_point",
            "physics_particle_group_begin",
            "physics_particle_group_box",
            "physics_particle_group_circle",
            "physics_particle_group_count",
            "physics_particle_group_delete",
            "physics_particle_group_end",
            "physics_particle_group_get_ang_vel",
            "physics_particle_group_get_angle",
            "physics_particle_group_get_centre_x",
            "physics_particle_group_get_centre_y",
            "physics_particle_group_get_data",
            "physics_particle_group_get_inertia",
            "physics_particle_group_get_mass",
            "physics_particle_group_get_vel_x",
            "physics_particle_group_get_vel_y",
            "physics_particle_group_get_x",
            "physics_particle_group_get_y",
            "physics_particle_group_join",
            "physics_particle_group_polygon",
            "physics_particle_set_category_flags",
            "physics_particle_set_damping",
            "physics_particle_set_density",
            "physics_particle_set_flags",
            "physics_particle_set_gravity_scale",
            "physics_particle_set_group_flags",
            "physics_particle_set_max_count",
            "physics_particle_set_radius",
            "physics_pause_enable",
            "physics_remove_fixture",
            "physics_set_density",
            "physics_set_friction",
            "physics_set_restitution",
            "physics_test_overlap",
            "physics_world_create",
            "physics_world_draw_debug",
            "physics_world_gravity",
            "physics_world_update_iterations",
            "physics_world_update_speed",
            "place_empty",
            "place_free",
            "place_meeting",
            "place_snapped",
            "point_direction",
            "point_distance",
            "point_distance_3d",
            "point_in_circle",
            "point_in_rectangle",
            "point_in_triangle",
            "position_change",
            "position_destroy",
            "position_empty",
            "position_meeting",
            "power",
            "ptr",
            "push_cancel_local_notification",
            "push_get_first_local_notification",
            "push_get_next_local_notification",
            "push_local_notification",
            "radtodeg",
            "random",
            "random_get_seed",
            "random_range",
            "random_set_seed",
            "randomise",
            "randomize",
            "real",
            "rectangle_in_circle",
            "rectangle_in_rectangle",
            "rectangle_in_triangle",
            "room_add",
            "room_assign",
            "room_duplicate",
            "room_exists",
            "room_get_camera",
            "room_get_name",
            "room_get_viewport",
            "room_goto",
            "room_goto_next",
            "room_goto_previous",
            "room_instance_add",
            "room_instance_clear",
            "room_next",
            "room_previous",
            "room_restart",
            "room_set_background_color",
            "room_set_background_colour",
            "room_set_camera",
            "room_set_height",
            "room_set_persistent",
            "room_set_view",
            "room_set_view_enabled",
            "room_set_viewport",
            "room_set_width",
            "round",
            "screen_save",
            "screen_save_part",
            "script_execute",
            "script_exists",
            "script_get_name",
            "sha1_file",
            "sha1_string_unicode",
            "sha1_string_utf8",
            "shader_current",
            "shader_enable_corner_id",
            "shader_get_name",
            "shader_get_sampler_index",
            "shader_get_uniform",
            "shader_is_compiled",
            "shader_reset",
            "shader_set",
            "shader_set_uniform_f",
            "shader_set_uniform_f_array",
            "shader_set_uniform_i",
            "shader_set_uniform_i_array",
            "shader_set_uniform_matrix",
            "shader_set_uniform_matrix_array",
            "shaders_are_supported",
            "shop_leave_rating",
            "show_debug_message",
            "show_debug_overlay",
            "show_error",
            "show_message",
            "show_message_async",
            "show_question",
            "show_question_async",
            "sign",
            "sin",
            "skeleton_animation_clear",
            "skeleton_animation_get",
            "skeleton_animation_get_duration",
            "skeleton_animation_get_ext",
            "skeleton_animation_get_frame",
            "skeleton_animation_get_frames",
            "skeleton_animation_list",
            "skeleton_animation_mix",
            "skeleton_animation_set",
            "skeleton_animation_set_ext",
            "skeleton_animation_set_frame",
            "skeleton_attachment_create",
            "skeleton_attachment_get",
            "skeleton_attachment_set",
            "skeleton_bone_data_get",
            "skeleton_bone_data_set",
            "skeleton_bone_state_get",
            "skeleton_bone_state_set",
            "skeleton_collision_draw_set",
            "skeleton_get_bounds",
            "skeleton_get_minmax",
            "skeleton_get_num_bounds",
            "skeleton_skin_get",
            "skeleton_skin_list",
            "skeleton_skin_set",
            "skeleton_slot_data",
            "sprite_add",
            "sprite_add_from_surface",
            "sprite_assign",
            "sprite_collision_mask",
            "sprite_create_from_surface",
            "sprite_delete",
            "sprite_duplicate",
            "sprite_exists",
            "sprite_flush",
            "sprite_flush_multi",
            "sprite_get_bbox_bottom",
            "sprite_get_bbox_left",
            "sprite_get_bbox_right",
            "sprite_get_bbox_top",
            "sprite_get_height",
            "sprite_get_name",
            "sprite_get_number",
            "sprite_get_speed",
            "sprite_get_speed_type",
            "sprite_get_texture",
            "sprite_get_tpe",
            "sprite_get_uvs",
            "sprite_get_width",
            "sprite_get_xoffset",
            "sprite_get_yoffset",
            "sprite_merge",
            "sprite_prefetch",
            "sprite_prefetch_multi",
            "sprite_replace",
            "sprite_save",
            "sprite_save_strip",
            "sprite_set_alpha_from_sprite",
            "sprite_set_cache_size",
            "sprite_set_cache_size_ext",
            "sprite_set_offset",
            "sprite_set_speed",
            "sqr",
            "sqrt",
            "steam_activate_overlay",
            "steam_activate_overlay_browser",
            "steam_activate_overlay_store",
            "steam_activate_overlay_user",
            "steam_available_languages",
            "steam_clear_achievement",
            "steam_create_leaderboard",
            "steam_current_game_language",
            "steam_download_friends_scores",
            "steam_download_scores",
            "steam_download_scores_around_user",
            "steam_file_delete",
            "steam_file_exists",
            "steam_file_persisted",
            "steam_file_read",
            "steam_file_share",
            "steam_file_size",
            "steam_file_write",
            "steam_file_write_file",
            "steam_get_achievement",
            "steam_get_app_id",
            "steam_get_persona_name",
            "steam_get_quota_free",
            "steam_get_quota_total",
            "steam_get_stat_avg_rate",
            "steam_get_stat_float",
            "steam_get_stat_int",
            "steam_get_user_account_id",
            "steam_get_user_persona_name",
            "steam_get_user_steam_id",
            "steam_initialised",
            "steam_is_cloud_enabled_for_account",
            "steam_is_cloud_enabled_for_app",
            "steam_is_overlay_activated",
            "steam_is_overlay_enabled",
            "steam_is_screenshot_requested",
            "steam_is_user_logged_on",
            "steam_reset_all_stats",
            "steam_reset_all_stats_achievements",
            "steam_send_screenshot",
            "steam_set_achievement",
            "steam_set_stat_avg_rate",
            "steam_set_stat_float",
            "steam_set_stat_int",
            "steam_stats_ready",
            "steam_ugc_create_item",
            "steam_ugc_create_query_all",
            "steam_ugc_create_query_all_ex",
            "steam_ugc_create_query_user",
            "steam_ugc_create_query_user_ex",
            "steam_ugc_download",
            "steam_ugc_get_item_install_info",
            "steam_ugc_get_item_update_info",
            "steam_ugc_get_item_update_progress",
            "steam_ugc_get_subscribed_items",
            "steam_ugc_num_subscribed_items",
            "steam_ugc_query_add_excluded_tag",
            "steam_ugc_query_add_required_tag",
            "steam_ugc_query_set_allow_cached_response",
            "steam_ugc_query_set_cloud_filename_filter",
            "steam_ugc_query_set_match_any_tag",
            "steam_ugc_query_set_ranked_by_trend_days",
            "steam_ugc_query_set_return_long_description",
            "steam_ugc_query_set_return_total_only",
            "steam_ugc_query_set_search_text",
            "steam_ugc_request_item_details",
            "steam_ugc_send_query",
            "steam_ugc_set_item_content",
            "steam_ugc_set_item_description",
            "steam_ugc_set_item_preview",
            "steam_ugc_set_item_tags",
            "steam_ugc_set_item_title",
            "steam_ugc_set_item_visibility",
            "steam_ugc_start_item_update",
            "steam_ugc_submit_item_update",
            "steam_ugc_subscribe_item",
            "steam_ugc_unsubscribe_item",
            "steam_upload_score",
            "steam_upload_score_buffer",
            "steam_upload_score_buffer_ext",
            "steam_upload_score_ext",
            "steam_user_installed_dlc",
            "steam_user_owns_dlc",
            "string",
            "string_byte_at",
            "string_byte_length",
            "string_char_at",
            "string_copy",
            "string_count",
            "string_delete",
            "string_digits",
            "string_format",
            "string_hash_to_newline",
            "string_height",
            "string_height_ext",
            "string_insert",
            "string_length",
            "string_letters",
            "string_lettersdigits",
            "string_lower",
            "string_ord_at",
            "string_pos",
            "string_repeat",
            "string_replace",
            "string_replace_all",
            "string_set_byte_at",
            "string_upper",
            "string_width",
            "string_width_ext",
            "surface_copy",
            "surface_copy_part",
            "surface_create",
            "surface_create_ext",
            "surface_depth_disable",
            "surface_exists",
            "surface_free",
            "surface_get_depth_disable",
            "surface_get_height",
            "surface_get_texture",
            "surface_get_width",
            "surface_getpixel",
            "surface_getpixel_ext",
            "surface_reset_target",
            "surface_resize",
            "surface_save",
            "surface_save_part",
            "surface_set_target",
            "surface_set_target_ext",
            "tan",
            "texture_get_height",
            "texture_get_texel_height",
            "texture_get_texel_width",
            "texture_get_uvs",
            "texture_get_width",
            "texture_global_scale",
            "texture_set_stage",
            "tile_get_empty",
            "tile_get_flip",
            "tile_get_index",
            "tile_get_mirror",
            "tile_get_rotate",
            "tile_set_empty",
            "tile_set_flip",
            "tile_set_index",
            "tile_set_mirror",
            "tile_set_rotate",
            "tilemap_clear",
            "tilemap_get",
            "tilemap_get_at_pixel",
            "tilemap_get_cell_x_at_pixel",
            "tilemap_get_cell_y_at_pixel",
            "tilemap_get_frame",
            "tilemap_get_global_mask",
            "tilemap_get_height",
            "tilemap_get_mask",
            "tilemap_get_tile_height",
            "tilemap_get_tile_width",
            "tilemap_get_tileset",
            "tilemap_get_width",
            "tilemap_get_x",
            "tilemap_get_y",
            "tilemap_set",
            "tilemap_set_at_pixel",
            "tilemap_set_global_mask",
            "tilemap_set_mask",
            "tilemap_tileset",
            "tilemap_x",
            "tilemap_y",
            "timeline_add",
            "timeline_clear",
            "timeline_delete",
            "timeline_exists",
            "timeline_get_name",
            "timeline_max_moment",
            "timeline_moment_add_script",
            "timeline_moment_clear",
            "timeline_size",
            "typeof",
            "url_get_domain",
            "url_open",
            "url_open_ext",
            "url_open_full",
            "variable_global_exists",
            "variable_global_get",
            "variable_global_set",
            "variable_instance_exists",
            "variable_instance_get",
            "variable_instance_get_names",
            "variable_instance_set",
            "variable_struct_exists",
            "variable_struct_get",
            "variable_struct_get_names",
            "variable_struct_names_count",
            "variable_struct_remove",
            "variable_struct_set",
            "vertex_argb",
            "vertex_begin",
            "vertex_color",
            "vertex_colour",
            "vertex_create_buffer",
            "vertex_create_buffer_ext",
            "vertex_create_buffer_from_buffer",
            "vertex_create_buffer_from_buffer_ext",
            "vertex_delete_buffer",
            "vertex_end",
            "vertex_float1",
            "vertex_float2",
            "vertex_float3",
            "vertex_float4",
            "vertex_format_add_color",
            "vertex_format_add_colour",
            "vertex_format_add_custom",
            "vertex_format_add_normal",
            "vertex_format_add_position",
            "vertex_format_add_position_3d",
            "vertex_format_add_texcoord",
            "vertex_format_add_textcoord",
            "vertex_format_begin",
            "vertex_format_delete",
            "vertex_format_end",
            "vertex_freeze",
            "vertex_get_buffer_size",
            "vertex_get_number",
            "vertex_normal",
            "vertex_position",
            "vertex_position_3d",
            "vertex_submit",
            "vertex_texcoord",
            "vertex_ubyte4",
            "view_get_camera",
            "view_get_hport",
            "view_get_surface_id",
            "view_get_visible",
            "view_get_wport",
            "view_get_xport",
            "view_get_yport",
            "view_set_camera",
            "view_set_hport",
            "view_set_surface_id",
            "view_set_visible",
            "view_set_wport",
            "view_set_xport",
            "view_set_yport",
            "virtual_key_add",
            "virtual_key_delete",
            "virtual_key_hide",
            "virtual_key_show",
            "win8_appbar_add_element",
            "win8_appbar_enable",
            "win8_appbar_remove_element",
            "win8_device_touchscreen_available",
            "win8_license_initialize_sandbox",
            "win8_license_trial_version",
            "win8_livetile_badge_clear",
            "win8_livetile_badge_notification",
            "win8_livetile_notification_begin",
            "win8_livetile_notification_end",
            "win8_livetile_notification_expiry",
            "win8_livetile_notification_image_add",
            "win8_livetile_notification_secondary_begin",
            "win8_livetile_notification_tag",
            "win8_livetile_notification_text_add",
            "win8_livetile_queue_enable",
            "win8_livetile_tile_clear",
            "win8_livetile_tile_notification",
            "win8_search_add_suggestions",
            "win8_search_disable",
            "win8_search_enable",
            "win8_secondarytile_badge_notification",
            "win8_secondarytile_delete",
            "win8_secondarytile_pin",
            "win8_settingscharm_add_entry",
            "win8_settingscharm_add_html_entry",
            "win8_settingscharm_add_xaml_entry",
            "win8_settingscharm_get_xaml_property",
            "win8_settingscharm_remove_entry",
            "win8_settingscharm_set_xaml_property",
            "win8_share_file",
            "win8_share_image",
            "win8_share_screenshot",
            "win8_share_text",
            "win8_share_url",
            "window_center",
            "window_device",
            "window_get_caption",
            "window_get_color",
            "window_get_colour",
            "window_get_cursor",
            "window_get_fullscreen",
            "window_get_height",
            "window_get_visible_rects",
            "window_get_width",
            "window_get_x",
            "window_get_y",
            "window_handle",
            "window_has_focus",
            "window_mouse_get_x",
            "window_mouse_get_y",
            "window_mouse_set",
            "window_set_caption",
            "window_set_color",
            "window_set_colour",
            "window_set_cursor",
            "window_set_fullscreen",
            "window_set_max_height",
            "window_set_max_width",
            "window_set_min_height",
            "window_set_min_width",
            "window_set_position",
            "window_set_rectangle",
            "window_set_size",
            "window_view_mouse_get_x",
            "window_view_mouse_get_y",
            "window_views_mouse_get_x",
            "window_views_mouse_get_y",
            "winphone_license_trial_version",
            "winphone_tile_back_content",
            "winphone_tile_back_content_wide",
            "winphone_tile_back_image",
            "winphone_tile_back_image_wide",
            "winphone_tile_back_title",
            "winphone_tile_background_color",
            "winphone_tile_background_colour",
            "winphone_tile_count",
            "winphone_tile_cycle_images",
            "winphone_tile_front_image",
            "winphone_tile_front_image_small",
            "winphone_tile_front_image_wide",
            "winphone_tile_icon_image",
            "winphone_tile_small_background_image",
            "winphone_tile_small_icon_image",
            "winphone_tile_title",
            "winphone_tile_wide_content",
            "zip_unzip"
          ];
          const LITERALS = [
            "all",
            "false",
            "noone",
            "pointer_invalid",
            "pointer_null",
            "true",
            "undefined"
          ];
          // many of these look like enumerables to me (see comments below)
          const SYMBOLS = [
            "ANSI_CHARSET",
            "ARABIC_CHARSET",
            "BALTIC_CHARSET",
            "CHINESEBIG5_CHARSET",
            "DEFAULT_CHARSET",
            "EASTEUROPE_CHARSET",
            "GB2312_CHARSET",
            "GM_build_date",
            "GM_runtime_version",
            "GM_version",
            "GREEK_CHARSET",
            "HANGEUL_CHARSET",
            "HEBREW_CHARSET",
            "JOHAB_CHARSET",
            "MAC_CHARSET",
            "OEM_CHARSET",
            "RUSSIAN_CHARSET",
            "SHIFTJIS_CHARSET",
            "SYMBOL_CHARSET",
            "THAI_CHARSET",
            "TURKISH_CHARSET",
            "VIETNAMESE_CHARSET",
            "achievement_achievement_info",
            "achievement_filter_all_players",
            "achievement_filter_favorites_only",
            "achievement_filter_friends_only",
            "achievement_friends_info",
            "achievement_leaderboard_info",
            "achievement_our_info",
            "achievement_pic_loaded",
            "achievement_show_achievement",
            "achievement_show_bank",
            "achievement_show_friend_picker",
            "achievement_show_leaderboard",
            "achievement_show_profile",
            "achievement_show_purchase_prompt",
            "achievement_show_ui",
            "achievement_type_achievement_challenge",
            "achievement_type_score_challenge",
            "asset_font",
            "asset_object",
            "asset_path",
            "asset_room",
            "asset_script",
            "asset_shader",
            "asset_sound",
            "asset_sprite",
            "asset_tiles",
            "asset_timeline",
            "asset_unknown",
            "audio_3d",
            "audio_falloff_exponent_distance",
            "audio_falloff_exponent_distance_clamped",
            "audio_falloff_inverse_distance",
            "audio_falloff_inverse_distance_clamped",
            "audio_falloff_linear_distance",
            "audio_falloff_linear_distance_clamped",
            "audio_falloff_none",
            "audio_mono",
            "audio_new_system",
            "audio_old_system",
            "audio_stereo",
            "bm_add",
            "bm_complex",
            "bm_dest_alpha",
            "bm_dest_color",
            "bm_dest_colour",
            "bm_inv_dest_alpha",
            "bm_inv_dest_color",
            "bm_inv_dest_colour",
            "bm_inv_src_alpha",
            "bm_inv_src_color",
            "bm_inv_src_colour",
            "bm_max",
            "bm_normal",
            "bm_one",
            "bm_src_alpha",
            "bm_src_alpha_sat",
            "bm_src_color",
            "bm_src_colour",
            "bm_subtract",
            "bm_zero",
            "browser_chrome",
            "browser_edge",
            "browser_firefox",
            "browser_ie",
            "browser_ie_mobile",
            "browser_not_a_browser",
            "browser_opera",
            "browser_safari",
            "browser_safari_mobile",
            "browser_tizen",
            "browser_unknown",
            "browser_windows_store",
            "buffer_bool",
            "buffer_f16",
            "buffer_f32",
            "buffer_f64",
            "buffer_fast",
            "buffer_fixed",
            "buffer_generalerror",
            "buffer_grow",
            "buffer_invalidtype",
            "buffer_network",
            "buffer_outofbounds",
            "buffer_outofspace",
            "buffer_s16",
            "buffer_s32",
            "buffer_s8",
            "buffer_seek_end",
            "buffer_seek_relative",
            "buffer_seek_start",
            "buffer_string",
            "buffer_surface_copy",
            "buffer_text",
            "buffer_u16",
            "buffer_u32",
            "buffer_u64",
            "buffer_u8",
            "buffer_vbuffer",
            "buffer_wrap",
            "button_type",
            "c_aqua",
            "c_black",
            "c_blue",
            "c_dkgray",
            "c_fuchsia",
            "c_gray",
            "c_green",
            "c_lime",
            "c_ltgray",
            "c_maroon",
            "c_navy",
            "c_olive",
            "c_orange",
            "c_purple",
            "c_red",
            "c_silver",
            "c_teal",
            "c_white",
            "c_yellow",
            "cmpfunc_always",
            "cmpfunc_equal",
            "cmpfunc_greater",
            "cmpfunc_greaterequal",
            "cmpfunc_less",
            "cmpfunc_lessequal",
            "cmpfunc_never",
            "cmpfunc_notequal",
            "cr_appstart",
            "cr_arrow",
            "cr_beam",
            "cr_cross",
            "cr_default",
            "cr_drag",
            "cr_handpoint",
            "cr_hourglass",
            "cr_none",
            "cr_size_all",
            "cr_size_nesw",
            "cr_size_ns",
            "cr_size_nwse",
            "cr_size_we",
            "cr_uparrow",
            "cull_clockwise",
            "cull_counterclockwise",
            "cull_noculling",
            "device_emulator",
            "device_ios_ipad",
            "device_ios_ipad_retina",
            "device_ios_iphone",
            "device_ios_iphone5",
            "device_ios_iphone6",
            "device_ios_iphone6plus",
            "device_ios_iphone_retina",
            "device_ios_unknown",
            "device_tablet",
            "display_landscape",
            "display_landscape_flipped",
            "display_portrait",
            "display_portrait_flipped",
            "dll_cdecl",
            "dll_stdcall",
            "ds_type_grid",
            "ds_type_list",
            "ds_type_map",
            "ds_type_priority",
            "ds_type_queue",
            "ds_type_stack",
            "ef_cloud",
            "ef_ellipse",
            "ef_explosion",
            "ef_firework",
            "ef_flare",
            "ef_rain",
            "ef_ring",
            "ef_smoke",
            "ef_smokeup",
            "ef_snow",
            "ef_spark",
            "ef_star",
            // for example ev_ are types of events
            "ev_alarm",
            "ev_animation_end",
            "ev_boundary",
            "ev_cleanup",
            "ev_close_button",
            "ev_collision",
            "ev_create",
            "ev_destroy",
            "ev_draw",
            "ev_draw_begin",
            "ev_draw_end",
            "ev_draw_post",
            "ev_draw_pre",
            "ev_end_of_path",
            "ev_game_end",
            "ev_game_start",
            "ev_gesture",
            "ev_gesture_double_tap",
            "ev_gesture_drag_end",
            "ev_gesture_drag_start",
            "ev_gesture_dragging",
            "ev_gesture_flick",
            "ev_gesture_pinch_end",
            "ev_gesture_pinch_in",
            "ev_gesture_pinch_out",
            "ev_gesture_pinch_start",
            "ev_gesture_rotate_end",
            "ev_gesture_rotate_start",
            "ev_gesture_rotating",
            "ev_gesture_tap",
            "ev_global_gesture_double_tap",
            "ev_global_gesture_drag_end",
            "ev_global_gesture_drag_start",
            "ev_global_gesture_dragging",
            "ev_global_gesture_flick",
            "ev_global_gesture_pinch_end",
            "ev_global_gesture_pinch_in",
            "ev_global_gesture_pinch_out",
            "ev_global_gesture_pinch_start",
            "ev_global_gesture_rotate_end",
            "ev_global_gesture_rotate_start",
            "ev_global_gesture_rotating",
            "ev_global_gesture_tap",
            "ev_global_left_button",
            "ev_global_left_press",
            "ev_global_left_release",
            "ev_global_middle_button",
            "ev_global_middle_press",
            "ev_global_middle_release",
            "ev_global_right_button",
            "ev_global_right_press",
            "ev_global_right_release",
            "ev_gui",
            "ev_gui_begin",
            "ev_gui_end",
            "ev_joystick1_button1",
            "ev_joystick1_button2",
            "ev_joystick1_button3",
            "ev_joystick1_button4",
            "ev_joystick1_button5",
            "ev_joystick1_button6",
            "ev_joystick1_button7",
            "ev_joystick1_button8",
            "ev_joystick1_down",
            "ev_joystick1_left",
            "ev_joystick1_right",
            "ev_joystick1_up",
            "ev_joystick2_button1",
            "ev_joystick2_button2",
            "ev_joystick2_button3",
            "ev_joystick2_button4",
            "ev_joystick2_button5",
            "ev_joystick2_button6",
            "ev_joystick2_button7",
            "ev_joystick2_button8",
            "ev_joystick2_down",
            "ev_joystick2_left",
            "ev_joystick2_right",
            "ev_joystick2_up",
            "ev_keyboard",
            "ev_keypress",
            "ev_keyrelease",
            "ev_left_button",
            "ev_left_press",
            "ev_left_release",
            "ev_middle_button",
            "ev_middle_press",
            "ev_middle_release",
            "ev_mouse",
            "ev_mouse_enter",
            "ev_mouse_leave",
            "ev_mouse_wheel_down",
            "ev_mouse_wheel_up",
            "ev_no_button",
            "ev_no_more_health",
            "ev_no_more_lives",
            "ev_other",
            "ev_outside",
            "ev_right_button",
            "ev_right_press",
            "ev_right_release",
            "ev_room_end",
            "ev_room_start",
            "ev_step",
            "ev_step_begin",
            "ev_step_end",
            "ev_step_normal",
            "ev_trigger",
            "ev_user0",
            "ev_user1",
            "ev_user2",
            "ev_user3",
            "ev_user4",
            "ev_user5",
            "ev_user6",
            "ev_user7",
            "ev_user8",
            "ev_user9",
            "ev_user10",
            "ev_user11",
            "ev_user12",
            "ev_user13",
            "ev_user14",
            "ev_user15",
            "fa_archive",
            "fa_bottom",
            "fa_center",
            "fa_directory",
            "fa_hidden",
            "fa_left",
            "fa_middle",
            "fa_readonly",
            "fa_right",
            "fa_sysfile",
            "fa_top",
            "fa_volumeid",
            "fb_login_default",
            "fb_login_fallback_to_webview",
            "fb_login_forcing_safari",
            "fb_login_forcing_webview",
            "fb_login_no_fallback_to_webview",
            "fb_login_use_system_account",
            "gamespeed_fps",
            "gamespeed_microseconds",
            "ge_lose",
            "global",
            "gp_axislh",
            "gp_axislv",
            "gp_axisrh",
            "gp_axisrv",
            "gp_face1",
            "gp_face2",
            "gp_face3",
            "gp_face4",
            "gp_padd",
            "gp_padl",
            "gp_padr",
            "gp_padu",
            "gp_select",
            "gp_shoulderl",
            "gp_shoulderlb",
            "gp_shoulderr",
            "gp_shoulderrb",
            "gp_start",
            "gp_stickl",
            "gp_stickr",
            "iap_available",
            "iap_canceled",
            "iap_ev_consume",
            "iap_ev_product",
            "iap_ev_purchase",
            "iap_ev_restore",
            "iap_ev_storeload",
            "iap_failed",
            "iap_purchased",
            "iap_refunded",
            "iap_status_available",
            "iap_status_loading",
            "iap_status_processing",
            "iap_status_restoring",
            "iap_status_unavailable",
            "iap_status_uninitialised",
            "iap_storeload_failed",
            "iap_storeload_ok",
            "iap_unavailable",
            "input_type",
            "kbv_autocapitalize_characters",
            "kbv_autocapitalize_none",
            "kbv_autocapitalize_sentences",
            "kbv_autocapitalize_words",
            "kbv_returnkey_continue",
            "kbv_returnkey_default",
            "kbv_returnkey_done",
            "kbv_returnkey_emergency",
            "kbv_returnkey_go",
            "kbv_returnkey_google",
            "kbv_returnkey_join",
            "kbv_returnkey_next",
            "kbv_returnkey_route",
            "kbv_returnkey_search",
            "kbv_returnkey_send",
            "kbv_returnkey_yahoo",
            "kbv_type_ascii",
            "kbv_type_default",
            "kbv_type_email",
            "kbv_type_numbers",
            "kbv_type_phone",
            "kbv_type_phone_name",
            "kbv_type_url",
            "layerelementtype_background",
            "layerelementtype_instance",
            "layerelementtype_oldtilemap",
            "layerelementtype_particlesystem",
            "layerelementtype_sprite",
            "layerelementtype_tile",
            "layerelementtype_tilemap",
            "layerelementtype_undefined",
            "lb_disp_none",
            "lb_disp_numeric",
            "lb_disp_time_ms",
            "lb_disp_time_sec",
            "lb_sort_ascending",
            "lb_sort_descending",
            "lb_sort_none",
            "leaderboard_type_number",
            "leaderboard_type_time_mins_secs",
            "lighttype_dir",
            "lighttype_point",
            "local",
            "matrix_projection",
            "matrix_view",
            "matrix_world",
            "mb_any",
            "mb_left",
            "mb_middle",
            "mb_none",
            "mb_right",
            "mip_markedonly",
            "mip_off",
            "mip_on",
            "network_config_connect_timeout",
            "network_config_disable_reliable_udp",
            "network_config_enable_reliable_udp",
            "network_config_use_non_blocking_socket",
            "network_socket_bluetooth",
            "network_socket_tcp",
            "network_socket_udp",
            "network_type_connect",
            "network_type_data",
            "network_type_disconnect",
            "network_type_non_blocking_connect",
            "of_challen",
            "of_challenge_tie",
            "of_challenge_win",
            "os_3ds",
            "os_android",
            "os_bb10",
            "os_ios",
            "os_linux",
            "os_macosx",
            "os_ps3",
            "os_ps4",
            "os_psvita",
            "os_switch",
            "os_symbian",
            "os_tizen",
            "os_tvos",
            "os_unknown",
            "os_uwp",
            "os_wiiu",
            "os_win32",
            "os_win8native",
            "os_windows",
            "os_winphone",
            "os_xbox360",
            "os_xboxone",
            "other",
            "ov_achievements",
            "ov_community",
            "ov_friends",
            "ov_gamegroup",
            "ov_players",
            "ov_settings",
            "path_action_continue",
            "path_action_restart",
            "path_action_reverse",
            "path_action_stop",
            "phy_debug_render_aabb",
            "phy_debug_render_collision_pairs",
            "phy_debug_render_coms",
            "phy_debug_render_core_shapes",
            "phy_debug_render_joints",
            "phy_debug_render_obb",
            "phy_debug_render_shapes",
            "phy_joint_anchor_1_x",
            "phy_joint_anchor_1_y",
            "phy_joint_anchor_2_x",
            "phy_joint_anchor_2_y",
            "phy_joint_angle",
            "phy_joint_angle_limits",
            "phy_joint_damping_ratio",
            "phy_joint_frequency",
            "phy_joint_length_1",
            "phy_joint_length_2",
            "phy_joint_lower_angle_limit",
            "phy_joint_max_force",
            "phy_joint_max_length",
            "phy_joint_max_motor_force",
            "phy_joint_max_motor_torque",
            "phy_joint_max_torque",
            "phy_joint_motor_force",
            "phy_joint_motor_speed",
            "phy_joint_motor_torque",
            "phy_joint_reaction_force_x",
            "phy_joint_reaction_force_y",
            "phy_joint_reaction_torque",
            "phy_joint_speed",
            "phy_joint_translation",
            "phy_joint_upper_angle_limit",
            "phy_particle_data_flag_category",
            "phy_particle_data_flag_color",
            "phy_particle_data_flag_colour",
            "phy_particle_data_flag_position",
            "phy_particle_data_flag_typeflags",
            "phy_particle_data_flag_velocity",
            "phy_particle_flag_colormixing",
            "phy_particle_flag_colourmixing",
            "phy_particle_flag_elastic",
            "phy_particle_flag_powder",
            "phy_particle_flag_spring",
            "phy_particle_flag_tensile",
            "phy_particle_flag_viscous",
            "phy_particle_flag_wall",
            "phy_particle_flag_water",
            "phy_particle_flag_zombie",
            "phy_particle_group_flag_rigid",
            "phy_particle_group_flag_solid",
            "pi",
            "pr_linelist",
            "pr_linestrip",
            "pr_pointlist",
            "pr_trianglefan",
            "pr_trianglelist",
            "pr_trianglestrip",
            "ps_distr_gaussian",
            "ps_distr_invgaussian",
            "ps_distr_linear",
            "ps_shape_diamond",
            "ps_shape_ellipse",
            "ps_shape_line",
            "ps_shape_rectangle",
            "pt_shape_circle",
            "pt_shape_cloud",
            "pt_shape_disk",
            "pt_shape_explosion",
            "pt_shape_flare",
            "pt_shape_line",
            "pt_shape_pixel",
            "pt_shape_ring",
            "pt_shape_smoke",
            "pt_shape_snow",
            "pt_shape_spark",
            "pt_shape_sphere",
            "pt_shape_square",
            "pt_shape_star",
            "spritespeed_framespergameframe",
            "spritespeed_framespersecond",
            "text_type",
            "tf_anisotropic",
            "tf_linear",
            "tf_point",
            "tile_flip",
            "tile_index_mask",
            "tile_mirror",
            "tile_rotate",
            "timezone_local",
            "timezone_utc",
            "tm_countvsyncs",
            "tm_sleep",
            "ty_real",
            "ty_string",
            "ugc_filetype_community",
            "ugc_filetype_microtrans",
            "ugc_list_Favorited",
            "ugc_list_Followed",
            "ugc_list_Published",
            "ugc_list_Subscribed",
            "ugc_list_UsedOrPlayed",
            "ugc_list_VotedDown",
            "ugc_list_VotedOn",
            "ugc_list_VotedUp",
            "ugc_list_WillVoteLater",
            "ugc_match_AllGuides",
            "ugc_match_Artwork",
            "ugc_match_Collections",
            "ugc_match_ControllerBindings",
            "ugc_match_IntegratedGuides",
            "ugc_match_Items",
            "ugc_match_Items_Mtx",
            "ugc_match_Items_ReadyToUse",
            "ugc_match_Screenshots",
            "ugc_match_UsableInGame",
            "ugc_match_Videos",
            "ugc_match_WebGuides",
            "ugc_query_AcceptedForGameRankedByAcceptanceDate",
            "ugc_query_CreatedByFollowedUsersRankedByPublicationDate",
            "ugc_query_CreatedByFriendsRankedByPublicationDate",
            "ugc_query_FavoritedByFriendsRankedByPublicationDate",
            "ugc_query_NotYetRated",
            "ugc_query_RankedByNumTimesReported",
            "ugc_query_RankedByPublicationDate",
            "ugc_query_RankedByTextSearch",
            "ugc_query_RankedByTotalVotesAsc",
            "ugc_query_RankedByTrend",
            "ugc_query_RankedByVote",
            "ugc_query_RankedByVotesUp",
            "ugc_result_success",
            "ugc_sortorder_CreationOrderAsc",
            "ugc_sortorder_CreationOrderDesc",
            "ugc_sortorder_ForModeration",
            "ugc_sortorder_LastUpdatedDesc",
            "ugc_sortorder_SubscriptionDateDesc",
            "ugc_sortorder_TitleAsc",
            "ugc_sortorder_VoteScoreDesc",
            "ugc_visibility_friends_only",
            "ugc_visibility_private",
            "ugc_visibility_public",
            "vertex_type_color",
            "vertex_type_colour",
            "vertex_type_float1",
            "vertex_type_float2",
            "vertex_type_float3",
            "vertex_type_float4",
            "vertex_type_ubyte4",
            "vertex_usage_binormal",
            "vertex_usage_blendindices",
            "vertex_usage_blendweight",
            "vertex_usage_color",
            "vertex_usage_colour",
            "vertex_usage_depth",
            "vertex_usage_fog",
            "vertex_usage_normal",
            "vertex_usage_position",
            "vertex_usage_psize",
            "vertex_usage_sample",
            "vertex_usage_tangent",
            "vertex_usage_texcoord",
            "vertex_usage_textcoord",
            "vk_add",
            "vk_alt",
            "vk_anykey",
            "vk_backspace",
            "vk_control",
            "vk_decimal",
            "vk_delete",
            "vk_divide",
            "vk_down",
            "vk_end",
            "vk_enter",
            "vk_escape",
            "vk_f1",
            "vk_f2",
            "vk_f3",
            "vk_f4",
            "vk_f5",
            "vk_f6",
            "vk_f7",
            "vk_f8",
            "vk_f9",
            "vk_f10",
            "vk_f11",
            "vk_f12",
            "vk_home",
            "vk_insert",
            "vk_lalt",
            "vk_lcontrol",
            "vk_left",
            "vk_lshift",
            "vk_multiply",
            "vk_nokey",
            "vk_numpad0",
            "vk_numpad1",
            "vk_numpad2",
            "vk_numpad3",
            "vk_numpad4",
            "vk_numpad5",
            "vk_numpad6",
            "vk_numpad7",
            "vk_numpad8",
            "vk_numpad9",
            "vk_pagedown",
            "vk_pageup",
            "vk_pause",
            "vk_printscreen",
            "vk_ralt",
            "vk_rcontrol",
            "vk_return",
            "vk_right",
            "vk_rshift",
            "vk_shift",
            "vk_space",
            "vk_subtract",
            "vk_tab",
            "vk_up"
          ];
          const LANGUAGE_VARIABLES = [
            "alarm",
            "application_surface",
            "argument",
            "argument0",
            "argument1",
            "argument2",
            "argument3",
            "argument4",
            "argument5",
            "argument6",
            "argument7",
            "argument8",
            "argument9",
            "argument10",
            "argument11",
            "argument12",
            "argument13",
            "argument14",
            "argument15",
            "argument_count",
            "argument_relative",
            "async_load",
            "background_color",
            "background_colour",
            "background_showcolor",
            "background_showcolour",
            "bbox_bottom",
            "bbox_left",
            "bbox_right",
            "bbox_top",
            "browser_height",
            "browser_width",
            "caption_health",
            "caption_lives",
            "caption_score",
            "current_day",
            "current_hour",
            "current_minute",
            "current_month",
            "current_second",
            "current_time",
            "current_weekday",
            "current_year",
            "cursor_sprite",
            "debug_mode",
            "delta_time",
            "depth",
            "direction",
            "display_aa",
            "error_last",
            "error_occurred",
            "event_action",
            "event_data",
            "event_number",
            "event_object",
            "event_type",
            "fps",
            "fps_real",
            "friction",
            "game_display_name",
            "game_id",
            "game_project_name",
            "game_save_id",
            "gamemaker_pro",
            "gamemaker_registered",
            "gamemaker_version",
            "gravity",
            "gravity_direction",
            "health",
            "hspeed",
            "iap_data",
            "id|0",
            "image_alpha",
            "image_angle",
            "image_blend",
            "image_index",
            "image_number",
            "image_speed",
            "image_xscale",
            "image_yscale",
            "instance_count",
            "instance_id",
            "keyboard_key",
            "keyboard_lastchar",
            "keyboard_lastkey",
            "keyboard_string",
            "layer",
            "lives",
            "mask_index",
            "mouse_button",
            "mouse_lastbutton",
            "mouse_x",
            "mouse_y",
            "object_index",
            "os_browser",
            "os_device",
            "os_type",
            "os_version",
            "path_endaction",
            "path_index",
            "path_orientation",
            "path_position",
            "path_positionprevious",
            "path_scale",
            "path_speed",
            "persistent",
            "phy_active",
            "phy_angular_damping",
            "phy_angular_velocity",
            "phy_bullet",
            "phy_col_normal_x",
            "phy_col_normal_y",
            "phy_collision_points",
            "phy_collision_x",
            "phy_collision_y",
            "phy_com_x",
            "phy_com_y",
            "phy_dynamic",
            "phy_fixed_rotation",
            "phy_inertia",
            "phy_kinematic",
            "phy_linear_damping",
            "phy_linear_velocity_x",
            "phy_linear_velocity_y",
            "phy_mass",
            "phy_position_x",
            "phy_position_xprevious",
            "phy_position_y",
            "phy_position_yprevious",
            "phy_rotation",
            "phy_sleeping",
            "phy_speed",
            "phy_speed_x",
            "phy_speed_y",
            "program_directory",
            "room",
            "room_caption",
            "room_first",
            "room_height",
            "room_last",
            "room_persistent",
            "room_speed",
            "room_width",
            "score",
            "self",
            "show_health",
            "show_lives",
            "show_score",
            "solid",
            "speed",
            "sprite_height",
            "sprite_index",
            "sprite_width",
            "sprite_xoffset",
            "sprite_yoffset",
            "temp_directory",
            "timeline_index",
            "timeline_loop",
            "timeline_position",
            "timeline_running",
            "timeline_speed",
            "view_angle",
            "view_camera",
            "view_current",
            "view_enabled",
            "view_hborder",
            "view_hport",
            "view_hspeed",
            "view_hview",
            "view_object",
            "view_surface_id",
            "view_vborder",
            "view_visible",
            "view_vspeed",
            "view_wport",
            "view_wview",
            "view_xport",
            "view_xview",
            "view_yport",
            "view_yview",
            "visible",
            "vspeed",
            "webgl_enabled",
            "working_directory",
            "xprevious",
            "xstart",
            "x|0",
            "yprevious",
            "ystart",
            "y|0"
          ];
 
          return {
            name: 'GML',
            case_insensitive: false, // language is case-insensitive
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_INS,
              literal: LITERALS,
              symbol: SYMBOLS,
              "variable.language": LANGUAGE_VARIABLES
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        gml_1 = gml;
        return gml_1;
    }
 
    /*
    Language: Go
    Author: Stephan Kountso aka StepLg <steplg@gmail.com>
    Contributors: Evgeny Stepanischev <imbolk@gmail.com>
    Description: Google go language (golang). For info about language
    Website: http://golang.org/
    Category: common, system
    */
 
    var go_1;
    var hasRequiredGo;
 
    function requireGo () {
        if (hasRequiredGo) return go_1;
        hasRequiredGo = 1;
        function go(hljs) {
          const LITERALS = [
            "true",
            "false",
            "iota",
            "nil"
          ];
          const BUILT_INS = [
            "append",
            "cap",
            "close",
            "complex",
            "copy",
            "imag",
            "len",
            "make",
            "new",
            "panic",
            "print",
            "println",
            "real",
            "recover",
            "delete"
          ];
          const TYPES = [
            "bool",
            "byte",
            "complex64",
            "complex128",
            "error",
            "float32",
            "float64",
            "int8",
            "int16",
            "int32",
            "int64",
            "string",
            "uint8",
            "uint16",
            "uint32",
            "uint64",
            "int",
            "uint",
            "uintptr",
            "rune"
          ];
          const KWS = [
            "break",
            "case",
            "chan",
            "const",
            "continue",
            "default",
            "defer",
            "else",
            "fallthrough",
            "for",
            "func",
            "go",
            "goto",
            "if",
            "import",
            "interface",
            "map",
            "package",
            "range",
            "return",
            "select",
            "struct",
            "switch",
            "type",
            "var",
          ];
          const KEYWORDS = {
            keyword: KWS,
            type: TYPES,
            literal: LITERALS,
            built_in: BUILT_INS
          };
          return {
            name: 'Go',
            aliases: [ 'golang' ],
            keywords: KEYWORDS,
            illegal: '</',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'string',
                variants: [
                  hljs.QUOTE_STRING_MODE,
                  hljs.APOS_STRING_MODE,
                  {
                    begin: '`',
                    end: '`'
                  }
                ]
              },
              {
                className: 'number',
                variants: [
                  {
                    begin: hljs.C_NUMBER_RE + '[i]',
                    relevance: 1
                  },
                  hljs.C_NUMBER_MODE
                ]
              },
              { begin: /:=/ // relevance booster
              },
              {
                className: 'function',
                beginKeywords: 'func',
                end: '\\s*(\\{|$)',
                excludeEnd: true,
                contains: [
                  hljs.TITLE_MODE,
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    endsParent: true,
                    keywords: KEYWORDS,
                    illegal: /["']/
                  }
                ]
              }
            ]
          };
        }
 
        go_1 = go;
        return go_1;
    }
 
    /*
    Language: Golo
    Author: Philippe Charriere <ph.charriere@gmail.com>
    Description: a lightweight dynamic language for the JVM
    Website: http://golo-lang.org/
    */
 
    var golo_1;
    var hasRequiredGolo;
 
    function requireGolo () {
        if (hasRequiredGolo) return golo_1;
        hasRequiredGolo = 1;
        function golo(hljs) {
          const KEYWORDS = [
            "println",
            "readln",
            "print",
            "import",
            "module",
            "function",
            "local",
            "return",
            "let",
            "var",
            "while",
            "for",
            "foreach",
            "times",
            "in",
            "case",
            "when",
            "match",
            "with",
            "break",
            "continue",
            "augment",
            "augmentation",
            "each",
            "find",
            "filter",
            "reduce",
            "if",
            "then",
            "else",
            "otherwise",
            "try",
            "catch",
            "finally",
            "raise",
            "throw",
            "orIfNull",
            "DynamicObject|10",
            "DynamicVariable",
            "struct",
            "Observable",
            "map",
            "set",
            "vector",
            "list",
            "array"
          ];
 
          return {
            name: 'Golo',
            keywords: {
              keyword: KEYWORDS,
              literal: [
                "true",
                "false",
                "null"
              ]
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'meta',
                begin: '@[A-Za-z]+'
              }
            ]
          };
        }
 
        golo_1 = golo;
        return golo_1;
    }
 
    /*
    Language: Gradle
    Description: Gradle is an open-source build automation tool focused on flexibility and performance.
    Website: https://gradle.org
    Author: Damian Mee <mee.damian@gmail.com>
    */
 
    var gradle_1;
    var hasRequiredGradle;
 
    function requireGradle () {
        if (hasRequiredGradle) return gradle_1;
        hasRequiredGradle = 1;
        function gradle(hljs) {
          const KEYWORDS = [
            "task",
            "project",
            "allprojects",
            "subprojects",
            "artifacts",
            "buildscript",
            "configurations",
            "dependencies",
            "repositories",
            "sourceSets",
            "description",
            "delete",
            "from",
            "into",
            "include",
            "exclude",
            "source",
            "classpath",
            "destinationDir",
            "includes",
            "options",
            "sourceCompatibility",
            "targetCompatibility",
            "group",
            "flatDir",
            "doLast",
            "doFirst",
            "flatten",
            "todir",
            "fromdir",
            "ant",
            "def",
            "abstract",
            "break",
            "case",
            "catch",
            "continue",
            "default",
            "do",
            "else",
            "extends",
            "final",
            "finally",
            "for",
            "if",
            "implements",
            "instanceof",
            "native",
            "new",
            "private",
            "protected",
            "public",
            "return",
            "static",
            "switch",
            "synchronized",
            "throw",
            "throws",
            "transient",
            "try",
            "volatile",
            "while",
            "strictfp",
            "package",
            "import",
            "false",
            "null",
            "super",
            "this",
            "true",
            "antlrtask",
            "checkstyle",
            "codenarc",
            "copy",
            "boolean",
            "byte",
            "char",
            "class",
            "double",
            "float",
            "int",
            "interface",
            "long",
            "short",
            "void",
            "compile",
            "runTime",
            "file",
            "fileTree",
            "abs",
            "any",
            "append",
            "asList",
            "asWritable",
            "call",
            "collect",
            "compareTo",
            "count",
            "div",
            "dump",
            "each",
            "eachByte",
            "eachFile",
            "eachLine",
            "every",
            "find",
            "findAll",
            "flatten",
            "getAt",
            "getErr",
            "getIn",
            "getOut",
            "getText",
            "grep",
            "immutable",
            "inject",
            "inspect",
            "intersect",
            "invokeMethods",
            "isCase",
            "join",
            "leftShift",
            "minus",
            "multiply",
            "newInputStream",
            "newOutputStream",
            "newPrintWriter",
            "newReader",
            "newWriter",
            "next",
            "plus",
            "pop",
            "power",
            "previous",
            "print",
            "println",
            "push",
            "putAt",
            "read",
            "readBytes",
            "readLines",
            "reverse",
            "reverseEach",
            "round",
            "size",
            "sort",
            "splitEachLine",
            "step",
            "subMap",
            "times",
            "toInteger",
            "toList",
            "tokenize",
            "upto",
            "waitForOrKill",
            "withPrintWriter",
            "withReader",
            "withStream",
            "withWriter",
            "withWriterAppend",
            "write",
            "writeLine"
          ];
          return {
            name: 'Gradle',
            case_insensitive: true,
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE,
              hljs.REGEXP_MODE
 
            ]
          };
        }
 
        gradle_1 = gradle;
        return gradle_1;
    }
 
    /*
     Language: GraphQL
     Author: John Foster (GH jf990), and others
     Description: GraphQL is a query language for APIs
     Category: web, common
    */
 
    var graphql_1;
    var hasRequiredGraphql;
 
    function requireGraphql () {
        if (hasRequiredGraphql) return graphql_1;
        hasRequiredGraphql = 1;
        /** @type LanguageFn */
        function graphql(hljs) {
          const regex = hljs.regex;
          const GQL_NAME = /[_A-Za-z][_0-9A-Za-z]*/;
          return {
            name: "GraphQL",
            aliases: [ "gql" ],
            case_insensitive: true,
            disableAutodetect: false,
            keywords: {
              keyword: [
                "query",
                "mutation",
                "subscription",
                "type",
                "input",
                "schema",
                "directive",
                "interface",
                "union",
                "scalar",
                "fragment",
                "enum",
                "on"
              ],
              literal: [
                "true",
                "false",
                "null"
              ]
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE,
              {
                scope: "punctuation",
                match: /[.]{3}/,
                relevance: 0
              },
              {
                scope: "punctuation",
                begin: /[\!\(\)\:\=\[\]\{\|\}]{1}/,
                relevance: 0
              },
              {
                scope: "variable",
                begin: /\$/,
                end: /\W/,
                excludeEnd: true,
                relevance: 0
              },
              {
                scope: "meta",
                match: /@\w+/,
                excludeEnd: true
              },
              {
                scope: "symbol",
                begin: regex.concat(GQL_NAME, regex.lookahead(/\s*:/)),
                relevance: 0
              }
            ],
            illegal: [
              /[;<']/,
              /BEGIN/
            ]
          };
        }
 
        graphql_1 = graphql;
        return graphql_1;
    }
 
    /*
     Language: Groovy
     Author: Guillaume Laforge <glaforge@gmail.com>
     Description: Groovy programming language implementation inspired from Vsevolod's Java mode
     Website: https://groovy-lang.org
     */
 
    var groovy_1;
    var hasRequiredGroovy;
 
    function requireGroovy () {
        if (hasRequiredGroovy) return groovy_1;
        hasRequiredGroovy = 1;
        function variants(variants, obj = {}) {
          obj.variants = variants;
          return obj;
        }
 
        function groovy(hljs) {
          const regex = hljs.regex;
          const IDENT_RE = '[A-Za-z0-9_$]+';
          const COMMENT = variants([
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.COMMENT(
              '/\\*\\*',
              '\\*/',
              {
                relevance: 0,
                contains: [
                  {
                    // eat up @'s in emails to prevent them to be recognized as doctags
                    begin: /\w+@/,
                    relevance: 0
                  },
                  {
                    className: 'doctag',
                    begin: '@[A-Za-z]+'
                  }
                ]
              }
            )
          ]);
          const REGEXP = {
            className: 'regexp',
            begin: /~?\/[^\/\n]+\//,
            contains: [ hljs.BACKSLASH_ESCAPE ]
          };
          const NUMBER = variants([
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE
          ]);
          const STRING = variants([
            {
              begin: /"""/,
              end: /"""/
            },
            {
              begin: /'''/,
              end: /'''/
            },
            {
              begin: "\\$/",
              end: "/\\$",
              relevance: 10
            },
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE
          ],
          { className: "string" }
          );
 
          const CLASS_DEFINITION = {
            match: [
              /(class|interface|trait|enum|extends|implements)/,
              /\s+/,
              hljs.UNDERSCORE_IDENT_RE
            ],
            scope: {
              1: "keyword",
              3: "title.class",
            }
          };
          const TYPES = [
            "byte",
            "short",
            "char",
            "int",
            "long",
            "boolean",
            "float",
            "double",
            "void"
          ];
          const KEYWORDS = [
            // groovy specific keywords
            "def",
            "as",
            "in",
            "assert",
            "trait",
            // common keywords with Java
            "abstract",
            "static",
            "volatile",
            "transient",
            "public",
            "private",
            "protected",
            "synchronized",
            "final",
            "class",
            "interface",
            "enum",
            "if",
            "else",
            "for",
            "while",
            "switch",
            "case",
            "break",
            "default",
            "continue",
            "throw",
            "throws",
            "try",
            "catch",
            "finally",
            "implements",
            "extends",
            "new",
            "import",
            "package",
            "return",
            "instanceof"
          ];
 
          return {
            name: 'Groovy',
            keywords: {
              "variable.language": 'this super',
              literal: 'true false null',
              type: TYPES,
              keyword: KEYWORDS
            },
            contains: [
              hljs.SHEBANG({
                binary: "groovy",
                relevance: 10
              }),
              COMMENT,
              STRING,
              REGEXP,
              NUMBER,
              CLASS_DEFINITION,
              {
                className: 'meta',
                begin: '@[A-Za-z]+',
                relevance: 0
              },
              {
                // highlight map keys and named parameters as attrs
                className: 'attr',
                begin: IDENT_RE + '[ \t]*:',
                relevance: 0
              },
              {
                // catch middle element of the ternary operator
                // to avoid highlight it as a label, named parameter, or map key
                begin: /\?/,
                end: /:/,
                relevance: 0,
                contains: [
                  COMMENT,
                  STRING,
                  REGEXP,
                  NUMBER,
                  'self'
                ]
              },
              {
                // highlight labeled statements
                className: 'symbol',
                begin: '^[ \t]*' + regex.lookahead(IDENT_RE + ':'),
                excludeBegin: true,
                end: IDENT_RE + ':',
                relevance: 0
              }
            ],
            illegal: /#|<\//
          };
        }
 
        groovy_1 = groovy;
        return groovy_1;
    }
 
    /*
    Language: HAML
    Requires: ruby.js
    Author: Dan Allen <dan.j.allen@gmail.com>
    Website: http://haml.info
    Category: template
    */
 
    var haml_1;
    var hasRequiredHaml;
 
    function requireHaml () {
        if (hasRequiredHaml) return haml_1;
        hasRequiredHaml = 1;
        // TODO support filter tags like :javascript, support inline HTML
        function haml(hljs) {
          return {
            name: 'HAML',
            case_insensitive: true,
            contains: [
              {
                className: 'meta',
                begin: '^!!!( (5|1\\.1|Strict|Frameset|Basic|Mobile|RDFa|XML\\b.*))?$',
                relevance: 10
              },
              // FIXME these comments should be allowed to span indented lines
              hljs.COMMENT(
                '^\\s*(!=#|=#|-#|/).*$',
                null,
                { relevance: 0 }
              ),
              {
                begin: '^\\s*(-|=|!=)(?!#)',
                end: /$/,
                subLanguage: 'ruby',
                excludeBegin: true,
                excludeEnd: true
              },
              {
                className: 'tag',
                begin: '^\\s*%',
                contains: [
                  {
                    className: 'selector-tag',
                    begin: '\\w+'
                  },
                  {
                    className: 'selector-id',
                    begin: '#[\\w-]+'
                  },
                  {
                    className: 'selector-class',
                    begin: '\\.[\\w-]+'
                  },
                  {
                    begin: /\{\s*/,
                    end: /\s*\}/,
                    contains: [
                      {
                        begin: ':\\w+\\s*=>',
                        end: ',\\s+',
                        returnBegin: true,
                        endsWithParent: true,
                        contains: [
                          {
                            className: 'attr',
                            begin: ':\\w+'
                          },
                          hljs.APOS_STRING_MODE,
                          hljs.QUOTE_STRING_MODE,
                          {
                            begin: '\\w+',
                            relevance: 0
                          }
                        ]
                      }
                    ]
                  },
                  {
                    begin: '\\(\\s*',
                    end: '\\s*\\)',
                    excludeEnd: true,
                    contains: [
                      {
                        begin: '\\w+\\s*=',
                        end: '\\s+',
                        returnBegin: true,
                        endsWithParent: true,
                        contains: [
                          {
                            className: 'attr',
                            begin: '\\w+',
                            relevance: 0
                          },
                          hljs.APOS_STRING_MODE,
                          hljs.QUOTE_STRING_MODE,
                          {
                            begin: '\\w+',
                            relevance: 0
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              { begin: '^\\s*[=~]\\s*' },
              {
                begin: /#\{/,
                end: /\}/,
                subLanguage: 'ruby',
                excludeBegin: true,
                excludeEnd: true
              }
            ]
          };
        }
 
        haml_1 = haml;
        return haml_1;
    }
 
    /*
    Language: Handlebars
    Requires: xml.js
    Author: Robin Ward <robin.ward@gmail.com>
    Description: Matcher for Handlebars as well as EmberJS additions.
    Website: https://handlebarsjs.com
    Category: template
    */
 
    var handlebars_1;
    var hasRequiredHandlebars;
 
    function requireHandlebars () {
        if (hasRequiredHandlebars) return handlebars_1;
        hasRequiredHandlebars = 1;
        function handlebars(hljs) {
          const regex = hljs.regex;
          const BUILT_INS = {
            $pattern: /[\w.\/]+/,
            built_in: [
              'action',
              'bindattr',
              'collection',
              'component',
              'concat',
              'debugger',
              'each',
              'each-in',
              'get',
              'hash',
              'if',
              'in',
              'input',
              'link-to',
              'loc',
              'log',
              'lookup',
              'mut',
              'outlet',
              'partial',
              'query-params',
              'render',
              'template',
              'textarea',
              'unbound',
              'unless',
              'view',
              'with',
              'yield'
            ]
          };
 
          const LITERALS = {
            $pattern: /[\w.\/]+/,
            literal: [
              'true',
              'false',
              'undefined',
              'null'
            ]
          };
 
          // as defined in https://handlebarsjs.com/guide/expressions.html#literal-segments
          // this regex matches literal segments like ' abc ' or [ abc ] as well as helpers and paths
          // like a/b, ./abc/cde, and abc.bcd
 
          const DOUBLE_QUOTED_ID_REGEX = /""|"[^"]+"/;
          const SINGLE_QUOTED_ID_REGEX = /''|'[^']+'/;
          const BRACKET_QUOTED_ID_REGEX = /\[\]|\[[^\]]+\]/;
          const PLAIN_ID_REGEX = /[^\s!"#%&'()*+,.\/;<=>@\[\\\]^`{|}~]+/;
          const PATH_DELIMITER_REGEX = /(\.|\/)/;
          const ANY_ID = regex.either(
            DOUBLE_QUOTED_ID_REGEX,
            SINGLE_QUOTED_ID_REGEX,
            BRACKET_QUOTED_ID_REGEX,
            PLAIN_ID_REGEX
          );
 
          const IDENTIFIER_REGEX = regex.concat(
            regex.optional(/\.|\.\/|\//), // relative or absolute path
            ANY_ID,
            regex.anyNumberOfTimes(regex.concat(
              PATH_DELIMITER_REGEX,
              ANY_ID
            ))
          );
 
          // identifier followed by a equal-sign (without the equal sign)
          const HASH_PARAM_REGEX = regex.concat(
            '(',
            BRACKET_QUOTED_ID_REGEX, '|',
            PLAIN_ID_REGEX,
            ')(?==)'
          );
 
          const HELPER_NAME_OR_PATH_EXPRESSION = { begin: IDENTIFIER_REGEX };
 
          const HELPER_PARAMETER = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, { keywords: LITERALS });
 
          const SUB_EXPRESSION = {
            begin: /\(/,
            end: /\)/
            // the "contains" is added below when all necessary sub-modes are defined
          };
 
          const HASH = {
            // fka "attribute-assignment", parameters of the form 'key=value'
            className: 'attr',
            begin: HASH_PARAM_REGEX,
            relevance: 0,
            starts: {
              begin: /=/,
              end: /=/,
              starts: { contains: [
                hljs.NUMBER_MODE,
                hljs.QUOTE_STRING_MODE,
                hljs.APOS_STRING_MODE,
                HELPER_PARAMETER,
                SUB_EXPRESSION
              ] }
            }
          };
 
          const BLOCK_PARAMS = {
            // parameters of the form '{{#with x as | y |}}...{{/with}}'
            begin: /as\s+\|/,
            keywords: { keyword: 'as' },
            end: /\|/,
            contains: [
              {
                // define sub-mode in order to prevent highlighting of block-parameter named "as"
                begin: /\w+/ }
            ]
          };
 
          const HELPER_PARAMETERS = {
            contains: [
              hljs.NUMBER_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              BLOCK_PARAMS,
              HASH,
              HELPER_PARAMETER,
              SUB_EXPRESSION
            ],
            returnEnd: true
            // the property "end" is defined through inheritance when the mode is used. If depends
            // on the surrounding mode, but "endsWithParent" does not work here (i.e. it includes the
            // end-token of the surrounding mode)
          };
 
          const SUB_EXPRESSION_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
            className: 'name',
            keywords: BUILT_INS,
            starts: hljs.inherit(HELPER_PARAMETERS, { end: /\)/ })
          });
 
          SUB_EXPRESSION.contains = [ SUB_EXPRESSION_CONTENTS ];
 
          const OPENING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
            keywords: BUILT_INS,
            className: 'name',
            starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
          });
 
          const CLOSING_BLOCK_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
            keywords: BUILT_INS,
            className: 'name'
          });
 
          const BASIC_MUSTACHE_CONTENTS = hljs.inherit(HELPER_NAME_OR_PATH_EXPRESSION, {
            className: 'name',
            keywords: BUILT_INS,
            starts: hljs.inherit(HELPER_PARAMETERS, { end: /\}\}/ })
          });
 
          const ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH = {
            begin: /\\\{\{/,
            skip: true
          };
          const PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH = {
            begin: /\\\\(?=\{\{)/,
            skip: true
          };
 
          return {
            name: 'Handlebars',
            aliases: [
              'hbs',
              'html.hbs',
              'html.handlebars',
              'htmlbars'
            ],
            case_insensitive: true,
            subLanguage: 'xml',
            contains: [
              ESCAPE_MUSTACHE_WITH_PRECEEDING_BACKSLASH,
              PREVENT_ESCAPE_WITH_ANOTHER_PRECEEDING_BACKSLASH,
              hljs.COMMENT(/\{\{!--/, /--\}\}/),
              hljs.COMMENT(/\{\{!/, /\}\}/),
              {
                // open raw block "{{{{raw}}}} content not evaluated {{{{/raw}}}}"
                className: 'template-tag',
                begin: /\{\{\{\{(?!\/)/,
                end: /\}\}\}\}/,
                contains: [ OPENING_BLOCK_MUSTACHE_CONTENTS ],
                starts: {
                  end: /\{\{\{\{\//,
                  returnEnd: true,
                  subLanguage: 'xml'
                }
              },
              {
                // close raw block
                className: 'template-tag',
                begin: /\{\{\{\{\//,
                end: /\}\}\}\}/,
                contains: [ CLOSING_BLOCK_MUSTACHE_CONTENTS ]
              },
              {
                // open block statement
                className: 'template-tag',
                begin: /\{\{#/,
                end: /\}\}/,
                contains: [ OPENING_BLOCK_MUSTACHE_CONTENTS ]
              },
              {
                className: 'template-tag',
                begin: /\{\{(?=else\}\})/,
                end: /\}\}/,
                keywords: 'else'
              },
              {
                className: 'template-tag',
                begin: /\{\{(?=else if)/,
                end: /\}\}/,
                keywords: 'else if'
              },
              {
                // closing block statement
                className: 'template-tag',
                begin: /\{\{\//,
                end: /\}\}/,
                contains: [ CLOSING_BLOCK_MUSTACHE_CONTENTS ]
              },
              {
                // template variable or helper-call that is NOT html-escaped
                className: 'template-variable',
                begin: /\{\{\{/,
                end: /\}\}\}/,
                contains: [ BASIC_MUSTACHE_CONTENTS ]
              },
              {
                // template variable or helper-call that is html-escaped
                className: 'template-variable',
                begin: /\{\{/,
                end: /\}\}/,
                contains: [ BASIC_MUSTACHE_CONTENTS ]
              }
            ]
          };
        }
 
        handlebars_1 = handlebars;
        return handlebars_1;
    }
 
    /*
    Language: Haskell
    Author: Jeremy Hull <sourdrums@gmail.com>
    Contributors: Zena Treep <zena.treep@gmail.com>
    Website: https://www.haskell.org
    Category: functional
    */
 
    var haskell_1;
    var hasRequiredHaskell;
 
    function requireHaskell () {
        if (hasRequiredHaskell) return haskell_1;
        hasRequiredHaskell = 1;
        function haskell(hljs) {
          const COMMENT = { variants: [
            hljs.COMMENT('--', '$'),
            hljs.COMMENT(
              /\{-/,
              /-\}/,
              { contains: [ 'self' ] }
            )
          ] };
 
          const PRAGMA = {
            className: 'meta',
            begin: /\{-#/,
            end: /#-\}/
          };
 
          const PREPROCESSOR = {
            className: 'meta',
            begin: '^#',
            end: '$'
          };
 
          const CONSTRUCTOR = {
            className: 'type',
            begin: '\\b[A-Z][\\w\']*', // TODO: other constructors (build-in, infix).
            relevance: 0
          };
 
          const LIST = {
            begin: '\\(',
            end: '\\)',
            illegal: '"',
            contains: [
              PRAGMA,
              PREPROCESSOR,
              {
                className: 'type',
                begin: '\\b[A-Z][\\w]*(\\((\\.\\.|,|\\w+)\\))?'
              },
              hljs.inherit(hljs.TITLE_MODE, { begin: '[_a-z][\\w\']*' }),
              COMMENT
            ]
          };
 
          const RECORD = {
            begin: /\{/,
            end: /\}/,
            contains: LIST.contains
          };
 
          /* See:
 
             - https://www.haskell.org/onlinereport/lexemes.html
             - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/binary_literals.html
             - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/numeric_underscores.html
             - https://downloads.haskell.org/ghc/9.0.1/docs/html/users_guide/exts/hex_float_literals.html
 
          */
          const decimalDigits = '([0-9]_*)+';
          const hexDigits = '([0-9a-fA-F]_*)+';
          const binaryDigits = '([01]_*)+';
          const octalDigits = '([0-7]_*)+';
 
          const NUMBER = {
            className: 'number',
            relevance: 0,
            variants: [
              // decimal floating-point-literal (subsumes decimal-literal)
              { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
              // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
              { match: `\\b0[xX]_*(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
              // octal-literal
              { match: `\\b0[oO](${octalDigits})\\b` },
              // binary-literal
              { match: `\\b0[bB](${binaryDigits})\\b` }
            ]
          };
 
          return {
            name: 'Haskell',
            aliases: [ 'hs' ],
            keywords:
              'let in if then else case of where do module import hiding '
              + 'qualified type data newtype deriving class instance as default '
              + 'infix infixl infixr foreign export ccall stdcall cplusplus '
              + 'jvm dotnet safe unsafe family forall mdo proc rec',
            contains: [
              // Top-level constructions.
              {
                beginKeywords: 'module',
                end: 'where',
                keywords: 'module where',
                contains: [
                  LIST,
                  COMMENT
                ],
                illegal: '\\W\\.|;'
              },
              {
                begin: '\\bimport\\b',
                end: '$',
                keywords: 'import qualified as hiding',
                contains: [
                  LIST,
                  COMMENT
                ],
                illegal: '\\W\\.|;'
              },
              {
                className: 'class',
                begin: '^(\\s*)?(class|instance)\\b',
                end: 'where',
                keywords: 'class family instance where',
                contains: [
                  CONSTRUCTOR,
                  LIST,
                  COMMENT
                ]
              },
              {
                className: 'class',
                begin: '\\b(data|(new)?type)\\b',
                end: '$',
                keywords: 'data family type newtype deriving',
                contains: [
                  PRAGMA,
                  CONSTRUCTOR,
                  LIST,
                  RECORD,
                  COMMENT
                ]
              },
              {
                beginKeywords: 'default',
                end: '$',
                contains: [
                  CONSTRUCTOR,
                  LIST,
                  COMMENT
                ]
              },
              {
                beginKeywords: 'infix infixl infixr',
                end: '$',
                contains: [
                  hljs.C_NUMBER_MODE,
                  COMMENT
                ]
              },
              {
                begin: '\\bforeign\\b',
                end: '$',
                keywords: 'foreign import export ccall stdcall cplusplus jvm '
                          + 'dotnet safe unsafe',
                contains: [
                  CONSTRUCTOR,
                  hljs.QUOTE_STRING_MODE,
                  COMMENT
                ]
              },
              {
                className: 'meta',
                begin: '#!\\/usr\\/bin\\/env\ runhaskell',
                end: '$'
              },
              // "Whitespaces".
              PRAGMA,
              PREPROCESSOR,
 
              // Literals and names.
 
              // Single characters.
              {
                scope: 'string',
                begin: /'(?=\\?.')/,
                end: /'/,
                contains: [
                  {
                    scope: 'char.escape',
                    match: /\\./,
                  },
                ]
              },
              hljs.QUOTE_STRING_MODE,
              NUMBER,
              CONSTRUCTOR,
              hljs.inherit(hljs.TITLE_MODE, { begin: '^[_a-z][\\w\']*' }),
              COMMENT,
              { // No markup, relevance booster
                begin: '->|<-' }
            ]
          };
        }
 
        haskell_1 = haskell;
        return haskell_1;
    }
 
    /*
    Language: Haxe
    Description: Haxe is an open source toolkit based on a modern, high level, strictly typed programming language.
    Author: Christopher Kaster <ikasoki@gmail.com> (Based on the actionscript.js language file by Alexander Myadzel)
    Contributors: Kenton Hamaluik <kentonh@gmail.com>
    Website: https://haxe.org
    */
 
    var haxe_1;
    var hasRequiredHaxe;
 
    function requireHaxe () {
        if (hasRequiredHaxe) return haxe_1;
        hasRequiredHaxe = 1;
        function haxe(hljs) {
 
          const HAXE_BASIC_TYPES = 'Int Float String Bool Dynamic Void Array ';
 
          return {
            name: 'Haxe',
            aliases: [ 'hx' ],
            keywords: {
              keyword: 'break case cast catch continue default do dynamic else enum extern '
                       + 'for function here if import in inline never new override package private get set '
                       + 'public return static super switch this throw trace try typedef untyped using var while '
                       + HAXE_BASIC_TYPES,
              built_in:
                'trace this',
              literal:
                'true false null _'
            },
            contains: [
              {
                className: 'string', // interpolate-able strings
                begin: '\'',
                end: '\'',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  {
                    className: 'subst', // interpolation
                    begin: '\\$\\{',
                    end: '\\}'
                  },
                  {
                    className: 'subst', // interpolation
                    begin: '\\$',
                    end: /\W\}/
                  }
                ]
              },
              hljs.QUOTE_STRING_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'meta', // compiler meta
                begin: '@:',
                end: '$'
              },
              {
                className: 'meta', // compiler conditionals
                begin: '#',
                end: '$',
                keywords: { keyword: 'if else elseif end error' }
              },
              {
                className: 'type', // function types
                begin: ':[ \t]*',
                end: '[^A-Za-z0-9_ \t\\->]',
                excludeBegin: true,
                excludeEnd: true,
                relevance: 0
              },
              {
                className: 'type', // types
                begin: ':[ \t]*',
                end: '\\W',
                excludeBegin: true,
                excludeEnd: true
              },
              {
                className: 'type', // instantiation
                begin: 'new *',
                end: '\\W',
                excludeBegin: true,
                excludeEnd: true
              },
              {
                className: 'class', // enums
                beginKeywords: 'enum',
                end: '\\{',
                contains: [ hljs.TITLE_MODE ]
              },
              {
                className: 'class', // abstracts
                beginKeywords: 'abstract',
                end: '[\\{$]',
                contains: [
                  {
                    className: 'type',
                    begin: '\\(',
                    end: '\\)',
                    excludeBegin: true,
                    excludeEnd: true
                  },
                  {
                    className: 'type',
                    begin: 'from +',
                    end: '\\W',
                    excludeBegin: true,
                    excludeEnd: true
                  },
                  {
                    className: 'type',
                    begin: 'to +',
                    end: '\\W',
                    excludeBegin: true,
                    excludeEnd: true
                  },
                  hljs.TITLE_MODE
                ],
                keywords: { keyword: 'abstract from to' }
              },
              {
                className: 'class', // classes
                begin: '\\b(class|interface) +',
                end: '[\\{$]',
                excludeEnd: true,
                keywords: 'class interface',
                contains: [
                  {
                    className: 'keyword',
                    begin: '\\b(extends|implements) +',
                    keywords: 'extends implements',
                    contains: [
                      {
                        className: 'type',
                        begin: hljs.IDENT_RE,
                        relevance: 0
                      }
                    ]
                  },
                  hljs.TITLE_MODE
                ]
              },
              {
                className: 'function',
                beginKeywords: 'function',
                end: '\\(',
                excludeEnd: true,
                illegal: '\\S',
                contains: [ hljs.TITLE_MODE ]
              }
            ],
            illegal: /<\//
          };
        }
 
        haxe_1 = haxe;
        return haxe_1;
    }
 
    /*
    Language: HSP
    Author: prince <MC.prince.0203@gmail.com>
    Website: https://en.wikipedia.org/wiki/Hot_Soup_Processor
    Category: scripting
    */
 
    var hsp_1;
    var hasRequiredHsp;
 
    function requireHsp () {
        if (hasRequiredHsp) return hsp_1;
        hasRequiredHsp = 1;
        function hsp(hljs) {
          return {
            name: 'HSP',
            case_insensitive: true,
            keywords: {
              $pattern: /[\w._]+/,
              keyword: 'goto gosub return break repeat loop continue wait await dim sdim foreach dimtype dup dupptr end stop newmod delmod mref run exgoto on mcall assert logmes newlab resume yield onexit onerror onkey onclick oncmd exist delete mkdir chdir dirlist bload bsave bcopy memfile if else poke wpoke lpoke getstr chdpm memexpand memcpy memset notesel noteadd notedel noteload notesave randomize noteunsel noteget split strrep setease button chgdisp exec dialog mmload mmplay mmstop mci pset pget syscolor mes print title pos circle cls font sysfont objsize picload color palcolor palette redraw width gsel gcopy gzoom gmode bmpsave hsvcolor getkey listbox chkbox combox input mesbox buffer screen bgscr mouse objsel groll line clrobj boxf objprm objmode stick grect grotate gsquare gradf objimage objskip objenable celload celdiv celput newcom querycom delcom cnvstow comres axobj winobj sendmsg comevent comevarg sarrayconv callfunc cnvwtos comevdisp libptr system hspstat hspver stat cnt err strsize looplev sublev iparam wparam lparam refstr refdval int rnd strlen length length2 length3 length4 vartype gettime peek wpeek lpeek varptr varuse noteinfo instr abs limit getease str strmid strf getpath strtrim sin cos tan atan sqrt double absf expf logf limitf powf geteasef mousex mousey mousew hwnd hinstance hdc ginfo objinfo dirinfo sysinfo thismod __hspver__ __hsp30__ __date__ __time__ __line__ __file__ _debug __hspdef__ and or xor not screen_normal screen_palette screen_hide screen_fixedsize screen_tool screen_frame gmode_gdi gmode_mem gmode_rgb0 gmode_alpha gmode_rgb0alpha gmode_add gmode_sub gmode_pixela ginfo_mx ginfo_my ginfo_act ginfo_sel ginfo_wx1 ginfo_wy1 ginfo_wx2 ginfo_wy2 ginfo_vx ginfo_vy ginfo_sizex ginfo_sizey ginfo_winx ginfo_winy ginfo_mesx ginfo_mesy ginfo_r ginfo_g ginfo_b ginfo_paluse ginfo_dispx ginfo_dispy ginfo_cx ginfo_cy ginfo_intid ginfo_newid ginfo_sx ginfo_sy objinfo_mode objinfo_bmscr objinfo_hwnd notemax notesize dir_cur dir_exe dir_win dir_sys dir_cmdline dir_desktop dir_mydoc dir_tv font_normal font_bold font_italic font_underline font_strikeout font_antialias objmode_normal objmode_guifont objmode_usefont gsquare_grad msgothic msmincho do until while wend for next _break _continue switch case default swbreak swend ddim ldim alloc m_pi rad2deg deg2rad ease_linear ease_quad_in ease_quad_out ease_quad_inout ease_cubic_in ease_cubic_out ease_cubic_inout ease_quartic_in ease_quartic_out ease_quartic_inout ease_bounce_in ease_bounce_out ease_bounce_inout ease_shake_in ease_shake_out ease_shake_inout ease_loop'
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
 
              {
                // multi-line string
                className: 'string',
                begin: /\{"/,
                end: /"\}/,
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
 
              hljs.COMMENT(';', '$', { relevance: 0 }),
 
              {
                // pre-processor
                className: 'meta',
                begin: '#',
                end: '$',
                keywords: { keyword: 'addion cfunc cmd cmpopt comfunc const defcfunc deffunc define else endif enum epack func global if ifdef ifndef include modcfunc modfunc modinit modterm module pack packopt regcmd runtime undef usecom uselib' },
                contains: [
                  hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
                  hljs.NUMBER_MODE,
                  hljs.C_NUMBER_MODE,
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
 
              {
                // label
                className: 'symbol',
                begin: '^\\*(\\w+|@)'
              },
 
              hljs.NUMBER_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        hsp_1 = hsp;
        return hsp_1;
    }
 
    /*
    Language: HTTP
    Description: HTTP request and response headers with automatic body highlighting
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Category: protocols, web
    Website: https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview
    */
 
    var http_1;
    var hasRequiredHttp;
 
    function requireHttp () {
        if (hasRequiredHttp) return http_1;
        hasRequiredHttp = 1;
        function http(hljs) {
          const regex = hljs.regex;
          const VERSION = 'HTTP/([32]|1\\.[01])';
          const HEADER_NAME = /[A-Za-z][A-Za-z0-9-]*/;
          const HEADER = {
            className: 'attribute',
            begin: regex.concat('^', HEADER_NAME, '(?=\\:\\s)'),
            starts: { contains: [
              {
                className: "punctuation",
                begin: /: /,
                relevance: 0,
                starts: {
                  end: '$',
                  relevance: 0
                }
              }
            ] }
          };
          const HEADERS_AND_BODY = [
            HEADER,
            {
              begin: '\\n\\n',
              starts: {
                subLanguage: [],
                endsWithParent: true
              }
            }
          ];
 
          return {
            name: 'HTTP',
            aliases: [ 'https' ],
            illegal: /\S/,
            contains: [
              // response
              {
                begin: '^(?=' + VERSION + " \\d{3})",
                end: /$/,
                contains: [
                  {
                    className: "meta",
                    begin: VERSION
                  },
                  {
                    className: 'number',
                    begin: '\\b\\d{3}\\b'
                  }
                ],
                starts: {
                  end: /\b\B/,
                  illegal: /\S/,
                  contains: HEADERS_AND_BODY
                }
              },
              // request
              {
                begin: '(?=^[A-Z]+ (.*?) ' + VERSION + '$)',
                end: /$/,
                contains: [
                  {
                    className: 'string',
                    begin: ' ',
                    end: ' ',
                    excludeBegin: true,
                    excludeEnd: true
                  },
                  {
                    className: "meta",
                    begin: VERSION
                  },
                  {
                    className: 'keyword',
                    begin: '[A-Z]+'
                  }
                ],
                starts: {
                  end: /\b\B/,
                  illegal: /\S/,
                  contains: HEADERS_AND_BODY
                }
              },
              // to allow headers to work even without a preamble
              hljs.inherit(HEADER, { relevance: 0 })
            ]
          };
        }
 
        http_1 = http;
        return http_1;
    }
 
    /*
    Language: Hy
    Description: Hy is a wonderful dialect of Lisp that’s embedded in Python.
    Author: Sergey Sobko <s.sobko@profitware.ru>
    Website: http://docs.hylang.org/en/stable/
    Category: lisp
    */
 
    var hy_1;
    var hasRequiredHy;
 
    function requireHy () {
        if (hasRequiredHy) return hy_1;
        hasRequiredHy = 1;
        function hy(hljs) {
          const SYMBOLSTART = 'a-zA-Z_\\-!.?+*=<>&#\'';
          const SYMBOL_RE = '[' + SYMBOLSTART + '][' + SYMBOLSTART + '0-9/;:]*';
          const keywords = {
            $pattern: SYMBOL_RE,
            built_in:
              // keywords
              '!= % %= & &= * ** **= *= *map '
              + '+ += , --build-class-- --import-- -= . / // //= '
              + '/= < << <<= <= = > >= >> >>= '
              + '@ @= ^ ^= abs accumulate all and any ap-compose '
              + 'ap-dotimes ap-each ap-each-while ap-filter ap-first ap-if ap-last ap-map ap-map-when ap-pipe '
              + 'ap-reduce ap-reject apply as-> ascii assert assoc bin break butlast '
              + 'callable calling-module-name car case cdr chain chr coll? combinations compile '
              + 'compress cond cons cons? continue count curry cut cycle dec '
              + 'def default-method defclass defmacro defmacro-alias defmacro/g! defmain defmethod defmulti defn '
              + 'defn-alias defnc defnr defreader defseq del delattr delete-route dict-comp dir '
              + 'disassemble dispatch-reader-macro distinct divmod do doto drop drop-last drop-while empty? '
              + 'end-sequence eval eval-and-compile eval-when-compile even? every? except exec filter first '
              + 'flatten float? fn fnc fnr for for* format fraction genexpr '
              + 'gensym get getattr global globals group-by hasattr hash hex id '
              + 'identity if if* if-not if-python2 import in inc input instance? '
              + 'integer integer-char? integer? interleave interpose is is-coll is-cons is-empty is-even '
              + 'is-every is-float is-instance is-integer is-integer-char is-iterable is-iterator is-keyword is-neg is-none '
              + 'is-not is-numeric is-odd is-pos is-string is-symbol is-zero isinstance islice issubclass '
              + 'iter iterable? iterate iterator? keyword keyword? lambda last len let '
              + 'lif lif-not list* list-comp locals loop macro-error macroexpand macroexpand-1 macroexpand-all '
              + 'map max merge-with method-decorator min multi-decorator multicombinations name neg? next '
              + 'none? nonlocal not not-in not? nth numeric? oct odd? open '
              + 'or ord partition permutations pos? post-route postwalk pow prewalk print '
              + 'product profile/calls profile/cpu put-route quasiquote quote raise range read read-str '
              + 'recursive-replace reduce remove repeat repeatedly repr require rest round route '
              + 'route-with-methods rwm second seq set-comp setattr setv some sorted string '
              + 'string? sum switch symbol? take take-nth take-while tee try unless '
              + 'unquote unquote-splicing vars walk when while with with* with-decorator with-gensyms '
              + 'xi xor yield yield-from zero? zip zip-longest | |= ~'
          };
 
          const SIMPLE_NUMBER_RE = '[-+]?\\d+(\\.\\d+)?';
 
          const SYMBOL = {
            begin: SYMBOL_RE,
            relevance: 0
          };
          const NUMBER = {
            className: 'number',
            begin: SIMPLE_NUMBER_RE,
            relevance: 0
          };
          const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
          const COMMENT = hljs.COMMENT(
            ';',
            '$',
            { relevance: 0 }
          );
          const LITERAL = {
            className: 'literal',
            begin: /\b([Tt]rue|[Ff]alse|nil|None)\b/
          };
          const COLLECTION = {
            begin: '[\\[\\{]',
            end: '[\\]\\}]',
            relevance: 0
          };
          const HINT = {
            className: 'comment',
            begin: '\\^' + SYMBOL_RE
          };
          const HINT_COL = hljs.COMMENT('\\^\\{', '\\}');
          const KEY = {
            className: 'symbol',
            begin: '[:]{1,2}' + SYMBOL_RE
          };
          const LIST = {
            begin: '\\(',
            end: '\\)'
          };
          const BODY = {
            endsWithParent: true,
            relevance: 0
          };
          const NAME = {
            className: 'name',
            relevance: 0,
            keywords: keywords,
            begin: SYMBOL_RE,
            starts: BODY
          };
          const DEFAULT_CONTAINS = [
            LIST,
            STRING,
            HINT,
            HINT_COL,
            COMMENT,
            KEY,
            COLLECTION,
            NUMBER,
            LITERAL,
            SYMBOL
          ];
 
          LIST.contains = [
            hljs.COMMENT('comment', ''),
            NAME,
            BODY
          ];
          BODY.contains = DEFAULT_CONTAINS;
          COLLECTION.contains = DEFAULT_CONTAINS;
 
          return {
            name: 'Hy',
            aliases: [ 'hylang' ],
            illegal: /\S/,
            contains: [
              hljs.SHEBANG(),
              LIST,
              STRING,
              HINT,
              HINT_COL,
              COMMENT,
              KEY,
              COLLECTION,
              NUMBER,
              LITERAL
            ]
          };
        }
 
        hy_1 = hy;
        return hy_1;
    }
 
    /*
    Language: Inform 7
    Author: Bruno Dias <bruno.r.dias@gmail.com>
    Description: Language definition for Inform 7, a DSL for writing parser interactive fiction.
    Website: http://inform7.com
    */
 
    var inform7_1;
    var hasRequiredInform7;
 
    function requireInform7 () {
        if (hasRequiredInform7) return inform7_1;
        hasRequiredInform7 = 1;
        function inform7(hljs) {
          const START_BRACKET = '\\[';
          const END_BRACKET = '\\]';
          return {
            name: 'Inform 7',
            aliases: [ 'i7' ],
            case_insensitive: true,
            keywords: {
              // Some keywords more or less unique to I7, for relevance.
              keyword:
                // kind:
                'thing room person man woman animal container '
                + 'supporter backdrop door '
                // characteristic:
                + 'scenery open closed locked inside gender '
                // verb:
                + 'is are say understand '
                // misc keyword:
                + 'kind of rule' },
            contains: [
              {
                className: 'string',
                begin: '"',
                end: '"',
                relevance: 0,
                contains: [
                  {
                    className: 'subst',
                    begin: START_BRACKET,
                    end: END_BRACKET
                  }
                ]
              },
              {
                className: 'section',
                begin: /^(Volume|Book|Part|Chapter|Section|Table)\b/,
                end: '$'
              },
              {
                // Rule definition
                // This is here for relevance.
                begin: /^(Check|Carry out|Report|Instead of|To|Rule|When|Before|After)\b/,
                end: ':',
                contains: [
                  {
                    // Rule name
                    begin: '\\(This',
                    end: '\\)'
                  }
                ]
              },
              {
                className: 'comment',
                begin: START_BRACKET,
                end: END_BRACKET,
                contains: [ 'self' ]
              }
            ]
          };
        }
 
        inform7_1 = inform7;
        return inform7_1;
    }
 
    /*
    Language: TOML, also INI
    Description: TOML aims to be a minimal configuration file format that's easy to read due to obvious semantics.
    Contributors: Guillaume Gomez <guillaume1.gomez@gmail.com>
    Category: common, config
    Website: https://github.com/toml-lang/toml
    */
 
    var ini_1;
    var hasRequiredIni;
 
    function requireIni () {
        if (hasRequiredIni) return ini_1;
        hasRequiredIni = 1;
        function ini(hljs) {
          const regex = hljs.regex;
          const NUMBERS = {
            className: 'number',
            relevance: 0,
            variants: [
              { begin: /([+-]+)?[\d]+_[\d_]+/ },
              { begin: hljs.NUMBER_RE }
            ]
          };
          const COMMENTS = hljs.COMMENT();
          COMMENTS.variants = [
            {
              begin: /;/,
              end: /$/
            },
            {
              begin: /#/,
              end: /$/
            }
          ];
          const VARIABLES = {
            className: 'variable',
            variants: [
              { begin: /\$[\w\d"][\w\d_]*/ },
              { begin: /\$\{(.*?)\}/ }
            ]
          };
          const LITERALS = {
            className: 'literal',
            begin: /\bon|off|true|false|yes|no\b/
          };
          const STRINGS = {
            className: "string",
            contains: [ hljs.BACKSLASH_ESCAPE ],
            variants: [
              {
                begin: "'''",
                end: "'''",
                relevance: 10
              },
              {
                begin: '"""',
                end: '"""',
                relevance: 10
              },
              {
                begin: '"',
                end: '"'
              },
              {
                begin: "'",
                end: "'"
              }
            ]
          };
          const ARRAY = {
            begin: /\[/,
            end: /\]/,
            contains: [
              COMMENTS,
              LITERALS,
              VARIABLES,
              STRINGS,
              NUMBERS,
              'self'
            ],
            relevance: 0
          };
 
          const BARE_KEY = /[A-Za-z0-9_-]+/;
          const QUOTED_KEY_DOUBLE_QUOTE = /"(\\"|[^"])*"/;
          const QUOTED_KEY_SINGLE_QUOTE = /'[^']*'/;
          const ANY_KEY = regex.either(
            BARE_KEY, QUOTED_KEY_DOUBLE_QUOTE, QUOTED_KEY_SINGLE_QUOTE
          );
          const DOTTED_KEY = regex.concat(
            ANY_KEY, '(\\s*\\.\\s*', ANY_KEY, ')*',
            regex.lookahead(/\s*=\s*[^#\s]/)
          );
 
          return {
            name: 'TOML, also INI',
            aliases: [ 'toml' ],
            case_insensitive: true,
            illegal: /\S/,
            contains: [
              COMMENTS,
              {
                className: 'section',
                begin: /\[+/,
                end: /\]+/
              },
              {
                begin: DOTTED_KEY,
                className: 'attr',
                starts: {
                  end: /$/,
                  contains: [
                    COMMENTS,
                    ARRAY,
                    LITERALS,
                    VARIABLES,
                    STRINGS,
                    NUMBERS
                  ]
                }
              }
            ]
          };
        }
 
        ini_1 = ini;
        return ini_1;
    }
 
    /*
    Language: IRPF90
    Author: Anthony Scemama <scemama@irsamc.ups-tlse.fr>
    Description: IRPF90 is an open-source Fortran code generator
    Website: http://irpf90.ups-tlse.fr
    Category: scientific
    */
 
    var irpf90_1;
    var hasRequiredIrpf90;
 
    function requireIrpf90 () {
        if (hasRequiredIrpf90) return irpf90_1;
        hasRequiredIrpf90 = 1;
        /** @type LanguageFn */
        function irpf90(hljs) {
          const regex = hljs.regex;
          const PARAMS = {
            className: 'params',
            begin: '\\(',
            end: '\\)'
          };
 
          // regex in both fortran and irpf90 should match
          const OPTIONAL_NUMBER_SUFFIX = /(_[a-z_\d]+)?/;
          const OPTIONAL_NUMBER_EXP = /([de][+-]?\d+)?/;
          const NUMBER = {
            className: 'number',
            variants: [
              { begin: regex.concat(/\b\d+/, /\.(\d*)/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
              { begin: regex.concat(/\b\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) },
              { begin: regex.concat(/\.\d+/, OPTIONAL_NUMBER_EXP, OPTIONAL_NUMBER_SUFFIX) }
            ],
            relevance: 0
          };
 
          const F_KEYWORDS = {
            literal: '.False. .True.',
            keyword: 'kind do while private call intrinsic where elsewhere '
              + 'type endtype endmodule endselect endinterface end enddo endif if forall endforall only contains default return stop then '
              + 'public subroutine|10 function program .and. .or. .not. .le. .eq. .ge. .gt. .lt. '
              + 'goto save else use module select case '
              + 'access blank direct exist file fmt form formatted iostat name named nextrec number opened rec recl sequential status unformatted unit '
              + 'continue format pause cycle exit '
              + 'c_null_char c_alert c_backspace c_form_feed flush wait decimal round iomsg '
              + 'synchronous nopass non_overridable pass protected volatile abstract extends import '
              + 'non_intrinsic value deferred generic final enumerator class associate bind enum '
              + 'c_int c_short c_long c_long_long c_signed_char c_size_t c_int8_t c_int16_t c_int32_t c_int64_t c_int_least8_t c_int_least16_t '
              + 'c_int_least32_t c_int_least64_t c_int_fast8_t c_int_fast16_t c_int_fast32_t c_int_fast64_t c_intmax_t C_intptr_t c_float c_double '
              + 'c_long_double c_float_complex c_double_complex c_long_double_complex c_bool c_char c_null_ptr c_null_funptr '
              + 'c_new_line c_carriage_return c_horizontal_tab c_vertical_tab iso_c_binding c_loc c_funloc c_associated  c_f_pointer '
              + 'c_ptr c_funptr iso_fortran_env character_storage_size error_unit file_storage_size input_unit iostat_end iostat_eor '
              + 'numeric_storage_size output_unit c_f_procpointer ieee_arithmetic ieee_support_underflow_control '
              + 'ieee_get_underflow_mode ieee_set_underflow_mode newunit contiguous recursive '
              + 'pad position action delim readwrite eor advance nml interface procedure namelist include sequence elemental pure '
              + 'integer real character complex logical dimension allocatable|10 parameter '
              + 'external implicit|10 none double precision assign intent optional pointer '
              + 'target in out common equivalence data '
              // IRPF90 special keywords
              + 'begin_provider &begin_provider end_provider begin_shell end_shell begin_template end_template subst assert touch '
              + 'soft_touch provide no_dep free irp_if irp_else irp_endif irp_write irp_read',
            built_in: 'alog alog10 amax0 amax1 amin0 amin1 amod cabs ccos cexp clog csin csqrt dabs dacos dasin datan datan2 dcos dcosh ddim dexp dint '
              + 'dlog dlog10 dmax1 dmin1 dmod dnint dsign dsin dsinh dsqrt dtan dtanh float iabs idim idint idnint ifix isign max0 max1 min0 min1 sngl '
              + 'algama cdabs cdcos cdexp cdlog cdsin cdsqrt cqabs cqcos cqexp cqlog cqsin cqsqrt dcmplx dconjg derf derfc dfloat dgamma dimag dlgama '
              + 'iqint qabs qacos qasin qatan qatan2 qcmplx qconjg qcos qcosh qdim qerf qerfc qexp qgamma qimag qlgama qlog qlog10 qmax1 qmin1 qmod '
              + 'qnint qsign qsin qsinh qsqrt qtan qtanh abs acos aimag aint anint asin atan atan2 char cmplx conjg cos cosh exp ichar index int log '
              + 'log10 max min nint sign sin sinh sqrt tan tanh print write dim lge lgt lle llt mod nullify allocate deallocate '
              + 'adjustl adjustr all allocated any associated bit_size btest ceiling count cshift date_and_time digits dot_product '
              + 'eoshift epsilon exponent floor fraction huge iand ibclr ibits ibset ieor ior ishft ishftc lbound len_trim matmul '
              + 'maxexponent maxloc maxval merge minexponent minloc minval modulo mvbits nearest pack present product '
              + 'radix random_number random_seed range repeat reshape rrspacing scale scan selected_int_kind selected_real_kind '
              + 'set_exponent shape size spacing spread sum system_clock tiny transpose trim ubound unpack verify achar iachar transfer '
              + 'dble entry dprod cpu_time command_argument_count get_command get_command_argument get_environment_variable is_iostat_end '
              + 'ieee_arithmetic ieee_support_underflow_control ieee_get_underflow_mode ieee_set_underflow_mode '
              + 'is_iostat_eor move_alloc new_line selected_char_kind same_type_as extends_type_of '
              + 'acosh asinh atanh bessel_j0 bessel_j1 bessel_jn bessel_y0 bessel_y1 bessel_yn erf erfc erfc_scaled gamma log_gamma hypot norm2 '
              + 'atomic_define atomic_ref execute_command_line leadz trailz storage_size merge_bits '
              + 'bge bgt ble blt dshiftl dshiftr findloc iall iany iparity image_index lcobound ucobound maskl maskr '
              + 'num_images parity popcnt poppar shifta shiftl shiftr this_image '
              // IRPF90 special built_ins
              + 'IRP_ALIGN irp_here'
          };
          return {
            name: 'IRPF90',
            case_insensitive: true,
            keywords: F_KEYWORDS,
            illegal: /\/\*/,
            contains: [
              hljs.inherit(hljs.APOS_STRING_MODE, {
                className: 'string',
                relevance: 0
              }),
              hljs.inherit(hljs.QUOTE_STRING_MODE, {
                className: 'string',
                relevance: 0
              }),
              {
                className: 'function',
                beginKeywords: 'subroutine function program',
                illegal: '[${=\\n]',
                contains: [
                  hljs.UNDERSCORE_TITLE_MODE,
                  PARAMS
                ]
              },
              hljs.COMMENT('!', '$', { relevance: 0 }),
              hljs.COMMENT('begin_doc', 'end_doc', { relevance: 10 }),
              NUMBER
            ]
          };
        }
 
        irpf90_1 = irpf90;
        return irpf90_1;
    }
 
    /*
    Language: ISBL
    Author: Dmitriy Tarasov <dimatar@gmail.com>
    Description: built-in language DIRECTUM
    Category: enterprise
    */
 
    var isbl_1;
    var hasRequiredIsbl;
 
    function requireIsbl () {
        if (hasRequiredIsbl) return isbl_1;
        hasRequiredIsbl = 1;
        function isbl(hljs) {
          // Определение идентификаторов
          const UNDERSCORE_IDENT_RE = "[A-Za-zА-Яа-яёЁ_!][A-Za-zА-Яа-яёЁ_0-9]*";
 
          // Определение имен функций
          const FUNCTION_NAME_IDENT_RE = "[A-Za-zА-Яа-яёЁ_][A-Za-zА-Яа-яёЁ_0-9]*";
 
          // keyword : ключевые слова
          const KEYWORD =
            "and и else иначе endexcept endfinally endforeach конецвсе endif конецесли endwhile конецпока "
            + "except exitfor finally foreach все if если in в not не or или try while пока ";
 
          // SYSRES Constants
          const sysres_constants =
            "SYSRES_CONST_ACCES_RIGHT_TYPE_EDIT "
            + "SYSRES_CONST_ACCES_RIGHT_TYPE_FULL "
            + "SYSRES_CONST_ACCES_RIGHT_TYPE_VIEW "
            + "SYSRES_CONST_ACCESS_MODE_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_NO_ACCESS_VIEW "
            + "SYSRES_CONST_ACCESS_NO_ACCESS_VIEW_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_ADD_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_CHANGE_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_DELETE_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_EXECUTE_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_NO_ACCESS_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_RATIFY_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_VIEW "
            + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_CODE "
            + "SYSRES_CONST_ACCESS_RIGHTS_VIEW_REQUISITE_YES_CODE "
            + "SYSRES_CONST_ACCESS_TYPE_CHANGE "
            + "SYSRES_CONST_ACCESS_TYPE_CHANGE_CODE "
            + "SYSRES_CONST_ACCESS_TYPE_EXISTS "
            + "SYSRES_CONST_ACCESS_TYPE_EXISTS_CODE "
            + "SYSRES_CONST_ACCESS_TYPE_FULL "
            + "SYSRES_CONST_ACCESS_TYPE_FULL_CODE "
            + "SYSRES_CONST_ACCESS_TYPE_VIEW "
            + "SYSRES_CONST_ACCESS_TYPE_VIEW_CODE "
            + "SYSRES_CONST_ACTION_TYPE_ABORT "
            + "SYSRES_CONST_ACTION_TYPE_ACCEPT "
            + "SYSRES_CONST_ACTION_TYPE_ACCESS_RIGHTS "
            + "SYSRES_CONST_ACTION_TYPE_ADD_ATTACHMENT "
            + "SYSRES_CONST_ACTION_TYPE_CHANGE_CARD "
            + "SYSRES_CONST_ACTION_TYPE_CHANGE_KIND "
            + "SYSRES_CONST_ACTION_TYPE_CHANGE_STORAGE "
            + "SYSRES_CONST_ACTION_TYPE_CONTINUE "
            + "SYSRES_CONST_ACTION_TYPE_COPY "
            + "SYSRES_CONST_ACTION_TYPE_CREATE "
            + "SYSRES_CONST_ACTION_TYPE_CREATE_VERSION "
            + "SYSRES_CONST_ACTION_TYPE_DELETE "
            + "SYSRES_CONST_ACTION_TYPE_DELETE_ATTACHMENT "
            + "SYSRES_CONST_ACTION_TYPE_DELETE_VERSION "
            + "SYSRES_CONST_ACTION_TYPE_DISABLE_DELEGATE_ACCESS_RIGHTS "
            + "SYSRES_CONST_ACTION_TYPE_ENABLE_DELEGATE_ACCESS_RIGHTS "
            + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE "
            + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_CERTIFICATE_AND_PASSWORD "
            + "SYSRES_CONST_ACTION_TYPE_ENCRYPTION_BY_PASSWORD "
            + "SYSRES_CONST_ACTION_TYPE_EXPORT_WITH_LOCK "
            + "SYSRES_CONST_ACTION_TYPE_EXPORT_WITHOUT_LOCK "
            + "SYSRES_CONST_ACTION_TYPE_IMPORT_WITH_UNLOCK "
            + "SYSRES_CONST_ACTION_TYPE_IMPORT_WITHOUT_UNLOCK "
            + "SYSRES_CONST_ACTION_TYPE_LIFE_CYCLE_STAGE "
            + "SYSRES_CONST_ACTION_TYPE_LOCK "
            + "SYSRES_CONST_ACTION_TYPE_LOCK_FOR_SERVER "
            + "SYSRES_CONST_ACTION_TYPE_LOCK_MODIFY "
            + "SYSRES_CONST_ACTION_TYPE_MARK_AS_READED "
            + "SYSRES_CONST_ACTION_TYPE_MARK_AS_UNREADED "
            + "SYSRES_CONST_ACTION_TYPE_MODIFY "
            + "SYSRES_CONST_ACTION_TYPE_MODIFY_CARD "
            + "SYSRES_CONST_ACTION_TYPE_MOVE_TO_ARCHIVE "
            + "SYSRES_CONST_ACTION_TYPE_OFF_ENCRYPTION "
            + "SYSRES_CONST_ACTION_TYPE_PASSWORD_CHANGE "
            + "SYSRES_CONST_ACTION_TYPE_PERFORM "
            + "SYSRES_CONST_ACTION_TYPE_RECOVER_FROM_LOCAL_COPY "
            + "SYSRES_CONST_ACTION_TYPE_RESTART "
            + "SYSRES_CONST_ACTION_TYPE_RESTORE_FROM_ARCHIVE "
            + "SYSRES_CONST_ACTION_TYPE_REVISION "
            + "SYSRES_CONST_ACTION_TYPE_SEND_BY_MAIL "
            + "SYSRES_CONST_ACTION_TYPE_SIGN "
            + "SYSRES_CONST_ACTION_TYPE_START "
            + "SYSRES_CONST_ACTION_TYPE_UNLOCK "
            + "SYSRES_CONST_ACTION_TYPE_UNLOCK_FROM_SERVER "
            + "SYSRES_CONST_ACTION_TYPE_VERSION_STATE "
            + "SYSRES_CONST_ACTION_TYPE_VERSION_VISIBILITY "
            + "SYSRES_CONST_ACTION_TYPE_VIEW "
            + "SYSRES_CONST_ACTION_TYPE_VIEW_SHADOW_COPY "
            + "SYSRES_CONST_ACTION_TYPE_WORKFLOW_DESCRIPTION_MODIFY "
            + "SYSRES_CONST_ACTION_TYPE_WRITE_HISTORY "
            + "SYSRES_CONST_ACTIVE_VERSION_STATE_PICK_VALUE "
            + "SYSRES_CONST_ADD_REFERENCE_MODE_NAME "
            + "SYSRES_CONST_ADDITION_REQUISITE_CODE "
            + "SYSRES_CONST_ADDITIONAL_PARAMS_REQUISITE_CODE "
            + "SYSRES_CONST_ADITIONAL_JOB_END_DATE_REQUISITE_NAME "
            + "SYSRES_CONST_ADITIONAL_JOB_READ_REQUISITE_NAME "
            + "SYSRES_CONST_ADITIONAL_JOB_START_DATE_REQUISITE_NAME "
            + "SYSRES_CONST_ADITIONAL_JOB_STATE_REQUISITE_NAME "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_ADDING_USER_TO_GROUP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_COMP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_GROUP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_CREATION_USER_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_CREATION_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DATABASE_USER_DELETION_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_COMP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_GROUP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_DELETION_USER_FROM_GROUP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_FILTERER_RESTRICTION_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_PRIVILEGE_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_GRANTING_RIGHTS_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_MAIN_SERVER_CHANGED_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_IS_PUBLIC_CHANGED_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_FILTERER_RESTRICTION_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_PRIVILEGE_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_REMOVING_RIGHTS_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_CREATION_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_SERVER_LOGIN_DELETION_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_CATEGORY_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_COMP_TITLE_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_FULL_NAME_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_GROUP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_PARENT_GROUP_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_AUTH_TYPE_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_LOGIN_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_UPDATING_USER_STATUS_ACTION_CODE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE "
            + "SYSRES_CONST_ADMINISTRATION_HISTORY_USER_PASSWORD_CHANGE_ACTION "
            + "SYSRES_CONST_ALL_ACCEPT_CONDITION_RUS "
            + "SYSRES_CONST_ALL_USERS_GROUP "
            + "SYSRES_CONST_ALL_USERS_GROUP_NAME "
            + "SYSRES_CONST_ALL_USERS_SERVER_GROUP_NAME "
            + "SYSRES_CONST_ALLOWED_ACCESS_TYPE_CODE "
            + "SYSRES_CONST_ALLOWED_ACCESS_TYPE_NAME "
            + "SYSRES_CONST_APP_VIEWER_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_APPROVING_SIGNATURE_NAME "
            + "SYSRES_CONST_APPROVING_SIGNATURE_REQUISITE_CODE "
            + "SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE "
            + "SYSRES_CONST_ASSISTANT_SUBSTITUE_TYPE_CODE "
            + "SYSRES_CONST_ATTACH_TYPE_COMPONENT_TOKEN "
            + "SYSRES_CONST_ATTACH_TYPE_DOC "
            + "SYSRES_CONST_ATTACH_TYPE_EDOC "
            + "SYSRES_CONST_ATTACH_TYPE_FOLDER "
            + "SYSRES_CONST_ATTACH_TYPE_JOB "
            + "SYSRES_CONST_ATTACH_TYPE_REFERENCE "
            + "SYSRES_CONST_ATTACH_TYPE_TASK "
            + "SYSRES_CONST_AUTH_ENCODED_PASSWORD "
            + "SYSRES_CONST_AUTH_ENCODED_PASSWORD_CODE "
            + "SYSRES_CONST_AUTH_NOVELL "
            + "SYSRES_CONST_AUTH_PASSWORD "
            + "SYSRES_CONST_AUTH_PASSWORD_CODE "
            + "SYSRES_CONST_AUTH_WINDOWS "
            + "SYSRES_CONST_AUTHENTICATING_SIGNATURE_NAME "
            + "SYSRES_CONST_AUTHENTICATING_SIGNATURE_REQUISITE_CODE "
            + "SYSRES_CONST_AUTO_ENUM_METHOD_FLAG "
            + "SYSRES_CONST_AUTO_NUMERATION_CODE "
            + "SYSRES_CONST_AUTO_STRONG_ENUM_METHOD_FLAG "
            + "SYSRES_CONST_AUTOTEXT_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_AUTOTEXT_TEXT_REQUISITE_CODE "
            + "SYSRES_CONST_AUTOTEXT_USAGE_ALL "
            + "SYSRES_CONST_AUTOTEXT_USAGE_ALL_CODE "
            + "SYSRES_CONST_AUTOTEXT_USAGE_SIGN "
            + "SYSRES_CONST_AUTOTEXT_USAGE_SIGN_CODE "
            + "SYSRES_CONST_AUTOTEXT_USAGE_WORK "
            + "SYSRES_CONST_AUTOTEXT_USAGE_WORK_CODE "
            + "SYSRES_CONST_AUTOTEXT_USE_ANYWHERE_CODE "
            + "SYSRES_CONST_AUTOTEXT_USE_ON_SIGNING_CODE "
            + "SYSRES_CONST_AUTOTEXT_USE_ON_WORK_CODE "
            + "SYSRES_CONST_BEGIN_DATE_REQUISITE_CODE "
            + "SYSRES_CONST_BLACK_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_BLUE_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_BTN_PART "
            + "SYSRES_CONST_CALCULATED_ROLE_TYPE_CODE "
            + "SYSRES_CONST_CALL_TYPE_VARIABLE_BUTTON_VALUE "
            + "SYSRES_CONST_CALL_TYPE_VARIABLE_PROGRAM_VALUE "
            + "SYSRES_CONST_CANCEL_MESSAGE_FUNCTION_RESULT "
            + "SYSRES_CONST_CARD_PART "
            + "SYSRES_CONST_CARD_REFERENCE_MODE_NAME "
            + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_ENCRYPT_VALUE "
            + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_AND_ENCRYPT_VALUE "
            + "SYSRES_CONST_CERTIFICATE_TYPE_REQUISITE_SIGN_VALUE "
            + "SYSRES_CONST_CHECK_PARAM_VALUE_DATE_PARAM_TYPE "
            + "SYSRES_CONST_CHECK_PARAM_VALUE_FLOAT_PARAM_TYPE "
            + "SYSRES_CONST_CHECK_PARAM_VALUE_INTEGER_PARAM_TYPE "
            + "SYSRES_CONST_CHECK_PARAM_VALUE_PICK_PARAM_TYPE "
            + "SYSRES_CONST_CHECK_PARAM_VALUE_REEFRENCE_PARAM_TYPE "
            + "SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_FEMININE "
            + "SYSRES_CONST_CLOSED_RECORD_FLAG_VALUE_MASCULINE "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_ADMIN "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_DEVELOPER "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_DOCS "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_EDOC_CARDS "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_EXTERNAL_EXECUTABLE "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_OTHER "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_REFERENCE "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_REPORT "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_SCRIPT "
            + "SYSRES_CONST_CODE_COMPONENT_TYPE_URL "
            + "SYSRES_CONST_CODE_REQUISITE_ACCESS "
            + "SYSRES_CONST_CODE_REQUISITE_CODE "
            + "SYSRES_CONST_CODE_REQUISITE_COMPONENT "
            + "SYSRES_CONST_CODE_REQUISITE_DESCRIPTION "
            + "SYSRES_CONST_CODE_REQUISITE_EXCLUDE_COMPONENT "
            + "SYSRES_CONST_CODE_REQUISITE_RECORD "
            + "SYSRES_CONST_COMMENT_REQ_CODE "
            + "SYSRES_CONST_COMMON_SETTINGS_REQUISITE_CODE "
            + "SYSRES_CONST_COMP_CODE_GRD "
            + "SYSRES_CONST_COMPONENT_GROUP_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_COMPONENT_TYPE_ADMIN_COMPONENTS "
            + "SYSRES_CONST_COMPONENT_TYPE_DEVELOPER_COMPONENTS "
            + "SYSRES_CONST_COMPONENT_TYPE_DOCS "
            + "SYSRES_CONST_COMPONENT_TYPE_EDOC_CARDS "
            + "SYSRES_CONST_COMPONENT_TYPE_EDOCS "
            + "SYSRES_CONST_COMPONENT_TYPE_EXTERNAL_EXECUTABLE "
            + "SYSRES_CONST_COMPONENT_TYPE_OTHER "
            + "SYSRES_CONST_COMPONENT_TYPE_REFERENCE_TYPES "
            + "SYSRES_CONST_COMPONENT_TYPE_REFERENCES "
            + "SYSRES_CONST_COMPONENT_TYPE_REPORTS "
            + "SYSRES_CONST_COMPONENT_TYPE_SCRIPTS "
            + "SYSRES_CONST_COMPONENT_TYPE_URL "
            + "SYSRES_CONST_COMPONENTS_REMOTE_SERVERS_VIEW_CODE "
            + "SYSRES_CONST_CONDITION_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_CONST_FIRM_STATUS_COMMON "
            + "SYSRES_CONST_CONST_FIRM_STATUS_INDIVIDUAL "
            + "SYSRES_CONST_CONST_NEGATIVE_VALUE "
            + "SYSRES_CONST_CONST_POSITIVE_VALUE "
            + "SYSRES_CONST_CONST_SERVER_STATUS_DONT_REPLICATE "
            + "SYSRES_CONST_CONST_SERVER_STATUS_REPLICATE "
            + "SYSRES_CONST_CONTENTS_REQUISITE_CODE "
            + "SYSRES_CONST_DATA_TYPE_BOOLEAN "
            + "SYSRES_CONST_DATA_TYPE_DATE "
            + "SYSRES_CONST_DATA_TYPE_FLOAT "
            + "SYSRES_CONST_DATA_TYPE_INTEGER "
            + "SYSRES_CONST_DATA_TYPE_PICK "
            + "SYSRES_CONST_DATA_TYPE_REFERENCE "
            + "SYSRES_CONST_DATA_TYPE_STRING "
            + "SYSRES_CONST_DATA_TYPE_TEXT "
            + "SYSRES_CONST_DATA_TYPE_VARIANT "
            + "SYSRES_CONST_DATE_CLOSE_REQ_CODE "
            + "SYSRES_CONST_DATE_FORMAT_DATE_ONLY_CHAR "
            + "SYSRES_CONST_DATE_OPEN_REQ_CODE "
            + "SYSRES_CONST_DATE_REQUISITE "
            + "SYSRES_CONST_DATE_REQUISITE_CODE "
            + "SYSRES_CONST_DATE_REQUISITE_NAME "
            + "SYSRES_CONST_DATE_REQUISITE_TYPE "
            + "SYSRES_CONST_DATE_TYPE_CHAR "
            + "SYSRES_CONST_DATETIME_FORMAT_VALUE "
            + "SYSRES_CONST_DEA_ACCESS_RIGHTS_ACTION_CODE "
            + "SYSRES_CONST_DESCRIPTION_LOCALIZE_ID_REQUISITE_CODE "
            + "SYSRES_CONST_DESCRIPTION_REQUISITE_CODE "
            + "SYSRES_CONST_DET1_PART "
            + "SYSRES_CONST_DET2_PART "
            + "SYSRES_CONST_DET3_PART "
            + "SYSRES_CONST_DET4_PART "
            + "SYSRES_CONST_DET5_PART "
            + "SYSRES_CONST_DET6_PART "
            + "SYSRES_CONST_DETAIL_DATASET_KEY_REQUISITE_CODE "
            + "SYSRES_CONST_DETAIL_PICK_REQUISITE_CODE "
            + "SYSRES_CONST_DETAIL_REQ_CODE "
            + "SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_CODE "
            + "SYSRES_CONST_DO_NOT_USE_ACCESS_TYPE_NAME "
            + "SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_CODE "
            + "SYSRES_CONST_DO_NOT_USE_ON_VIEW_ACCESS_TYPE_NAME "
            + "SYSRES_CONST_DOCUMENT_STORAGES_CODE "
            + "SYSRES_CONST_DOCUMENT_TEMPLATES_TYPE_NAME "
            + "SYSRES_CONST_DOUBLE_REQUISITE_CODE "
            + "SYSRES_CONST_EDITOR_CLOSE_FILE_OBSERV_TYPE_CODE "
            + "SYSRES_CONST_EDITOR_CLOSE_PROCESS_OBSERV_TYPE_CODE "
            + "SYSRES_CONST_EDITOR_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_EDITORS_APPLICATION_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_EDITORS_CREATE_SEVERAL_PROCESSES_REQUISITE_CODE "
            + "SYSRES_CONST_EDITORS_EXTENSION_REQUISITE_CODE "
            + "SYSRES_CONST_EDITORS_OBSERVER_BY_PROCESS_TYPE "
            + "SYSRES_CONST_EDITORS_REFERENCE_CODE "
            + "SYSRES_CONST_EDITORS_REPLACE_SPEC_CHARS_REQUISITE_CODE "
            + "SYSRES_CONST_EDITORS_USE_PLUGINS_REQUISITE_CODE "
            + "SYSRES_CONST_EDITORS_VIEW_DOCUMENT_OPENED_TO_EDIT_CODE "
            + "SYSRES_CONST_EDOC_CARD_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_CARD_TYPES_LINK_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_CERTIFICATE_AND_PASSWORD_ENCODE_CODE "
            + "SYSRES_CONST_EDOC_CERTIFICATE_ENCODE_CODE "
            + "SYSRES_CONST_EDOC_DATE_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_KIND_REFERENCE_CODE "
            + "SYSRES_CONST_EDOC_KINDS_BY_TEMPLATE_ACTION_CODE "
            + "SYSRES_CONST_EDOC_MANAGE_ACCESS_CODE "
            + "SYSRES_CONST_EDOC_NONE_ENCODE_CODE "
            + "SYSRES_CONST_EDOC_NUMBER_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_PASSWORD_ENCODE_CODE "
            + "SYSRES_CONST_EDOC_READONLY_ACCESS_CODE "
            + "SYSRES_CONST_EDOC_SHELL_LIFE_TYPE_VIEW_VALUE "
            + "SYSRES_CONST_EDOC_SIZE_RESTRICTION_PRIORITY_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_STORAGE_CHECK_ACCESS_RIGHTS_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_STORAGE_COMPUTER_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_STORAGE_DATABASE_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_STORAGE_EDIT_IN_STORAGE_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_STORAGE_LOCAL_PATH_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_STORAGE_SHARED_SOURCE_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_TEMPLATE_REQUISITE_CODE "
            + "SYSRES_CONST_EDOC_TYPES_REFERENCE_CODE "
            + "SYSRES_CONST_EDOC_VERSION_ACTIVE_STAGE_CODE "
            + "SYSRES_CONST_EDOC_VERSION_DESIGN_STAGE_CODE "
            + "SYSRES_CONST_EDOC_VERSION_OBSOLETE_STAGE_CODE "
            + "SYSRES_CONST_EDOC_WRITE_ACCES_CODE "
            + "SYSRES_CONST_EDOCUMENT_CARD_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE "
            + "SYSRES_CONST_ENCODE_CERTIFICATE_TYPE_CODE "
            + "SYSRES_CONST_END_DATE_REQUISITE_CODE "
            + "SYSRES_CONST_ENUMERATION_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_EXECUTE_ACCESS_RIGHTS_TYPE_CODE "
            + "SYSRES_CONST_EXECUTIVE_FILE_STORAGE_TYPE "
            + "SYSRES_CONST_EXIST_CONST "
            + "SYSRES_CONST_EXIST_VALUE "
            + "SYSRES_CONST_EXPORT_LOCK_TYPE_ASK "
            + "SYSRES_CONST_EXPORT_LOCK_TYPE_WITH_LOCK "
            + "SYSRES_CONST_EXPORT_LOCK_TYPE_WITHOUT_LOCK "
            + "SYSRES_CONST_EXPORT_VERSION_TYPE_ASK "
            + "SYSRES_CONST_EXPORT_VERSION_TYPE_LAST "
            + "SYSRES_CONST_EXPORT_VERSION_TYPE_LAST_ACTIVE "
            + "SYSRES_CONST_EXTENSION_REQUISITE_CODE "
            + "SYSRES_CONST_FILTER_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_FILTER_REQUISITE_CODE "
            + "SYSRES_CONST_FILTER_TYPE_COMMON_CODE "
            + "SYSRES_CONST_FILTER_TYPE_COMMON_NAME "
            + "SYSRES_CONST_FILTER_TYPE_USER_CODE "
            + "SYSRES_CONST_FILTER_TYPE_USER_NAME "
            + "SYSRES_CONST_FILTER_VALUE_REQUISITE_NAME "
            + "SYSRES_CONST_FLOAT_NUMBER_FORMAT_CHAR "
            + "SYSRES_CONST_FLOAT_REQUISITE_TYPE "
            + "SYSRES_CONST_FOLDER_AUTHOR_VALUE "
            + "SYSRES_CONST_FOLDER_KIND_ANY_OBJECTS "
            + "SYSRES_CONST_FOLDER_KIND_COMPONENTS "
            + "SYSRES_CONST_FOLDER_KIND_EDOCS "
            + "SYSRES_CONST_FOLDER_KIND_JOBS "
            + "SYSRES_CONST_FOLDER_KIND_TASKS "
            + "SYSRES_CONST_FOLDER_TYPE_COMMON "
            + "SYSRES_CONST_FOLDER_TYPE_COMPONENT "
            + "SYSRES_CONST_FOLDER_TYPE_FAVORITES "
            + "SYSRES_CONST_FOLDER_TYPE_INBOX "
            + "SYSRES_CONST_FOLDER_TYPE_OUTBOX "
            + "SYSRES_CONST_FOLDER_TYPE_QUICK_LAUNCH "
            + "SYSRES_CONST_FOLDER_TYPE_SEARCH "
            + "SYSRES_CONST_FOLDER_TYPE_SHORTCUTS "
            + "SYSRES_CONST_FOLDER_TYPE_USER "
            + "SYSRES_CONST_FROM_DICTIONARY_ENUM_METHOD_FLAG "
            + "SYSRES_CONST_FULL_SUBSTITUTE_TYPE "
            + "SYSRES_CONST_FULL_SUBSTITUTE_TYPE_CODE "
            + "SYSRES_CONST_FUNCTION_CANCEL_RESULT "
            + "SYSRES_CONST_FUNCTION_CATEGORY_SYSTEM "
            + "SYSRES_CONST_FUNCTION_CATEGORY_USER "
            + "SYSRES_CONST_FUNCTION_FAILURE_RESULT "
            + "SYSRES_CONST_FUNCTION_SAVE_RESULT "
            + "SYSRES_CONST_GENERATED_REQUISITE "
            + "SYSRES_CONST_GREEN_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_GROUP_ACCOUNT_TYPE_VALUE_CODE "
            + "SYSRES_CONST_GROUP_CATEGORY_NORMAL_CODE "
            + "SYSRES_CONST_GROUP_CATEGORY_NORMAL_NAME "
            + "SYSRES_CONST_GROUP_CATEGORY_SERVICE_CODE "
            + "SYSRES_CONST_GROUP_CATEGORY_SERVICE_NAME "
            + "SYSRES_CONST_GROUP_COMMON_CATEGORY_FIELD_VALUE "
            + "SYSRES_CONST_GROUP_FULL_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_GROUP_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_GROUP_RIGHTS_T_REQUISITE_CODE "
            + "SYSRES_CONST_GROUP_SERVER_CODES_REQUISITE_CODE "
            + "SYSRES_CONST_GROUP_SERVER_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_GROUP_SERVICE_CATEGORY_FIELD_VALUE "
            + "SYSRES_CONST_GROUP_USER_REQUISITE_CODE "
            + "SYSRES_CONST_GROUPS_REFERENCE_CODE "
            + "SYSRES_CONST_GROUPS_REQUISITE_CODE "
            + "SYSRES_CONST_HIDDEN_MODE_NAME "
            + "SYSRES_CONST_HIGH_LVL_REQUISITE_CODE "
            + "SYSRES_CONST_HISTORY_ACTION_CREATE_CODE "
            + "SYSRES_CONST_HISTORY_ACTION_DELETE_CODE "
            + "SYSRES_CONST_HISTORY_ACTION_EDIT_CODE "
            + "SYSRES_CONST_HOUR_CHAR "
            + "SYSRES_CONST_ID_REQUISITE_CODE "
            + "SYSRES_CONST_IDSPS_REQUISITE_CODE "
            + "SYSRES_CONST_IMAGE_MODE_COLOR "
            + "SYSRES_CONST_IMAGE_MODE_GREYSCALE "
            + "SYSRES_CONST_IMAGE_MODE_MONOCHROME "
            + "SYSRES_CONST_IMPORTANCE_HIGH "
            + "SYSRES_CONST_IMPORTANCE_LOW "
            + "SYSRES_CONST_IMPORTANCE_NORMAL "
            + "SYSRES_CONST_IN_DESIGN_VERSION_STATE_PICK_VALUE "
            + "SYSRES_CONST_INCOMING_WORK_RULE_TYPE_CODE "
            + "SYSRES_CONST_INT_REQUISITE "
            + "SYSRES_CONST_INT_REQUISITE_TYPE "
            + "SYSRES_CONST_INTEGER_NUMBER_FORMAT_CHAR "
            + "SYSRES_CONST_INTEGER_TYPE_CHAR "
            + "SYSRES_CONST_IS_GENERATED_REQUISITE_NEGATIVE_VALUE "
            + "SYSRES_CONST_IS_PUBLIC_ROLE_REQUISITE_CODE "
            + "SYSRES_CONST_IS_REMOTE_USER_NEGATIVE_VALUE "
            + "SYSRES_CONST_IS_REMOTE_USER_POSITIVE_VALUE "
            + "SYSRES_CONST_IS_STORED_REQUISITE_NEGATIVE_VALUE "
            + "SYSRES_CONST_IS_STORED_REQUISITE_STORED_VALUE "
            + "SYSRES_CONST_ITALIC_LIFE_CYCLE_STAGE_DRAW_STYLE "
            + "SYSRES_CONST_JOB_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_JOB_KIND_CONTROL_JOB "
            + "SYSRES_CONST_JOB_KIND_JOB "
            + "SYSRES_CONST_JOB_KIND_NOTICE "
            + "SYSRES_CONST_JOB_STATE_ABORTED "
            + "SYSRES_CONST_JOB_STATE_COMPLETE "
            + "SYSRES_CONST_JOB_STATE_WORKING "
            + "SYSRES_CONST_KIND_REQUISITE_CODE "
            + "SYSRES_CONST_KIND_REQUISITE_NAME "
            + "SYSRES_CONST_KINDS_CREATE_SHADOW_COPIES_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_DEFAULT_EDOC_LIFE_STAGE_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_EDOC_ALL_TEPLATES_ALLOWED_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_EDOC_ALLOW_LIFE_CYCLE_STAGE_CHANGING_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_EDOC_ALLOW_MULTIPLE_ACTIVE_VERSIONS_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_EDOC_SHARE_ACCES_RIGHTS_BY_DEFAULT_CODE "
            + "SYSRES_CONST_KINDS_EDOC_TEMPLATE_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_EDOC_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_KINDS_SIGNERS_REQUISITES_CODE "
            + "SYSRES_CONST_KOD_INPUT_TYPE "
            + "SYSRES_CONST_LAST_UPDATE_DATE_REQUISITE_CODE "
            + "SYSRES_CONST_LIFE_CYCLE_START_STAGE_REQUISITE_CODE "
            + "SYSRES_CONST_LILAC_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_LINK_OBJECT_KIND_COMPONENT "
            + "SYSRES_CONST_LINK_OBJECT_KIND_DOCUMENT "
            + "SYSRES_CONST_LINK_OBJECT_KIND_EDOC "
            + "SYSRES_CONST_LINK_OBJECT_KIND_FOLDER "
            + "SYSRES_CONST_LINK_OBJECT_KIND_JOB "
            + "SYSRES_CONST_LINK_OBJECT_KIND_REFERENCE "
            + "SYSRES_CONST_LINK_OBJECT_KIND_TASK "
            + "SYSRES_CONST_LINK_REF_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_LIST_REFERENCE_MODE_NAME "
            + "SYSRES_CONST_LOCALIZATION_DICTIONARY_MAIN_VIEW_CODE "
            + "SYSRES_CONST_MAIN_VIEW_CODE "
            + "SYSRES_CONST_MANUAL_ENUM_METHOD_FLAG "
            + "SYSRES_CONST_MASTER_COMP_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_MASTER_TABLE_REC_ID_REQUISITE_CODE "
            + "SYSRES_CONST_MAXIMIZED_MODE_NAME "
            + "SYSRES_CONST_ME_VALUE "
            + "SYSRES_CONST_MESSAGE_ATTENTION_CAPTION "
            + "SYSRES_CONST_MESSAGE_CONFIRMATION_CAPTION "
            + "SYSRES_CONST_MESSAGE_ERROR_CAPTION "
            + "SYSRES_CONST_MESSAGE_INFORMATION_CAPTION "
            + "SYSRES_CONST_MINIMIZED_MODE_NAME "
            + "SYSRES_CONST_MINUTE_CHAR "
            + "SYSRES_CONST_MODULE_REQUISITE_CODE "
            + "SYSRES_CONST_MONITORING_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_MONTH_FORMAT_VALUE "
            + "SYSRES_CONST_NAME_LOCALIZE_ID_REQUISITE_CODE "
            + "SYSRES_CONST_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_NAME_SINGULAR_REQUISITE_CODE "
            + "SYSRES_CONST_NAMEAN_INPUT_TYPE "
            + "SYSRES_CONST_NEGATIVE_PICK_VALUE "
            + "SYSRES_CONST_NEGATIVE_VALUE "
            + "SYSRES_CONST_NO "
            + "SYSRES_CONST_NO_PICK_VALUE "
            + "SYSRES_CONST_NO_SIGNATURE_REQUISITE_CODE "
            + "SYSRES_CONST_NO_VALUE "
            + "SYSRES_CONST_NONE_ACCESS_RIGHTS_TYPE_CODE "
            + "SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE "
            + "SYSRES_CONST_NONOPERATING_RECORD_FLAG_VALUE_MASCULINE "
            + "SYSRES_CONST_NORMAL_ACCESS_RIGHTS_TYPE_CODE "
            + "SYSRES_CONST_NORMAL_LIFE_CYCLE_STAGE_DRAW_STYLE "
            + "SYSRES_CONST_NORMAL_MODE_NAME "
            + "SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_CODE "
            + "SYSRES_CONST_NOT_ALLOWED_ACCESS_TYPE_NAME "
            + "SYSRES_CONST_NOTE_REQUISITE_CODE "
            + "SYSRES_CONST_NOTICE_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_NUM_REQUISITE "
            + "SYSRES_CONST_NUM_STR_REQUISITE_CODE "
            + "SYSRES_CONST_NUMERATION_AUTO_NOT_STRONG "
            + "SYSRES_CONST_NUMERATION_AUTO_STRONG "
            + "SYSRES_CONST_NUMERATION_FROM_DICTONARY "
            + "SYSRES_CONST_NUMERATION_MANUAL "
            + "SYSRES_CONST_NUMERIC_TYPE_CHAR "
            + "SYSRES_CONST_NUMREQ_REQUISITE_CODE "
            + "SYSRES_CONST_OBSOLETE_VERSION_STATE_PICK_VALUE "
            + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE "
            + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_CODE "
            + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_FEMININE "
            + "SYSRES_CONST_OPERATING_RECORD_FLAG_VALUE_MASCULINE "
            + "SYSRES_CONST_OPTIONAL_FORM_COMP_REQCODE_PREFIX "
            + "SYSRES_CONST_ORANGE_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_ORIGINALREF_REQUISITE_CODE "
            + "SYSRES_CONST_OURFIRM_REF_CODE "
            + "SYSRES_CONST_OURFIRM_REQUISITE_CODE "
            + "SYSRES_CONST_OURFIRM_VAR "
            + "SYSRES_CONST_OUTGOING_WORK_RULE_TYPE_CODE "
            + "SYSRES_CONST_PICK_NEGATIVE_RESULT "
            + "SYSRES_CONST_PICK_POSITIVE_RESULT "
            + "SYSRES_CONST_PICK_REQUISITE "
            + "SYSRES_CONST_PICK_REQUISITE_TYPE "
            + "SYSRES_CONST_PICK_TYPE_CHAR "
            + "SYSRES_CONST_PLAN_STATUS_REQUISITE_CODE "
            + "SYSRES_CONST_PLATFORM_VERSION_COMMENT "
            + "SYSRES_CONST_PLUGINS_SETTINGS_DESCRIPTION_REQUISITE_CODE "
            + "SYSRES_CONST_POSITIVE_PICK_VALUE "
            + "SYSRES_CONST_POWER_TO_CREATE_ACTION_CODE "
            + "SYSRES_CONST_POWER_TO_SIGN_ACTION_CODE "
            + "SYSRES_CONST_PRIORITY_REQUISITE_CODE "
            + "SYSRES_CONST_QUALIFIED_TASK_TYPE "
            + "SYSRES_CONST_QUALIFIED_TASK_TYPE_CODE "
            + "SYSRES_CONST_RECSTAT_REQUISITE_CODE "
            + "SYSRES_CONST_RED_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_REF_ID_T_REF_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_REF_REQUISITE "
            + "SYSRES_CONST_REF_REQUISITE_TYPE "
            + "SYSRES_CONST_REF_REQUISITES_REFERENCE_CODE_SELECTED_REQUISITE "
            + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_CREATE_ACTION_CODE "
            + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_DELETE_ACTION_CODE "
            + "SYSRES_CONST_REFERENCE_RECORD_HISTORY_MODIFY_ACTION_CODE "
            + "SYSRES_CONST_REFERENCE_TYPE_CHAR "
            + "SYSRES_CONST_REFERENCE_TYPE_REQUISITE_NAME "
            + "SYSRES_CONST_REFERENCES_ADD_PARAMS_REQUISITE_CODE "
            + "SYSRES_CONST_REFERENCES_DISPLAY_REQUISITE_REQUISITE_CODE "
            + "SYSRES_CONST_REMOTE_SERVER_STATUS_WORKING "
            + "SYSRES_CONST_REMOTE_SERVER_TYPE_MAIN "
            + "SYSRES_CONST_REMOTE_SERVER_TYPE_SECONDARY "
            + "SYSRES_CONST_REMOTE_USER_FLAG_VALUE_CODE "
            + "SYSRES_CONST_REPORT_APP_EDITOR_INTERNAL "
            + "SYSRES_CONST_REPORT_BASE_REPORT_ID_REQUISITE_CODE "
            + "SYSRES_CONST_REPORT_BASE_REPORT_REQUISITE_CODE "
            + "SYSRES_CONST_REPORT_SCRIPT_REQUISITE_CODE "
            + "SYSRES_CONST_REPORT_TEMPLATE_REQUISITE_CODE "
            + "SYSRES_CONST_REPORT_VIEWER_CODE_REQUISITE_CODE "
            + "SYSRES_CONST_REQ_ALLOW_COMPONENT_DEFAULT_VALUE "
            + "SYSRES_CONST_REQ_ALLOW_RECORD_DEFAULT_VALUE "
            + "SYSRES_CONST_REQ_ALLOW_SERVER_COMPONENT_DEFAULT_VALUE "
            + "SYSRES_CONST_REQ_MODE_AVAILABLE_CODE "
            + "SYSRES_CONST_REQ_MODE_EDIT_CODE "
            + "SYSRES_CONST_REQ_MODE_HIDDEN_CODE "
            + "SYSRES_CONST_REQ_MODE_NOT_AVAILABLE_CODE "
            + "SYSRES_CONST_REQ_MODE_VIEW_CODE "
            + "SYSRES_CONST_REQ_NUMBER_REQUISITE_CODE "
            + "SYSRES_CONST_REQ_SECTION_VALUE "
            + "SYSRES_CONST_REQ_TYPE_VALUE "
            + "SYSRES_CONST_REQUISITE_FORMAT_BY_UNIT "
            + "SYSRES_CONST_REQUISITE_FORMAT_DATE_FULL "
            + "SYSRES_CONST_REQUISITE_FORMAT_DATE_TIME "
            + "SYSRES_CONST_REQUISITE_FORMAT_LEFT "
            + "SYSRES_CONST_REQUISITE_FORMAT_RIGHT "
            + "SYSRES_CONST_REQUISITE_FORMAT_WITHOUT_UNIT "
            + "SYSRES_CONST_REQUISITE_NUMBER_REQUISITE_CODE "
            + "SYSRES_CONST_REQUISITE_SECTION_ACTIONS "
            + "SYSRES_CONST_REQUISITE_SECTION_BUTTON "
            + "SYSRES_CONST_REQUISITE_SECTION_BUTTONS "
            + "SYSRES_CONST_REQUISITE_SECTION_CARD "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE10 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE11 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE12 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE13 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE14 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE15 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE16 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE17 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE18 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE19 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE2 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE20 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE21 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE22 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE23 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE24 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE3 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE4 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE5 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE6 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE7 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE8 "
            + "SYSRES_CONST_REQUISITE_SECTION_TABLE9 "
            + "SYSRES_CONST_REQUISITES_PSEUDOREFERENCE_REQUISITE_NUMBER_REQUISITE_CODE "
            + "SYSRES_CONST_RIGHT_ALIGNMENT_CODE "
            + "SYSRES_CONST_ROLES_REFERENCE_CODE "
            + "SYSRES_CONST_ROUTE_STEP_AFTER_RUS "
            + "SYSRES_CONST_ROUTE_STEP_AND_CONDITION_RUS "
            + "SYSRES_CONST_ROUTE_STEP_OR_CONDITION_RUS "
            + "SYSRES_CONST_ROUTE_TYPE_COMPLEX "
            + "SYSRES_CONST_ROUTE_TYPE_PARALLEL "
            + "SYSRES_CONST_ROUTE_TYPE_SERIAL "
            + "SYSRES_CONST_SBDATASETDESC_NEGATIVE_VALUE "
            + "SYSRES_CONST_SBDATASETDESC_POSITIVE_VALUE "
            + "SYSRES_CONST_SBVIEWSDESC_POSITIVE_VALUE "
            + "SYSRES_CONST_SCRIPT_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_SEARCH_BY_TEXT_REQUISITE_CODE "
            + "SYSRES_CONST_SEARCHES_COMPONENT_CONTENT "
            + "SYSRES_CONST_SEARCHES_CRITERIA_ACTION_NAME "
            + "SYSRES_CONST_SEARCHES_EDOC_CONTENT "
            + "SYSRES_CONST_SEARCHES_FOLDER_CONTENT "
            + "SYSRES_CONST_SEARCHES_JOB_CONTENT "
            + "SYSRES_CONST_SEARCHES_REFERENCE_CODE "
            + "SYSRES_CONST_SEARCHES_TASK_CONTENT "
            + "SYSRES_CONST_SECOND_CHAR "
            + "SYSRES_CONST_SECTION_REQUISITE_ACTIONS_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_CARD_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_CODE "
            + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_1_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_2_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_3_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_4_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_5_VALUE "
            + "SYSRES_CONST_SECTION_REQUISITE_DETAIL_6_VALUE "
            + "SYSRES_CONST_SELECT_REFERENCE_MODE_NAME "
            + "SYSRES_CONST_SELECT_TYPE_SELECTABLE "
            + "SYSRES_CONST_SELECT_TYPE_SELECTABLE_ONLY_CHILD "
            + "SYSRES_CONST_SELECT_TYPE_SELECTABLE_WITH_CHILD "
            + "SYSRES_CONST_SELECT_TYPE_UNSLECTABLE "
            + "SYSRES_CONST_SERVER_TYPE_MAIN "
            + "SYSRES_CONST_SERVICE_USER_CATEGORY_FIELD_VALUE "
            + "SYSRES_CONST_SETTINGS_USER_REQUISITE_CODE "
            + "SYSRES_CONST_SIGNATURE_AND_ENCODE_CERTIFICATE_TYPE_CODE "
            + "SYSRES_CONST_SIGNATURE_CERTIFICATE_TYPE_CODE "
            + "SYSRES_CONST_SINGULAR_TITLE_REQUISITE_CODE "
            + "SYSRES_CONST_SQL_SERVER_AUTHENTIFICATION_FLAG_VALUE_CODE "
            + "SYSRES_CONST_SQL_SERVER_ENCODE_AUTHENTIFICATION_FLAG_VALUE_CODE "
            + "SYSRES_CONST_STANDART_ROUTE_REFERENCE_CODE "
            + "SYSRES_CONST_STANDART_ROUTE_REFERENCE_COMMENT_REQUISITE_CODE "
            + "SYSRES_CONST_STANDART_ROUTES_GROUPS_REFERENCE_CODE "
            + "SYSRES_CONST_STATE_REQ_NAME "
            + "SYSRES_CONST_STATE_REQUISITE_ACTIVE_VALUE "
            + "SYSRES_CONST_STATE_REQUISITE_CLOSED_VALUE "
            + "SYSRES_CONST_STATE_REQUISITE_CODE "
            + "SYSRES_CONST_STATIC_ROLE_TYPE_CODE "
            + "SYSRES_CONST_STATUS_PLAN_DEFAULT_VALUE "
            + "SYSRES_CONST_STATUS_VALUE_AUTOCLEANING "
            + "SYSRES_CONST_STATUS_VALUE_BLUE_SQUARE "
            + "SYSRES_CONST_STATUS_VALUE_COMPLETE "
            + "SYSRES_CONST_STATUS_VALUE_GREEN_SQUARE "
            + "SYSRES_CONST_STATUS_VALUE_ORANGE_SQUARE "
            + "SYSRES_CONST_STATUS_VALUE_PURPLE_SQUARE "
            + "SYSRES_CONST_STATUS_VALUE_RED_SQUARE "
            + "SYSRES_CONST_STATUS_VALUE_SUSPEND "
            + "SYSRES_CONST_STATUS_VALUE_YELLOW_SQUARE "
            + "SYSRES_CONST_STDROUTE_SHOW_TO_USERS_REQUISITE_CODE "
            + "SYSRES_CONST_STORAGE_TYPE_FILE "
            + "SYSRES_CONST_STORAGE_TYPE_SQL_SERVER "
            + "SYSRES_CONST_STR_REQUISITE "
            + "SYSRES_CONST_STRIKEOUT_LIFE_CYCLE_STAGE_DRAW_STYLE "
            + "SYSRES_CONST_STRING_FORMAT_LEFT_ALIGN_CHAR "
            + "SYSRES_CONST_STRING_FORMAT_RIGHT_ALIGN_CHAR "
            + "SYSRES_CONST_STRING_REQUISITE_CODE "
            + "SYSRES_CONST_STRING_REQUISITE_TYPE "
            + "SYSRES_CONST_STRING_TYPE_CHAR "
            + "SYSRES_CONST_SUBSTITUTES_PSEUDOREFERENCE_CODE "
            + "SYSRES_CONST_SUBTASK_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_SYSTEM_SETTING_CURRENT_USER_PARAM_VALUE "
            + "SYSRES_CONST_SYSTEM_SETTING_EMPTY_VALUE_PARAM_VALUE "
            + "SYSRES_CONST_SYSTEM_VERSION_COMMENT "
            + "SYSRES_CONST_TASK_ACCESS_TYPE_ALL "
            + "SYSRES_CONST_TASK_ACCESS_TYPE_ALL_MEMBERS "
            + "SYSRES_CONST_TASK_ACCESS_TYPE_MANUAL "
            + "SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION "
            + "SYSRES_CONST_TASK_ENCODE_TYPE_CERTIFICATION_AND_PASSWORD "
            + "SYSRES_CONST_TASK_ENCODE_TYPE_NONE "
            + "SYSRES_CONST_TASK_ENCODE_TYPE_PASSWORD "
            + "SYSRES_CONST_TASK_ROUTE_ALL_CONDITION "
            + "SYSRES_CONST_TASK_ROUTE_AND_CONDITION "
            + "SYSRES_CONST_TASK_ROUTE_OR_CONDITION "
            + "SYSRES_CONST_TASK_STATE_ABORTED "
            + "SYSRES_CONST_TASK_STATE_COMPLETE "
            + "SYSRES_CONST_TASK_STATE_CONTINUED "
            + "SYSRES_CONST_TASK_STATE_CONTROL "
            + "SYSRES_CONST_TASK_STATE_INIT "
            + "SYSRES_CONST_TASK_STATE_WORKING "
            + "SYSRES_CONST_TASK_TITLE "
            + "SYSRES_CONST_TASK_TYPES_GROUPS_REFERENCE_CODE "
            + "SYSRES_CONST_TASK_TYPES_REFERENCE_CODE "
            + "SYSRES_CONST_TEMPLATES_REFERENCE_CODE "
            + "SYSRES_CONST_TEST_DATE_REQUISITE_NAME "
            + "SYSRES_CONST_TEST_DEV_DATABASE_NAME "
            + "SYSRES_CONST_TEST_DEV_SYSTEM_CODE "
            + "SYSRES_CONST_TEST_EDMS_DATABASE_NAME "
            + "SYSRES_CONST_TEST_EDMS_MAIN_CODE "
            + "SYSRES_CONST_TEST_EDMS_MAIN_DB_NAME "
            + "SYSRES_CONST_TEST_EDMS_SECOND_CODE "
            + "SYSRES_CONST_TEST_EDMS_SECOND_DB_NAME "
            + "SYSRES_CONST_TEST_EDMS_SYSTEM_CODE "
            + "SYSRES_CONST_TEST_NUMERIC_REQUISITE_NAME "
            + "SYSRES_CONST_TEXT_REQUISITE "
            + "SYSRES_CONST_TEXT_REQUISITE_CODE "
            + "SYSRES_CONST_TEXT_REQUISITE_TYPE "
            + "SYSRES_CONST_TEXT_TYPE_CHAR "
            + "SYSRES_CONST_TYPE_CODE_REQUISITE_CODE "
            + "SYSRES_CONST_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_UNDEFINED_LIFE_CYCLE_STAGE_FONT_COLOR "
            + "SYSRES_CONST_UNITS_SECTION_ID_REQUISITE_CODE "
            + "SYSRES_CONST_UNITS_SECTION_REQUISITE_CODE "
            + "SYSRES_CONST_UNOPERATING_RECORD_FLAG_VALUE_CODE "
            + "SYSRES_CONST_UNSTORED_DATA_REQUISITE_CODE "
            + "SYSRES_CONST_UNSTORED_DATA_REQUISITE_NAME "
            + "SYSRES_CONST_USE_ACCESS_TYPE_CODE "
            + "SYSRES_CONST_USE_ACCESS_TYPE_NAME "
            + "SYSRES_CONST_USER_ACCOUNT_TYPE_VALUE_CODE "
            + "SYSRES_CONST_USER_ADDITIONAL_INFORMATION_REQUISITE_CODE "
            + "SYSRES_CONST_USER_AND_GROUP_ID_FROM_PSEUDOREFERENCE_REQUISITE_CODE "
            + "SYSRES_CONST_USER_CATEGORY_NORMAL "
            + "SYSRES_CONST_USER_CERTIFICATE_REQUISITE_CODE "
            + "SYSRES_CONST_USER_CERTIFICATE_STATE_REQUISITE_CODE "
            + "SYSRES_CONST_USER_CERTIFICATE_SUBJECT_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_USER_CERTIFICATE_THUMBPRINT_REQUISITE_CODE "
            + "SYSRES_CONST_USER_COMMON_CATEGORY "
            + "SYSRES_CONST_USER_COMMON_CATEGORY_CODE "
            + "SYSRES_CONST_USER_FULL_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_USER_GROUP_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_USER_LOGIN_REQUISITE_CODE "
            + "SYSRES_CONST_USER_REMOTE_CONTROLLER_REQUISITE_CODE "
            + "SYSRES_CONST_USER_REMOTE_SYSTEM_REQUISITE_CODE "
            + "SYSRES_CONST_USER_RIGHTS_T_REQUISITE_CODE "
            + "SYSRES_CONST_USER_SERVER_NAME_REQUISITE_CODE "
            + "SYSRES_CONST_USER_SERVICE_CATEGORY "
            + "SYSRES_CONST_USER_SERVICE_CATEGORY_CODE "
            + "SYSRES_CONST_USER_STATUS_ADMINISTRATOR_CODE "
            + "SYSRES_CONST_USER_STATUS_ADMINISTRATOR_NAME "
            + "SYSRES_CONST_USER_STATUS_DEVELOPER_CODE "
            + "SYSRES_CONST_USER_STATUS_DEVELOPER_NAME "
            + "SYSRES_CONST_USER_STATUS_DISABLED_CODE "
            + "SYSRES_CONST_USER_STATUS_DISABLED_NAME "
            + "SYSRES_CONST_USER_STATUS_SYSTEM_DEVELOPER_CODE "
            + "SYSRES_CONST_USER_STATUS_USER_CODE "
            + "SYSRES_CONST_USER_STATUS_USER_NAME "
            + "SYSRES_CONST_USER_STATUS_USER_NAME_DEPRECATED "
            + "SYSRES_CONST_USER_TYPE_FIELD_VALUE_USER "
            + "SYSRES_CONST_USER_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_CONTROLLER_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_IS_MAIN_SERVER_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_REFERENCE_CODE "
            + "SYSRES_CONST_USERS_REGISTRATION_CERTIFICATES_ACTION_NAME "
            + "SYSRES_CONST_USERS_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_SYSTEM_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_USER_ACCESS_RIGHTS_TYPR_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_USER_AUTHENTICATION_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_USER_COMPONENT_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_USER_GROUP_REQUISITE_CODE "
            + "SYSRES_CONST_USERS_VIEW_CERTIFICATES_ACTION_NAME "
            + "SYSRES_CONST_VIEW_DEFAULT_CODE "
            + "SYSRES_CONST_VIEW_DEFAULT_NAME "
            + "SYSRES_CONST_VIEWER_REQUISITE_CODE "
            + "SYSRES_CONST_WAITING_BLOCK_DESCRIPTION "
            + "SYSRES_CONST_WIZARD_FORM_LABEL_TEST_STRING  "
            + "SYSRES_CONST_WIZARD_QUERY_PARAM_HEIGHT_ETALON_STRING "
            + "SYSRES_CONST_WIZARD_REFERENCE_COMMENT_REQUISITE_CODE "
            + "SYSRES_CONST_WORK_RULES_DESCRIPTION_REQUISITE_CODE "
            + "SYSRES_CONST_WORK_TIME_CALENDAR_REFERENCE_CODE "
            + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE "
            + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE "
            + "SYSRES_CONST_WORK_WORKFLOW_HARD_ROUTE_TYPE_VALUE_CODE_RUS "
            + "SYSRES_CONST_WORK_WORKFLOW_SOFT_ROUTE_TYPE_VALUE_CODE_RUS "
            + "SYSRES_CONST_WORKFLOW_ROUTE_TYPR_HARD "
            + "SYSRES_CONST_WORKFLOW_ROUTE_TYPR_SOFT "
            + "SYSRES_CONST_XML_ENCODING "
            + "SYSRES_CONST_XREC_STAT_REQUISITE_CODE "
            + "SYSRES_CONST_XRECID_FIELD_NAME "
            + "SYSRES_CONST_YES "
            + "SYSRES_CONST_YES_NO_2_REQUISITE_CODE "
            + "SYSRES_CONST_YES_NO_REQUISITE_CODE "
            + "SYSRES_CONST_YES_NO_T_REF_TYPE_REQUISITE_CODE "
            + "SYSRES_CONST_YES_PICK_VALUE "
            + "SYSRES_CONST_YES_VALUE ";
 
          // Base constant
          const base_constants = "CR FALSE nil NO_VALUE NULL TAB TRUE YES_VALUE ";
 
          // Base group name
          const base_group_name_constants =
            "ADMINISTRATORS_GROUP_NAME CUSTOMIZERS_GROUP_NAME DEVELOPERS_GROUP_NAME SERVICE_USERS_GROUP_NAME ";
 
          // Decision block properties
          const decision_block_properties_constants =
            "DECISION_BLOCK_FIRST_OPERAND_PROPERTY DECISION_BLOCK_NAME_PROPERTY DECISION_BLOCK_OPERATION_PROPERTY "
            + "DECISION_BLOCK_RESULT_TYPE_PROPERTY DECISION_BLOCK_SECOND_OPERAND_PROPERTY ";
 
          // File extension
          const file_extension_constants =
            "ANY_FILE_EXTENTION COMPRESSED_DOCUMENT_EXTENSION EXTENDED_DOCUMENT_EXTENSION "
            + "SHORT_COMPRESSED_DOCUMENT_EXTENSION SHORT_EXTENDED_DOCUMENT_EXTENSION ";
 
          // Job block properties
          const job_block_properties_constants =
            "JOB_BLOCK_ABORT_DEADLINE_PROPERTY "
            + "JOB_BLOCK_AFTER_FINISH_EVENT "
            + "JOB_BLOCK_AFTER_QUERY_PARAMETERS_EVENT "
            + "JOB_BLOCK_ATTACHMENT_PROPERTY "
            + "JOB_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
            + "JOB_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
            + "JOB_BLOCK_BEFORE_QUERY_PARAMETERS_EVENT "
            + "JOB_BLOCK_BEFORE_START_EVENT "
            + "JOB_BLOCK_CREATED_JOBS_PROPERTY "
            + "JOB_BLOCK_DEADLINE_PROPERTY "
            + "JOB_BLOCK_EXECUTION_RESULTS_PROPERTY "
            + "JOB_BLOCK_IS_PARALLEL_PROPERTY "
            + "JOB_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY "
            + "JOB_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
            + "JOB_BLOCK_JOB_TEXT_PROPERTY "
            + "JOB_BLOCK_NAME_PROPERTY "
            + "JOB_BLOCK_NEED_SIGN_ON_PERFORM_PROPERTY "
            + "JOB_BLOCK_PERFORMER_PROPERTY "
            + "JOB_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY "
            + "JOB_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
            + "JOB_BLOCK_SUBJECT_PROPERTY ";
 
          // Language code
          const language_code_constants = "ENGLISH_LANGUAGE_CODE RUSSIAN_LANGUAGE_CODE ";
 
          // Launching external applications
          const launching_external_applications_constants =
            "smHidden smMaximized smMinimized smNormal wmNo wmYes ";
 
          // Link kind
          const link_kind_constants =
            "COMPONENT_TOKEN_LINK_KIND "
            + "DOCUMENT_LINK_KIND "
            + "EDOCUMENT_LINK_KIND "
            + "FOLDER_LINK_KIND "
            + "JOB_LINK_KIND "
            + "REFERENCE_LINK_KIND "
            + "TASK_LINK_KIND ";
 
          // Lock type
          const lock_type_constants =
            "COMPONENT_TOKEN_LOCK_TYPE EDOCUMENT_VERSION_LOCK_TYPE ";
 
          // Monitor block properties
          const monitor_block_properties_constants =
            "MONITOR_BLOCK_AFTER_FINISH_EVENT "
            + "MONITOR_BLOCK_BEFORE_START_EVENT "
            + "MONITOR_BLOCK_DEADLINE_PROPERTY "
            + "MONITOR_BLOCK_INTERVAL_PROPERTY "
            + "MONITOR_BLOCK_INTERVAL_TYPE_PROPERTY "
            + "MONITOR_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
            + "MONITOR_BLOCK_NAME_PROPERTY "
            + "MONITOR_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
            + "MONITOR_BLOCK_SEARCH_SCRIPT_PROPERTY ";
 
          // Notice block properties
          const notice_block_properties_constants =
            "NOTICE_BLOCK_AFTER_FINISH_EVENT "
            + "NOTICE_BLOCK_ATTACHMENT_PROPERTY "
            + "NOTICE_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
            + "NOTICE_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
            + "NOTICE_BLOCK_BEFORE_START_EVENT "
            + "NOTICE_BLOCK_CREATED_NOTICES_PROPERTY "
            + "NOTICE_BLOCK_DEADLINE_PROPERTY "
            + "NOTICE_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
            + "NOTICE_BLOCK_NAME_PROPERTY "
            + "NOTICE_BLOCK_NOTICE_TEXT_PROPERTY "
            + "NOTICE_BLOCK_PERFORMER_PROPERTY "
            + "NOTICE_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
            + "NOTICE_BLOCK_SUBJECT_PROPERTY ";
 
          // Object events
          const object_events_constants =
            "dseAfterCancel "
            + "dseAfterClose "
            + "dseAfterDelete "
            + "dseAfterDeleteOutOfTransaction "
            + "dseAfterInsert "
            + "dseAfterOpen "
            + "dseAfterScroll "
            + "dseAfterUpdate "
            + "dseAfterUpdateOutOfTransaction "
            + "dseBeforeCancel "
            + "dseBeforeClose "
            + "dseBeforeDelete "
            + "dseBeforeDetailUpdate "
            + "dseBeforeInsert "
            + "dseBeforeOpen "
            + "dseBeforeUpdate "
            + "dseOnAnyRequisiteChange "
            + "dseOnCloseRecord "
            + "dseOnDeleteError "
            + "dseOnOpenRecord "
            + "dseOnPrepareUpdate "
            + "dseOnUpdateError "
            + "dseOnUpdateRatifiedRecord "
            + "dseOnValidDelete "
            + "dseOnValidUpdate "
            + "reOnChange "
            + "reOnChangeValues "
            + "SELECTION_BEGIN_ROUTE_EVENT "
            + "SELECTION_END_ROUTE_EVENT ";
 
          // Object params
          const object_params_constants =
            "CURRENT_PERIOD_IS_REQUIRED "
            + "PREVIOUS_CARD_TYPE_NAME "
            + "SHOW_RECORD_PROPERTIES_FORM ";
 
          // Other
          const other_constants =
            "ACCESS_RIGHTS_SETTING_DIALOG_CODE "
            + "ADMINISTRATOR_USER_CODE "
            + "ANALYTIC_REPORT_TYPE "
            + "asrtHideLocal "
            + "asrtHideRemote "
            + "CALCULATED_ROLE_TYPE_CODE "
            + "COMPONENTS_REFERENCE_DEVELOPER_VIEW_CODE "
            + "DCTS_TEST_PROTOCOLS_FOLDER_PATH "
            + "E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED "
            + "E_EDOC_VERSION_ALREADY_APPROVINGLY_SIGNED_BY_USER "
            + "E_EDOC_VERSION_ALREDY_SIGNED "
            + "E_EDOC_VERSION_ALREDY_SIGNED_BY_USER "
            + "EDOC_TYPES_CODE_REQUISITE_FIELD_NAME "
            + "EDOCUMENTS_ALIAS_NAME "
            + "FILES_FOLDER_PATH "
            + "FILTER_OPERANDS_DELIMITER "
            + "FILTER_OPERATIONS_DELIMITER "
            + "FORMCARD_NAME "
            + "FORMLIST_NAME "
            + "GET_EXTENDED_DOCUMENT_EXTENSION_CREATION_MODE "
            + "GET_EXTENDED_DOCUMENT_EXTENSION_IMPORT_MODE "
            + "INTEGRATED_REPORT_TYPE "
            + "IS_BUILDER_APPLICATION_ROLE "
            + "IS_BUILDER_APPLICATION_ROLE2 "
            + "IS_BUILDER_USERS "
            + "ISBSYSDEV "
            + "LOG_FOLDER_PATH "
            + "mbCancel "
            + "mbNo "
            + "mbNoToAll "
            + "mbOK "
            + "mbYes "
            + "mbYesToAll "
            + "MEMORY_DATASET_DESRIPTIONS_FILENAME "
            + "mrNo "
            + "mrNoToAll "
            + "mrYes "
            + "mrYesToAll "
            + "MULTIPLE_SELECT_DIALOG_CODE "
            + "NONOPERATING_RECORD_FLAG_FEMININE "
            + "NONOPERATING_RECORD_FLAG_MASCULINE "
            + "OPERATING_RECORD_FLAG_FEMININE "
            + "OPERATING_RECORD_FLAG_MASCULINE "
            + "PROFILING_SETTINGS_COMMON_SETTINGS_CODE_VALUE "
            + "PROGRAM_INITIATED_LOOKUP_ACTION "
            + "ratDelete "
            + "ratEdit "
            + "ratInsert "
            + "REPORT_TYPE "
            + "REQUIRED_PICK_VALUES_VARIABLE "
            + "rmCard "
            + "rmList "
            + "SBRTE_PROGID_DEV "
            + "SBRTE_PROGID_RELEASE "
            + "STATIC_ROLE_TYPE_CODE "
            + "SUPPRESS_EMPTY_TEMPLATE_CREATION "
            + "SYSTEM_USER_CODE "
            + "UPDATE_DIALOG_DATASET "
            + "USED_IN_OBJECT_HINT_PARAM "
            + "USER_INITIATED_LOOKUP_ACTION "
            + "USER_NAME_FORMAT "
            + "USER_SELECTION_RESTRICTIONS "
            + "WORKFLOW_TEST_PROTOCOLS_FOLDER_PATH "
            + "ELS_SUBTYPE_CONTROL_NAME "
            + "ELS_FOLDER_KIND_CONTROL_NAME "
            + "REPEAT_PROCESS_CURRENT_OBJECT_EXCEPTION_NAME ";
 
          // Privileges
          const privileges_constants =
            "PRIVILEGE_COMPONENT_FULL_ACCESS "
            + "PRIVILEGE_DEVELOPMENT_EXPORT "
            + "PRIVILEGE_DEVELOPMENT_IMPORT "
            + "PRIVILEGE_DOCUMENT_DELETE "
            + "PRIVILEGE_ESD "
            + "PRIVILEGE_FOLDER_DELETE "
            + "PRIVILEGE_MANAGE_ACCESS_RIGHTS "
            + "PRIVILEGE_MANAGE_REPLICATION "
            + "PRIVILEGE_MANAGE_SESSION_SERVER "
            + "PRIVILEGE_OBJECT_FULL_ACCESS "
            + "PRIVILEGE_OBJECT_VIEW "
            + "PRIVILEGE_RESERVE_LICENSE "
            + "PRIVILEGE_SYSTEM_CUSTOMIZE "
            + "PRIVILEGE_SYSTEM_DEVELOP "
            + "PRIVILEGE_SYSTEM_INSTALL "
            + "PRIVILEGE_TASK_DELETE "
            + "PRIVILEGE_USER_PLUGIN_SETTINGS_CUSTOMIZE "
            + "PRIVILEGES_PSEUDOREFERENCE_CODE ";
 
          // Pseudoreference code
          const pseudoreference_code_constants =
            "ACCESS_TYPES_PSEUDOREFERENCE_CODE "
            + "ALL_AVAILABLE_COMPONENTS_PSEUDOREFERENCE_CODE "
            + "ALL_AVAILABLE_PRIVILEGES_PSEUDOREFERENCE_CODE "
            + "ALL_REPLICATE_COMPONENTS_PSEUDOREFERENCE_CODE "
            + "AVAILABLE_DEVELOPERS_COMPONENTS_PSEUDOREFERENCE_CODE "
            + "COMPONENTS_PSEUDOREFERENCE_CODE "
            + "FILTRATER_SETTINGS_CONFLICTS_PSEUDOREFERENCE_CODE "
            + "GROUPS_PSEUDOREFERENCE_CODE "
            + "RECEIVE_PROTOCOL_PSEUDOREFERENCE_CODE "
            + "REFERENCE_REQUISITE_PSEUDOREFERENCE_CODE "
            + "REFERENCE_REQUISITES_PSEUDOREFERENCE_CODE "
            + "REFTYPES_PSEUDOREFERENCE_CODE "
            + "REPLICATION_SEANCES_DIARY_PSEUDOREFERENCE_CODE "
            + "SEND_PROTOCOL_PSEUDOREFERENCE_CODE "
            + "SUBSTITUTES_PSEUDOREFERENCE_CODE "
            + "SYSTEM_SETTINGS_PSEUDOREFERENCE_CODE "
            + "UNITS_PSEUDOREFERENCE_CODE "
            + "USERS_PSEUDOREFERENCE_CODE "
            + "VIEWERS_PSEUDOREFERENCE_CODE ";
 
          // Requisite ISBCertificateType values
          const requisite_ISBCertificateType_values_constants =
            "CERTIFICATE_TYPE_ENCRYPT "
            + "CERTIFICATE_TYPE_SIGN "
            + "CERTIFICATE_TYPE_SIGN_AND_ENCRYPT ";
 
          // Requisite ISBEDocStorageType values
          const requisite_ISBEDocStorageType_values_constants =
            "STORAGE_TYPE_FILE "
            + "STORAGE_TYPE_NAS_CIFS "
            + "STORAGE_TYPE_SAPERION "
            + "STORAGE_TYPE_SQL_SERVER ";
 
          // Requisite CompType2 values
          const requisite_compType2_values_constants =
            "COMPTYPE2_REQUISITE_DOCUMENTS_VALUE "
            + "COMPTYPE2_REQUISITE_TASKS_VALUE "
            + "COMPTYPE2_REQUISITE_FOLDERS_VALUE "
            + "COMPTYPE2_REQUISITE_REFERENCES_VALUE ";
 
          // Requisite name
          const requisite_name_constants =
            "SYSREQ_CODE "
            + "SYSREQ_COMPTYPE2 "
            + "SYSREQ_CONST_AVAILABLE_FOR_WEB "
            + "SYSREQ_CONST_COMMON_CODE "
            + "SYSREQ_CONST_COMMON_VALUE "
            + "SYSREQ_CONST_FIRM_CODE "
            + "SYSREQ_CONST_FIRM_STATUS "
            + "SYSREQ_CONST_FIRM_VALUE "
            + "SYSREQ_CONST_SERVER_STATUS "
            + "SYSREQ_CONTENTS "
            + "SYSREQ_DATE_OPEN "
            + "SYSREQ_DATE_CLOSE "
            + "SYSREQ_DESCRIPTION "
            + "SYSREQ_DESCRIPTION_LOCALIZE_ID "
            + "SYSREQ_DOUBLE "
            + "SYSREQ_EDOC_ACCESS_TYPE "
            + "SYSREQ_EDOC_AUTHOR "
            + "SYSREQ_EDOC_CREATED "
            + "SYSREQ_EDOC_DELEGATE_RIGHTS_REQUISITE_CODE "
            + "SYSREQ_EDOC_EDITOR "
            + "SYSREQ_EDOC_ENCODE_TYPE "
            + "SYSREQ_EDOC_ENCRYPTION_PLUGIN_NAME "
            + "SYSREQ_EDOC_ENCRYPTION_PLUGIN_VERSION "
            + "SYSREQ_EDOC_EXPORT_DATE "
            + "SYSREQ_EDOC_EXPORTER "
            + "SYSREQ_EDOC_KIND "
            + "SYSREQ_EDOC_LIFE_STAGE_NAME "
            + "SYSREQ_EDOC_LOCKED_FOR_SERVER_CODE "
            + "SYSREQ_EDOC_MODIFIED "
            + "SYSREQ_EDOC_NAME "
            + "SYSREQ_EDOC_NOTE "
            + "SYSREQ_EDOC_QUALIFIED_ID "
            + "SYSREQ_EDOC_SESSION_KEY "
            + "SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_NAME "
            + "SYSREQ_EDOC_SESSION_KEY_ENCRYPTION_PLUGIN_VERSION "
            + "SYSREQ_EDOC_SIGNATURE_TYPE "
            + "SYSREQ_EDOC_SIGNED "
            + "SYSREQ_EDOC_STORAGE "
            + "SYSREQ_EDOC_STORAGES_ARCHIVE_STORAGE "
            + "SYSREQ_EDOC_STORAGES_CHECK_RIGHTS "
            + "SYSREQ_EDOC_STORAGES_COMPUTER_NAME "
            + "SYSREQ_EDOC_STORAGES_EDIT_IN_STORAGE "
            + "SYSREQ_EDOC_STORAGES_EXECUTIVE_STORAGE "
            + "SYSREQ_EDOC_STORAGES_FUNCTION "
            + "SYSREQ_EDOC_STORAGES_INITIALIZED "
            + "SYSREQ_EDOC_STORAGES_LOCAL_PATH "
            + "SYSREQ_EDOC_STORAGES_SAPERION_DATABASE_NAME "
            + "SYSREQ_EDOC_STORAGES_SEARCH_BY_TEXT "
            + "SYSREQ_EDOC_STORAGES_SERVER_NAME "
            + "SYSREQ_EDOC_STORAGES_SHARED_SOURCE_NAME "
            + "SYSREQ_EDOC_STORAGES_TYPE "
            + "SYSREQ_EDOC_TEXT_MODIFIED "
            + "SYSREQ_EDOC_TYPE_ACT_CODE "
            + "SYSREQ_EDOC_TYPE_ACT_DESCRIPTION "
            + "SYSREQ_EDOC_TYPE_ACT_DESCRIPTION_LOCALIZE_ID "
            + "SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE "
            + "SYSREQ_EDOC_TYPE_ACT_ON_EXECUTE_EXISTS "
            + "SYSREQ_EDOC_TYPE_ACT_SECTION "
            + "SYSREQ_EDOC_TYPE_ADD_PARAMS "
            + "SYSREQ_EDOC_TYPE_COMMENT "
            + "SYSREQ_EDOC_TYPE_EVENT_TEXT "
            + "SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR "
            + "SYSREQ_EDOC_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID "
            + "SYSREQ_EDOC_TYPE_NAME_LOCALIZE_ID "
            + "SYSREQ_EDOC_TYPE_NUMERATION_METHOD "
            + "SYSREQ_EDOC_TYPE_PSEUDO_REQUISITE_CODE "
            + "SYSREQ_EDOC_TYPE_REQ_CODE "
            + "SYSREQ_EDOC_TYPE_REQ_DESCRIPTION "
            + "SYSREQ_EDOC_TYPE_REQ_DESCRIPTION_LOCALIZE_ID "
            + "SYSREQ_EDOC_TYPE_REQ_IS_LEADING "
            + "SYSREQ_EDOC_TYPE_REQ_IS_REQUIRED "
            + "SYSREQ_EDOC_TYPE_REQ_NUMBER "
            + "SYSREQ_EDOC_TYPE_REQ_ON_CHANGE "
            + "SYSREQ_EDOC_TYPE_REQ_ON_CHANGE_EXISTS "
            + "SYSREQ_EDOC_TYPE_REQ_ON_SELECT "
            + "SYSREQ_EDOC_TYPE_REQ_ON_SELECT_KIND "
            + "SYSREQ_EDOC_TYPE_REQ_SECTION "
            + "SYSREQ_EDOC_TYPE_VIEW_CARD "
            + "SYSREQ_EDOC_TYPE_VIEW_CODE "
            + "SYSREQ_EDOC_TYPE_VIEW_COMMENT "
            + "SYSREQ_EDOC_TYPE_VIEW_IS_MAIN "
            + "SYSREQ_EDOC_TYPE_VIEW_NAME "
            + "SYSREQ_EDOC_TYPE_VIEW_NAME_LOCALIZE_ID "
            + "SYSREQ_EDOC_VERSION_AUTHOR "
            + "SYSREQ_EDOC_VERSION_CRC "
            + "SYSREQ_EDOC_VERSION_DATA "
            + "SYSREQ_EDOC_VERSION_EDITOR "
            + "SYSREQ_EDOC_VERSION_EXPORT_DATE "
            + "SYSREQ_EDOC_VERSION_EXPORTER "
            + "SYSREQ_EDOC_VERSION_HIDDEN "
            + "SYSREQ_EDOC_VERSION_LIFE_STAGE "
            + "SYSREQ_EDOC_VERSION_MODIFIED "
            + "SYSREQ_EDOC_VERSION_NOTE "
            + "SYSREQ_EDOC_VERSION_SIGNATURE_TYPE "
            + "SYSREQ_EDOC_VERSION_SIGNED "
            + "SYSREQ_EDOC_VERSION_SIZE "
            + "SYSREQ_EDOC_VERSION_SOURCE "
            + "SYSREQ_EDOC_VERSION_TEXT_MODIFIED "
            + "SYSREQ_EDOCKIND_DEFAULT_VERSION_STATE_CODE "
            + "SYSREQ_FOLDER_KIND "
            + "SYSREQ_FUNC_CATEGORY "
            + "SYSREQ_FUNC_COMMENT "
            + "SYSREQ_FUNC_GROUP "
            + "SYSREQ_FUNC_GROUP_COMMENT "
            + "SYSREQ_FUNC_GROUP_NUMBER "
            + "SYSREQ_FUNC_HELP "
            + "SYSREQ_FUNC_PARAM_DEF_VALUE "
            + "SYSREQ_FUNC_PARAM_IDENT "
            + "SYSREQ_FUNC_PARAM_NUMBER "
            + "SYSREQ_FUNC_PARAM_TYPE "
            + "SYSREQ_FUNC_TEXT "
            + "SYSREQ_GROUP_CATEGORY "
            + "SYSREQ_ID "
            + "SYSREQ_LAST_UPDATE "
            + "SYSREQ_LEADER_REFERENCE "
            + "SYSREQ_LINE_NUMBER "
            + "SYSREQ_MAIN_RECORD_ID "
            + "SYSREQ_NAME "
            + "SYSREQ_NAME_LOCALIZE_ID "
            + "SYSREQ_NOTE "
            + "SYSREQ_ORIGINAL_RECORD "
            + "SYSREQ_OUR_FIRM "
            + "SYSREQ_PROFILING_SETTINGS_BATCH_LOGING "
            + "SYSREQ_PROFILING_SETTINGS_BATCH_SIZE "
            + "SYSREQ_PROFILING_SETTINGS_PROFILING_ENABLED "
            + "SYSREQ_PROFILING_SETTINGS_SQL_PROFILING_ENABLED "
            + "SYSREQ_PROFILING_SETTINGS_START_LOGGED "
            + "SYSREQ_RECORD_STATUS "
            + "SYSREQ_REF_REQ_FIELD_NAME "
            + "SYSREQ_REF_REQ_FORMAT "
            + "SYSREQ_REF_REQ_GENERATED "
            + "SYSREQ_REF_REQ_LENGTH "
            + "SYSREQ_REF_REQ_PRECISION "
            + "SYSREQ_REF_REQ_REFERENCE "
            + "SYSREQ_REF_REQ_SECTION "
            + "SYSREQ_REF_REQ_STORED "
            + "SYSREQ_REF_REQ_TOKENS "
            + "SYSREQ_REF_REQ_TYPE "
            + "SYSREQ_REF_REQ_VIEW "
            + "SYSREQ_REF_TYPE_ACT_CODE "
            + "SYSREQ_REF_TYPE_ACT_DESCRIPTION "
            + "SYSREQ_REF_TYPE_ACT_DESCRIPTION_LOCALIZE_ID "
            + "SYSREQ_REF_TYPE_ACT_ON_EXECUTE "
            + "SYSREQ_REF_TYPE_ACT_ON_EXECUTE_EXISTS "
            + "SYSREQ_REF_TYPE_ACT_SECTION "
            + "SYSREQ_REF_TYPE_ADD_PARAMS "
            + "SYSREQ_REF_TYPE_COMMENT "
            + "SYSREQ_REF_TYPE_COMMON_SETTINGS "
            + "SYSREQ_REF_TYPE_DISPLAY_REQUISITE_NAME "
            + "SYSREQ_REF_TYPE_EVENT_TEXT "
            + "SYSREQ_REF_TYPE_MAIN_LEADING_REF "
            + "SYSREQ_REF_TYPE_NAME_IN_SINGULAR "
            + "SYSREQ_REF_TYPE_NAME_IN_SINGULAR_LOCALIZE_ID "
            + "SYSREQ_REF_TYPE_NAME_LOCALIZE_ID "
            + "SYSREQ_REF_TYPE_NUMERATION_METHOD "
            + "SYSREQ_REF_TYPE_REQ_CODE "
            + "SYSREQ_REF_TYPE_REQ_DESCRIPTION "
            + "SYSREQ_REF_TYPE_REQ_DESCRIPTION_LOCALIZE_ID "
            + "SYSREQ_REF_TYPE_REQ_IS_CONTROL "
            + "SYSREQ_REF_TYPE_REQ_IS_FILTER "
            + "SYSREQ_REF_TYPE_REQ_IS_LEADING "
            + "SYSREQ_REF_TYPE_REQ_IS_REQUIRED "
            + "SYSREQ_REF_TYPE_REQ_NUMBER "
            + "SYSREQ_REF_TYPE_REQ_ON_CHANGE "
            + "SYSREQ_REF_TYPE_REQ_ON_CHANGE_EXISTS "
            + "SYSREQ_REF_TYPE_REQ_ON_SELECT "
            + "SYSREQ_REF_TYPE_REQ_ON_SELECT_KIND "
            + "SYSREQ_REF_TYPE_REQ_SECTION "
            + "SYSREQ_REF_TYPE_VIEW_CARD "
            + "SYSREQ_REF_TYPE_VIEW_CODE "
            + "SYSREQ_REF_TYPE_VIEW_COMMENT "
            + "SYSREQ_REF_TYPE_VIEW_IS_MAIN "
            + "SYSREQ_REF_TYPE_VIEW_NAME "
            + "SYSREQ_REF_TYPE_VIEW_NAME_LOCALIZE_ID "
            + "SYSREQ_REFERENCE_TYPE_ID "
            + "SYSREQ_STATE "
            + "SYSREQ_STATЕ "
            + "SYSREQ_SYSTEM_SETTINGS_VALUE "
            + "SYSREQ_TYPE "
            + "SYSREQ_UNIT "
            + "SYSREQ_UNIT_ID "
            + "SYSREQ_USER_GROUPS_GROUP_FULL_NAME "
            + "SYSREQ_USER_GROUPS_GROUP_NAME "
            + "SYSREQ_USER_GROUPS_GROUP_SERVER_NAME "
            + "SYSREQ_USERS_ACCESS_RIGHTS "
            + "SYSREQ_USERS_AUTHENTICATION "
            + "SYSREQ_USERS_CATEGORY "
            + "SYSREQ_USERS_COMPONENT "
            + "SYSREQ_USERS_COMPONENT_USER_IS_PUBLIC "
            + "SYSREQ_USERS_DOMAIN "
            + "SYSREQ_USERS_FULL_USER_NAME "
            + "SYSREQ_USERS_GROUP "
            + "SYSREQ_USERS_IS_MAIN_SERVER "
            + "SYSREQ_USERS_LOGIN "
            + "SYSREQ_USERS_REFERENCE_USER_IS_PUBLIC "
            + "SYSREQ_USERS_STATUS "
            + "SYSREQ_USERS_USER_CERTIFICATE "
            + "SYSREQ_USERS_USER_CERTIFICATE_INFO "
            + "SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_NAME "
            + "SYSREQ_USERS_USER_CERTIFICATE_PLUGIN_VERSION "
            + "SYSREQ_USERS_USER_CERTIFICATE_STATE "
            + "SYSREQ_USERS_USER_CERTIFICATE_SUBJECT_NAME "
            + "SYSREQ_USERS_USER_CERTIFICATE_THUMBPRINT "
            + "SYSREQ_USERS_USER_DEFAULT_CERTIFICATE "
            + "SYSREQ_USERS_USER_DESCRIPTION "
            + "SYSREQ_USERS_USER_GLOBAL_NAME "
            + "SYSREQ_USERS_USER_LOGIN "
            + "SYSREQ_USERS_USER_MAIN_SERVER "
            + "SYSREQ_USERS_USER_TYPE "
            + "SYSREQ_WORK_RULES_FOLDER_ID ";
 
          // Result
          const result_constants = "RESULT_VAR_NAME RESULT_VAR_NAME_ENG ";
 
          // Rule identification
          const rule_identification_constants =
            "AUTO_NUMERATION_RULE_ID "
            + "CANT_CHANGE_ID_REQUISITE_RULE_ID "
            + "CANT_CHANGE_OURFIRM_REQUISITE_RULE_ID "
            + "CHECK_CHANGING_REFERENCE_RECORD_USE_RULE_ID "
            + "CHECK_CODE_REQUISITE_RULE_ID "
            + "CHECK_DELETING_REFERENCE_RECORD_USE_RULE_ID "
            + "CHECK_FILTRATER_CHANGES_RULE_ID "
            + "CHECK_RECORD_INTERVAL_RULE_ID "
            + "CHECK_REFERENCE_INTERVAL_RULE_ID "
            + "CHECK_REQUIRED_DATA_FULLNESS_RULE_ID "
            + "CHECK_REQUIRED_REQUISITES_FULLNESS_RULE_ID "
            + "MAKE_RECORD_UNRATIFIED_RULE_ID "
            + "RESTORE_AUTO_NUMERATION_RULE_ID "
            + "SET_FIRM_CONTEXT_FROM_RECORD_RULE_ID "
            + "SET_FIRST_RECORD_IN_LIST_FORM_RULE_ID "
            + "SET_IDSPS_VALUE_RULE_ID "
            + "SET_NEXT_CODE_VALUE_RULE_ID "
            + "SET_OURFIRM_BOUNDS_RULE_ID "
            + "SET_OURFIRM_REQUISITE_RULE_ID ";
 
          // Script block properties
          const script_block_properties_constants =
            "SCRIPT_BLOCK_AFTER_FINISH_EVENT "
            + "SCRIPT_BLOCK_BEFORE_START_EVENT "
            + "SCRIPT_BLOCK_EXECUTION_RESULTS_PROPERTY "
            + "SCRIPT_BLOCK_NAME_PROPERTY "
            + "SCRIPT_BLOCK_SCRIPT_PROPERTY ";
 
          // Subtask block properties
          const subtask_block_properties_constants =
            "SUBTASK_BLOCK_ABORT_DEADLINE_PROPERTY "
            + "SUBTASK_BLOCK_AFTER_FINISH_EVENT "
            + "SUBTASK_BLOCK_ASSIGN_PARAMS_EVENT "
            + "SUBTASK_BLOCK_ATTACHMENTS_PROPERTY "
            + "SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_GROUP_PROPERTY "
            + "SUBTASK_BLOCK_ATTACHMENTS_RIGHTS_TYPE_PROPERTY "
            + "SUBTASK_BLOCK_BEFORE_START_EVENT "
            + "SUBTASK_BLOCK_CREATED_TASK_PROPERTY "
            + "SUBTASK_BLOCK_CREATION_EVENT "
            + "SUBTASK_BLOCK_DEADLINE_PROPERTY "
            + "SUBTASK_BLOCK_IMPORTANCE_PROPERTY "
            + "SUBTASK_BLOCK_INITIATOR_PROPERTY "
            + "SUBTASK_BLOCK_IS_RELATIVE_ABORT_DEADLINE_PROPERTY "
            + "SUBTASK_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
            + "SUBTASK_BLOCK_JOBS_TYPE_PROPERTY "
            + "SUBTASK_BLOCK_NAME_PROPERTY "
            + "SUBTASK_BLOCK_PARALLEL_ROUTE_PROPERTY "
            + "SUBTASK_BLOCK_PERFORMERS_PROPERTY "
            + "SUBTASK_BLOCK_RELATIVE_ABORT_DEADLINE_TYPE_PROPERTY "
            + "SUBTASK_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY "
            + "SUBTASK_BLOCK_REQUIRE_SIGN_PROPERTY "
            + "SUBTASK_BLOCK_STANDARD_ROUTE_PROPERTY "
            + "SUBTASK_BLOCK_START_EVENT "
            + "SUBTASK_BLOCK_STEP_CONTROL_PROPERTY "
            + "SUBTASK_BLOCK_SUBJECT_PROPERTY "
            + "SUBTASK_BLOCK_TASK_CONTROL_PROPERTY "
            + "SUBTASK_BLOCK_TEXT_PROPERTY "
            + "SUBTASK_BLOCK_UNLOCK_ATTACHMENTS_ON_STOP_PROPERTY "
            + "SUBTASK_BLOCK_USE_STANDARD_ROUTE_PROPERTY "
            + "SUBTASK_BLOCK_WAIT_FOR_TASK_COMPLETE_PROPERTY ";
 
          // System component
          const system_component_constants =
            "SYSCOMP_CONTROL_JOBS "
            + "SYSCOMP_FOLDERS "
            + "SYSCOMP_JOBS "
            + "SYSCOMP_NOTICES "
            + "SYSCOMP_TASKS ";
 
          // System dialogs
          const system_dialogs_constants =
            "SYSDLG_CREATE_EDOCUMENT "
            + "SYSDLG_CREATE_EDOCUMENT_VERSION "
            + "SYSDLG_CURRENT_PERIOD "
            + "SYSDLG_EDIT_FUNCTION_HELP "
            + "SYSDLG_EDOCUMENT_KINDS_FOR_TEMPLATE "
            + "SYSDLG_EXPORT_MULTIPLE_EDOCUMENTS "
            + "SYSDLG_EXPORT_SINGLE_EDOCUMENT "
            + "SYSDLG_IMPORT_EDOCUMENT "
            + "SYSDLG_MULTIPLE_SELECT "
            + "SYSDLG_SETUP_ACCESS_RIGHTS "
            + "SYSDLG_SETUP_DEFAULT_RIGHTS "
            + "SYSDLG_SETUP_FILTER_CONDITION "
            + "SYSDLG_SETUP_SIGN_RIGHTS "
            + "SYSDLG_SETUP_TASK_OBSERVERS "
            + "SYSDLG_SETUP_TASK_ROUTE "
            + "SYSDLG_SETUP_USERS_LIST "
            + "SYSDLG_SIGN_EDOCUMENT "
            + "SYSDLG_SIGN_MULTIPLE_EDOCUMENTS ";
 
          // System reference names
          const system_reference_names_constants =
            "SYSREF_ACCESS_RIGHTS_TYPES "
            + "SYSREF_ADMINISTRATION_HISTORY "
            + "SYSREF_ALL_AVAILABLE_COMPONENTS "
            + "SYSREF_ALL_AVAILABLE_PRIVILEGES "
            + "SYSREF_ALL_REPLICATING_COMPONENTS "
            + "SYSREF_AVAILABLE_DEVELOPERS_COMPONENTS "
            + "SYSREF_CALENDAR_EVENTS "
            + "SYSREF_COMPONENT_TOKEN_HISTORY "
            + "SYSREF_COMPONENT_TOKENS "
            + "SYSREF_COMPONENTS "
            + "SYSREF_CONSTANTS "
            + "SYSREF_DATA_RECEIVE_PROTOCOL "
            + "SYSREF_DATA_SEND_PROTOCOL "
            + "SYSREF_DIALOGS "
            + "SYSREF_DIALOGS_REQUISITES "
            + "SYSREF_EDITORS "
            + "SYSREF_EDOC_CARDS "
            + "SYSREF_EDOC_TYPES "
            + "SYSREF_EDOCUMENT_CARD_REQUISITES "
            + "SYSREF_EDOCUMENT_CARD_TYPES "
            + "SYSREF_EDOCUMENT_CARD_TYPES_REFERENCE "
            + "SYSREF_EDOCUMENT_CARDS "
            + "SYSREF_EDOCUMENT_HISTORY "
            + "SYSREF_EDOCUMENT_KINDS "
            + "SYSREF_EDOCUMENT_REQUISITES "
            + "SYSREF_EDOCUMENT_SIGNATURES "
            + "SYSREF_EDOCUMENT_TEMPLATES "
            + "SYSREF_EDOCUMENT_TEXT_STORAGES "
            + "SYSREF_EDOCUMENT_VIEWS "
            + "SYSREF_FILTERER_SETUP_CONFLICTS "
            + "SYSREF_FILTRATER_SETTING_CONFLICTS "
            + "SYSREF_FOLDER_HISTORY "
            + "SYSREF_FOLDERS "
            + "SYSREF_FUNCTION_GROUPS "
            + "SYSREF_FUNCTION_PARAMS "
            + "SYSREF_FUNCTIONS "
            + "SYSREF_JOB_HISTORY "
            + "SYSREF_LINKS "
            + "SYSREF_LOCALIZATION_DICTIONARY "
            + "SYSREF_LOCALIZATION_LANGUAGES "
            + "SYSREF_MODULES "
            + "SYSREF_PRIVILEGES "
            + "SYSREF_RECORD_HISTORY "
            + "SYSREF_REFERENCE_REQUISITES "
            + "SYSREF_REFERENCE_TYPE_VIEWS "
            + "SYSREF_REFERENCE_TYPES "
            + "SYSREF_REFERENCES "
            + "SYSREF_REFERENCES_REQUISITES "
            + "SYSREF_REMOTE_SERVERS "
            + "SYSREF_REPLICATION_SESSIONS_LOG "
            + "SYSREF_REPLICATION_SESSIONS_PROTOCOL "
            + "SYSREF_REPORTS "
            + "SYSREF_ROLES "
            + "SYSREF_ROUTE_BLOCK_GROUPS "
            + "SYSREF_ROUTE_BLOCKS "
            + "SYSREF_SCRIPTS "
            + "SYSREF_SEARCHES "
            + "SYSREF_SERVER_EVENTS "
            + "SYSREF_SERVER_EVENTS_HISTORY "
            + "SYSREF_STANDARD_ROUTE_GROUPS "
            + "SYSREF_STANDARD_ROUTES "
            + "SYSREF_STATUSES "
            + "SYSREF_SYSTEM_SETTINGS "
            + "SYSREF_TASK_HISTORY "
            + "SYSREF_TASK_KIND_GROUPS "
            + "SYSREF_TASK_KINDS "
            + "SYSREF_TASK_RIGHTS "
            + "SYSREF_TASK_SIGNATURES "
            + "SYSREF_TASKS "
            + "SYSREF_UNITS "
            + "SYSREF_USER_GROUPS "
            + "SYSREF_USER_GROUPS_REFERENCE "
            + "SYSREF_USER_SUBSTITUTION "
            + "SYSREF_USERS "
            + "SYSREF_USERS_REFERENCE "
            + "SYSREF_VIEWERS "
            + "SYSREF_WORKING_TIME_CALENDARS ";
 
          // Table name
          const table_name_constants =
            "ACCESS_RIGHTS_TABLE_NAME "
            + "EDMS_ACCESS_TABLE_NAME "
            + "EDOC_TYPES_TABLE_NAME ";
 
          // Test
          const test_constants =
            "TEST_DEV_DB_NAME "
            + "TEST_DEV_SYSTEM_CODE "
            + "TEST_EDMS_DB_NAME "
            + "TEST_EDMS_MAIN_CODE "
            + "TEST_EDMS_MAIN_DB_NAME "
            + "TEST_EDMS_SECOND_CODE "
            + "TEST_EDMS_SECOND_DB_NAME "
            + "TEST_EDMS_SYSTEM_CODE "
            + "TEST_ISB5_MAIN_CODE "
            + "TEST_ISB5_SECOND_CODE "
            + "TEST_SQL_SERVER_2005_NAME "
            + "TEST_SQL_SERVER_NAME ";
 
          // Using the dialog windows
          const using_the_dialog_windows_constants =
            "ATTENTION_CAPTION "
            + "cbsCommandLinks "
            + "cbsDefault "
            + "CONFIRMATION_CAPTION "
            + "ERROR_CAPTION "
            + "INFORMATION_CAPTION "
            + "mrCancel "
            + "mrOk ";
 
          // Using the document
          const using_the_document_constants =
            "EDOC_VERSION_ACTIVE_STAGE_CODE "
            + "EDOC_VERSION_DESIGN_STAGE_CODE "
            + "EDOC_VERSION_OBSOLETE_STAGE_CODE ";
 
          // Using the EA and encryption
          const using_the_EA_and_encryption_constants =
            "cpDataEnciphermentEnabled "
            + "cpDigitalSignatureEnabled "
            + "cpID "
            + "cpIssuer "
            + "cpPluginVersion "
            + "cpSerial "
            + "cpSubjectName "
            + "cpSubjSimpleName "
            + "cpValidFromDate "
            + "cpValidToDate ";
 
          // Using the ISBL-editor
          const using_the_ISBL_editor_constants =
            "ISBL_SYNTAX " + "NO_SYNTAX " + "XML_SYNTAX ";
 
          // Wait block properties
          const wait_block_properties_constants =
            "WAIT_BLOCK_AFTER_FINISH_EVENT "
            + "WAIT_BLOCK_BEFORE_START_EVENT "
            + "WAIT_BLOCK_DEADLINE_PROPERTY "
            + "WAIT_BLOCK_IS_RELATIVE_DEADLINE_PROPERTY "
            + "WAIT_BLOCK_NAME_PROPERTY "
            + "WAIT_BLOCK_RELATIVE_DEADLINE_TYPE_PROPERTY ";
 
          // SYSRES Common
          const sysres_common_constants =
            "SYSRES_COMMON "
            + "SYSRES_CONST "
            + "SYSRES_MBFUNC "
            + "SYSRES_SBDATA "
            + "SYSRES_SBGUI "
            + "SYSRES_SBINTF "
            + "SYSRES_SBREFDSC "
            + "SYSRES_SQLERRORS "
            + "SYSRES_SYSCOMP ";
 
          // Константы ==> built_in
          const CONSTANTS =
            sysres_constants
            + base_constants
            + base_group_name_constants
            + decision_block_properties_constants
            + file_extension_constants
            + job_block_properties_constants
            + language_code_constants
            + launching_external_applications_constants
            + link_kind_constants
            + lock_type_constants
            + monitor_block_properties_constants
            + notice_block_properties_constants
            + object_events_constants
            + object_params_constants
            + other_constants
            + privileges_constants
            + pseudoreference_code_constants
            + requisite_ISBCertificateType_values_constants
            + requisite_ISBEDocStorageType_values_constants
            + requisite_compType2_values_constants
            + requisite_name_constants
            + result_constants
            + rule_identification_constants
            + script_block_properties_constants
            + subtask_block_properties_constants
            + system_component_constants
            + system_dialogs_constants
            + system_reference_names_constants
            + table_name_constants
            + test_constants
            + using_the_dialog_windows_constants
            + using_the_document_constants
            + using_the_EA_and_encryption_constants
            + using_the_ISBL_editor_constants
            + wait_block_properties_constants
            + sysres_common_constants;
 
          // enum TAccountType
          const TAccountType = "atUser atGroup atRole ";
 
          // enum TActionEnabledMode
          const TActionEnabledMode =
            "aemEnabledAlways "
            + "aemDisabledAlways "
            + "aemEnabledOnBrowse "
            + "aemEnabledOnEdit "
            + "aemDisabledOnBrowseEmpty ";
 
          // enum TAddPosition
          const TAddPosition = "apBegin apEnd ";
 
          // enum TAlignment
          const TAlignment = "alLeft alRight ";
 
          // enum TAreaShowMode
          const TAreaShowMode =
            "asmNever "
            + "asmNoButCustomize "
            + "asmAsLastTime "
            + "asmYesButCustomize "
            + "asmAlways ";
 
          // enum TCertificateInvalidationReason
          const TCertificateInvalidationReason = "cirCommon cirRevoked ";
 
          // enum TCertificateType
          const TCertificateType = "ctSignature ctEncode ctSignatureEncode ";
 
          // enum TCheckListBoxItemState
          const TCheckListBoxItemState = "clbUnchecked clbChecked clbGrayed ";
 
          // enum TCloseOnEsc
          const TCloseOnEsc = "ceISB ceAlways ceNever ";
 
          // enum TCompType
          const TCompType =
            "ctDocument "
            + "ctReference "
            + "ctScript "
            + "ctUnknown "
            + "ctReport "
            + "ctDialog "
            + "ctFunction "
            + "ctFolder "
            + "ctEDocument "
            + "ctTask "
            + "ctJob "
            + "ctNotice "
            + "ctControlJob ";
 
          // enum TConditionFormat
          const TConditionFormat = "cfInternal cfDisplay ";
 
          // enum TConnectionIntent
          const TConnectionIntent = "ciUnspecified ciWrite ciRead ";
 
          // enum TContentKind
          const TContentKind =
            "ckFolder "
            + "ckEDocument "
            + "ckTask "
            + "ckJob "
            + "ckComponentToken "
            + "ckAny "
            + "ckReference "
            + "ckScript "
            + "ckReport "
            + "ckDialog ";
 
          // enum TControlType
          const TControlType =
            "ctISBLEditor "
            + "ctBevel "
            + "ctButton "
            + "ctCheckListBox "
            + "ctComboBox "
            + "ctComboEdit "
            + "ctGrid "
            + "ctDBCheckBox "
            + "ctDBComboBox "
            + "ctDBEdit "
            + "ctDBEllipsis "
            + "ctDBMemo "
            + "ctDBNavigator "
            + "ctDBRadioGroup "
            + "ctDBStatusLabel "
            + "ctEdit "
            + "ctGroupBox "
            + "ctInplaceHint "
            + "ctMemo "
            + "ctPanel "
            + "ctListBox "
            + "ctRadioButton "
            + "ctRichEdit "
            + "ctTabSheet "
            + "ctWebBrowser "
            + "ctImage "
            + "ctHyperLink "
            + "ctLabel "
            + "ctDBMultiEllipsis "
            + "ctRibbon "
            + "ctRichView "
            + "ctInnerPanel "
            + "ctPanelGroup "
            + "ctBitButton ";
 
          // enum TCriterionContentType
          const TCriterionContentType =
            "cctDate "
            + "cctInteger "
            + "cctNumeric "
            + "cctPick "
            + "cctReference "
            + "cctString "
            + "cctText ";
 
          // enum TCultureType
          const TCultureType = "cltInternal cltPrimary cltGUI ";
 
          // enum TDataSetEventType
          const TDataSetEventType =
            "dseBeforeOpen "
            + "dseAfterOpen "
            + "dseBeforeClose "
            + "dseAfterClose "
            + "dseOnValidDelete "
            + "dseBeforeDelete "
            + "dseAfterDelete "
            + "dseAfterDeleteOutOfTransaction "
            + "dseOnDeleteError "
            + "dseBeforeInsert "
            + "dseAfterInsert "
            + "dseOnValidUpdate "
            + "dseBeforeUpdate "
            + "dseOnUpdateRatifiedRecord "
            + "dseAfterUpdate "
            + "dseAfterUpdateOutOfTransaction "
            + "dseOnUpdateError "
            + "dseAfterScroll "
            + "dseOnOpenRecord "
            + "dseOnCloseRecord "
            + "dseBeforeCancel "
            + "dseAfterCancel "
            + "dseOnUpdateDeadlockError "
            + "dseBeforeDetailUpdate "
            + "dseOnPrepareUpdate "
            + "dseOnAnyRequisiteChange ";
 
          // enum TDataSetState
          const TDataSetState = "dssEdit dssInsert dssBrowse dssInActive ";
 
          // enum TDateFormatType
          const TDateFormatType = "dftDate dftShortDate dftDateTime dftTimeStamp ";
 
          // enum TDateOffsetType
          const TDateOffsetType = "dotDays dotHours dotMinutes dotSeconds ";
 
          // enum TDateTimeKind
          const TDateTimeKind = "dtkndLocal dtkndUTC ";
 
          // enum TDeaAccessRights
          const TDeaAccessRights = "arNone arView arEdit arFull ";
 
          // enum TDocumentDefaultAction
          const TDocumentDefaultAction = "ddaView ddaEdit ";
 
          // enum TEditMode
          const TEditMode =
            "emLock "
            + "emEdit "
            + "emSign "
            + "emExportWithLock "
            + "emImportWithUnlock "
            + "emChangeVersionNote "
            + "emOpenForModify "
            + "emChangeLifeStage "
            + "emDelete "
            + "emCreateVersion "
            + "emImport "
            + "emUnlockExportedWithLock "
            + "emStart "
            + "emAbort "
            + "emReInit "
            + "emMarkAsReaded "
            + "emMarkAsUnreaded "
            + "emPerform "
            + "emAccept "
            + "emResume "
            + "emChangeRights "
            + "emEditRoute "
            + "emEditObserver "
            + "emRecoveryFromLocalCopy "
            + "emChangeWorkAccessType "
            + "emChangeEncodeTypeToCertificate "
            + "emChangeEncodeTypeToPassword "
            + "emChangeEncodeTypeToNone "
            + "emChangeEncodeTypeToCertificatePassword "
            + "emChangeStandardRoute "
            + "emGetText "
            + "emOpenForView "
            + "emMoveToStorage "
            + "emCreateObject "
            + "emChangeVersionHidden "
            + "emDeleteVersion "
            + "emChangeLifeCycleStage "
            + "emApprovingSign "
            + "emExport "
            + "emContinue "
            + "emLockFromEdit "
            + "emUnLockForEdit "
            + "emLockForServer "
            + "emUnlockFromServer "
            + "emDelegateAccessRights "
            + "emReEncode ";
 
          // enum TEditorCloseObservType
          const TEditorCloseObservType = "ecotFile ecotProcess ";
 
          // enum TEdmsApplicationAction
          const TEdmsApplicationAction = "eaGet eaCopy eaCreate eaCreateStandardRoute ";
 
          // enum TEDocumentLockType
          const TEDocumentLockType = "edltAll edltNothing edltQuery ";
 
          // enum TEDocumentStepShowMode
          const TEDocumentStepShowMode = "essmText essmCard ";
 
          // enum TEDocumentStepVersionType
          const TEDocumentStepVersionType = "esvtLast esvtLastActive esvtSpecified ";
 
          // enum TEDocumentStorageFunction
          const TEDocumentStorageFunction = "edsfExecutive edsfArchive ";
 
          // enum TEDocumentStorageType
          const TEDocumentStorageType = "edstSQLServer edstFile ";
 
          // enum TEDocumentVersionSourceType
          const TEDocumentVersionSourceType =
            "edvstNone edvstEDocumentVersionCopy edvstFile edvstTemplate edvstScannedFile ";
 
          // enum TEDocumentVersionState
          const TEDocumentVersionState = "vsDefault vsDesign vsActive vsObsolete ";
 
          // enum TEncodeType
          const TEncodeType = "etNone etCertificate etPassword etCertificatePassword ";
 
          // enum TExceptionCategory
          const TExceptionCategory = "ecException ecWarning ecInformation ";
 
          // enum TExportedSignaturesType
          const TExportedSignaturesType = "estAll estApprovingOnly ";
 
          // enum TExportedVersionType
          const TExportedVersionType = "evtLast evtLastActive evtQuery ";
 
          // enum TFieldDataType
          const TFieldDataType =
            "fdtString "
            + "fdtNumeric "
            + "fdtInteger "
            + "fdtDate "
            + "fdtText "
            + "fdtUnknown "
            + "fdtWideString "
            + "fdtLargeInteger ";
 
          // enum TFolderType
          const TFolderType =
            "ftInbox "
            + "ftOutbox "
            + "ftFavorites "
            + "ftCommonFolder "
            + "ftUserFolder "
            + "ftComponents "
            + "ftQuickLaunch "
            + "ftShortcuts "
            + "ftSearch ";
 
          // enum TGridRowHeight
          const TGridRowHeight = "grhAuto " + "grhX1 " + "grhX2 " + "grhX3 ";
 
          // enum THyperlinkType
          const THyperlinkType = "hltText " + "hltRTF " + "hltHTML ";
 
          // enum TImageFileFormat
          const TImageFileFormat =
            "iffBMP "
            + "iffJPEG "
            + "iffMultiPageTIFF "
            + "iffSinglePageTIFF "
            + "iffTIFF "
            + "iffPNG ";
 
          // enum TImageMode
          const TImageMode = "im8bGrayscale " + "im24bRGB " + "im1bMonochrome ";
 
          // enum TImageType
          const TImageType = "itBMP " + "itJPEG " + "itWMF " + "itPNG ";
 
          // enum TInplaceHintKind
          const TInplaceHintKind =
            "ikhInformation " + "ikhWarning " + "ikhError " + "ikhNoIcon ";
 
          // enum TISBLContext
          const TISBLContext =
            "icUnknown "
            + "icScript "
            + "icFunction "
            + "icIntegratedReport "
            + "icAnalyticReport "
            + "icDataSetEventHandler "
            + "icActionHandler "
            + "icFormEventHandler "
            + "icLookUpEventHandler "
            + "icRequisiteChangeEventHandler "
            + "icBeforeSearchEventHandler "
            + "icRoleCalculation "
            + "icSelectRouteEventHandler "
            + "icBlockPropertyCalculation "
            + "icBlockQueryParamsEventHandler "
            + "icChangeSearchResultEventHandler "
            + "icBlockEventHandler "
            + "icSubTaskInitEventHandler "
            + "icEDocDataSetEventHandler "
            + "icEDocLookUpEventHandler "
            + "icEDocActionHandler "
            + "icEDocFormEventHandler "
            + "icEDocRequisiteChangeEventHandler "
            + "icStructuredConversionRule "
            + "icStructuredConversionEventBefore "
            + "icStructuredConversionEventAfter "
            + "icWizardEventHandler "
            + "icWizardFinishEventHandler "
            + "icWizardStepEventHandler "
            + "icWizardStepFinishEventHandler "
            + "icWizardActionEnableEventHandler "
            + "icWizardActionExecuteEventHandler "
            + "icCreateJobsHandler "
            + "icCreateNoticesHandler "
            + "icBeforeLookUpEventHandler "
            + "icAfterLookUpEventHandler "
            + "icTaskAbortEventHandler "
            + "icWorkflowBlockActionHandler "
            + "icDialogDataSetEventHandler "
            + "icDialogActionHandler "
            + "icDialogLookUpEventHandler "
            + "icDialogRequisiteChangeEventHandler "
            + "icDialogFormEventHandler "
            + "icDialogValidCloseEventHandler "
            + "icBlockFormEventHandler "
            + "icTaskFormEventHandler "
            + "icReferenceMethod "
            + "icEDocMethod "
            + "icDialogMethod "
            + "icProcessMessageHandler ";
 
          // enum TItemShow
          const TItemShow = "isShow " + "isHide " + "isByUserSettings ";
 
          // enum TJobKind
          const TJobKind = "jkJob " + "jkNotice " + "jkControlJob ";
 
          // enum TJoinType
          const TJoinType = "jtInner " + "jtLeft " + "jtRight " + "jtFull " + "jtCross ";
 
          // enum TLabelPos
          const TLabelPos = "lbpAbove " + "lbpBelow " + "lbpLeft " + "lbpRight ";
 
          // enum TLicensingType
          const TLicensingType = "eltPerConnection " + "eltPerUser ";
 
          // enum TLifeCycleStageFontColor
          const TLifeCycleStageFontColor =
            "sfcUndefined "
            + "sfcBlack "
            + "sfcGreen "
            + "sfcRed "
            + "sfcBlue "
            + "sfcOrange "
            + "sfcLilac ";
 
          // enum TLifeCycleStageFontStyle
          const TLifeCycleStageFontStyle = "sfsItalic " + "sfsStrikeout " + "sfsNormal ";
 
          // enum TLockableDevelopmentComponentType
          const TLockableDevelopmentComponentType =
            "ldctStandardRoute "
            + "ldctWizard "
            + "ldctScript "
            + "ldctFunction "
            + "ldctRouteBlock "
            + "ldctIntegratedReport "
            + "ldctAnalyticReport "
            + "ldctReferenceType "
            + "ldctEDocumentType "
            + "ldctDialog "
            + "ldctServerEvents ";
 
          // enum TMaxRecordCountRestrictionType
          const TMaxRecordCountRestrictionType =
            "mrcrtNone " + "mrcrtUser " + "mrcrtMaximal " + "mrcrtCustom ";
 
          // enum TRangeValueType
          const TRangeValueType =
            "vtEqual " + "vtGreaterOrEqual " + "vtLessOrEqual " + "vtRange ";
 
          // enum TRelativeDate
          const TRelativeDate =
            "rdYesterday "
            + "rdToday "
            + "rdTomorrow "
            + "rdThisWeek "
            + "rdThisMonth "
            + "rdThisYear "
            + "rdNextMonth "
            + "rdNextWeek "
            + "rdLastWeek "
            + "rdLastMonth ";
 
          // enum TReportDestination
          const TReportDestination = "rdWindow " + "rdFile " + "rdPrinter ";
 
          // enum TReqDataType
          const TReqDataType =
            "rdtString "
            + "rdtNumeric "
            + "rdtInteger "
            + "rdtDate "
            + "rdtReference "
            + "rdtAccount "
            + "rdtText "
            + "rdtPick "
            + "rdtUnknown "
            + "rdtLargeInteger "
            + "rdtDocument ";
 
          // enum TRequisiteEventType
          const TRequisiteEventType = "reOnChange " + "reOnChangeValues ";
 
          // enum TSBTimeType
          const TSBTimeType = "ttGlobal " + "ttLocal " + "ttUser " + "ttSystem ";
 
          // enum TSearchShowMode
          const TSearchShowMode =
            "ssmBrowse " + "ssmSelect " + "ssmMultiSelect " + "ssmBrowseModal ";
 
          // enum TSelectMode
          const TSelectMode = "smSelect " + "smLike " + "smCard ";
 
          // enum TSignatureType
          const TSignatureType = "stNone " + "stAuthenticating " + "stApproving ";
 
          // enum TSignerContentType
          const TSignerContentType = "sctString " + "sctStream ";
 
          // enum TStringsSortType
          const TStringsSortType = "sstAnsiSort " + "sstNaturalSort ";
 
          // enum TStringValueType
          const TStringValueType = "svtEqual " + "svtContain ";
 
          // enum TStructuredObjectAttributeType
          const TStructuredObjectAttributeType =
            "soatString "
            + "soatNumeric "
            + "soatInteger "
            + "soatDatetime "
            + "soatReferenceRecord "
            + "soatText "
            + "soatPick "
            + "soatBoolean "
            + "soatEDocument "
            + "soatAccount "
            + "soatIntegerCollection "
            + "soatNumericCollection "
            + "soatStringCollection "
            + "soatPickCollection "
            + "soatDatetimeCollection "
            + "soatBooleanCollection "
            + "soatReferenceRecordCollection "
            + "soatEDocumentCollection "
            + "soatAccountCollection "
            + "soatContents "
            + "soatUnknown ";
 
          // enum TTaskAbortReason
          const TTaskAbortReason = "tarAbortByUser " + "tarAbortByWorkflowException ";
 
          // enum TTextValueType
          const TTextValueType = "tvtAllWords " + "tvtExactPhrase " + "tvtAnyWord ";
 
          // enum TUserObjectStatus
          const TUserObjectStatus =
            "usNone "
            + "usCompleted "
            + "usRedSquare "
            + "usBlueSquare "
            + "usYellowSquare "
            + "usGreenSquare "
            + "usOrangeSquare "
            + "usPurpleSquare "
            + "usFollowUp ";
 
          // enum TUserType
          const TUserType =
            "utUnknown "
            + "utUser "
            + "utDeveloper "
            + "utAdministrator "
            + "utSystemDeveloper "
            + "utDisconnected ";
 
          // enum TValuesBuildType
          const TValuesBuildType =
            "btAnd " + "btDetailAnd " + "btOr " + "btNotOr " + "btOnly ";
 
          // enum TViewMode
          const TViewMode = "vmView " + "vmSelect " + "vmNavigation ";
 
          // enum TViewSelectionMode
          const TViewSelectionMode =
            "vsmSingle " + "vsmMultiple " + "vsmMultipleCheck " + "vsmNoSelection ";
 
          // enum TWizardActionType
          const TWizardActionType =
            "wfatPrevious " + "wfatNext " + "wfatCancel " + "wfatFinish ";
 
          // enum TWizardFormElementProperty
          const TWizardFormElementProperty =
            "wfepUndefined "
            + "wfepText3 "
            + "wfepText6 "
            + "wfepText9 "
            + "wfepSpinEdit "
            + "wfepDropDown "
            + "wfepRadioGroup "
            + "wfepFlag "
            + "wfepText12 "
            + "wfepText15 "
            + "wfepText18 "
            + "wfepText21 "
            + "wfepText24 "
            + "wfepText27 "
            + "wfepText30 "
            + "wfepRadioGroupColumn1 "
            + "wfepRadioGroupColumn2 "
            + "wfepRadioGroupColumn3 ";
 
          // enum TWizardFormElementType
          const TWizardFormElementType =
            "wfetQueryParameter " + "wfetText " + "wfetDelimiter " + "wfetLabel ";
 
          // enum TWizardParamType
          const TWizardParamType =
            "wptString "
            + "wptInteger "
            + "wptNumeric "
            + "wptBoolean "
            + "wptDateTime "
            + "wptPick "
            + "wptText "
            + "wptUser "
            + "wptUserList "
            + "wptEDocumentInfo "
            + "wptEDocumentInfoList "
            + "wptReferenceRecordInfo "
            + "wptReferenceRecordInfoList "
            + "wptFolderInfo "
            + "wptTaskInfo "
            + "wptContents "
            + "wptFileName "
            + "wptDate ";
 
          // enum TWizardStepResult
          const TWizardStepResult =
            "wsrComplete "
            + "wsrGoNext "
            + "wsrGoPrevious "
            + "wsrCustom "
            + "wsrCancel "
            + "wsrGoFinal ";
 
          // enum TWizardStepType
          const TWizardStepType =
            "wstForm "
            + "wstEDocument "
            + "wstTaskCard "
            + "wstReferenceRecordCard "
            + "wstFinal ";
 
          // enum TWorkAccessType
          const TWorkAccessType = "waAll " + "waPerformers " + "waManual ";
 
          // enum TWorkflowBlockType
          const TWorkflowBlockType =
            "wsbStart "
            + "wsbFinish "
            + "wsbNotice "
            + "wsbStep "
            + "wsbDecision "
            + "wsbWait "
            + "wsbMonitor "
            + "wsbScript "
            + "wsbConnector "
            + "wsbSubTask "
            + "wsbLifeCycleStage "
            + "wsbPause ";
 
          // enum TWorkflowDataType
          const TWorkflowDataType =
            "wdtInteger "
            + "wdtFloat "
            + "wdtString "
            + "wdtPick "
            + "wdtDateTime "
            + "wdtBoolean "
            + "wdtTask "
            + "wdtJob "
            + "wdtFolder "
            + "wdtEDocument "
            + "wdtReferenceRecord "
            + "wdtUser "
            + "wdtGroup "
            + "wdtRole "
            + "wdtIntegerCollection "
            + "wdtFloatCollection "
            + "wdtStringCollection "
            + "wdtPickCollection "
            + "wdtDateTimeCollection "
            + "wdtBooleanCollection "
            + "wdtTaskCollection "
            + "wdtJobCollection "
            + "wdtFolderCollection "
            + "wdtEDocumentCollection "
            + "wdtReferenceRecordCollection "
            + "wdtUserCollection "
            + "wdtGroupCollection "
            + "wdtRoleCollection "
            + "wdtContents "
            + "wdtUserList "
            + "wdtSearchDescription "
            + "wdtDeadLine "
            + "wdtPickSet "
            + "wdtAccountCollection ";
 
          // enum TWorkImportance
          const TWorkImportance = "wiLow " + "wiNormal " + "wiHigh ";
 
          // enum TWorkRouteType
          const TWorkRouteType = "wrtSoft " + "wrtHard ";
 
          // enum TWorkState
          const TWorkState =
            "wsInit "
            + "wsRunning "
            + "wsDone "
            + "wsControlled "
            + "wsAborted "
            + "wsContinued ";
 
          // enum TWorkTextBuildingMode
          const TWorkTextBuildingMode =
            "wtmFull " + "wtmFromCurrent " + "wtmOnlyCurrent ";
 
          // Перечисления
          const ENUMS =
            TAccountType
            + TActionEnabledMode
            + TAddPosition
            + TAlignment
            + TAreaShowMode
            + TCertificateInvalidationReason
            + TCertificateType
            + TCheckListBoxItemState
            + TCloseOnEsc
            + TCompType
            + TConditionFormat
            + TConnectionIntent
            + TContentKind
            + TControlType
            + TCriterionContentType
            + TCultureType
            + TDataSetEventType
            + TDataSetState
            + TDateFormatType
            + TDateOffsetType
            + TDateTimeKind
            + TDeaAccessRights
            + TDocumentDefaultAction
            + TEditMode
            + TEditorCloseObservType
            + TEdmsApplicationAction
            + TEDocumentLockType
            + TEDocumentStepShowMode
            + TEDocumentStepVersionType
            + TEDocumentStorageFunction
            + TEDocumentStorageType
            + TEDocumentVersionSourceType
            + TEDocumentVersionState
            + TEncodeType
            + TExceptionCategory
            + TExportedSignaturesType
            + TExportedVersionType
            + TFieldDataType
            + TFolderType
            + TGridRowHeight
            + THyperlinkType
            + TImageFileFormat
            + TImageMode
            + TImageType
            + TInplaceHintKind
            + TISBLContext
            + TItemShow
            + TJobKind
            + TJoinType
            + TLabelPos
            + TLicensingType
            + TLifeCycleStageFontColor
            + TLifeCycleStageFontStyle
            + TLockableDevelopmentComponentType
            + TMaxRecordCountRestrictionType
            + TRangeValueType
            + TRelativeDate
            + TReportDestination
            + TReqDataType
            + TRequisiteEventType
            + TSBTimeType
            + TSearchShowMode
            + TSelectMode
            + TSignatureType
            + TSignerContentType
            + TStringsSortType
            + TStringValueType
            + TStructuredObjectAttributeType
            + TTaskAbortReason
            + TTextValueType
            + TUserObjectStatus
            + TUserType
            + TValuesBuildType
            + TViewMode
            + TViewSelectionMode
            + TWizardActionType
            + TWizardFormElementProperty
            + TWizardFormElementType
            + TWizardParamType
            + TWizardStepResult
            + TWizardStepType
            + TWorkAccessType
            + TWorkflowBlockType
            + TWorkflowDataType
            + TWorkImportance
            + TWorkRouteType
            + TWorkState
            + TWorkTextBuildingMode;
 
          // Системные функции ==> SYSFUNCTIONS
          const system_functions =
            "AddSubString "
            + "AdjustLineBreaks "
            + "AmountInWords "
            + "Analysis "
            + "ArrayDimCount "
            + "ArrayHighBound "
            + "ArrayLowBound "
            + "ArrayOf "
            + "ArrayReDim "
            + "Assert "
            + "Assigned "
            + "BeginOfMonth "
            + "BeginOfPeriod "
            + "BuildProfilingOperationAnalysis "
            + "CallProcedure "
            + "CanReadFile "
            + "CArrayElement "
            + "CDataSetRequisite "
            + "ChangeDate "
            + "ChangeReferenceDataset "
            + "Char "
            + "CharPos "
            + "CheckParam "
            + "CheckParamValue "
            + "CompareStrings "
            + "ConstantExists "
            + "ControlState "
            + "ConvertDateStr "
            + "Copy "
            + "CopyFile "
            + "CreateArray "
            + "CreateCachedReference "
            + "CreateConnection "
            + "CreateDialog "
            + "CreateDualListDialog "
            + "CreateEditor "
            + "CreateException "
            + "CreateFile "
            + "CreateFolderDialog "
            + "CreateInputDialog "
            + "CreateLinkFile "
            + "CreateList "
            + "CreateLock "
            + "CreateMemoryDataSet "
            + "CreateObject "
            + "CreateOpenDialog "
            + "CreateProgress "
            + "CreateQuery "
            + "CreateReference "
            + "CreateReport "
            + "CreateSaveDialog "
            + "CreateScript "
            + "CreateSQLPivotFunction "
            + "CreateStringList "
            + "CreateTreeListSelectDialog "
            + "CSelectSQL "
            + "CSQL "
            + "CSubString "
            + "CurrentUserID "
            + "CurrentUserName "
            + "CurrentVersion "
            + "DataSetLocateEx "
            + "DateDiff "
            + "DateTimeDiff "
            + "DateToStr "
            + "DayOfWeek "
            + "DeleteFile "
            + "DirectoryExists "
            + "DisableCheckAccessRights "
            + "DisableCheckFullShowingRestriction "
            + "DisableMassTaskSendingRestrictions "
            + "DropTable "
            + "DupeString "
            + "EditText "
            + "EnableCheckAccessRights "
            + "EnableCheckFullShowingRestriction "
            + "EnableMassTaskSendingRestrictions "
            + "EndOfMonth "
            + "EndOfPeriod "
            + "ExceptionExists "
            + "ExceptionsOff "
            + "ExceptionsOn "
            + "Execute "
            + "ExecuteProcess "
            + "Exit "
            + "ExpandEnvironmentVariables "
            + "ExtractFileDrive "
            + "ExtractFileExt "
            + "ExtractFileName "
            + "ExtractFilePath "
            + "ExtractParams "
            + "FileExists "
            + "FileSize "
            + "FindFile "
            + "FindSubString "
            + "FirmContext "
            + "ForceDirectories "
            + "Format "
            + "FormatDate "
            + "FormatNumeric "
            + "FormatSQLDate "
            + "FormatString "
            + "FreeException "
            + "GetComponent "
            + "GetComponentLaunchParam "
            + "GetConstant "
            + "GetLastException "
            + "GetReferenceRecord "
            + "GetRefTypeByRefID "
            + "GetTableID "
            + "GetTempFolder "
            + "IfThen "
            + "In "
            + "IndexOf "
            + "InputDialog "
            + "InputDialogEx "
            + "InteractiveMode "
            + "IsFileLocked "
            + "IsGraphicFile "
            + "IsNumeric "
            + "Length "
            + "LoadString "
            + "LoadStringFmt "
            + "LocalTimeToUTC "
            + "LowerCase "
            + "Max "
            + "MessageBox "
            + "MessageBoxEx "
            + "MimeDecodeBinary "
            + "MimeDecodeString "
            + "MimeEncodeBinary "
            + "MimeEncodeString "
            + "Min "
            + "MoneyInWords "
            + "MoveFile "
            + "NewID "
            + "Now "
            + "OpenFile "
            + "Ord "
            + "Precision "
            + "Raise "
            + "ReadCertificateFromFile "
            + "ReadFile "
            + "ReferenceCodeByID "
            + "ReferenceNumber "
            + "ReferenceRequisiteMode "
            + "ReferenceRequisiteValue "
            + "RegionDateSettings "
            + "RegionNumberSettings "
            + "RegionTimeSettings "
            + "RegRead "
            + "RegWrite "
            + "RenameFile "
            + "Replace "
            + "Round "
            + "SelectServerCode "
            + "SelectSQL "
            + "ServerDateTime "
            + "SetConstant "
            + "SetManagedFolderFieldsState "
            + "ShowConstantsInputDialog "
            + "ShowMessage "
            + "Sleep "
            + "Split "
            + "SQL "
            + "SQL2XLSTAB "
            + "SQLProfilingSendReport "
            + "StrToDate "
            + "SubString "
            + "SubStringCount "
            + "SystemSetting "
            + "Time "
            + "TimeDiff "
            + "Today "
            + "Transliterate "
            + "Trim "
            + "UpperCase "
            + "UserStatus "
            + "UTCToLocalTime "
            + "ValidateXML "
            + "VarIsClear "
            + "VarIsEmpty "
            + "VarIsNull "
            + "WorkTimeDiff "
            + "WriteFile "
            + "WriteFileEx "
            + "WriteObjectHistory "
            + "Анализ "
            + "БазаДанных "
            + "БлокЕсть "
            + "БлокЕстьРасш "
            + "БлокИнфо "
            + "БлокСнять "
            + "БлокСнятьРасш "
            + "БлокУстановить "
            + "Ввод "
            + "ВводМеню "
            + "ВедС "
            + "ВедСпр "
            + "ВерхняяГраницаМассива "
            + "ВнешПрогр "
            + "Восст "
            + "ВременнаяПапка "
            + "Время "
            + "ВыборSQL "
            + "ВыбратьЗапись "
            + "ВыделитьСтр "
            + "Вызвать "
            + "Выполнить "
            + "ВыпПрогр "
            + "ГрафическийФайл "
            + "ГруппаДополнительно "
            + "ДатаВремяСерв "
            + "ДеньНедели "
            + "ДиалогДаНет "
            + "ДлинаСтр "
            + "ДобПодстр "
            + "ЕПусто "
            + "ЕслиТо "
            + "ЕЧисло "
            + "ЗамПодстр "
            + "ЗаписьСправочника "
            + "ЗначПоляСпр "
            + "ИДТипСпр "
            + "ИзвлечьДиск "
            + "ИзвлечьИмяФайла "
            + "ИзвлечьПуть "
            + "ИзвлечьРасширение "
            + "ИзмДат "
            + "ИзменитьРазмерМассива "
            + "ИзмеренийМассива "
            + "ИмяОрг "
            + "ИмяПоляСпр "
            + "Индекс "
            + "ИндикаторЗакрыть "
            + "ИндикаторОткрыть "
            + "ИндикаторШаг "
            + "ИнтерактивныйРежим "
            + "ИтогТблСпр "
            + "КодВидВедСпр "
            + "КодВидСпрПоИД "
            + "КодПоAnalit "
            + "КодСимвола "
            + "КодСпр "
            + "КолПодстр "
            + "КолПроп "
            + "КонМес "
            + "Конст "
            + "КонстЕсть "
            + "КонстЗнач "
            + "КонТран "
            + "КопироватьФайл "
            + "КопияСтр "
            + "КПериод "
            + "КСтрТблСпр "
            + "Макс "
            + "МаксСтрТблСпр "
            + "Массив "
            + "Меню "
            + "МенюРасш "
            + "Мин "
            + "НаборДанныхНайтиРасш "
            + "НаимВидСпр "
            + "НаимПоAnalit "
            + "НаимСпр "
            + "НастроитьПереводыСтрок "
            + "НачМес "
            + "НачТран "
            + "НижняяГраницаМассива "
            + "НомерСпр "
            + "НПериод "
            + "Окно "
            + "Окр "
            + "Окружение "
            + "ОтлИнфДобавить "
            + "ОтлИнфУдалить "
            + "Отчет "
            + "ОтчетАнал "
            + "ОтчетИнт "
            + "ПапкаСуществует "
            + "Пауза "
            + "ПВыборSQL "
            + "ПереименоватьФайл "
            + "Переменные "
            + "ПереместитьФайл "
            + "Подстр "
            + "ПоискПодстр "
            + "ПоискСтр "
            + "ПолучитьИДТаблицы "
            + "ПользовательДополнительно "
            + "ПользовательИД "
            + "ПользовательИмя "
            + "ПользовательСтатус "
            + "Прервать "
            + "ПроверитьПараметр "
            + "ПроверитьПараметрЗнач "
            + "ПроверитьУсловие "
            + "РазбСтр "
            + "РазнВремя "
            + "РазнДат "
            + "РазнДатаВремя "
            + "РазнРабВремя "
            + "РегУстВрем "
            + "РегУстДат "
            + "РегУстЧсл "
            + "РедТекст "
            + "РеестрЗапись "
            + "РеестрСписокИменПарам "
            + "РеестрЧтение "
            + "РеквСпр "
            + "РеквСпрПр "
            + "Сегодня "
            + "Сейчас "
            + "Сервер "
            + "СерверПроцессИД "
            + "СертификатФайлСчитать "
            + "СжПроб "
            + "Символ "
            + "СистемаДиректумКод "
            + "СистемаИнформация "
            + "СистемаКод "
            + "Содержит "
            + "СоединениеЗакрыть "
            + "СоединениеОткрыть "
            + "СоздатьДиалог "
            + "СоздатьДиалогВыбораИзДвухСписков "
            + "СоздатьДиалогВыбораПапки "
            + "СоздатьДиалогОткрытияФайла "
            + "СоздатьДиалогСохраненияФайла "
            + "СоздатьЗапрос "
            + "СоздатьИндикатор "
            + "СоздатьИсключение "
            + "СоздатьКэшированныйСправочник "
            + "СоздатьМассив "
            + "СоздатьНаборДанных "
            + "СоздатьОбъект "
            + "СоздатьОтчет "
            + "СоздатьПапку "
            + "СоздатьРедактор "
            + "СоздатьСоединение "
            + "СоздатьСписок "
            + "СоздатьСписокСтрок "
            + "СоздатьСправочник "
            + "СоздатьСценарий "
            + "СоздСпр "
            + "СостСпр "
            + "Сохр "
            + "СохрСпр "
            + "СписокСистем "
            + "Спр "
            + "Справочник "
            + "СпрБлокЕсть "
            + "СпрБлокСнять "
            + "СпрБлокСнятьРасш "
            + "СпрБлокУстановить "
            + "СпрИзмНабДан "
            + "СпрКод "
            + "СпрНомер "
            + "СпрОбновить "
            + "СпрОткрыть "
            + "СпрОтменить "
            + "СпрПарам "
            + "СпрПолеЗнач "
            + "СпрПолеИмя "
            + "СпрРекв "
            + "СпрРеквВведЗн "
            + "СпрРеквНовые "
            + "СпрРеквПр "
            + "СпрРеквПредЗн "
            + "СпрРеквРежим "
            + "СпрРеквТипТекст "
            + "СпрСоздать "
            + "СпрСост "
            + "СпрСохранить "
            + "СпрТблИтог "
            + "СпрТблСтр "
            + "СпрТблСтрКол "
            + "СпрТблСтрМакс "
            + "СпрТблСтрМин "
            + "СпрТблСтрПред "
            + "СпрТблСтрСлед "
            + "СпрТблСтрСозд "
            + "СпрТблСтрУд "
            + "СпрТекПредст "
            + "СпрУдалить "
            + "СравнитьСтр "
            + "СтрВерхРегистр "
            + "СтрНижнРегистр "
            + "СтрТблСпр "
            + "СумПроп "
            + "Сценарий "
            + "СценарийПарам "
            + "ТекВерсия "
            + "ТекОрг "
            + "Точн "
            + "Тран "
            + "Транслитерация "
            + "УдалитьТаблицу "
            + "УдалитьФайл "
            + "УдСпр "
            + "УдСтрТблСпр "
            + "Уст "
            + "УстановкиКонстант "
            + "ФайлАтрибутСчитать "
            + "ФайлАтрибутУстановить "
            + "ФайлВремя "
            + "ФайлВремяУстановить "
            + "ФайлВыбрать "
            + "ФайлЗанят "
            + "ФайлЗаписать "
            + "ФайлИскать "
            + "ФайлКопировать "
            + "ФайлМожноЧитать "
            + "ФайлОткрыть "
            + "ФайлПереименовать "
            + "ФайлПерекодировать "
            + "ФайлПереместить "
            + "ФайлПросмотреть "
            + "ФайлРазмер "
            + "ФайлСоздать "
            + "ФайлСсылкаСоздать "
            + "ФайлСуществует "
            + "ФайлСчитать "
            + "ФайлУдалить "
            + "ФмтSQLДат "
            + "ФмтДат "
            + "ФмтСтр "
            + "ФмтЧсл "
            + "Формат "
            + "ЦМассивЭлемент "
            + "ЦНаборДанныхРеквизит "
            + "ЦПодстр ";
 
          // Предопределенные переменные ==> built_in
          const predefined_variables =
            "AltState "
            + "Application "
            + "CallType "
            + "ComponentTokens "
            + "CreatedJobs "
            + "CreatedNotices "
            + "ControlState "
            + "DialogResult "
            + "Dialogs "
            + "EDocuments "
            + "EDocumentVersionSource "
            + "Folders "
            + "GlobalIDs "
            + "Job "
            + "Jobs "
            + "InputValue "
            + "LookUpReference "
            + "LookUpRequisiteNames "
            + "LookUpSearch "
            + "Object "
            + "ParentComponent "
            + "Processes "
            + "References "
            + "Requisite "
            + "ReportName "
            + "Reports "
            + "Result "
            + "Scripts "
            + "Searches "
            + "SelectedAttachments "
            + "SelectedItems "
            + "SelectMode "
            + "Sender "
            + "ServerEvents "
            + "ServiceFactory "
            + "ShiftState "
            + "SubTask "
            + "SystemDialogs "
            + "Tasks "
            + "Wizard "
            + "Wizards "
            + "Work "
            + "ВызовСпособ "
            + "ИмяОтчета "
            + "РеквЗнач ";
 
          // Интерфейсы ==> type
          const interfaces =
            "IApplication "
            + "IAccessRights "
            + "IAccountRepository "
            + "IAccountSelectionRestrictions "
            + "IAction "
            + "IActionList "
            + "IAdministrationHistoryDescription "
            + "IAnchors "
            + "IApplication "
            + "IArchiveInfo "
            + "IAttachment "
            + "IAttachmentList "
            + "ICheckListBox "
            + "ICheckPointedList "
            + "IColumn "
            + "IComponent "
            + "IComponentDescription "
            + "IComponentToken "
            + "IComponentTokenFactory "
            + "IComponentTokenInfo "
            + "ICompRecordInfo "
            + "IConnection "
            + "IContents "
            + "IControl "
            + "IControlJob "
            + "IControlJobInfo "
            + "IControlList "
            + "ICrypto "
            + "ICrypto2 "
            + "ICustomJob "
            + "ICustomJobInfo "
            + "ICustomListBox "
            + "ICustomObjectWizardStep "
            + "ICustomWork "
            + "ICustomWorkInfo "
            + "IDataSet "
            + "IDataSetAccessInfo "
            + "IDataSigner "
            + "IDateCriterion "
            + "IDateRequisite "
            + "IDateRequisiteDescription "
            + "IDateValue "
            + "IDeaAccessRights "
            + "IDeaObjectInfo "
            + "IDevelopmentComponentLock "
            + "IDialog "
            + "IDialogFactory "
            + "IDialogPickRequisiteItems "
            + "IDialogsFactory "
            + "IDICSFactory "
            + "IDocRequisite "
            + "IDocumentInfo "
            + "IDualListDialog "
            + "IECertificate "
            + "IECertificateInfo "
            + "IECertificates "
            + "IEditControl "
            + "IEditorForm "
            + "IEdmsExplorer "
            + "IEdmsObject "
            + "IEdmsObjectDescription "
            + "IEdmsObjectFactory "
            + "IEdmsObjectInfo "
            + "IEDocument "
            + "IEDocumentAccessRights "
            + "IEDocumentDescription "
            + "IEDocumentEditor "
            + "IEDocumentFactory "
            + "IEDocumentInfo "
            + "IEDocumentStorage "
            + "IEDocumentVersion "
            + "IEDocumentVersionListDialog "
            + "IEDocumentVersionSource "
            + "IEDocumentWizardStep "
            + "IEDocVerSignature "
            + "IEDocVersionState "
            + "IEnabledMode "
            + "IEncodeProvider "
            + "IEncrypter "
            + "IEvent "
            + "IEventList "
            + "IException "
            + "IExternalEvents "
            + "IExternalHandler "
            + "IFactory "
            + "IField "
            + "IFileDialog "
            + "IFolder "
            + "IFolderDescription "
            + "IFolderDialog "
            + "IFolderFactory "
            + "IFolderInfo "
            + "IForEach "
            + "IForm "
            + "IFormTitle "
            + "IFormWizardStep "
            + "IGlobalIDFactory "
            + "IGlobalIDInfo "
            + "IGrid "
            + "IHasher "
            + "IHistoryDescription "
            + "IHyperLinkControl "
            + "IImageButton "
            + "IImageControl "
            + "IInnerPanel "
            + "IInplaceHint "
            + "IIntegerCriterion "
            + "IIntegerList "
            + "IIntegerRequisite "
            + "IIntegerValue "
            + "IISBLEditorForm "
            + "IJob "
            + "IJobDescription "
            + "IJobFactory "
            + "IJobForm "
            + "IJobInfo "
            + "ILabelControl "
            + "ILargeIntegerCriterion "
            + "ILargeIntegerRequisite "
            + "ILargeIntegerValue "
            + "ILicenseInfo "
            + "ILifeCycleStage "
            + "IList "
            + "IListBox "
            + "ILocalIDInfo "
            + "ILocalization "
            + "ILock "
            + "IMemoryDataSet "
            + "IMessagingFactory "
            + "IMetadataRepository "
            + "INotice "
            + "INoticeInfo "
            + "INumericCriterion "
            + "INumericRequisite "
            + "INumericValue "
            + "IObject "
            + "IObjectDescription "
            + "IObjectImporter "
            + "IObjectInfo "
            + "IObserver "
            + "IPanelGroup "
            + "IPickCriterion "
            + "IPickProperty "
            + "IPickRequisite "
            + "IPickRequisiteDescription "
            + "IPickRequisiteItem "
            + "IPickRequisiteItems "
            + "IPickValue "
            + "IPrivilege "
            + "IPrivilegeList "
            + "IProcess "
            + "IProcessFactory "
            + "IProcessMessage "
            + "IProgress "
            + "IProperty "
            + "IPropertyChangeEvent "
            + "IQuery "
            + "IReference "
            + "IReferenceCriterion "
            + "IReferenceEnabledMode "
            + "IReferenceFactory "
            + "IReferenceHistoryDescription "
            + "IReferenceInfo "
            + "IReferenceRecordCardWizardStep "
            + "IReferenceRequisiteDescription "
            + "IReferencesFactory "
            + "IReferenceValue "
            + "IRefRequisite "
            + "IReport "
            + "IReportFactory "
            + "IRequisite "
            + "IRequisiteDescription "
            + "IRequisiteDescriptionList "
            + "IRequisiteFactory "
            + "IRichEdit "
            + "IRouteStep "
            + "IRule "
            + "IRuleList "
            + "ISchemeBlock "
            + "IScript "
            + "IScriptFactory "
            + "ISearchCriteria "
            + "ISearchCriterion "
            + "ISearchDescription "
            + "ISearchFactory "
            + "ISearchFolderInfo "
            + "ISearchForObjectDescription "
            + "ISearchResultRestrictions "
            + "ISecuredContext "
            + "ISelectDialog "
            + "IServerEvent "
            + "IServerEventFactory "
            + "IServiceDialog "
            + "IServiceFactory "
            + "ISignature "
            + "ISignProvider "
            + "ISignProvider2 "
            + "ISignProvider3 "
            + "ISimpleCriterion "
            + "IStringCriterion "
            + "IStringList "
            + "IStringRequisite "
            + "IStringRequisiteDescription "
            + "IStringValue "
            + "ISystemDialogsFactory "
            + "ISystemInfo "
            + "ITabSheet "
            + "ITask "
            + "ITaskAbortReasonInfo "
            + "ITaskCardWizardStep "
            + "ITaskDescription "
            + "ITaskFactory "
            + "ITaskInfo "
            + "ITaskRoute "
            + "ITextCriterion "
            + "ITextRequisite "
            + "ITextValue "
            + "ITreeListSelectDialog "
            + "IUser "
            + "IUserList "
            + "IValue "
            + "IView "
            + "IWebBrowserControl "
            + "IWizard "
            + "IWizardAction "
            + "IWizardFactory "
            + "IWizardFormElement "
            + "IWizardParam "
            + "IWizardPickParam "
            + "IWizardReferenceParam "
            + "IWizardStep "
            + "IWorkAccessRights "
            + "IWorkDescription "
            + "IWorkflowAskableParam "
            + "IWorkflowAskableParams "
            + "IWorkflowBlock "
            + "IWorkflowBlockResult "
            + "IWorkflowEnabledMode "
            + "IWorkflowParam "
            + "IWorkflowPickParam "
            + "IWorkflowReferenceParam "
            + "IWorkState "
            + "IWorkTreeCustomNode "
            + "IWorkTreeJobNode "
            + "IWorkTreeTaskNode "
            + "IXMLEditorForm "
            + "SBCrypto ";
 
          // built_in : встроенные или библиотечные объекты (константы, перечисления)
          const BUILTIN = CONSTANTS + ENUMS;
 
          // class: встроенные наборы значений, системные объекты, фабрики
          const CLASS = predefined_variables;
 
          // literal : примитивные типы
          const LITERAL = "null true false nil ";
 
          // number : числа
          const NUMBERS = {
            className: "number",
            begin: hljs.NUMBER_RE,
            relevance: 0
          };
 
          // string : строки
          const STRINGS = {
            className: "string",
            variants: [
              {
                begin: '"',
                end: '"'
              },
              {
                begin: "'",
                end: "'"
              }
            ]
          };
 
          // Токены
          const DOCTAGS = {
            className: "doctag",
            begin: "\\b(?:TODO|DONE|BEGIN|END|STUB|CHG|FIXME|NOTE|BUG|XXX)\\b",
            relevance: 0
          };
 
          // Однострочный комментарий
          const ISBL_LINE_COMMENT_MODE = {
            className: "comment",
            begin: "//",
            end: "$",
            relevance: 0,
            contains: [
              hljs.PHRASAL_WORDS_MODE,
              DOCTAGS
            ]
          };
 
          // Многострочный комментарий
          const ISBL_BLOCK_COMMENT_MODE = {
            className: "comment",
            begin: "/\\*",
            end: "\\*/",
            relevance: 0,
            contains: [
              hljs.PHRASAL_WORDS_MODE,
              DOCTAGS
            ]
          };
 
          // comment : комментарии
          const COMMENTS = { variants: [
            ISBL_LINE_COMMENT_MODE,
            ISBL_BLOCK_COMMENT_MODE
          ] };
 
          // keywords : ключевые слова
          const KEYWORDS = {
            $pattern: UNDERSCORE_IDENT_RE,
            keyword: KEYWORD,
            built_in: BUILTIN,
            class: CLASS,
            literal: LITERAL
          };
 
          // methods : методы
          const METHODS = {
            begin: "\\.\\s*" + hljs.UNDERSCORE_IDENT_RE,
            keywords: KEYWORDS,
            relevance: 0
          };
 
          // type : встроенные типы
          const TYPES = {
            className: "type",
            begin: ":[ \\t]*(" + interfaces.trim().replace(/\s/g, "|") + ")",
            end: "[ \\t]*=",
            excludeEnd: true
          };
 
          // variables : переменные
          const VARIABLES = {
            className: "variable",
            keywords: KEYWORDS,
            begin: UNDERSCORE_IDENT_RE,
            relevance: 0,
            contains: [
              TYPES,
              METHODS
            ]
          };
 
          // Имена функций
          const FUNCTION_TITLE = FUNCTION_NAME_IDENT_RE + "\\(";
 
          const TITLE_MODE = {
            className: "title",
            keywords: {
              $pattern: UNDERSCORE_IDENT_RE,
              built_in: system_functions
            },
            begin: FUNCTION_TITLE,
            end: "\\(",
            returnBegin: true,
            excludeEnd: true
          };
 
          // function : функции
          const FUNCTIONS = {
            className: "function",
            begin: FUNCTION_TITLE,
            end: "\\)$",
            returnBegin: true,
            keywords: KEYWORDS,
            illegal: "[\\[\\]\\|\\$\\?%,~#@]",
            contains: [
              TITLE_MODE,
              METHODS,
              VARIABLES,
              STRINGS,
              NUMBERS,
              COMMENTS
            ]
          };
 
          return {
            name: 'ISBL',
            case_insensitive: true,
            keywords: KEYWORDS,
            illegal: "\\$|\\?|%|,|;$|~|#|@|</",
            contains: [
              FUNCTIONS,
              TYPES,
              METHODS,
              VARIABLES,
              STRINGS,
              NUMBERS,
              COMMENTS
            ]
          };
        }
 
        isbl_1 = isbl;
        return isbl_1;
    }
 
    var java_1;
    var hasRequiredJava;
 
    function requireJava () {
        if (hasRequiredJava) return java_1;
        hasRequiredJava = 1;
        // https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
        var decimalDigits = '[0-9](_*[0-9])*';
        var frac = `\\.(${decimalDigits})`;
        var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
        var NUMERIC = {
          className: 'number',
          variants: [
            // DecimalFloatingPointLiteral
            // including ExponentPart
            { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
              `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
            // excluding ExponentPart
            { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
            { begin: `(${frac})[fFdD]?\\b` },
            { begin: `\\b(${decimalDigits})[fFdD]\\b` },
 
            // HexadecimalFloatingPointLiteral
            { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
              `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
 
            // DecimalIntegerLiteral
            { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },
 
            // HexIntegerLiteral
            { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
 
            // OctalIntegerLiteral
            { begin: '\\b0(_*[0-7])*[lL]?\\b' },
 
            // BinaryIntegerLiteral
            { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
          ],
          relevance: 0
        };
 
        /*
        Language: Java
        Author: Vsevolod Solovyov <vsevolod.solovyov@gmail.com>
        Category: common, enterprise
        Website: https://www.java.com/
        */
 
        /**
         * Allows recursive regex expressions to a given depth
         *
         * ie: recurRegex("(abc~~~)", /~~~/g, 2) becomes:
         * (abc(abc(abc)))
         *
         * @param {string} re
         * @param {RegExp} substitution (should be a g mode regex)
         * @param {number} depth
         * @returns {string}``
         */
        function recurRegex(re, substitution, depth) {
          if (depth === -1) return "";
 
          return re.replace(substitution, _ => {
            return recurRegex(re, substitution, depth - 1);
          });
        }
 
        /** @type LanguageFn */
        function java(hljs) {
          const regex = hljs.regex;
          const JAVA_IDENT_RE = '[\u00C0-\u02B8a-zA-Z_$][\u00C0-\u02B8a-zA-Z_$0-9]*';
          const GENERIC_IDENT_RE = JAVA_IDENT_RE
            + recurRegex('(?:<' + JAVA_IDENT_RE + '~~~(?:\\s*,\\s*' + JAVA_IDENT_RE + '~~~)*>)?', /~~~/g, 2);
          const MAIN_KEYWORDS = [
            'synchronized',
            'abstract',
            'private',
            'var',
            'static',
            'if',
            'const ',
            'for',
            'while',
            'strictfp',
            'finally',
            'protected',
            'import',
            'native',
            'final',
            'void',
            'enum',
            'else',
            'break',
            'transient',
            'catch',
            'instanceof',
            'volatile',
            'case',
            'assert',
            'package',
            'default',
            'public',
            'try',
            'switch',
            'continue',
            'throws',
            'protected',
            'public',
            'private',
            'module',
            'requires',
            'exports',
            'do',
            'sealed',
            'yield',
            'permits'
          ];
 
          const BUILT_INS = [
            'super',
            'this'
          ];
 
          const LITERALS = [
            'false',
            'true',
            'null'
          ];
 
          const TYPES = [
            'char',
            'boolean',
            'long',
            'float',
            'int',
            'byte',
            'short',
            'double'
          ];
 
          const KEYWORDS = {
            keyword: MAIN_KEYWORDS,
            literal: LITERALS,
            type: TYPES,
            built_in: BUILT_INS
          };
 
          const ANNOTATION = {
            className: 'meta',
            begin: '@' + JAVA_IDENT_RE,
            contains: [
              {
                begin: /\(/,
                end: /\)/,
                contains: [ "self" ] // allow nested () inside our annotation
              }
            ]
          };
          const PARAMS = {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS,
            relevance: 0,
            contains: [ hljs.C_BLOCK_COMMENT_MODE ],
            endsParent: true
          };
 
          return {
            name: 'Java',
            aliases: [ 'jsp' ],
            keywords: KEYWORDS,
            illegal: /<\/|#/,
            contains: [
              hljs.COMMENT(
                '/\\*\\*',
                '\\*/',
                {
                  relevance: 0,
                  contains: [
                    {
                      // eat up @'s in emails to prevent them to be recognized as doctags
                      begin: /\w+@/,
                      relevance: 0
                    },
                    {
                      className: 'doctag',
                      begin: '@[A-Za-z]+'
                    }
                  ]
                }
              ),
              // relevance boost
              {
                begin: /import java\.[a-z]+\./,
                keywords: "import",
                relevance: 2
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                begin: /"""/,
                end: /"""/,
                className: "string",
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                match: [
                  /\b(?:class|interface|enum|extends|implements|new)/,
                  /\s+/,
                  JAVA_IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                }
              },
              {
                // Exceptions for hyphenated keywords
                match: /non-sealed/,
                scope: "keyword"
              },
              {
                begin: [
                  regex.concat(/(?!else)/, JAVA_IDENT_RE),
                  /\s+/,
                  JAVA_IDENT_RE,
                  /\s+/,
                  /=(?!=)/
                ],
                className: {
                  1: "type",
                  3: "variable",
                  5: "operator"
                }
              },
              {
                begin: [
                  /record/,
                  /\s+/,
                  JAVA_IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                },
                contains: [
                  PARAMS,
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              {
                // Expression keywords prevent 'keyword Name(...)' from being
                // recognized as a function definition
                beginKeywords: 'new throw return else',
                relevance: 0
              },
              {
                begin: [
                  '(?:' + GENERIC_IDENT_RE + '\\s+)',
                  hljs.UNDERSCORE_IDENT_RE,
                  /\s*(?=\()/
                ],
                className: { 2: "title.function" },
                keywords: KEYWORDS,
                contains: [
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    keywords: KEYWORDS,
                    relevance: 0,
                    contains: [
                      ANNOTATION,
                      hljs.APOS_STRING_MODE,
                      hljs.QUOTE_STRING_MODE,
                      NUMERIC,
                      hljs.C_BLOCK_COMMENT_MODE
                    ]
                  },
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              NUMERIC,
              ANNOTATION
            ]
          };
        }
 
        java_1 = java;
        return java_1;
    }
 
    var javascript_1;
    var hasRequiredJavascript;
 
    function requireJavascript () {
        if (hasRequiredJavascript) return javascript_1;
        hasRequiredJavascript = 1;
        const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
        const KEYWORDS = [
          "as", // for exports
          "in",
          "of",
          "if",
          "for",
          "while",
          "finally",
          "var",
          "new",
          "function",
          "do",
          "return",
          "void",
          "else",
          "break",
          "catch",
          "instanceof",
          "with",
          "throw",
          "case",
          "default",
          "try",
          "switch",
          "continue",
          "typeof",
          "delete",
          "let",
          "yield",
          "const",
          "class",
          // JS handles these with a special rule
          // "get",
          // "set",
          "debugger",
          "async",
          "await",
          "static",
          "import",
          "from",
          "export",
          "extends"
        ];
        const LITERALS = [
          "true",
          "false",
          "null",
          "undefined",
          "NaN",
          "Infinity"
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
        const TYPES = [
          // Fundamental objects
          "Object",
          "Function",
          "Boolean",
          "Symbol",
          // numbers and dates
          "Math",
          "Date",
          "Number",
          "BigInt",
          // text
          "String",
          "RegExp",
          // Indexed collections
          "Array",
          "Float32Array",
          "Float64Array",
          "Int8Array",
          "Uint8Array",
          "Uint8ClampedArray",
          "Int16Array",
          "Int32Array",
          "Uint16Array",
          "Uint32Array",
          "BigInt64Array",
          "BigUint64Array",
          // Keyed collections
          "Set",
          "Map",
          "WeakSet",
          "WeakMap",
          // Structured data
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Atomics",
          "DataView",
          "JSON",
          // Control abstraction objects
          "Promise",
          "Generator",
          "GeneratorFunction",
          "AsyncFunction",
          // Reflection
          "Reflect",
          "Proxy",
          // Internationalization
          "Intl",
          // WebAssembly
          "WebAssembly"
        ];
 
        const ERROR_TYPES = [
          "Error",
          "EvalError",
          "InternalError",
          "RangeError",
          "ReferenceError",
          "SyntaxError",
          "TypeError",
          "URIError"
        ];
 
        const BUILT_IN_GLOBALS = [
          "setInterval",
          "setTimeout",
          "clearInterval",
          "clearTimeout",
 
          "require",
          "exports",
 
          "eval",
          "isFinite",
          "isNaN",
          "parseFloat",
          "parseInt",
          "decodeURI",
          "decodeURIComponent",
          "encodeURI",
          "encodeURIComponent",
          "escape",
          "unescape"
        ];
 
        const BUILT_IN_VARIABLES = [
          "arguments",
          "this",
          "super",
          "console",
          "window",
          "document",
          "localStorage",
          "sessionStorage",
          "module",
          "global" // Node.js
        ];
 
        const BUILT_INS = [].concat(
          BUILT_IN_GLOBALS,
          TYPES,
          ERROR_TYPES
        );
 
        /*
        Language: JavaScript
        Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
        Category: common, scripting, web
        Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
        */
 
        /** @type LanguageFn */
        function javascript(hljs) {
          const regex = hljs.regex;
          /**
           * Takes a string like "<Booger" and checks to see
           * if we can find a matching "</Booger" later in the
           * content.
           * @param {RegExpMatchArray} match
           * @param {{after:number}} param1
           */
          const hasClosingTag = (match, { after }) => {
            const tag = "</" + match[0].slice(1);
            const pos = match.input.indexOf(tag, after);
            return pos !== -1;
          };
 
          const IDENT_RE$1 = IDENT_RE;
          const FRAGMENT = {
            begin: '<>',
            end: '</>'
          };
          // to avoid some special cases inside isTrulyOpeningTag
          const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
          const XML_TAG = {
            begin: /<[A-Za-z0-9\\._:-]+/,
            end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
            /**
             * @param {RegExpMatchArray} match
             * @param {CallbackResponse} response
             */
            isTrulyOpeningTag: (match, response) => {
              const afterMatchIndex = match[0].length + match.index;
              const nextChar = match.input[afterMatchIndex];
              if (
                // HTML should not include another raw `<` inside a tag
                // nested type?
                // `<Array<Array<number>>`, etc.
                nextChar === "<" ||
                // the , gives away that this is not HTML
                // `<T, A extends keyof T, V>`
                nextChar === ","
                ) {
                response.ignoreMatch();
                return;
              }
 
              // `<something>`
              // Quite possibly a tag, lets look for a matching closing tag...
              if (nextChar === ">") {
                // if we cannot find a matching closing tag, then we
                // will ignore it
                if (!hasClosingTag(match, { after: afterMatchIndex })) {
                  response.ignoreMatch();
                }
              }
 
              // `<blah />` (self-closing)
              // handled by simpleSelfClosing rule
 
              let m;
              const afterMatch = match.input.substring(afterMatchIndex);
 
              // some more template typing stuff
              //  <T = any>(key?: string) => Modify<
              if ((m = afterMatch.match(/^\s*=/))) {
                response.ignoreMatch();
                return;
              }
 
              // `<From extends string>`
              // technically this could be HTML, but it smells like a type
              // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
              if ((m = afterMatch.match(/^\s+extends\s+/))) {
                if (m.index === 0) {
                  response.ignoreMatch();
                  // eslint-disable-next-line no-useless-return
                  return;
                }
              }
            }
          };
          const KEYWORDS$1 = {
            $pattern: IDENT_RE,
            keyword: KEYWORDS,
            literal: LITERALS,
            built_in: BUILT_INS,
            "variable.language": BUILT_IN_VARIABLES
          };
 
          // https://tc39.es/ecma262/#sec-literals-numeric-literals
          const decimalDigits = '[0-9](_?[0-9])*';
          const frac = `\\.(${decimalDigits})`;
          // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
          // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
          const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
          const NUMBER = {
            className: 'number',
            variants: [
              // DecimalLiteral
              { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
                `[eE][+-]?(${decimalDigits})\\b` },
              { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },
 
              // DecimalBigIntegerLiteral
              { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
 
              // NonDecimalIntegerLiteral
              { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
              { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
              { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
 
              // LegacyOctalIntegerLiteral (does not include underscore separators)
              // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
              { begin: "\\b0[0-7]+n?\\b" },
            ],
            relevance: 0
          };
 
          const SUBST = {
            className: 'subst',
            begin: '\\$\\{',
            end: '\\}',
            keywords: KEYWORDS$1,
            contains: [] // defined later
          };
          const HTML_TEMPLATE = {
            begin: 'html`',
            end: '',
            starts: {
              end: '`',
              returnEnd: false,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              subLanguage: 'xml'
            }
          };
          const CSS_TEMPLATE = {
            begin: 'css`',
            end: '',
            starts: {
              end: '`',
              returnEnd: false,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              subLanguage: 'css'
            }
          };
          const GRAPHQL_TEMPLATE = {
            begin: 'gql`',
            end: '',
            starts: {
              end: '`',
              returnEnd: false,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              subLanguage: 'graphql'
            }
          };
          const TEMPLATE_STRING = {
            className: 'string',
            begin: '`',
            end: '`',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          };
          const JSDOC_COMMENT = hljs.COMMENT(
            /\/\*\*(?!\/)/,
            '\\*/',
            {
              relevance: 0,
              contains: [
                {
                  begin: '(?=@[A-Za-z]+)',
                  relevance: 0,
                  contains: [
                    {
                      className: 'doctag',
                      begin: '@[A-Za-z]+'
                    },
                    {
                      className: 'type',
                      begin: '\\{',
                      end: '\\}',
                      excludeEnd: true,
                      excludeBegin: true,
                      relevance: 0
                    },
                    {
                      className: 'variable',
                      begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
                      endsParent: true,
                      relevance: 0
                    },
                    // eat spaces (not newlines) so we can find
                    // types or variables
                    {
                      begin: /(?=[^\n])\s/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          );
          const COMMENT = {
            className: "comment",
            variants: [
              JSDOC_COMMENT,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_LINE_COMMENT_MODE
            ]
          };
          const SUBST_INTERNALS = [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            HTML_TEMPLATE,
            CSS_TEMPLATE,
            GRAPHQL_TEMPLATE,
            TEMPLATE_STRING,
            // Skip numbers when they are part of a variable name
            { match: /\$\d+/ },
            NUMBER,
            // This is intentional:
            // See https://github.com/highlightjs/highlight.js/issues/3288
            // hljs.REGEXP_MODE
          ];
          SUBST.contains = SUBST_INTERNALS
            .concat({
              // we need to pair up {} inside our subst to prevent
              // it from ending too early by matching another }
              begin: /\{/,
              end: /\}/,
              keywords: KEYWORDS$1,
              contains: [
                "self"
              ].concat(SUBST_INTERNALS)
            });
          const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
          const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
            // eat recursive parens in sub expressions
            {
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS$1,
              contains: ["self"].concat(SUBST_AND_COMMENTS)
            }
          ]);
          const PARAMS = {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS$1,
            contains: PARAMS_CONTAINS
          };
 
          // ES6 classes
          const CLASS_OR_EXTENDS = {
            variants: [
              // class Car extends vehicle
              {
                match: [
                  /class/,
                  /\s+/,
                  IDENT_RE$1,
                  /\s+/,
                  /extends/,
                  /\s+/,
                  regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
                ],
                scope: {
                  1: "keyword",
                  3: "title.class",
                  5: "keyword",
                  7: "title.class.inherited"
                }
              },
              // class Car
              {
                match: [
                  /class/,
                  /\s+/,
                  IDENT_RE$1
                ],
                scope: {
                  1: "keyword",
                  3: "title.class"
                }
              },
 
            ]
          };
 
          const CLASS_REFERENCE = {
            relevance: 0,
            match:
            regex.either(
              // Hard coded exceptions
              /\bJSON/,
              // Float32Array, OutT
              /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
              // CSSFactory, CSSFactoryT
              /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
              // FPs, FPsT
              /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
              // P
              // single letters are not highlighted
              // BLAH
              // this will be flagged as a UPPER_CASE_CONSTANT instead
            ),
            className: "title.class",
            keywords: {
              _: [
                // se we still get relevance credit for JS library classes
                ...TYPES,
                ...ERROR_TYPES
              ]
            }
          };
 
          const USE_STRICT = {
            label: "use_strict",
            className: 'meta',
            relevance: 10,
            begin: /^\s*['"]use (strict|asm)['"]/
          };
 
          const FUNCTION_DEFINITION = {
            variants: [
              {
                match: [
                  /function/,
                  /\s+/,
                  IDENT_RE$1,
                  /(?=\s*\()/
                ]
              },
              // anonymous function
              {
                match: [
                  /function/,
                  /\s*(?=\()/
                ]
              }
            ],
            className: {
              1: "keyword",
              3: "title.function"
            },
            label: "func.def",
            contains: [ PARAMS ],
            illegal: /%/
          };
 
          const UPPER_CASE_CONSTANT = {
            relevance: 0,
            match: /\b[A-Z][A-Z_0-9]+\b/,
            className: "variable.constant"
          };
 
          function noneOf(list) {
            return regex.concat("(?!", list.join("|"), ")");
          }
 
          const FUNCTION_CALL = {
            match: regex.concat(
              /\b/,
              noneOf([
                ...BUILT_IN_GLOBALS,
                "super",
                "import"
              ]),
              IDENT_RE$1, regex.lookahead(/\(/)),
            className: "title.function",
            relevance: 0
          };
 
          const PROPERTY_ACCESS = {
            begin: regex.concat(/\./, regex.lookahead(
              regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
            )),
            end: IDENT_RE$1,
            excludeBegin: true,
            keywords: "prototype",
            className: "property",
            relevance: 0
          };
 
          const GETTER_OR_SETTER = {
            match: [
              /get|set/,
              /\s+/,
              IDENT_RE$1,
              /(?=\()/
            ],
            className: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              { // eat to avoid empty params
                begin: /\(\)/
              },
              PARAMS
            ]
          };
 
          const FUNC_LEAD_IN_RE = '(\\(' +
            '[^()]*(\\(' +
            '[^()]*(\\(' +
            '[^()]*' +
            '\\)[^()]*)*' +
            '\\)[^()]*)*' +
            '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';
 
          const FUNCTION_VARIABLE = {
            match: [
              /const|var|let/, /\s+/,
              IDENT_RE$1, /\s*/,
              /=\s*/,
              /(async\s*)?/, // async is optional
              regex.lookahead(FUNC_LEAD_IN_RE)
            ],
            keywords: "async",
            className: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              PARAMS
            ]
          };
 
          return {
            name: 'JavaScript',
            aliases: ['js', 'jsx', 'mjs', 'cjs'],
            keywords: KEYWORDS$1,
            // this will be extended by TypeScript
            exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
            illegal: /#(?![$_A-z])/,
            contains: [
              hljs.SHEBANG({
                label: "shebang",
                binary: "node",
                relevance: 5
              }),
              USE_STRICT,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              HTML_TEMPLATE,
              CSS_TEMPLATE,
              GRAPHQL_TEMPLATE,
              TEMPLATE_STRING,
              COMMENT,
              // Skip numbers when they are part of a variable name
              { match: /\$\d+/ },
              NUMBER,
              CLASS_REFERENCE,
              {
                className: 'attr',
                begin: IDENT_RE$1 + regex.lookahead(':'),
                relevance: 0
              },
              FUNCTION_VARIABLE,
              { // "value" container
                begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
                keywords: 'return throw case',
                relevance: 0,
                contains: [
                  COMMENT,
                  hljs.REGEXP_MODE,
                  {
                    className: 'function',
                    // we have to count the parens to make sure we actually have the
                    // correct bounding ( ) before the =>.  There could be any number of
                    // sub-expressions inside also surrounded by parens.
                    begin: FUNC_LEAD_IN_RE,
                    returnBegin: true,
                    end: '\\s*=>',
                    contains: [
                      {
                        className: 'params',
                        variants: [
                          {
                            begin: hljs.UNDERSCORE_IDENT_RE,
                            relevance: 0
                          },
                          {
                            className: null,
                            begin: /\(\s*\)/,
                            skip: true
                          },
                          {
                            begin: /\(/,
                            end: /\)/,
                            excludeBegin: true,
                            excludeEnd: true,
                            keywords: KEYWORDS$1,
                            contains: PARAMS_CONTAINS
                          }
                        ]
                      }
                    ]
                  },
                  { // could be a comma delimited list of params to a function call
                    begin: /,/,
                    relevance: 0
                  },
                  {
                    match: /\s+/,
                    relevance: 0
                  },
                  { // JSX
                    variants: [
                      { begin: FRAGMENT.begin, end: FRAGMENT.end },
                      { match: XML_SELF_CLOSING },
                      {
                        begin: XML_TAG.begin,
                        // we carefully check the opening tag to see if it truly
                        // is a tag and not a false positive
                        'on:begin': XML_TAG.isTrulyOpeningTag,
                        end: XML_TAG.end
                      }
                    ],
                    subLanguage: 'xml',
                    contains: [
                      {
                        begin: XML_TAG.begin,
                        end: XML_TAG.end,
                        skip: true,
                        contains: ['self']
                      }
                    ]
                  }
                ],
              },
              FUNCTION_DEFINITION,
              {
                // prevent this from getting swallowed up by function
                // since they appear "function like"
                beginKeywords: "while if switch catch for"
              },
              {
                // we have to count the parens to make sure we actually have the correct
                // bounding ( ).  There could be any number of sub-expressions inside
                // also surrounded by parens.
                begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
                  '\\(' + // first parens
                  '[^()]*(\\(' +
                    '[^()]*(\\(' +
                      '[^()]*' +
                    '\\)[^()]*)*' +
                  '\\)[^()]*)*' +
                  '\\)\\s*\\{', // end parens
                returnBegin:true,
                label: "func.def",
                contains: [
                  PARAMS,
                  hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
                ]
              },
              // catch ... so it won't trigger the property rule below
              {
                match: /\.\.\./,
                relevance: 0
              },
              PROPERTY_ACCESS,
              // hack: prevents detection of keywords in some circumstances
              // .keyword()
              // $keyword = x
              {
                match: '\\$' + IDENT_RE$1,
                relevance: 0
              },
              {
                match: [ /\bconstructor(?=\s*\()/ ],
                className: { 1: "title.function" },
                contains: [ PARAMS ]
              },
              FUNCTION_CALL,
              UPPER_CASE_CONSTANT,
              CLASS_OR_EXTENDS,
              GETTER_OR_SETTER,
              {
                match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
              }
            ]
          };
        }
 
        javascript_1 = javascript;
        return javascript_1;
    }
 
    /*
     Language: JBoss CLI
     Author: Raphaël Parrëe <rparree@edc4it.com>
     Description: language definition jboss cli
     Website: https://docs.jboss.org/author/display/WFLY/Command+Line+Interface
     Category: config
     */
 
    var jbossCli_1;
    var hasRequiredJbossCli;
 
    function requireJbossCli () {
        if (hasRequiredJbossCli) return jbossCli_1;
        hasRequiredJbossCli = 1;
        function jbossCli(hljs) {
          const PARAM = {
            begin: /[\w-]+ *=/,
            returnBegin: true,
            relevance: 0,
            contains: [
              {
                className: 'attr',
                begin: /[\w-]+/
              }
            ]
          };
          const PARAMSBLOCK = {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            contains: [ PARAM ],
            relevance: 0
          };
          const OPERATION = {
            className: 'function',
            begin: /:[\w\-.]+/,
            relevance: 0
          };
          const PATH = {
            className: 'string',
            begin: /\B([\/.])[\w\-.\/=]+/
          };
          const COMMAND_PARAMS = {
            className: 'params',
            begin: /--[\w\-=\/]+/
          };
          return {
            name: 'JBoss CLI',
            aliases: [ 'wildfly-cli' ],
            keywords: {
              $pattern: '[a-z\-]+',
              keyword: 'alias batch cd clear command connect connection-factory connection-info data-source deploy '
              + 'deployment-info deployment-overlay echo echo-dmr help history if jdbc-driver-info jms-queue|20 jms-topic|20 ls '
              + 'patch pwd quit read-attribute read-operation reload rollout-plan run-batch set shutdown try unalias '
              + 'undeploy unset version xa-data-source', // module
              literal: 'true false'
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              COMMAND_PARAMS,
              OPERATION,
              PATH,
              PARAMSBLOCK
            ]
          };
        }
 
        jbossCli_1 = jbossCli;
        return jbossCli_1;
    }
 
    /*
    Language: JSON
    Description: JSON (JavaScript Object Notation) is a lightweight data-interchange format.
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Website: http://www.json.org
    Category: common, protocols, web
    */
 
    var json_1;
    var hasRequiredJson;
 
    function requireJson () {
        if (hasRequiredJson) return json_1;
        hasRequiredJson = 1;
        function json(hljs) {
          const ATTRIBUTE = {
            className: 'attr',
            begin: /"(\\.|[^\\"\r\n])*"(?=\s*:)/,
            relevance: 1.01
          };
          const PUNCTUATION = {
            match: /[{}[\],:]/,
            className: "punctuation",
            relevance: 0
          };
          const LITERALS = [
            "true",
            "false",
            "null"
          ];
          // NOTE: normally we would rely on `keywords` for this but using a mode here allows us
          // - to use the very tight `illegal: \S` rule later to flag any other character
          // - as illegal indicating that despite looking like JSON we do not truly have
          // - JSON and thus improve false-positively greatly since JSON will try and claim
          // - all sorts of JSON looking stuff
          const LITERALS_MODE = {
            scope: "literal",
            beginKeywords: LITERALS.join(" "),
          };
 
          return {
            name: 'JSON',
            keywords:{
              literal: LITERALS,
            },
            contains: [
              ATTRIBUTE,
              PUNCTUATION,
              hljs.QUOTE_STRING_MODE,
              LITERALS_MODE,
              hljs.C_NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ],
            illegal: '\\S'
          };
        }
 
        json_1 = json;
        return json_1;
    }
 
    /*
    Language: Julia
    Description: Julia is a high-level, high-performance, dynamic programming language.
    Author: Kenta Sato <bicycle1885@gmail.com>
    Contributors: Alex Arslan <ararslan@comcast.net>, Fredrik Ekre <ekrefredrik@gmail.com>
    Website: https://julialang.org
    */
 
    var julia_1;
    var hasRequiredJulia;
 
    function requireJulia () {
        if (hasRequiredJulia) return julia_1;
        hasRequiredJulia = 1;
        function julia(hljs) {
          // Since there are numerous special names in Julia, it is too much trouble
          // to maintain them by hand. Hence these names (i.e. keywords, literals and
          // built-ins) are automatically generated from Julia 1.5.2 itself through
          // the following scripts for each.
 
          // ref: https://docs.julialang.org/en/v1/manual/variables/#Allowed-Variable-Names
          const VARIABLE_NAME_RE = '[A-Za-z_\\u00A1-\\uFFFF][A-Za-z_0-9\\u00A1-\\uFFFF]*';
 
          // # keyword generator, multi-word keywords handled manually below (Julia 1.5.2)
          // import REPL.REPLCompletions
          // res = String["in", "isa", "where"]
          // for kw in collect(x.keyword for x in REPLCompletions.complete_keyword(""))
          //     if !(contains(kw, " ") || kw == "struct")
          //         push!(res, kw)
          //     end
          // end
          // sort!(unique!(res))
          // foreach(x -> println("\'", x, "\',"), res)
          const KEYWORD_LIST = [
            'baremodule',
            'begin',
            'break',
            'catch',
            'ccall',
            'const',
            'continue',
            'do',
            'else',
            'elseif',
            'end',
            'export',
            'false',
            'finally',
            'for',
            'function',
            'global',
            'if',
            'import',
            'in',
            'isa',
            'let',
            'local',
            'macro',
            'module',
            'quote',
            'return',
            'true',
            'try',
            'using',
            'where',
            'while',
          ];
 
          // # literal generator (Julia 1.5.2)
          // import REPL.REPLCompletions
          // res = String["true", "false"]
          // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),
          //                     REPLCompletions.completions("", 0)[1])
          //     try
          //         v = eval(Symbol(compl.mod))
          //         if !(v isa Function || v isa Type || v isa TypeVar || v isa Module || v isa Colon)
          //             push!(res, compl.mod)
          //         end
          //     catch e
          //     end
          // end
          // sort!(unique!(res))
          // foreach(x -> println("\'", x, "\',"), res)
          const LITERAL_LIST = [
            'ARGS',
            'C_NULL',
            'DEPOT_PATH',
            'ENDIAN_BOM',
            'ENV',
            'Inf',
            'Inf16',
            'Inf32',
            'Inf64',
            'InsertionSort',
            'LOAD_PATH',
            'MergeSort',
            'NaN',
            'NaN16',
            'NaN32',
            'NaN64',
            'PROGRAM_FILE',
            'QuickSort',
            'RoundDown',
            'RoundFromZero',
            'RoundNearest',
            'RoundNearestTiesAway',
            'RoundNearestTiesUp',
            'RoundToZero',
            'RoundUp',
            'VERSION|0',
            'devnull',
            'false',
            'im',
            'missing',
            'nothing',
            'pi',
            'stderr',
            'stdin',
            'stdout',
            'true',
            'undef',
            'π',
            'ℯ',
          ];
 
          // # built_in generator (Julia 1.5.2)
          // import REPL.REPLCompletions
          // res = String[]
          // for compl in filter!(x -> isa(x, REPLCompletions.ModuleCompletion) && (x.parent === Base || x.parent === Core),
          //                     REPLCompletions.completions("", 0)[1])
          //     try
          //         v = eval(Symbol(compl.mod))
          //         if (v isa Type || v isa TypeVar) && (compl.mod != "=>")
          //             push!(res, compl.mod)
          //         end
          //     catch e
          //     end
          // end
          // sort!(unique!(res))
          // foreach(x -> println("\'", x, "\',"), res)
          const BUILT_IN_LIST = [
            'AbstractArray',
            'AbstractChannel',
            'AbstractChar',
            'AbstractDict',
            'AbstractDisplay',
            'AbstractFloat',
            'AbstractIrrational',
            'AbstractMatrix',
            'AbstractRange',
            'AbstractSet',
            'AbstractString',
            'AbstractUnitRange',
            'AbstractVecOrMat',
            'AbstractVector',
            'Any',
            'ArgumentError',
            'Array',
            'AssertionError',
            'BigFloat',
            'BigInt',
            'BitArray',
            'BitMatrix',
            'BitSet',
            'BitVector',
            'Bool',
            'BoundsError',
            'CapturedException',
            'CartesianIndex',
            'CartesianIndices',
            'Cchar',
            'Cdouble',
            'Cfloat',
            'Channel',
            'Char',
            'Cint',
            'Cintmax_t',
            'Clong',
            'Clonglong',
            'Cmd',
            'Colon',
            'Complex',
            'ComplexF16',
            'ComplexF32',
            'ComplexF64',
            'CompositeException',
            'Condition',
            'Cptrdiff_t',
            'Cshort',
            'Csize_t',
            'Cssize_t',
            'Cstring',
            'Cuchar',
            'Cuint',
            'Cuintmax_t',
            'Culong',
            'Culonglong',
            'Cushort',
            'Cvoid',
            'Cwchar_t',
            'Cwstring',
            'DataType',
            'DenseArray',
            'DenseMatrix',
            'DenseVecOrMat',
            'DenseVector',
            'Dict',
            'DimensionMismatch',
            'Dims',
            'DivideError',
            'DomainError',
            'EOFError',
            'Enum',
            'ErrorException',
            'Exception',
            'ExponentialBackOff',
            'Expr',
            'Float16',
            'Float32',
            'Float64',
            'Function',
            'GlobalRef',
            'HTML',
            'IO',
            'IOBuffer',
            'IOContext',
            'IOStream',
            'IdDict',
            'IndexCartesian',
            'IndexLinear',
            'IndexStyle',
            'InexactError',
            'InitError',
            'Int',
            'Int128',
            'Int16',
            'Int32',
            'Int64',
            'Int8',
            'Integer',
            'InterruptException',
            'InvalidStateException',
            'Irrational',
            'KeyError',
            'LinRange',
            'LineNumberNode',
            'LinearIndices',
            'LoadError',
            'MIME',
            'Matrix',
            'Method',
            'MethodError',
            'Missing',
            'MissingException',
            'Module',
            'NTuple',
            'NamedTuple',
            'Nothing',
            'Number',
            'OrdinalRange',
            'OutOfMemoryError',
            'OverflowError',
            'Pair',
            'PartialQuickSort',
            'PermutedDimsArray',
            'Pipe',
            'ProcessFailedException',
            'Ptr',
            'QuoteNode',
            'Rational',
            'RawFD',
            'ReadOnlyMemoryError',
            'Real',
            'ReentrantLock',
            'Ref',
            'Regex',
            'RegexMatch',
            'RoundingMode',
            'SegmentationFault',
            'Set',
            'Signed',
            'Some',
            'StackOverflowError',
            'StepRange',
            'StepRangeLen',
            'StridedArray',
            'StridedMatrix',
            'StridedVecOrMat',
            'StridedVector',
            'String',
            'StringIndexError',
            'SubArray',
            'SubString',
            'SubstitutionString',
            'Symbol',
            'SystemError',
            'Task',
            'TaskFailedException',
            'Text',
            'TextDisplay',
            'Timer',
            'Tuple',
            'Type',
            'TypeError',
            'TypeVar',
            'UInt',
            'UInt128',
            'UInt16',
            'UInt32',
            'UInt64',
            'UInt8',
            'UndefInitializer',
            'UndefKeywordError',
            'UndefRefError',
            'UndefVarError',
            'Union',
            'UnionAll',
            'UnitRange',
            'Unsigned',
            'Val',
            'Vararg',
            'VecElement',
            'VecOrMat',
            'Vector',
            'VersionNumber',
            'WeakKeyDict',
            'WeakRef',
          ];
 
          const KEYWORDS = {
            $pattern: VARIABLE_NAME_RE,
            keyword: KEYWORD_LIST,
            literal: LITERAL_LIST,
            built_in: BUILT_IN_LIST,
          };
 
          // placeholder for recursive self-reference
          const DEFAULT = {
            keywords: KEYWORDS,
            illegal: /<\//
          };
 
          // ref: https://docs.julialang.org/en/v1/manual/integers-and-floating-point-numbers/
          const NUMBER = {
            className: 'number',
            // supported numeric literals:
            //  * binary literal (e.g. 0x10)
            //  * octal literal (e.g. 0o76543210)
            //  * hexadecimal literal (e.g. 0xfedcba876543210)
            //  * hexadecimal floating point literal (e.g. 0x1p0, 0x1.2p2)
            //  * decimal literal (e.g. 9876543210, 100_000_000)
            //  * floating pointe literal (e.g. 1.2, 1.2f, .2, 1., 1.2e10, 1.2e-10)
            begin: /(\b0x[\d_]*(\.[\d_]*)?|0x\.\d[\d_]*)p[-+]?\d+|\b0[box][a-fA-F0-9][a-fA-F0-9_]*|(\b\d[\d_]*(\.[\d_]*)?|\.\d[\d_]*)([eEfF][-+]?\d+)?/,
            relevance: 0
          };
 
          const CHAR = {
            className: 'string',
            begin: /'(.|\\[xXuU][a-zA-Z0-9]+)'/
          };
 
          const INTERPOLATION = {
            className: 'subst',
            begin: /\$\(/,
            end: /\)/,
            keywords: KEYWORDS
          };
 
          const INTERPOLATED_VARIABLE = {
            className: 'variable',
            begin: '\\$' + VARIABLE_NAME_RE
          };
 
          // TODO: neatly escape normal code in string literal
          const STRING = {
            className: 'string',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              INTERPOLATION,
              INTERPOLATED_VARIABLE
            ],
            variants: [
              {
                begin: /\w*"""/,
                end: /"""\w*/,
                relevance: 10
              },
              {
                begin: /\w*"/,
                end: /"\w*/
              }
            ]
          };
 
          const COMMAND = {
            className: 'string',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              INTERPOLATION,
              INTERPOLATED_VARIABLE
            ],
            begin: '`',
            end: '`'
          };
 
          const MACROCALL = {
            className: 'meta',
            begin: '@' + VARIABLE_NAME_RE
          };
 
          const COMMENT = {
            className: 'comment',
            variants: [
              {
                begin: '#=',
                end: '=#',
                relevance: 10
              },
              {
                begin: '#',
                end: '$'
              }
            ]
          };
 
          DEFAULT.name = 'Julia';
          DEFAULT.contains = [
            NUMBER,
            CHAR,
            STRING,
            COMMAND,
            MACROCALL,
            COMMENT,
            hljs.HASH_COMMENT_MODE,
            {
              className: 'keyword',
              begin:
                '\\b(((abstract|primitive)\\s+)type|(mutable\\s+)?struct)\\b'
            },
            { begin: /<:/ } // relevance booster
          ];
          INTERPOLATION.contains = DEFAULT.contains;
 
          return DEFAULT;
        }
 
        julia_1 = julia;
        return julia_1;
    }
 
    /*
    Language: Julia REPL
    Description: Julia REPL sessions
    Author: Morten Piibeleht <morten.piibeleht@gmail.com>
    Website: https://julialang.org
    Requires: julia.js
 
    The Julia REPL code blocks look something like the following:
 
      julia> function foo(x)
                 x + 1
             end
      foo (generic function with 1 method)
 
    They start on a new line with "julia>". Usually there should also be a space after this, but
    we also allow the code to start right after the > character. The code may run over multiple
    lines, but the additional lines must start with six spaces (i.e. be indented to match
    "julia>"). The rest of the code is assumed to be output from the executed code and will be
    left un-highlighted.
 
    Using simply spaces to identify line continuations may get a false-positive if the output
    also prints out six spaces, but such cases should be rare.
    */
 
    var juliaRepl_1;
    var hasRequiredJuliaRepl;
 
    function requireJuliaRepl () {
        if (hasRequiredJuliaRepl) return juliaRepl_1;
        hasRequiredJuliaRepl = 1;
        function juliaRepl(hljs) {
          return {
            name: 'Julia REPL',
            contains: [
              {
                className: 'meta.prompt',
                begin: /^julia>/,
                relevance: 10,
                starts: {
                  // end the highlighting if we are on a new line and the line does not have at
                  // least six spaces in the beginning
                  end: /^(?![ ]{6})/,
                  subLanguage: 'julia'
                },
              },
            ],
            // jldoctest Markdown blocks are used in the Julia manual and package docs indicate
            // code snippets that should be verified when the documentation is built. They can be
            // either REPL-like or script-like, but are usually REPL-like and therefore we apply
            // julia-repl highlighting to them. More information can be found in Documenter's
            // manual: https://juliadocs.github.io/Documenter.jl/latest/man/doctests.html
            aliases: [ 'jldoctest' ],
          };
        }
 
        juliaRepl_1 = juliaRepl;
        return juliaRepl_1;
    }
 
    var kotlin_1;
    var hasRequiredKotlin;
 
    function requireKotlin () {
        if (hasRequiredKotlin) return kotlin_1;
        hasRequiredKotlin = 1;
        // https://docs.oracle.com/javase/specs/jls/se15/html/jls-3.html#jls-3.10
        var decimalDigits = '[0-9](_*[0-9])*';
        var frac = `\\.(${decimalDigits})`;
        var hexDigits = '[0-9a-fA-F](_*[0-9a-fA-F])*';
        var NUMERIC = {
          className: 'number',
          variants: [
            // DecimalFloatingPointLiteral
            // including ExponentPart
            { begin: `(\\b(${decimalDigits})((${frac})|\\.)?|(${frac}))` +
              `[eE][+-]?(${decimalDigits})[fFdD]?\\b` },
            // excluding ExponentPart
            { begin: `\\b(${decimalDigits})((${frac})[fFdD]?\\b|\\.([fFdD]\\b)?)` },
            { begin: `(${frac})[fFdD]?\\b` },
            { begin: `\\b(${decimalDigits})[fFdD]\\b` },
 
            // HexadecimalFloatingPointLiteral
            { begin: `\\b0[xX]((${hexDigits})\\.?|(${hexDigits})?\\.(${hexDigits}))` +
              `[pP][+-]?(${decimalDigits})[fFdD]?\\b` },
 
            // DecimalIntegerLiteral
            { begin: '\\b(0|[1-9](_*[0-9])*)[lL]?\\b' },
 
            // HexIntegerLiteral
            { begin: `\\b0[xX](${hexDigits})[lL]?\\b` },
 
            // OctalIntegerLiteral
            { begin: '\\b0(_*[0-7])*[lL]?\\b' },
 
            // BinaryIntegerLiteral
            { begin: '\\b0[bB][01](_*[01])*[lL]?\\b' },
          ],
          relevance: 0
        };
 
        /*
         Language: Kotlin
         Description: Kotlin is an OSS statically typed programming language that targets the JVM, Android, JavaScript and Native.
         Author: Sergey Mashkov <cy6erGn0m@gmail.com>
         Website: https://kotlinlang.org
         Category: common
         */
 
        function kotlin(hljs) {
          const KEYWORDS = {
            keyword:
              'abstract as val var vararg get set class object open private protected public noinline '
              + 'crossinline dynamic final enum if else do while for when throw try catch finally '
              + 'import package is in fun override companion reified inline lateinit init '
              + 'interface annotation data sealed internal infix operator out by constructor super '
              + 'tailrec where const inner suspend typealias external expect actual',
            built_in:
              'Byte Short Char Int Long Boolean Float Double Void Unit Nothing',
            literal:
              'true false null'
          };
          const KEYWORDS_WITH_LABEL = {
            className: 'keyword',
            begin: /\b(break|continue|return|this)\b/,
            starts: { contains: [
              {
                className: 'symbol',
                begin: /@\w+/
              }
            ] }
          };
          const LABEL = {
            className: 'symbol',
            begin: hljs.UNDERSCORE_IDENT_RE + '@'
          };
 
          // for string templates
          const SUBST = {
            className: 'subst',
            begin: /\$\{/,
            end: /\}/,
            contains: [ hljs.C_NUMBER_MODE ]
          };
          const VARIABLE = {
            className: 'variable',
            begin: '\\$' + hljs.UNDERSCORE_IDENT_RE
          };
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: '"""',
                end: '"""(?=[^"])',
                contains: [
                  VARIABLE,
                  SUBST
                ]
              },
              // Can't use built-in modes easily, as we want to use STRING in the meta
              // context as 'meta-string' and there's no syntax to remove explicitly set
              // classNames in built-in modes.
              {
                begin: '\'',
                end: '\'',
                illegal: /\n/,
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                begin: '"',
                end: '"',
                illegal: /\n/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  VARIABLE,
                  SUBST
                ]
              }
            ]
          };
          SUBST.contains.push(STRING);
 
          const ANNOTATION_USE_SITE = {
            className: 'meta',
            begin: '@(?:file|property|field|get|set|receiver|param|setparam|delegate)\\s*:(?:\\s*' + hljs.UNDERSCORE_IDENT_RE + ')?'
          };
          const ANNOTATION = {
            className: 'meta',
            begin: '@' + hljs.UNDERSCORE_IDENT_RE,
            contains: [
              {
                begin: /\(/,
                end: /\)/,
                contains: [
                  hljs.inherit(STRING, { className: 'string' }),
                  "self"
                ]
              }
            ]
          };
 
          // https://kotlinlang.org/docs/reference/whatsnew11.html#underscores-in-numeric-literals
          // According to the doc above, the number mode of kotlin is the same as java 8,
          // so the code below is copied from java.js
          const KOTLIN_NUMBER_MODE = NUMERIC;
          const KOTLIN_NESTED_COMMENT = hljs.COMMENT(
            '/\\*', '\\*/',
            { contains: [ hljs.C_BLOCK_COMMENT_MODE ] }
          );
          const KOTLIN_PAREN_TYPE = { variants: [
            {
              className: 'type',
              begin: hljs.UNDERSCORE_IDENT_RE
            },
            {
              begin: /\(/,
              end: /\)/,
              contains: [] // defined later
            }
          ] };
          const KOTLIN_PAREN_TYPE2 = KOTLIN_PAREN_TYPE;
          KOTLIN_PAREN_TYPE2.variants[1].contains = [ KOTLIN_PAREN_TYPE ];
          KOTLIN_PAREN_TYPE.variants[1].contains = [ KOTLIN_PAREN_TYPE2 ];
 
          return {
            name: 'Kotlin',
            aliases: [
              'kt',
              'kts'
            ],
            keywords: KEYWORDS,
            contains: [
              hljs.COMMENT(
                '/\\*\\*',
                '\\*/',
                {
                  relevance: 0,
                  contains: [
                    {
                      className: 'doctag',
                      begin: '@[A-Za-z]+'
                    }
                  ]
                }
              ),
              hljs.C_LINE_COMMENT_MODE,
              KOTLIN_NESTED_COMMENT,
              KEYWORDS_WITH_LABEL,
              LABEL,
              ANNOTATION_USE_SITE,
              ANNOTATION,
              {
                className: 'function',
                beginKeywords: 'fun',
                end: '[(]|$',
                returnBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                relevance: 5,
                contains: [
                  {
                    begin: hljs.UNDERSCORE_IDENT_RE + '\\s*\\(',
                    returnBegin: true,
                    relevance: 0,
                    contains: [ hljs.UNDERSCORE_TITLE_MODE ]
                  },
                  {
                    className: 'type',
                    begin: /</,
                    end: />/,
                    keywords: 'reified',
                    relevance: 0
                  },
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    endsParent: true,
                    keywords: KEYWORDS,
                    relevance: 0,
                    contains: [
                      {
                        begin: /:/,
                        end: /[=,\/]/,
                        endsWithParent: true,
                        contains: [
                          KOTLIN_PAREN_TYPE,
                          hljs.C_LINE_COMMENT_MODE,
                          KOTLIN_NESTED_COMMENT
                        ],
                        relevance: 0
                      },
                      hljs.C_LINE_COMMENT_MODE,
                      KOTLIN_NESTED_COMMENT,
                      ANNOTATION_USE_SITE,
                      ANNOTATION,
                      STRING,
                      hljs.C_NUMBER_MODE
                    ]
                  },
                  KOTLIN_NESTED_COMMENT
                ]
              },
              {
                begin: [
                  /class|interface|trait/,
                  /\s+/,
                  hljs.UNDERSCORE_IDENT_RE
                ],
                beginScope: {
                  3: "title.class"
                },
                keywords: 'class interface trait',
                end: /[:\{(]|$/,
                excludeEnd: true,
                illegal: 'extends implements',
                contains: [
                  { beginKeywords: 'public protected internal private constructor' },
                  hljs.UNDERSCORE_TITLE_MODE,
                  {
                    className: 'type',
                    begin: /</,
                    end: />/,
                    excludeBegin: true,
                    excludeEnd: true,
                    relevance: 0
                  },
                  {
                    className: 'type',
                    begin: /[,:]\s*/,
                    end: /[<\(,){\s]|$/,
                    excludeBegin: true,
                    returnEnd: true
                  },
                  ANNOTATION_USE_SITE,
                  ANNOTATION
                ]
              },
              STRING,
              {
                className: 'meta',
                begin: "^#!/usr/bin/env",
                end: '$',
                illegal: '\n'
              },
              KOTLIN_NUMBER_MODE
            ]
          };
        }
 
        kotlin_1 = kotlin;
        return kotlin_1;
    }
 
    /*
    Language: Lasso
    Author: Eric Knibbe <eric@lassosoft.com>
    Description: Lasso is a language and server platform for database-driven web applications. This definition handles Lasso 9 syntax and LassoScript for Lasso 8.6 and earlier.
    Website: http://www.lassosoft.com/What-Is-Lasso
    */
 
    var lasso_1;
    var hasRequiredLasso;
 
    function requireLasso () {
        if (hasRequiredLasso) return lasso_1;
        hasRequiredLasso = 1;
        function lasso(hljs) {
          const LASSO_IDENT_RE = '[a-zA-Z_][\\w.]*';
          const LASSO_ANGLE_RE = '<\\?(lasso(script)?|=)';
          const LASSO_CLOSE_RE = '\\]|\\?>';
          const LASSO_KEYWORDS = {
            $pattern: LASSO_IDENT_RE + '|&[lg]t;',
            literal:
              'true false none minimal full all void and or not '
              + 'bw nbw ew new cn ncn lt lte gt gte eq neq rx nrx ft',
            built_in:
              'array date decimal duration integer map pair string tag xml null '
              + 'boolean bytes keyword list locale queue set stack staticarray '
              + 'local var variable global data self inherited currentcapture givenblock',
            keyword:
              'cache database_names database_schemanames database_tablenames '
              + 'define_tag define_type email_batch encode_set html_comment handle '
              + 'handle_error header if inline iterate ljax_target link '
              + 'link_currentaction link_currentgroup link_currentrecord link_detail '
              + 'link_firstgroup link_firstrecord link_lastgroup link_lastrecord '
              + 'link_nextgroup link_nextrecord link_prevgroup link_prevrecord log '
              + 'loop namespace_using output_none portal private protect records '
              + 'referer referrer repeating resultset rows search_args '
              + 'search_arguments select sort_args sort_arguments thread_atomic '
              + 'value_list while abort case else fail_if fail_ifnot fail if_empty '
              + 'if_false if_null if_true loop_abort loop_continue loop_count params '
              + 'params_up return return_value run_children soap_definetag '
              + 'soap_lastrequest soap_lastresponse tag_name ascending average by '
              + 'define descending do equals frozen group handle_failure import in '
              + 'into join let match max min on order parent protected provide public '
              + 'require returnhome skip split_thread sum take thread to trait type '
              + 'where with yield yieldhome'
          };
          const HTML_COMMENT = hljs.COMMENT(
            '<!--',
            '-->',
            { relevance: 0 }
          );
          const LASSO_NOPROCESS = {
            className: 'meta',
            begin: '\\[noprocess\\]',
            starts: {
              end: '\\[/noprocess\\]',
              returnEnd: true,
              contains: [ HTML_COMMENT ]
            }
          };
          const LASSO_START = {
            className: 'meta',
            begin: '\\[/noprocess|' + LASSO_ANGLE_RE
          };
          const LASSO_DATAMEMBER = {
            className: 'symbol',
            begin: '\'' + LASSO_IDENT_RE + '\''
          };
          const LASSO_CODE = [
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.inherit(hljs.C_NUMBER_MODE, { begin: hljs.C_NUMBER_RE + '|(-?infinity|NaN)\\b' }),
            hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
            hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
            {
              className: 'string',
              begin: '`',
              end: '`'
            },
            { // variables
              variants: [
                { begin: '[#$]' + LASSO_IDENT_RE },
                {
                  begin: '#',
                  end: '\\d+',
                  illegal: '\\W'
                }
              ] },
            {
              className: 'type',
              begin: '::\\s*',
              end: LASSO_IDENT_RE,
              illegal: '\\W'
            },
            {
              className: 'params',
              variants: [
                {
                  begin: '-(?!infinity)' + LASSO_IDENT_RE,
                  relevance: 0
                },
                { begin: '(\\.\\.\\.)' }
              ]
            },
            {
              begin: /(->|\.)\s*/,
              relevance: 0,
              contains: [ LASSO_DATAMEMBER ]
            },
            {
              className: 'class',
              beginKeywords: 'define',
              returnEnd: true,
              end: '\\(|=>',
              contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: LASSO_IDENT_RE + '(=(?!>))?|[-+*/%](?!>)' }) ]
            }
          ];
          return {
            name: 'Lasso',
            aliases: [
              'ls',
              'lassoscript'
            ],
            case_insensitive: true,
            keywords: LASSO_KEYWORDS,
            contains: [
              {
                className: 'meta',
                begin: LASSO_CLOSE_RE,
                relevance: 0,
                starts: { // markup
                  end: '\\[|' + LASSO_ANGLE_RE,
                  returnEnd: true,
                  relevance: 0,
                  contains: [ HTML_COMMENT ]
                }
              },
              LASSO_NOPROCESS,
              LASSO_START,
              {
                className: 'meta',
                begin: '\\[no_square_brackets',
                starts: {
                  end: '\\[/no_square_brackets\\]', // not implemented in the language
                  keywords: LASSO_KEYWORDS,
                  contains: [
                    {
                      className: 'meta',
                      begin: LASSO_CLOSE_RE,
                      relevance: 0,
                      starts: {
                        end: '\\[noprocess\\]|' + LASSO_ANGLE_RE,
                        returnEnd: true,
                        contains: [ HTML_COMMENT ]
                      }
                    },
                    LASSO_NOPROCESS,
                    LASSO_START
                  ].concat(LASSO_CODE)
                }
              },
              {
                className: 'meta',
                begin: '\\[',
                relevance: 0
              },
              {
                className: 'meta',
                begin: '^#!',
                end: 'lasso9$',
                relevance: 10
              }
            ].concat(LASSO_CODE)
          };
        }
 
        lasso_1 = lasso;
        return lasso_1;
    }
 
    /*
    Language: LaTeX
    Author: Benedikt Wilde <bwilde@posteo.de>
    Website: https://www.latex-project.org
    Category: markup
    */
 
    var latex_1;
    var hasRequiredLatex;
 
    function requireLatex () {
        if (hasRequiredLatex) return latex_1;
        hasRequiredLatex = 1;
        /** @type LanguageFn */
        function latex(hljs) {
          const regex = hljs.regex;
          const KNOWN_CONTROL_WORDS = regex.either(...[
            '(?:NeedsTeXFormat|RequirePackage|GetIdInfo)',
            'Provides(?:Expl)?(?:Package|Class|File)',
            '(?:DeclareOption|ProcessOptions)',
            '(?:documentclass|usepackage|input|include)',
            'makeat(?:letter|other)',
            'ExplSyntax(?:On|Off)',
            '(?:new|renew|provide)?command',
            '(?:re)newenvironment',
            '(?:New|Renew|Provide|Declare)(?:Expandable)?DocumentCommand',
            '(?:New|Renew|Provide|Declare)DocumentEnvironment',
            '(?:(?:e|g|x)?def|let)',
            '(?:begin|end)',
            '(?:part|chapter|(?:sub){0,2}section|(?:sub)?paragraph)',
            'caption',
            '(?:label|(?:eq|page|name)?ref|(?:paren|foot|super)?cite)',
            '(?:alpha|beta|[Gg]amma|[Dd]elta|(?:var)?epsilon|zeta|eta|[Tt]heta|vartheta)',
            '(?:iota|(?:var)?kappa|[Ll]ambda|mu|nu|[Xx]i|[Pp]i|varpi|(?:var)rho)',
            '(?:[Ss]igma|varsigma|tau|[Uu]psilon|[Pp]hi|varphi|chi|[Pp]si|[Oo]mega)',
            '(?:frac|sum|prod|lim|infty|times|sqrt|leq|geq|left|right|middle|[bB]igg?)',
            '(?:[lr]angle|q?quad|[lcvdi]?dots|d?dot|hat|tilde|bar)'
          ].map(word => word + '(?![a-zA-Z@:_])'));
          const L3_REGEX = new RegExp([
            // A function \module_function_name:signature or \__module_function_name:signature,
            // where both module and function_name need at least two characters and
            // function_name may contain single underscores.
            '(?:__)?[a-zA-Z]{2,}_[a-zA-Z](?:_?[a-zA-Z])+:[a-zA-Z]*',
            // A variable \scope_module_and_name_type or \scope__module_ane_name_type,
            // where scope is one of l, g or c, type needs at least two characters
            // and module_and_name may contain single underscores.
            '[lgc]__?[a-zA-Z](?:_?[a-zA-Z])*_[a-zA-Z]{2,}',
            // A quark \q_the_name or \q__the_name or
            // scan mark \s_the_name or \s__vthe_name,
            // where variable_name needs at least two characters and
            // may contain single underscores.
            '[qs]__?[a-zA-Z](?:_?[a-zA-Z])+',
            // Other LaTeX3 macro names that are not covered by the three rules above.
            'use(?:_i)?:[a-zA-Z]*',
            '(?:else|fi|or):',
            '(?:if|cs|exp):w',
            '(?:hbox|vbox):n',
            '::[a-zA-Z]_unbraced',
            '::[a-zA-Z:]'
          ].map(pattern => pattern + '(?![a-zA-Z:_])').join('|'));
          const L2_VARIANTS = [
            { begin: /[a-zA-Z@]+/ }, // control word
            { begin: /[^a-zA-Z@]?/ } // control symbol
          ];
          const DOUBLE_CARET_VARIANTS = [
            { begin: /\^{6}[0-9a-f]{6}/ },
            { begin: /\^{5}[0-9a-f]{5}/ },
            { begin: /\^{4}[0-9a-f]{4}/ },
            { begin: /\^{3}[0-9a-f]{3}/ },
            { begin: /\^{2}[0-9a-f]{2}/ },
            { begin: /\^{2}[\u0000-\u007f]/ }
          ];
          const CONTROL_SEQUENCE = {
            className: 'keyword',
            begin: /\\/,
            relevance: 0,
            contains: [
              {
                endsParent: true,
                begin: KNOWN_CONTROL_WORDS
              },
              {
                endsParent: true,
                begin: L3_REGEX
              },
              {
                endsParent: true,
                variants: DOUBLE_CARET_VARIANTS
              },
              {
                endsParent: true,
                relevance: 0,
                variants: L2_VARIANTS
              }
            ]
          };
          const MACRO_PARAM = {
            className: 'params',
            relevance: 0,
            begin: /#+\d?/
          };
          const DOUBLE_CARET_CHAR = {
            // relevance: 1
            variants: DOUBLE_CARET_VARIANTS };
          const SPECIAL_CATCODE = {
            className: 'built_in',
            relevance: 0,
            begin: /[$&^_]/
          };
          const MAGIC_COMMENT = {
            className: 'meta',
            begin: /% ?!(T[eE]X|tex|BIB|bib)/,
            end: '$',
            relevance: 10
          };
          const COMMENT = hljs.COMMENT(
            '%',
            '$',
            { relevance: 0 }
          );
          const EVERYTHING_BUT_VERBATIM = [
            CONTROL_SEQUENCE,
            MACRO_PARAM,
            DOUBLE_CARET_CHAR,
            SPECIAL_CATCODE,
            MAGIC_COMMENT,
            COMMENT
          ];
          const BRACE_GROUP_NO_VERBATIM = {
            begin: /\{/,
            end: /\}/,
            relevance: 0,
            contains: [
              'self',
              ...EVERYTHING_BUT_VERBATIM
            ]
          };
          const ARGUMENT_BRACES = hljs.inherit(
            BRACE_GROUP_NO_VERBATIM,
            {
              relevance: 0,
              endsParent: true,
              contains: [
                BRACE_GROUP_NO_VERBATIM,
                ...EVERYTHING_BUT_VERBATIM
              ]
            }
          );
          const ARGUMENT_BRACKETS = {
            begin: /\[/,
            end: /\]/,
            endsParent: true,
            relevance: 0,
            contains: [
              BRACE_GROUP_NO_VERBATIM,
              ...EVERYTHING_BUT_VERBATIM
            ]
          };
          const SPACE_GOBBLER = {
            begin: /\s+/,
            relevance: 0
          };
          const ARGUMENT_M = [ ARGUMENT_BRACES ];
          const ARGUMENT_O = [ ARGUMENT_BRACKETS ];
          const ARGUMENT_AND_THEN = function(arg, starts_mode) {
            return {
              contains: [ SPACE_GOBBLER ],
              starts: {
                relevance: 0,
                contains: arg,
                starts: starts_mode
              }
            };
          };
          const CSNAME = function(csname, starts_mode) {
            return {
              begin: '\\\\' + csname + '(?![a-zA-Z@:_])',
              keywords: {
                $pattern: /\\[a-zA-Z]+/,
                keyword: '\\' + csname
              },
              relevance: 0,
              contains: [ SPACE_GOBBLER ],
              starts: starts_mode
            };
          };
          const BEGIN_ENV = function(envname, starts_mode) {
            return hljs.inherit(
              {
                begin: '\\\\begin(?=[ \t]*(\\r?\\n[ \t]*)?\\{' + envname + '\\})',
                keywords: {
                  $pattern: /\\[a-zA-Z]+/,
                  keyword: '\\begin'
                },
                relevance: 0,
              },
              ARGUMENT_AND_THEN(ARGUMENT_M, starts_mode)
            );
          };
          const VERBATIM_DELIMITED_EQUAL = (innerName = "string") => {
            return hljs.END_SAME_AS_BEGIN({
              className: innerName,
              begin: /(.|\r?\n)/,
              end: /(.|\r?\n)/,
              excludeBegin: true,
              excludeEnd: true,
              endsParent: true
            });
          };
          const VERBATIM_DELIMITED_ENV = function(envname) {
            return {
              className: 'string',
              end: '(?=\\\\end\\{' + envname + '\\})'
            };
          };
 
          const VERBATIM_DELIMITED_BRACES = (innerName = "string") => {
            return {
              relevance: 0,
              begin: /\{/,
              starts: {
                endsParent: true,
                contains: [
                  {
                    className: innerName,
                    end: /(?=\})/,
                    endsParent: true,
                    contains: [
                      {
                        begin: /\{/,
                        end: /\}/,
                        relevance: 0,
                        contains: [ "self" ]
                      }
                    ],
                  }
                ]
              }
            };
          };
          const VERBATIM = [
            ...[
              'verb',
              'lstinline'
            ].map(csname => CSNAME(csname, { contains: [ VERBATIM_DELIMITED_EQUAL() ] })),
            CSNAME('mint', ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [ VERBATIM_DELIMITED_EQUAL() ] })),
            CSNAME('mintinline', ARGUMENT_AND_THEN(ARGUMENT_M, { contains: [
              VERBATIM_DELIMITED_BRACES(),
              VERBATIM_DELIMITED_EQUAL()
            ] })),
            CSNAME('url', { contains: [
              VERBATIM_DELIMITED_BRACES("link"),
              VERBATIM_DELIMITED_BRACES("link")
            ] }),
            CSNAME('hyperref', { contains: [ VERBATIM_DELIMITED_BRACES("link") ] }),
            CSNAME('href', ARGUMENT_AND_THEN(ARGUMENT_O, { contains: [ VERBATIM_DELIMITED_BRACES("link") ] })),
            ...[].concat(...[
              '',
              '\\*'
            ].map(suffix => [
              BEGIN_ENV('verbatim' + suffix, VERBATIM_DELIMITED_ENV('verbatim' + suffix)),
              BEGIN_ENV('filecontents' + suffix, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV('filecontents' + suffix))),
              ...[
                '',
                'B',
                'L'
              ].map(prefix =>
                BEGIN_ENV(prefix + 'Verbatim' + suffix, ARGUMENT_AND_THEN(ARGUMENT_O, VERBATIM_DELIMITED_ENV(prefix + 'Verbatim' + suffix)))
              )
            ])),
            BEGIN_ENV('minted', ARGUMENT_AND_THEN(ARGUMENT_O, ARGUMENT_AND_THEN(ARGUMENT_M, VERBATIM_DELIMITED_ENV('minted')))),
          ];
 
          return {
            name: 'LaTeX',
            aliases: [ 'tex' ],
            contains: [
              ...VERBATIM,
              ...EVERYTHING_BUT_VERBATIM
            ]
          };
        }
 
        latex_1 = latex;
        return latex_1;
    }
 
    /*
    Language: LDIF
    Contributors: Jacob Childress <jacobc@gmail.com>
    Category: enterprise, config
    Website: https://en.wikipedia.org/wiki/LDAP_Data_Interchange_Format
    */
 
    var ldif_1;
    var hasRequiredLdif;
 
    function requireLdif () {
        if (hasRequiredLdif) return ldif_1;
        hasRequiredLdif = 1;
        /** @type LanguageFn */
        function ldif(hljs) {
          return {
            name: 'LDIF',
            contains: [
              {
                className: 'attribute',
                match: '^dn(?=:)',
                relevance: 10
              },
              {
                className: 'attribute',
                match: '^\\w+(?=:)'
              },
              {
                className: 'literal',
                match: '^-'
              },
              hljs.HASH_COMMENT_MODE
            ]
          };
        }
 
        ldif_1 = ldif;
        return ldif_1;
    }
 
    /*
    Language: Leaf
    Author: Hale Chan <halechan@qq.com>
    Description: Based on the Leaf reference from https://vapor.github.io/documentation/guide/leaf.html.
    */
 
    var leaf_1;
    var hasRequiredLeaf;
 
    function requireLeaf () {
        if (hasRequiredLeaf) return leaf_1;
        hasRequiredLeaf = 1;
        function leaf(hljs) {
          return {
            name: 'Leaf',
            contains: [
              {
                className: 'function',
                begin: '#+' + '[A-Za-z_0-9]*' + '\\(',
                end: / \{/,
                returnBegin: true,
                excludeEnd: true,
                contains: [
                  {
                    className: 'keyword',
                    begin: '#+'
                  },
                  {
                    className: 'title',
                    begin: '[A-Za-z_][A-Za-z_0-9]*'
                  },
                  {
                    className: 'params',
                    begin: '\\(',
                    end: '\\)',
                    endsParent: true,
                    contains: [
                      {
                        className: 'string',
                        begin: '"',
                        end: '"'
                      },
                      {
                        className: 'variable',
                        begin: '[A-Za-z_][A-Za-z_0-9]*'
                      }
                    ]
                  }
                ]
              }
            ]
          };
        }
 
        leaf_1 = leaf;
        return leaf_1;
    }
 
    var less_1;
    var hasRequiredLess;
 
    function requireLess () {
        if (hasRequiredLess) return less_1;
        hasRequiredLess = 1;
        const MODES = (hljs) => {
          return {
            IMPORTANT: {
              scope: 'meta',
              begin: '!important'
            },
            BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
            HEXCOLOR: {
              scope: 'number',
              begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
            },
            FUNCTION_DISPATCH: {
              className: "built_in",
              begin: /[\w-]+(?=\()/
            },
            ATTRIBUTE_SELECTOR_MODE: {
              scope: 'selector-attr',
              begin: /\[/,
              end: /\]/,
              illegal: '$',
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            },
            CSS_NUMBER_MODE: {
              scope: 'number',
              begin: hljs.NUMBER_RE + '(' +
                '%|em|ex|ch|rem' +
                '|vw|vh|vmin|vmax' +
                '|cm|mm|in|pt|pc|px' +
                '|deg|grad|rad|turn' +
                '|s|ms' +
                '|Hz|kHz' +
                '|dpi|dpcm|dppx' +
                ')?',
              relevance: 0
            },
            CSS_VARIABLE: {
              className: "attr",
              begin: /--[A-Za-z][A-Za-z0-9_-]*/
            }
          };
        };
 
        const TAGS = [
          'a',
          'abbr',
          'address',
          'article',
          'aside',
          'audio',
          'b',
          'blockquote',
          'body',
          'button',
          'canvas',
          'caption',
          'cite',
          'code',
          'dd',
          'del',
          'details',
          'dfn',
          'div',
          'dl',
          'dt',
          'em',
          'fieldset',
          'figcaption',
          'figure',
          'footer',
          'form',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'header',
          'hgroup',
          'html',
          'i',
          'iframe',
          'img',
          'input',
          'ins',
          'kbd',
          'label',
          'legend',
          'li',
          'main',
          'mark',
          'menu',
          'nav',
          'object',
          'ol',
          'p',
          'q',
          'quote',
          'samp',
          'section',
          'span',
          'strong',
          'summary',
          'sup',
          'table',
          'tbody',
          'td',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'time',
          'tr',
          'ul',
          'var',
          'video'
        ];
 
        const MEDIA_FEATURES = [
          'any-hover',
          'any-pointer',
          'aspect-ratio',
          'color',
          'color-gamut',
          'color-index',
          'device-aspect-ratio',
          'device-height',
          'device-width',
          'display-mode',
          'forced-colors',
          'grid',
          'height',
          'hover',
          'inverted-colors',
          'monochrome',
          'orientation',
          'overflow-block',
          'overflow-inline',
          'pointer',
          'prefers-color-scheme',
          'prefers-contrast',
          'prefers-reduced-motion',
          'prefers-reduced-transparency',
          'resolution',
          'scan',
          'scripting',
          'update',
          'width',
          // TODO: find a better solution?
          'min-width',
          'max-width',
          'min-height',
          'max-height'
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
        const PSEUDO_CLASSES = [
          'active',
          'any-link',
          'blank',
          'checked',
          'current',
          'default',
          'defined',
          'dir', // dir()
          'disabled',
          'drop',
          'empty',
          'enabled',
          'first',
          'first-child',
          'first-of-type',
          'fullscreen',
          'future',
          'focus',
          'focus-visible',
          'focus-within',
          'has', // has()
          'host', // host or host()
          'host-context', // host-context()
          'hover',
          'indeterminate',
          'in-range',
          'invalid',
          'is', // is()
          'lang', // lang()
          'last-child',
          'last-of-type',
          'left',
          'link',
          'local-link',
          'not', // not()
          'nth-child', // nth-child()
          'nth-col', // nth-col()
          'nth-last-child', // nth-last-child()
          'nth-last-col', // nth-last-col()
          'nth-last-of-type', //nth-last-of-type()
          'nth-of-type', //nth-of-type()
          'only-child',
          'only-of-type',
          'optional',
          'out-of-range',
          'past',
          'placeholder-shown',
          'read-only',
          'read-write',
          'required',
          'right',
          'root',
          'scope',
          'target',
          'target-within',
          'user-invalid',
          'valid',
          'visited',
          'where' // where()
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
        const PSEUDO_ELEMENTS = [
          'after',
          'backdrop',
          'before',
          'cue',
          'cue-region',
          'first-letter',
          'first-line',
          'grammar-error',
          'marker',
          'part',
          'placeholder',
          'selection',
          'slotted',
          'spelling-error'
        ];
 
        const ATTRIBUTES = [
          'align-content',
          'align-items',
          'align-self',
          'all',
          'animation',
          'animation-delay',
          'animation-direction',
          'animation-duration',
          'animation-fill-mode',
          'animation-iteration-count',
          'animation-name',
          'animation-play-state',
          'animation-timing-function',
          'backface-visibility',
          'background',
          'background-attachment',
          'background-blend-mode',
          'background-clip',
          'background-color',
          'background-image',
          'background-origin',
          'background-position',
          'background-repeat',
          'background-size',
          'block-size',
          'border',
          'border-block',
          'border-block-color',
          'border-block-end',
          'border-block-end-color',
          'border-block-end-style',
          'border-block-end-width',
          'border-block-start',
          'border-block-start-color',
          'border-block-start-style',
          'border-block-start-width',
          'border-block-style',
          'border-block-width',
          'border-bottom',
          'border-bottom-color',
          'border-bottom-left-radius',
          'border-bottom-right-radius',
          'border-bottom-style',
          'border-bottom-width',
          'border-collapse',
          'border-color',
          'border-image',
          'border-image-outset',
          'border-image-repeat',
          'border-image-slice',
          'border-image-source',
          'border-image-width',
          'border-inline',
          'border-inline-color',
          'border-inline-end',
          'border-inline-end-color',
          'border-inline-end-style',
          'border-inline-end-width',
          'border-inline-start',
          'border-inline-start-color',
          'border-inline-start-style',
          'border-inline-start-width',
          'border-inline-style',
          'border-inline-width',
          'border-left',
          'border-left-color',
          'border-left-style',
          'border-left-width',
          'border-radius',
          'border-right',
          'border-right-color',
          'border-right-style',
          'border-right-width',
          'border-spacing',
          'border-style',
          'border-top',
          'border-top-color',
          'border-top-left-radius',
          'border-top-right-radius',
          'border-top-style',
          'border-top-width',
          'border-width',
          'bottom',
          'box-decoration-break',
          'box-shadow',
          'box-sizing',
          'break-after',
          'break-before',
          'break-inside',
          'caption-side',
          'caret-color',
          'clear',
          'clip',
          'clip-path',
          'clip-rule',
          'color',
          'column-count',
          'column-fill',
          'column-gap',
          'column-rule',
          'column-rule-color',
          'column-rule-style',
          'column-rule-width',
          'column-span',
          'column-width',
          'columns',
          'contain',
          'content',
          'content-visibility',
          'counter-increment',
          'counter-reset',
          'cue',
          'cue-after',
          'cue-before',
          'cursor',
          'direction',
          'display',
          'empty-cells',
          'filter',
          'flex',
          'flex-basis',
          'flex-direction',
          'flex-flow',
          'flex-grow',
          'flex-shrink',
          'flex-wrap',
          'float',
          'flow',
          'font',
          'font-display',
          'font-family',
          'font-feature-settings',
          'font-kerning',
          'font-language-override',
          'font-size',
          'font-size-adjust',
          'font-smoothing',
          'font-stretch',
          'font-style',
          'font-synthesis',
          'font-variant',
          'font-variant-caps',
          'font-variant-east-asian',
          'font-variant-ligatures',
          'font-variant-numeric',
          'font-variant-position',
          'font-variation-settings',
          'font-weight',
          'gap',
          'glyph-orientation-vertical',
          'grid',
          'grid-area',
          'grid-auto-columns',
          'grid-auto-flow',
          'grid-auto-rows',
          'grid-column',
          'grid-column-end',
          'grid-column-start',
          'grid-gap',
          'grid-row',
          'grid-row-end',
          'grid-row-start',
          'grid-template',
          'grid-template-areas',
          'grid-template-columns',
          'grid-template-rows',
          'hanging-punctuation',
          'height',
          'hyphens',
          'icon',
          'image-orientation',
          'image-rendering',
          'image-resolution',
          'ime-mode',
          'inline-size',
          'isolation',
          'justify-content',
          'left',
          'letter-spacing',
          'line-break',
          'line-height',
          'list-style',
          'list-style-image',
          'list-style-position',
          'list-style-type',
          'margin',
          'margin-block',
          'margin-block-end',
          'margin-block-start',
          'margin-bottom',
          'margin-inline',
          'margin-inline-end',
          'margin-inline-start',
          'margin-left',
          'margin-right',
          'margin-top',
          'marks',
          'mask',
          'mask-border',
          'mask-border-mode',
          'mask-border-outset',
          'mask-border-repeat',
          'mask-border-slice',
          'mask-border-source',
          'mask-border-width',
          'mask-clip',
          'mask-composite',
          'mask-image',
          'mask-mode',
          'mask-origin',
          'mask-position',
          'mask-repeat',
          'mask-size',
          'mask-type',
          'max-block-size',
          'max-height',
          'max-inline-size',
          'max-width',
          'min-block-size',
          'min-height',
          'min-inline-size',
          'min-width',
          'mix-blend-mode',
          'nav-down',
          'nav-index',
          'nav-left',
          'nav-right',
          'nav-up',
          'none',
          'normal',
          'object-fit',
          'object-position',
          'opacity',
          'order',
          'orphans',
          'outline',
          'outline-color',
          'outline-offset',
          'outline-style',
          'outline-width',
          'overflow',
          'overflow-wrap',
          'overflow-x',
          'overflow-y',
          'padding',
          'padding-block',
          'padding-block-end',
          'padding-block-start',
          'padding-bottom',
          'padding-inline',
          'padding-inline-end',
          'padding-inline-start',
          'padding-left',
          'padding-right',
          'padding-top',
          'page-break-after',
          'page-break-before',
          'page-break-inside',
          'pause',
          'pause-after',
          'pause-before',
          'perspective',
          'perspective-origin',
          'pointer-events',
          'position',
          'quotes',
          'resize',
          'rest',
          'rest-after',
          'rest-before',
          'right',
          'row-gap',
          'scroll-margin',
          'scroll-margin-block',
          'scroll-margin-block-end',
          'scroll-margin-block-start',
          'scroll-margin-bottom',
          'scroll-margin-inline',
          'scroll-margin-inline-end',
          'scroll-margin-inline-start',
          'scroll-margin-left',
          'scroll-margin-right',
          'scroll-margin-top',
          'scroll-padding',
          'scroll-padding-block',
          'scroll-padding-block-end',
          'scroll-padding-block-start',
          'scroll-padding-bottom',
          'scroll-padding-inline',
          'scroll-padding-inline-end',
          'scroll-padding-inline-start',
          'scroll-padding-left',
          'scroll-padding-right',
          'scroll-padding-top',
          'scroll-snap-align',
          'scroll-snap-stop',
          'scroll-snap-type',
          'scrollbar-color',
          'scrollbar-gutter',
          'scrollbar-width',
          'shape-image-threshold',
          'shape-margin',
          'shape-outside',
          'speak',
          'speak-as',
          'src', // @font-face
          'tab-size',
          'table-layout',
          'text-align',
          'text-align-all',
          'text-align-last',
          'text-combine-upright',
          'text-decoration',
          'text-decoration-color',
          'text-decoration-line',
          'text-decoration-style',
          'text-emphasis',
          'text-emphasis-color',
          'text-emphasis-position',
          'text-emphasis-style',
          'text-indent',
          'text-justify',
          'text-orientation',
          'text-overflow',
          'text-rendering',
          'text-shadow',
          'text-transform',
          'text-underline-position',
          'top',
          'transform',
          'transform-box',
          'transform-origin',
          'transform-style',
          'transition',
          'transition-delay',
          'transition-duration',
          'transition-property',
          'transition-timing-function',
          'unicode-bidi',
          'vertical-align',
          'visibility',
          'voice-balance',
          'voice-duration',
          'voice-family',
          'voice-pitch',
          'voice-range',
          'voice-rate',
          'voice-stress',
          'voice-volume',
          'white-space',
          'widows',
          'width',
          'will-change',
          'word-break',
          'word-spacing',
          'word-wrap',
          'writing-mode',
          'z-index'
          // reverse makes sure longer attributes `font-weight` are matched fully
          // instead of getting false positives on say `font`
        ].reverse();
 
        // some grammars use them all as a single group
        const PSEUDO_SELECTORS = PSEUDO_CLASSES.concat(PSEUDO_ELEMENTS);
 
        /*
        Language: Less
        Description: It's CSS, with just a little more.
        Author:   Max Mikhailov <seven.phases.max@gmail.com>
        Website: http://lesscss.org
        Category: common, css, web
        */
 
        /** @type LanguageFn */
        function less(hljs) {
          const modes = MODES(hljs);
          const PSEUDO_SELECTORS$1 = PSEUDO_SELECTORS;
 
          const AT_MODIFIERS = "and or not only";
          const IDENT_RE = '[\\w-]+'; // yes, Less identifiers may begin with a digit
          const INTERP_IDENT_RE = '(' + IDENT_RE + '|@\\{' + IDENT_RE + '\\})';
 
          /* Generic Modes */
 
          const RULES = []; const VALUE_MODES = []; // forward def. for recursive modes
 
          const STRING_MODE = function(c) {
            return {
            // Less strings are not multiline (also include '~' for more consistent coloring of "escaped" strings)
              className: 'string',
              begin: '~?' + c + '.*?' + c
            };
          };
 
          const IDENT_MODE = function(name, begin, relevance) {
            return {
              className: name,
              begin: begin,
              relevance: relevance
            };
          };
 
          const AT_KEYWORDS = {
            $pattern: /[a-z-]+/,
            keyword: AT_MODIFIERS,
            attribute: MEDIA_FEATURES.join(" ")
          };
 
          const PARENS_MODE = {
            // used only to properly balance nested parens inside mixin call, def. arg list
            begin: '\\(',
            end: '\\)',
            contains: VALUE_MODES,
            keywords: AT_KEYWORDS,
            relevance: 0
          };
 
          // generic Less highlighter (used almost everywhere except selectors):
          VALUE_MODES.push(
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            STRING_MODE("'"),
            STRING_MODE('"'),
            modes.CSS_NUMBER_MODE, // fixme: it does not include dot for numbers like .5em :(
            {
              begin: '(url|data-uri)\\(',
              starts: {
                className: 'string',
                end: '[\\)\\n]',
                excludeEnd: true
              }
            },
            modes.HEXCOLOR,
            PARENS_MODE,
            IDENT_MODE('variable', '@@?' + IDENT_RE, 10),
            IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'),
            IDENT_MODE('built_in', '~?`[^`]*?`'), // inline javascript (or whatever host language) *multiline* string
            { // @media features (it’s here to not duplicate things in AT_RULE_MODE with extra PARENS_MODE overriding):
              className: 'attribute',
              begin: IDENT_RE + '\\s*:',
              end: ':',
              returnBegin: true,
              excludeEnd: true
            },
            modes.IMPORTANT,
            { beginKeywords: 'and not' },
            modes.FUNCTION_DISPATCH
          );
 
          const VALUE_WITH_RULESETS = VALUE_MODES.concat({
            begin: /\{/,
            end: /\}/,
            contains: RULES
          });
 
          const MIXIN_GUARD_MODE = {
            beginKeywords: 'when',
            endsWithParent: true,
            contains: [ { beginKeywords: 'and not' } ].concat(VALUE_MODES) // using this form to override VALUE’s 'function' match
          };
 
          /* Rule-Level Modes */
 
          const RULE_MODE = {
            begin: INTERP_IDENT_RE + '\\s*:',
            returnBegin: true,
            end: /[;}]/,
            relevance: 0,
            contains: [
              { begin: /-(webkit|moz|ms|o)-/ },
              modes.CSS_VARIABLE,
              {
                className: 'attribute',
                begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
                end: /(?=:)/,
                starts: {
                  endsWithParent: true,
                  illegal: '[<=$]',
                  relevance: 0,
                  contains: VALUE_MODES
                }
              }
            ]
          };
 
          const AT_RULE_MODE = {
            className: 'keyword',
            begin: '@(import|media|charset|font-face|(-[a-z]+-)?keyframes|supports|document|namespace|page|viewport|host)\\b',
            starts: {
              end: '[;{}]',
              keywords: AT_KEYWORDS,
              returnEnd: true,
              contains: VALUE_MODES,
              relevance: 0
            }
          };
 
          // variable definitions and calls
          const VAR_RULE_MODE = {
            className: 'variable',
            variants: [
              // using more strict pattern for higher relevance to increase chances of Less detection.
              // this is *the only* Less specific statement used in most of the sources, so...
              // (we’ll still often loose to the css-parser unless there's '//' comment,
              // simply because 1 variable just can't beat 99 properties :)
              {
                begin: '@' + IDENT_RE + '\\s*:',
                relevance: 15
              },
              { begin: '@' + IDENT_RE }
            ],
            starts: {
              end: '[;}]',
              returnEnd: true,
              contains: VALUE_WITH_RULESETS
            }
          };
 
          const SELECTOR_MODE = {
            // first parse unambiguous selectors (i.e. those not starting with tag)
            // then fall into the scary lookahead-discriminator variant.
            // this mode also handles mixin definitions and calls
            variants: [
              {
                begin: '[\\.#:&\\[>]',
                end: '[;{}]' // mixin calls end with ';'
              },
              {
                begin: INTERP_IDENT_RE,
                end: /\{/
              }
            ],
            returnBegin: true,
            returnEnd: true,
            illegal: '[<=\'$"]',
            relevance: 0,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              MIXIN_GUARD_MODE,
              IDENT_MODE('keyword', 'all\\b'),
              IDENT_MODE('variable', '@\\{' + IDENT_RE + '\\}'), // otherwise it’s identified as tag
              
              {
                begin: '\\b(' + TAGS.join('|') + ')\\b',
                className: 'selector-tag'
              },
              modes.CSS_NUMBER_MODE,
              IDENT_MODE('selector-tag', INTERP_IDENT_RE, 0),
              IDENT_MODE('selector-id', '#' + INTERP_IDENT_RE),
              IDENT_MODE('selector-class', '\\.' + INTERP_IDENT_RE, 0),
              IDENT_MODE('selector-tag', '&', 0),
              modes.ATTRIBUTE_SELECTOR_MODE,
              {
                className: 'selector-pseudo',
                begin: ':(' + PSEUDO_CLASSES.join('|') + ')'
              },
              {
                className: 'selector-pseudo',
                begin: ':(:)?(' + PSEUDO_ELEMENTS.join('|') + ')'
              },
              {
                begin: /\(/,
                end: /\)/,
                relevance: 0,
                contains: VALUE_WITH_RULESETS
              }, // argument list of parametric mixins
              { begin: '!important' }, // eat !important after mixin call or it will be colored as tag
              modes.FUNCTION_DISPATCH
            ]
          };
 
          const PSEUDO_SELECTOR_MODE = {
            begin: IDENT_RE + ':(:)?' + `(${PSEUDO_SELECTORS$1.join('|')})`,
            returnBegin: true,
            contains: [ SELECTOR_MODE ]
          };
 
          RULES.push(
            hljs.C_LINE_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            AT_RULE_MODE,
            VAR_RULE_MODE,
            PSEUDO_SELECTOR_MODE,
            RULE_MODE,
            SELECTOR_MODE,
            MIXIN_GUARD_MODE,
            modes.FUNCTION_DISPATCH
          );
 
          return {
            name: 'Less',
            case_insensitive: true,
            illegal: '[=>\'/<($"]',
            contains: RULES
          };
        }
 
        less_1 = less;
        return less_1;
    }
 
    /*
    Language: Lisp
    Description: Generic lisp syntax
    Author: Vasily Polovnyov <vast@whiteants.net>
    Category: lisp
    */
 
    var lisp_1;
    var hasRequiredLisp;
 
    function requireLisp () {
        if (hasRequiredLisp) return lisp_1;
        hasRequiredLisp = 1;
        function lisp(hljs) {
          const LISP_IDENT_RE = '[a-zA-Z_\\-+\\*\\/<=>&#][a-zA-Z0-9_\\-+*\\/<=>&#!]*';
          const MEC_RE = '\\|[^]*?\\|';
          const LISP_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+(\\.\\d+|\\/\\d+)?((d|e|f|l|s|D|E|F|L|S)(\\+|-)?\\d+)?';
          const LITERAL = {
            className: 'literal',
            begin: '\\b(t{1}|nil)\\b'
          };
          const NUMBER = {
            className: 'number',
            variants: [
              {
                begin: LISP_SIMPLE_NUMBER_RE,
                relevance: 0
              },
              { begin: '#(b|B)[0-1]+(/[0-1]+)?' },
              { begin: '#(o|O)[0-7]+(/[0-7]+)?' },
              { begin: '#(x|X)[0-9a-fA-F]+(/[0-9a-fA-F]+)?' },
              {
                begin: '#(c|C)\\(' + LISP_SIMPLE_NUMBER_RE + ' +' + LISP_SIMPLE_NUMBER_RE,
                end: '\\)'
              }
            ]
          };
          const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
          const COMMENT = hljs.COMMENT(
            ';', '$',
            { relevance: 0 }
          );
          const VARIABLE = {
            begin: '\\*',
            end: '\\*'
          };
          const KEYWORD = {
            className: 'symbol',
            begin: '[:&]' + LISP_IDENT_RE
          };
          const IDENT = {
            begin: LISP_IDENT_RE,
            relevance: 0
          };
          const MEC = { begin: MEC_RE };
          const QUOTED_LIST = {
            begin: '\\(',
            end: '\\)',
            contains: [
              'self',
              LITERAL,
              STRING,
              NUMBER,
              IDENT
            ]
          };
          const QUOTED = {
            contains: [
              NUMBER,
              STRING,
              VARIABLE,
              KEYWORD,
              QUOTED_LIST,
              IDENT
            ],
            variants: [
              {
                begin: '[\'`]\\(',
                end: '\\)'
              },
              {
                begin: '\\(quote ',
                end: '\\)',
                keywords: { name: 'quote' }
              },
              { begin: '\'' + MEC_RE }
            ]
          };
          const QUOTED_ATOM = { variants: [
            { begin: '\'' + LISP_IDENT_RE },
            { begin: '#\'' + LISP_IDENT_RE + '(::' + LISP_IDENT_RE + ')*' }
          ] };
          const LIST = {
            begin: '\\(\\s*',
            end: '\\)'
          };
          const BODY = {
            endsWithParent: true,
            relevance: 0
          };
          LIST.contains = [
            {
              className: 'name',
              variants: [
                {
                  begin: LISP_IDENT_RE,
                  relevance: 0,
                },
                { begin: MEC_RE }
              ]
            },
            BODY
          ];
          BODY.contains = [
            QUOTED,
            QUOTED_ATOM,
            LIST,
            LITERAL,
            NUMBER,
            STRING,
            COMMENT,
            VARIABLE,
            KEYWORD,
            MEC,
            IDENT
          ];
 
          return {
            name: 'Lisp',
            illegal: /\S/,
            contains: [
              NUMBER,
              hljs.SHEBANG(),
              LITERAL,
              STRING,
              COMMENT,
              QUOTED,
              QUOTED_ATOM,
              LIST,
              IDENT
            ]
          };
        }
 
        lisp_1 = lisp;
        return lisp_1;
    }
 
    /*
    Language: LiveCode
    Author: Ralf Bitter <rabit@revigniter.com>
    Description: Language definition for LiveCode server accounting for revIgniter (a web application framework) characteristics.
    Version: 1.1
    Date: 2019-04-17
    Category: enterprise
    */
 
    var livecodeserver_1;
    var hasRequiredLivecodeserver;
 
    function requireLivecodeserver () {
        if (hasRequiredLivecodeserver) return livecodeserver_1;
        hasRequiredLivecodeserver = 1;
        function livecodeserver(hljs) {
          const VARIABLE = {
            className: 'variable',
            variants: [
              { begin: '\\b([gtps][A-Z]{1}[a-zA-Z0-9]*)(\\[.+\\])?(?:\\s*?)' },
              { begin: '\\$_[A-Z]+' }
            ],
            relevance: 0
          };
          const COMMENT_MODES = [
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.HASH_COMMENT_MODE,
            hljs.COMMENT('--', '$'),
            hljs.COMMENT('[^:]//', '$')
          ];
          const TITLE1 = hljs.inherit(hljs.TITLE_MODE, { variants: [
            { begin: '\\b_*rig[A-Z][A-Za-z0-9_\\-]*' },
            { begin: '\\b_[a-z0-9\\-]+' }
          ] });
          const TITLE2 = hljs.inherit(hljs.TITLE_MODE, { begin: '\\b([A-Za-z0-9_\\-]+)\\b' });
          return {
            name: 'LiveCode',
            case_insensitive: false,
            keywords: {
              keyword:
                '$_COOKIE $_FILES $_GET $_GET_BINARY $_GET_RAW $_POST $_POST_BINARY $_POST_RAW $_SESSION $_SERVER '
                + 'codepoint codepoints segment segments codeunit codeunits sentence sentences trueWord trueWords paragraph '
                + 'after byte bytes english the until http forever descending using line real8 with seventh '
                + 'for stdout finally element word words fourth before black ninth sixth characters chars stderr '
                + 'uInt1 uInt1s uInt2 uInt2s stdin string lines relative rel any fifth items from middle mid '
                + 'at else of catch then third it file milliseconds seconds second secs sec int1 int1s int4 '
                + 'int4s internet int2 int2s normal text item last long detailed effective uInt4 uInt4s repeat '
                + 'end repeat URL in try into switch to words https token binfile each tenth as ticks tick '
                + 'system real4 by dateItems without char character ascending eighth whole dateTime numeric short '
                + 'first ftp integer abbreviated abbr abbrev private case while if '
                + 'div mod wrap and or bitAnd bitNot bitOr bitXor among not in a an within '
                + 'contains ends with begins the keys of keys',
              literal:
                'SIX TEN FORMFEED NINE ZERO NONE SPACE FOUR FALSE COLON CRLF PI COMMA ENDOFFILE EOF EIGHT FIVE '
                + 'QUOTE EMPTY ONE TRUE RETURN CR LINEFEED RIGHT BACKSLASH NULL SEVEN TAB THREE TWO '
                + 'six ten formfeed nine zero none space four false colon crlf pi comma endoffile eof eight five '
                + 'quote empty one true return cr linefeed right backslash null seven tab three two '
                + 'RIVERSION RISTATE FILE_READ_MODE FILE_WRITE_MODE FILE_WRITE_MODE DIR_WRITE_MODE FILE_READ_UMASK '
                + 'FILE_WRITE_UMASK DIR_READ_UMASK DIR_WRITE_UMASK',
              built_in:
                'put abs acos aliasReference annuity arrayDecode arrayEncode asin atan atan2 average avg avgDev base64Decode '
                + 'base64Encode baseConvert binaryDecode binaryEncode byteOffset byteToNum cachedURL cachedURLs charToNum '
                + 'cipherNames codepointOffset codepointProperty codepointToNum codeunitOffset commandNames compound compress '
                + 'constantNames cos date dateFormat decompress difference directories '
                + 'diskSpace DNSServers exp exp1 exp2 exp10 extents files flushEvents folders format functionNames geometricMean global '
                + 'globals hasMemory harmonicMean hostAddress hostAddressToName hostName hostNameToAddress isNumber ISOToMac itemOffset '
                + 'keys len length libURLErrorData libUrlFormData libURLftpCommand libURLLastHTTPHeaders libURLLastRHHeaders '
                + 'libUrlMultipartFormAddPart libUrlMultipartFormData libURLVersion lineOffset ln ln1 localNames log log2 log10 '
                + 'longFilePath lower macToISO matchChunk matchText matrixMultiply max md5Digest median merge messageAuthenticationCode messageDigest millisec '
                + 'millisecs millisecond milliseconds min monthNames nativeCharToNum normalizeText num number numToByte numToChar '
                + 'numToCodepoint numToNativeChar offset open openfiles openProcesses openProcessIDs openSockets '
                + 'paragraphOffset paramCount param params peerAddress pendingMessages platform popStdDev populationStandardDeviation '
                + 'populationVariance popVariance processID random randomBytes replaceText result revCreateXMLTree revCreateXMLTreeFromFile '
                + 'revCurrentRecord revCurrentRecordIsFirst revCurrentRecordIsLast revDatabaseColumnCount revDatabaseColumnIsNull '
                + 'revDatabaseColumnLengths revDatabaseColumnNames revDatabaseColumnNamed revDatabaseColumnNumbered '
                + 'revDatabaseColumnTypes revDatabaseConnectResult revDatabaseCursors revDatabaseID revDatabaseTableNames '
                + 'revDatabaseType revDataFromQuery revdb_closeCursor revdb_columnbynumber revdb_columncount revdb_columnisnull '
                + 'revdb_columnlengths revdb_columnnames revdb_columntypes revdb_commit revdb_connect revdb_connections '
                + 'revdb_connectionerr revdb_currentrecord revdb_cursorconnection revdb_cursorerr revdb_cursors revdb_dbtype '
                + 'revdb_disconnect revdb_execute revdb_iseof revdb_isbof revdb_movefirst revdb_movelast revdb_movenext '
                + 'revdb_moveprev revdb_query revdb_querylist revdb_recordcount revdb_rollback revdb_tablenames '
                + 'revGetDatabaseDriverPath revNumberOfRecords revOpenDatabase revOpenDatabases revQueryDatabase '
                + 'revQueryDatabaseBlob revQueryResult revQueryIsAtStart revQueryIsAtEnd revUnixFromMacPath revXMLAttribute '
                + 'revXMLAttributes revXMLAttributeValues revXMLChildContents revXMLChildNames revXMLCreateTreeFromFileWithNamespaces '
                + 'revXMLCreateTreeWithNamespaces revXMLDataFromXPathQuery revXMLEvaluateXPath revXMLFirstChild revXMLMatchingNode '
                + 'revXMLNextSibling revXMLNodeContents revXMLNumberOfChildren revXMLParent revXMLPreviousSibling '
                + 'revXMLRootNode revXMLRPC_CreateRequest revXMLRPC_Documents revXMLRPC_Error '
                + 'revXMLRPC_GetHost revXMLRPC_GetMethod revXMLRPC_GetParam revXMLText revXMLRPC_Execute '
                + 'revXMLRPC_GetParamCount revXMLRPC_GetParamNode revXMLRPC_GetParamType revXMLRPC_GetPath revXMLRPC_GetPort '
                + 'revXMLRPC_GetProtocol revXMLRPC_GetRequest revXMLRPC_GetResponse revXMLRPC_GetSocket revXMLTree '
                + 'revXMLTrees revXMLValidateDTD revZipDescribeItem revZipEnumerateItems revZipOpenArchives round sampVariance '
                + 'sec secs seconds sentenceOffset sha1Digest shell shortFilePath sin specialFolderPath sqrt standardDeviation statRound '
                + 'stdDev sum sysError systemVersion tan tempName textDecode textEncode tick ticks time to tokenOffset toLower toUpper '
                + 'transpose truewordOffset trunc uniDecode uniEncode upper URLDecode URLEncode URLStatus uuid value variableNames '
                + 'variance version waitDepth weekdayNames wordOffset xsltApplyStylesheet xsltApplyStylesheetFromFile xsltLoadStylesheet '
                + 'xsltLoadStylesheetFromFile add breakpoint cancel clear local variable file word line folder directory URL close socket process '
                + 'combine constant convert create new alias folder directory decrypt delete variable word line folder '
                + 'directory URL dispatch divide do encrypt filter get include intersect kill libURLDownloadToFile '
                + 'libURLFollowHttpRedirects libURLftpUpload libURLftpUploadFile libURLresetAll libUrlSetAuthCallback libURLSetDriver '
                + 'libURLSetCustomHTTPHeaders libUrlSetExpect100 libURLSetFTPListCommand libURLSetFTPMode libURLSetFTPStopTime '
                + 'libURLSetStatusCallback load extension loadedExtensions multiply socket prepare process post seek rel relative read from process rename '
                + 'replace require resetAll resolve revAddXMLNode revAppendXML revCloseCursor revCloseDatabase revCommitDatabase '
                + 'revCopyFile revCopyFolder revCopyXMLNode revDeleteFolder revDeleteXMLNode revDeleteAllXMLTrees '
                + 'revDeleteXMLTree revExecuteSQL revGoURL revInsertXMLNode revMoveFolder revMoveToFirstRecord revMoveToLastRecord '
                + 'revMoveToNextRecord revMoveToPreviousRecord revMoveToRecord revMoveXMLNode revPutIntoXMLNode revRollBackDatabase '
                + 'revSetDatabaseDriverPath revSetXMLAttribute revXMLRPC_AddParam revXMLRPC_DeleteAllDocuments revXMLAddDTD '
                + 'revXMLRPC_Free revXMLRPC_FreeAll revXMLRPC_DeleteDocument revXMLRPC_DeleteParam revXMLRPC_SetHost '
                + 'revXMLRPC_SetMethod revXMLRPC_SetPort revXMLRPC_SetProtocol revXMLRPC_SetSocket revZipAddItemWithData '
                + 'revZipAddItemWithFile revZipAddUncompressedItemWithData revZipAddUncompressedItemWithFile revZipCancel '
                + 'revZipCloseArchive revZipDeleteItem revZipExtractItemToFile revZipExtractItemToVariable revZipSetProgressCallback '
                + 'revZipRenameItem revZipReplaceItemWithData revZipReplaceItemWithFile revZipOpenArchive send set sort split start stop '
                + 'subtract symmetric union unload vectorDotProduct wait write'
            },
            contains: [
              VARIABLE,
              {
                className: 'keyword',
                begin: '\\bend\\sif\\b'
              },
              {
                className: 'function',
                beginKeywords: 'function',
                end: '$',
                contains: [
                  VARIABLE,
                  TITLE2,
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.BINARY_NUMBER_MODE,
                  hljs.C_NUMBER_MODE,
                  TITLE1
                ]
              },
              {
                className: 'function',
                begin: '\\bend\\s+',
                end: '$',
                keywords: 'end',
                contains: [
                  TITLE2,
                  TITLE1
                ],
                relevance: 0
              },
              {
                beginKeywords: 'command on',
                end: '$',
                contains: [
                  VARIABLE,
                  TITLE2,
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.BINARY_NUMBER_MODE,
                  hljs.C_NUMBER_MODE,
                  TITLE1
                ]
              },
              {
                className: 'meta',
                variants: [
                  {
                    begin: '<\\?(rev|lc|livecode)',
                    relevance: 10
                  },
                  { begin: '<\\?' },
                  { begin: '\\?>' }
                ]
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.BINARY_NUMBER_MODE,
              hljs.C_NUMBER_MODE,
              TITLE1
            ].concat(COMMENT_MODES),
            illegal: ';$|^\\[|^=|&|\\{'
          };
        }
 
        livecodeserver_1 = livecodeserver;
        return livecodeserver_1;
    }
 
    var livescript_1;
    var hasRequiredLivescript;
 
    function requireLivescript () {
        if (hasRequiredLivescript) return livescript_1;
        hasRequiredLivescript = 1;
        const KEYWORDS = [
          "as", // for exports
          "in",
          "of",
          "if",
          "for",
          "while",
          "finally",
          "var",
          "new",
          "function",
          "do",
          "return",
          "void",
          "else",
          "break",
          "catch",
          "instanceof",
          "with",
          "throw",
          "case",
          "default",
          "try",
          "switch",
          "continue",
          "typeof",
          "delete",
          "let",
          "yield",
          "const",
          "class",
          // JS handles these with a special rule
          // "get",
          // "set",
          "debugger",
          "async",
          "await",
          "static",
          "import",
          "from",
          "export",
          "extends"
        ];
        const LITERALS = [
          "true",
          "false",
          "null",
          "undefined",
          "NaN",
          "Infinity"
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
        const TYPES = [
          // Fundamental objects
          "Object",
          "Function",
          "Boolean",
          "Symbol",
          // numbers and dates
          "Math",
          "Date",
          "Number",
          "BigInt",
          // text
          "String",
          "RegExp",
          // Indexed collections
          "Array",
          "Float32Array",
          "Float64Array",
          "Int8Array",
          "Uint8Array",
          "Uint8ClampedArray",
          "Int16Array",
          "Int32Array",
          "Uint16Array",
          "Uint32Array",
          "BigInt64Array",
          "BigUint64Array",
          // Keyed collections
          "Set",
          "Map",
          "WeakSet",
          "WeakMap",
          // Structured data
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Atomics",
          "DataView",
          "JSON",
          // Control abstraction objects
          "Promise",
          "Generator",
          "GeneratorFunction",
          "AsyncFunction",
          // Reflection
          "Reflect",
          "Proxy",
          // Internationalization
          "Intl",
          // WebAssembly
          "WebAssembly"
        ];
 
        const ERROR_TYPES = [
          "Error",
          "EvalError",
          "InternalError",
          "RangeError",
          "ReferenceError",
          "SyntaxError",
          "TypeError",
          "URIError"
        ];
 
        const BUILT_IN_GLOBALS = [
          "setInterval",
          "setTimeout",
          "clearInterval",
          "clearTimeout",
 
          "require",
          "exports",
 
          "eval",
          "isFinite",
          "isNaN",
          "parseFloat",
          "parseInt",
          "decodeURI",
          "decodeURIComponent",
          "encodeURI",
          "encodeURIComponent",
          "escape",
          "unescape"
        ];
 
        const BUILT_INS = [].concat(
          BUILT_IN_GLOBALS,
          TYPES,
          ERROR_TYPES
        );
 
        /*
        Language: LiveScript
        Author: Taneli Vatanen <taneli.vatanen@gmail.com>
        Contributors: Jen Evers-Corvina <jen@sevvie.net>
        Origin: coffeescript.js
        Description: LiveScript is a programming language that transcompiles to JavaScript. For info about language see http://livescript.net/
        Website: https://livescript.net
        Category: scripting
        */
 
        function livescript(hljs) {
          const LIVESCRIPT_BUILT_INS = [
            'npm',
            'print'
          ];
          const LIVESCRIPT_LITERALS = [
            'yes',
            'no',
            'on',
            'off',
            'it',
            'that',
            'void'
          ];
          const LIVESCRIPT_KEYWORDS = [
            'then',
            'unless',
            'until',
            'loop',
            'of',
            'by',
            'when',
            'and',
            'or',
            'is',
            'isnt',
            'not',
            'it',
            'that',
            'otherwise',
            'from',
            'to',
            'til',
            'fallthrough',
            'case',
            'enum',
            'native',
            'list',
            'map',
            '__hasProp',
            '__extends',
            '__slice',
            '__bind',
            '__indexOf'
          ];
          const KEYWORDS$1 = {
            keyword: KEYWORDS.concat(LIVESCRIPT_KEYWORDS),
            literal: LITERALS.concat(LIVESCRIPT_LITERALS),
            built_in: BUILT_INS.concat(LIVESCRIPT_BUILT_INS)
          };
          const JS_IDENT_RE = '[A-Za-z$_](?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*';
          const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
          const SUBST = {
            className: 'subst',
            begin: /#\{/,
            end: /\}/,
            keywords: KEYWORDS$1
          };
          const SUBST_SIMPLE = {
            className: 'subst',
            begin: /#[A-Za-z$_]/,
            end: /(?:-[0-9A-Za-z$_]|[0-9A-Za-z$_])*/,
            keywords: KEYWORDS$1
          };
          const EXPRESSIONS = [
            hljs.BINARY_NUMBER_MODE,
            {
              className: 'number',
              begin: '(\\b0[xX][a-fA-F0-9_]+)|(\\b\\d(\\d|_\\d)*(\\.(\\d(\\d|_\\d)*)?)?(_*[eE]([-+]\\d(_\\d|\\d)*)?)?[_a-z]*)',
              relevance: 0,
              starts: {
                end: '(\\s*/)?',
                relevance: 0
              } // a number tries to eat the following slash to prevent treating it as a regexp
            },
            {
              className: 'string',
              variants: [
                {
                  begin: /'''/,
                  end: /'''/,
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: /'/,
                  end: /'/,
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: /"""/,
                  end: /"""/,
                  contains: [
                    hljs.BACKSLASH_ESCAPE,
                    SUBST,
                    SUBST_SIMPLE
                  ]
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    hljs.BACKSLASH_ESCAPE,
                    SUBST,
                    SUBST_SIMPLE
                  ]
                },
                {
                  begin: /\\/,
                  end: /(\s|$)/,
                  excludeEnd: true
                }
              ]
            },
            {
              className: 'regexp',
              variants: [
                {
                  begin: '//',
                  end: '//[gim]*',
                  contains: [
                    SUBST,
                    hljs.HASH_COMMENT_MODE
                  ]
                },
                {
                  // regex can't start with space to parse x / 2 / 3 as two divisions
                  // regex can't start with *, and it supports an "illegal" in the main mode
                  begin: /\/(?![ *])(\\.|[^\\\n])*?\/[gim]*(?=\W)/ }
              ]
            },
            { begin: '@' + JS_IDENT_RE },
            {
              begin: '``',
              end: '``',
              excludeBegin: true,
              excludeEnd: true,
              subLanguage: 'javascript'
            }
          ];
          SUBST.contains = EXPRESSIONS;
 
          const PARAMS = {
            className: 'params',
            begin: '\\(',
            returnBegin: true,
            /* We need another contained nameless mode to not have every nested
            pair of parens to be called "params" */
            contains: [
              {
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS$1,
                contains: [ 'self' ].concat(EXPRESSIONS)
              }
            ]
          };
 
          const SYMBOLS = { begin: '(#=>|=>|\\|>>|-?->|!->)' };
 
          const CLASS_DEFINITION = {
            variants: [
              { match: [
                /class\s+/,
                JS_IDENT_RE,
                /\s+extends\s+/,
                JS_IDENT_RE
              ] },
              { match: [
                /class\s+/,
                JS_IDENT_RE
              ] }
            ],
            scope: {
              2: "title.class",
              4: "title.class.inherited"
            },
            keywords: KEYWORDS$1
          };
 
          return {
            name: 'LiveScript',
            aliases: [ 'ls' ],
            keywords: KEYWORDS$1,
            illegal: /\/\*/,
            contains: EXPRESSIONS.concat([
              hljs.COMMENT('\\/\\*', '\\*\\/'),
              hljs.HASH_COMMENT_MODE,
              SYMBOLS, // relevance booster
              {
                className: 'function',
                contains: [
                  TITLE,
                  PARAMS
                ],
                returnBegin: true,
                variants: [
                  {
                    begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B->\\*?',
                    end: '->\\*?'
                  },
                  {
                    begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?!?(\\(.*\\)\\s*)?\\B[-~]{1,2}>\\*?',
                    end: '[-~]{1,2}>\\*?'
                  },
                  {
                    begin: '(' + JS_IDENT_RE + '\\s*(?:=|:=)\\s*)?(\\(.*\\)\\s*)?\\B!?[-~]{1,2}>\\*?',
                    end: '!?[-~]{1,2}>\\*?'
                  }
                ]
              },
              CLASS_DEFINITION,
              {
                begin: JS_IDENT_RE + ':',
                end: ':',
                returnBegin: true,
                returnEnd: true,
                relevance: 0
              }
            ])
          };
        }
 
        livescript_1 = livescript;
        return livescript_1;
    }
 
    /*
    Language: LLVM IR
    Author: Michael Rodler <contact@f0rki.at>
    Description: language used as intermediate representation in the LLVM compiler framework
    Website: https://llvm.org/docs/LangRef.html
    Category: assembler
    Audit: 2020
    */
 
    var llvm_1;
    var hasRequiredLlvm;
 
    function requireLlvm () {
        if (hasRequiredLlvm) return llvm_1;
        hasRequiredLlvm = 1;
        /** @type LanguageFn */
        function llvm(hljs) {
          const regex = hljs.regex;
          const IDENT_RE = /([-a-zA-Z$._][\w$.-]*)/;
          const TYPE = {
            className: 'type',
            begin: /\bi\d+(?=\s|\b)/
          };
          const OPERATOR = {
            className: 'operator',
            relevance: 0,
            begin: /=/
          };
          const PUNCTUATION = {
            className: 'punctuation',
            relevance: 0,
            begin: /,/
          };
          const NUMBER = {
            className: 'number',
            variants: [
              { begin: /[su]?0[xX][KMLHR]?[a-fA-F0-9]+/ },
              { begin: /[-+]?\d+(?:[.]\d+)?(?:[eE][-+]?\d+(?:[.]\d+)?)?/ }
            ],
            relevance: 0
          };
          const LABEL = {
            className: 'symbol',
            variants: [ { begin: /^\s*[a-z]+:/ }, // labels
            ],
            relevance: 0
          };
          const VARIABLE = {
            className: 'variable',
            variants: [
              { begin: regex.concat(/%/, IDENT_RE) },
              { begin: /%\d+/ },
              { begin: /#\d+/ },
            ]
          };
          const FUNCTION = {
            className: 'title',
            variants: [
              { begin: regex.concat(/@/, IDENT_RE) },
              { begin: /@\d+/ },
              { begin: regex.concat(/!/, IDENT_RE) },
              { begin: regex.concat(/!\d+/, IDENT_RE) },
              // https://llvm.org/docs/LangRef.html#namedmetadatastructure
              // obviously a single digit can also be used in this fashion
              { begin: /!\d+/ }
            ]
          };
 
          return {
            name: 'LLVM IR',
            // TODO: split into different categories of keywords
            keywords:
              'begin end true false declare define global '
              + 'constant private linker_private internal '
              + 'available_externally linkonce linkonce_odr weak '
              + 'weak_odr appending dllimport dllexport common '
              + 'default hidden protected extern_weak external '
              + 'thread_local zeroinitializer undef null to tail '
              + 'target triple datalayout volatile nuw nsw nnan '
              + 'ninf nsz arcp fast exact inbounds align '
              + 'addrspace section alias module asm sideeffect '
              + 'gc dbg linker_private_weak attributes blockaddress '
              + 'initialexec localdynamic localexec prefix unnamed_addr '
              + 'ccc fastcc coldcc x86_stdcallcc x86_fastcallcc '
              + 'arm_apcscc arm_aapcscc arm_aapcs_vfpcc ptx_device '
              + 'ptx_kernel intel_ocl_bicc msp430_intrcc spir_func '
              + 'spir_kernel x86_64_sysvcc x86_64_win64cc x86_thiscallcc '
              + 'cc c signext zeroext inreg sret nounwind '
              + 'noreturn noalias nocapture byval nest readnone '
              + 'readonly inlinehint noinline alwaysinline optsize ssp '
              + 'sspreq noredzone noimplicitfloat naked builtin cold '
              + 'nobuiltin noduplicate nonlazybind optnone returns_twice '
              + 'sanitize_address sanitize_memory sanitize_thread sspstrong '
              + 'uwtable returned type opaque eq ne slt sgt '
              + 'sle sge ult ugt ule uge oeq one olt ogt '
              + 'ole oge ord uno ueq une x acq_rel acquire '
              + 'alignstack atomic catch cleanup filter inteldialect '
              + 'max min monotonic nand personality release seq_cst '
              + 'singlethread umax umin unordered xchg add fadd '
              + 'sub fsub mul fmul udiv sdiv fdiv urem srem '
              + 'frem shl lshr ashr and or xor icmp fcmp '
              + 'phi call trunc zext sext fptrunc fpext uitofp '
              + 'sitofp fptoui fptosi inttoptr ptrtoint bitcast '
              + 'addrspacecast select va_arg ret br switch invoke '
              + 'unwind unreachable indirectbr landingpad resume '
              + 'malloc alloca free load store getelementptr '
              + 'extractelement insertelement shufflevector getresult '
              + 'extractvalue insertvalue atomicrmw cmpxchg fence '
              + 'argmemonly double',
            contains: [
              TYPE,
              // this matches "empty comments"...
              // ...because it's far more likely this is a statement terminator in
              // another language than an actual comment
              hljs.COMMENT(/;\s*$/, null, { relevance: 0 }),
              hljs.COMMENT(/;/, /$/),
              {
                className: 'string',
                begin: /"/,
                end: /"/,
                contains: [
                  {
                    className: 'char.escape',
                    match: /\\\d\d/
                  }
                ]
              },
              FUNCTION,
              PUNCTUATION,
              OPERATOR,
              VARIABLE,
              LABEL,
              NUMBER
            ]
          };
        }
 
        llvm_1 = llvm;
        return llvm_1;
    }
 
    /*
    Language: LSL (Linden Scripting Language)
    Description: The Linden Scripting Language is used in Second Life by Linden Labs.
    Author: Builder's Brewery <buildersbrewery@gmail.com>
    Website: http://wiki.secondlife.com/wiki/LSL_Portal
    Category: scripting
    */
 
    var lsl_1;
    var hasRequiredLsl;
 
    function requireLsl () {
        if (hasRequiredLsl) return lsl_1;
        hasRequiredLsl = 1;
        function lsl(hljs) {
          const LSL_STRING_ESCAPE_CHARS = {
            className: 'subst',
            begin: /\\[tn"\\]/
          };
 
          const LSL_STRINGS = {
            className: 'string',
            begin: '"',
            end: '"',
            contains: [ LSL_STRING_ESCAPE_CHARS ]
          };
 
          const LSL_NUMBERS = {
            className: 'number',
            relevance: 0,
            begin: hljs.C_NUMBER_RE
          };
 
          const LSL_CONSTANTS = {
            className: 'literal',
            variants: [
              { begin: '\\b(PI|TWO_PI|PI_BY_TWO|DEG_TO_RAD|RAD_TO_DEG|SQRT2)\\b' },
              { begin: '\\b(XP_ERROR_(EXPERIENCES_DISABLED|EXPERIENCE_(DISABLED|SUSPENDED)|INVALID_(EXPERIENCE|PARAMETERS)|KEY_NOT_FOUND|MATURITY_EXCEEDED|NONE|NOT_(FOUND|PERMITTED(_LAND)?)|NO_EXPERIENCE|QUOTA_EXCEEDED|RETRY_UPDATE|STORAGE_EXCEPTION|STORE_DISABLED|THROTTLED|UNKNOWN_ERROR)|JSON_APPEND|STATUS_(PHYSICS|ROTATE_[XYZ]|PHANTOM|SANDBOX|BLOCK_GRAB(_OBJECT)?|(DIE|RETURN)_AT_EDGE|CAST_SHADOWS|OK|MALFORMED_PARAMS|TYPE_MISMATCH|BOUNDS_ERROR|NOT_(FOUND|SUPPORTED)|INTERNAL_ERROR|WHITELIST_FAILED)|AGENT(_(BY_(LEGACY_|USER)NAME|FLYING|ATTACHMENTS|SCRIPTED|MOUSELOOK|SITTING|ON_OBJECT|AWAY|WALKING|IN_AIR|TYPING|CROUCHING|BUSY|ALWAYS_RUN|AUTOPILOT|LIST_(PARCEL(_OWNER)?|REGION)))?|CAMERA_(PITCH|DISTANCE|BEHINDNESS_(ANGLE|LAG)|(FOCUS|POSITION)(_(THRESHOLD|LOCKED|LAG))?|FOCUS_OFFSET|ACTIVE)|ANIM_ON|LOOP|REVERSE|PING_PONG|SMOOTH|ROTATE|SCALE|ALL_SIDES|LINK_(ROOT|SET|ALL_(OTHERS|CHILDREN)|THIS)|ACTIVE|PASS(IVE|_(ALWAYS|IF_NOT_HANDLED|NEVER))|SCRIPTED|CONTROL_(FWD|BACK|(ROT_)?(LEFT|RIGHT)|UP|DOWN|(ML_)?LBUTTON)|PERMISSION_(RETURN_OBJECTS|DEBIT|OVERRIDE_ANIMATIONS|SILENT_ESTATE_MANAGEMENT|TAKE_CONTROLS|TRIGGER_ANIMATION|ATTACH|CHANGE_LINKS|(CONTROL|TRACK)_CAMERA|TELEPORT)|INVENTORY_(TEXTURE|SOUND|OBJECT|SCRIPT|LANDMARK|CLOTHING|NOTECARD|BODYPART|ANIMATION|GESTURE|ALL|NONE)|CHANGED_(INVENTORY|COLOR|SHAPE|SCALE|TEXTURE|LINK|ALLOWED_DROP|OWNER|REGION(_START)?|TELEPORT|MEDIA)|OBJECT_(CLICK_ACTION|HOVER_HEIGHT|LAST_OWNER_ID|(PHYSICS|SERVER|STREAMING)_COST|UNKNOWN_DETAIL|CHARACTER_TIME|PHANTOM|PHYSICS|TEMP_(ATTACHED|ON_REZ)|NAME|DESC|POS|PRIM_(COUNT|EQUIVALENCE)|RETURN_(PARCEL(_OWNER)?|REGION)|REZZER_KEY|ROO?T|VELOCITY|OMEGA|OWNER|GROUP(_TAG)?|CREATOR|ATTACHED_(POINT|SLOTS_AVAILABLE)|RENDER_WEIGHT|(BODY_SHAPE|PATHFINDING)_TYPE|(RUNNING|TOTAL)_SCRIPT_COUNT|TOTAL_INVENTORY_COUNT|SCRIPT_(MEMORY|TIME))|TYPE_(INTEGER|FLOAT|STRING|KEY|VECTOR|ROTATION|INVALID)|(DEBUG|PUBLIC)_CHANNEL|ATTACH_(AVATAR_CENTER|CHEST|HEAD|BACK|PELVIS|MOUTH|CHIN|NECK|NOSE|BELLY|[LR](SHOULDER|HAND|FOOT|EAR|EYE|[UL](ARM|LEG)|HIP)|(LEFT|RIGHT)_PEC|HUD_(CENTER_[12]|TOP_(RIGHT|CENTER|LEFT)|BOTTOM(_(RIGHT|LEFT))?)|[LR]HAND_RING1|TAIL_(BASE|TIP)|[LR]WING|FACE_(JAW|[LR]EAR|[LR]EYE|TOUNGE)|GROIN|HIND_[LR]FOOT)|LAND_(LEVEL|RAISE|LOWER|SMOOTH|NOISE|REVERT)|DATA_(ONLINE|NAME|BORN|SIM_(POS|STATUS|RATING)|PAYINFO)|PAYMENT_INFO_(ON_FILE|USED)|REMOTE_DATA_(CHANNEL|REQUEST|REPLY)|PSYS_(PART_(BF_(ZERO|ONE(_MINUS_(DEST_COLOR|SOURCE_(ALPHA|COLOR)))?|DEST_COLOR|SOURCE_(ALPHA|COLOR))|BLEND_FUNC_(DEST|SOURCE)|FLAGS|(START|END)_(COLOR|ALPHA|SCALE|GLOW)|MAX_AGE|(RIBBON|WIND|INTERP_(COLOR|SCALE)|BOUNCE|FOLLOW_(SRC|VELOCITY)|TARGET_(POS|LINEAR)|EMISSIVE)_MASK)|SRC_(MAX_AGE|PATTERN|ANGLE_(BEGIN|END)|BURST_(RATE|PART_COUNT|RADIUS|SPEED_(MIN|MAX))|ACCEL|TEXTURE|TARGET_KEY|OMEGA|PATTERN_(DROP|EXPLODE|ANGLE(_CONE(_EMPTY)?)?)))|VEHICLE_(REFERENCE_FRAME|TYPE_(NONE|SLED|CAR|BOAT|AIRPLANE|BALLOON)|(LINEAR|ANGULAR)_(FRICTION_TIMESCALE|MOTOR_DIRECTION)|LINEAR_MOTOR_OFFSET|HOVER_(HEIGHT|EFFICIENCY|TIMESCALE)|BUOYANCY|(LINEAR|ANGULAR)_(DEFLECTION_(EFFICIENCY|TIMESCALE)|MOTOR_(DECAY_)?TIMESCALE)|VERTICAL_ATTRACTION_(EFFICIENCY|TIMESCALE)|BANKING_(EFFICIENCY|MIX|TIMESCALE)|FLAG_(NO_DEFLECTION_UP|LIMIT_(ROLL_ONLY|MOTOR_UP)|HOVER_((WATER|TERRAIN|UP)_ONLY|GLOBAL_HEIGHT)|MOUSELOOK_(STEER|BANK)|CAMERA_DECOUPLED))|PRIM_(ALLOW_UNSIT|ALPHA_MODE(_(BLEND|EMISSIVE|MASK|NONE))?|NORMAL|SPECULAR|TYPE(_(BOX|CYLINDER|PRISM|SPHERE|TORUS|TUBE|RING|SCULPT))?|HOLE_(DEFAULT|CIRCLE|SQUARE|TRIANGLE)|MATERIAL(_(STONE|METAL|GLASS|WOOD|FLESH|PLASTIC|RUBBER))?|SHINY_(NONE|LOW|MEDIUM|HIGH)|BUMP_(NONE|BRIGHT|DARK|WOOD|BARK|BRICKS|CHECKER|CONCRETE|TILE|STONE|DISKS|GRAVEL|BLOBS|SIDING|LARGETILE|STUCCO|SUCTION|WEAVE)|TEXGEN_(DEFAULT|PLANAR)|SCRIPTED_SIT_ONLY|SCULPT_(TYPE_(SPHERE|TORUS|PLANE|CYLINDER|MASK)|FLAG_(MIRROR|INVERT))|PHYSICS(_(SHAPE_(CONVEX|NONE|PRIM|TYPE)))?|(POS|ROT)_LOCAL|SLICE|TEXT|FLEXIBLE|POINT_LIGHT|TEMP_ON_REZ|PHANTOM|POSITION|SIT_TARGET|SIZE|ROTATION|TEXTURE|NAME|OMEGA|DESC|LINK_TARGET|COLOR|BUMP_SHINY|FULLBRIGHT|TEXGEN|GLOW|MEDIA_(ALT_IMAGE_ENABLE|CONTROLS|(CURRENT|HOME)_URL|AUTO_(LOOP|PLAY|SCALE|ZOOM)|FIRST_CLICK_INTERACT|(WIDTH|HEIGHT)_PIXELS|WHITELIST(_ENABLE)?|PERMS_(INTERACT|CONTROL)|PARAM_MAX|CONTROLS_(STANDARD|MINI)|PERM_(NONE|OWNER|GROUP|ANYONE)|MAX_(URL_LENGTH|WHITELIST_(SIZE|COUNT)|(WIDTH|HEIGHT)_PIXELS)))|MASK_(BASE|OWNER|GROUP|EVERYONE|NEXT)|PERM_(TRANSFER|MODIFY|COPY|MOVE|ALL)|PARCEL_(MEDIA_COMMAND_(STOP|PAUSE|PLAY|LOOP|TEXTURE|URL|TIME|AGENT|UNLOAD|AUTO_ALIGN|TYPE|SIZE|DESC|LOOP_SET)|FLAG_(ALLOW_(FLY|(GROUP_)?SCRIPTS|LANDMARK|TERRAFORM|DAMAGE|CREATE_(GROUP_)?OBJECTS)|USE_(ACCESS_(GROUP|LIST)|BAN_LIST|LAND_PASS_LIST)|LOCAL_SOUND_ONLY|RESTRICT_PUSHOBJECT|ALLOW_(GROUP|ALL)_OBJECT_ENTRY)|COUNT_(TOTAL|OWNER|GROUP|OTHER|SELECTED|TEMP)|DETAILS_(NAME|DESC|OWNER|GROUP|AREA|ID|SEE_AVATARS))|LIST_STAT_(MAX|MIN|MEAN|MEDIAN|STD_DEV|SUM(_SQUARES)?|NUM_COUNT|GEOMETRIC_MEAN|RANGE)|PAY_(HIDE|DEFAULT)|REGION_FLAG_(ALLOW_DAMAGE|FIXED_SUN|BLOCK_TERRAFORM|SANDBOX|DISABLE_(COLLISIONS|PHYSICS)|BLOCK_FLY|ALLOW_DIRECT_TELEPORT|RESTRICT_PUSHOBJECT)|HTTP_(METHOD|MIMETYPE|BODY_(MAXLENGTH|TRUNCATED)|CUSTOM_HEADER|PRAGMA_NO_CACHE|VERBOSE_THROTTLE|VERIFY_CERT)|SIT_(INVALID_(AGENT|LINK_OBJECT)|NO(T_EXPERIENCE|_(ACCESS|EXPERIENCE_PERMISSION|SIT_TARGET)))|STRING_(TRIM(_(HEAD|TAIL))?)|CLICK_ACTION_(NONE|TOUCH|SIT|BUY|PAY|OPEN(_MEDIA)?|PLAY|ZOOM)|TOUCH_INVALID_FACE|PROFILE_(NONE|SCRIPT_MEMORY)|RC_(DATA_FLAGS|DETECT_PHANTOM|GET_(LINK_NUM|NORMAL|ROOT_KEY)|MAX_HITS|REJECT_(TYPES|AGENTS|(NON)?PHYSICAL|LAND))|RCERR_(CAST_TIME_EXCEEDED|SIM_PERF_LOW|UNKNOWN)|ESTATE_ACCESS_(ALLOWED_(AGENT|GROUP)_(ADD|REMOVE)|BANNED_AGENT_(ADD|REMOVE))|DENSITY|FRICTION|RESTITUTION|GRAVITY_MULTIPLIER|KFM_(COMMAND|CMD_(PLAY|STOP|PAUSE)|MODE|FORWARD|LOOP|PING_PONG|REVERSE|DATA|ROTATION|TRANSLATION)|ERR_(GENERIC|PARCEL_PERMISSIONS|MALFORMED_PARAMS|RUNTIME_PERMISSIONS|THROTTLED)|CHARACTER_(CMD_((SMOOTH_)?STOP|JUMP)|DESIRED_(TURN_)?SPEED|RADIUS|STAY_WITHIN_PARCEL|LENGTH|ORIENTATION|ACCOUNT_FOR_SKIPPED_FRAMES|AVOIDANCE_MODE|TYPE(_([ABCD]|NONE))?|MAX_(DECEL|TURN_RADIUS|(ACCEL|SPEED)))|PURSUIT_(OFFSET|FUZZ_FACTOR|GOAL_TOLERANCE|INTERCEPT)|REQUIRE_LINE_OF_SIGHT|FORCE_DIRECT_PATH|VERTICAL|HORIZONTAL|AVOID_(CHARACTERS|DYNAMIC_OBSTACLES|NONE)|PU_(EVADE_(HIDDEN|SPOTTED)|FAILURE_(DYNAMIC_PATHFINDING_DISABLED|INVALID_(GOAL|START)|NO_(NAVMESH|VALID_DESTINATION)|OTHER|TARGET_GONE|(PARCEL_)?UNREACHABLE)|(GOAL|SLOWDOWN_DISTANCE)_REACHED)|TRAVERSAL_TYPE(_(FAST|NONE|SLOW))?|CONTENT_TYPE_(ATOM|FORM|HTML|JSON|LLSD|RSS|TEXT|XHTML|XML)|GCNP_(RADIUS|STATIC)|(PATROL|WANDER)_PAUSE_AT_WAYPOINTS|OPT_(AVATAR|CHARACTER|EXCLUSION_VOLUME|LEGACY_LINKSET|MATERIAL_VOLUME|OTHER|STATIC_OBSTACLE|WALKABLE)|SIM_STAT_PCT_CHARS_STEPPED)\\b' },
              { begin: '\\b(FALSE|TRUE)\\b' },
              { begin: '\\b(ZERO_ROTATION)\\b' },
              { begin: '\\b(EOF|JSON_(ARRAY|DELETE|FALSE|INVALID|NULL|NUMBER|OBJECT|STRING|TRUE)|NULL_KEY|TEXTURE_(BLANK|DEFAULT|MEDIA|PLYWOOD|TRANSPARENT)|URL_REQUEST_(GRANTED|DENIED))\\b' },
              { begin: '\\b(ZERO_VECTOR|TOUCH_INVALID_(TEXCOORD|VECTOR))\\b' }
            ]
          };
 
          const LSL_FUNCTIONS = {
            className: 'built_in',
            begin: '\\b(ll(AgentInExperience|(Create|DataSize|Delete|KeyCount|Keys|Read|Update)KeyValue|GetExperience(Details|ErrorMessage)|ReturnObjectsBy(ID|Owner)|Json(2List|[GS]etValue|ValueType)|Sin|Cos|Tan|Atan2|Sqrt|Pow|Abs|Fabs|Frand|Floor|Ceil|Round|Vec(Mag|Norm|Dist)|Rot(Between|2(Euler|Fwd|Left|Up))|(Euler|Axes)2Rot|Whisper|(Region|Owner)?Say|Shout|Listen(Control|Remove)?|Sensor(Repeat|Remove)?|Detected(Name|Key|Owner|Type|Pos|Vel|Grab|Rot|Group|LinkNumber)|Die|Ground|Wind|([GS]et)(AnimationOverride|MemoryLimit|PrimMediaParams|ParcelMusicURL|Object(Desc|Name)|PhysicsMaterial|Status|Scale|Color|Alpha|Texture|Pos|Rot|Force|Torque)|ResetAnimationOverride|(Scale|Offset|Rotate)Texture|(Rot)?Target(Remove)?|(Stop)?MoveToTarget|Apply(Rotational)?Impulse|Set(KeyframedMotion|ContentType|RegionPos|(Angular)?Velocity|Buoyancy|HoverHeight|ForceAndTorque|TimerEvent|ScriptState|Damage|TextureAnim|Sound(Queueing|Radius)|Vehicle(Type|(Float|Vector|Rotation)Param)|(Touch|Sit)?Text|Camera(Eye|At)Offset|PrimitiveParams|ClickAction|Link(Alpha|Color|PrimitiveParams(Fast)?|Texture(Anim)?|Camera|Media)|RemoteScriptAccessPin|PayPrice|LocalRot)|ScaleByFactor|Get((Max|Min)ScaleFactor|ClosestNavPoint|StaticPath|SimStats|Env|PrimitiveParams|Link(PrimitiveParams|Number(OfSides)?|Key|Name|Media)|HTTPHeader|FreeURLs|Object(Details|PermMask|PrimCount)|Parcel(MaxPrims|Details|Prim(Count|Owners))|Attached(List)?|(SPMax|Free|Used)Memory|Region(Name|TimeDilation|FPS|Corner|AgentCount)|Root(Position|Rotation)|UnixTime|(Parcel|Region)Flags|(Wall|GMT)clock|SimulatorHostname|BoundingBox|GeometricCenter|Creator|NumberOf(Prims|NotecardLines|Sides)|Animation(List)?|(Camera|Local)(Pos|Rot)|Vel|Accel|Omega|Time(stamp|OfDay)|(Object|CenterOf)?Mass|MassMKS|Energy|Owner|(Owner)?Key|SunDirection|Texture(Offset|Scale|Rot)|Inventory(Number|Name|Key|Type|Creator|PermMask)|Permissions(Key)?|StartParameter|List(Length|EntryType)|Date|Agent(Size|Info|Language|List)|LandOwnerAt|NotecardLine|Script(Name|State))|(Get|Reset|GetAndReset)Time|PlaySound(Slave)?|LoopSound(Master|Slave)?|(Trigger|Stop|Preload)Sound|((Get|Delete)Sub|Insert)String|To(Upper|Lower)|Give(InventoryList|Money)|RezObject|(Stop)?LookAt|Sleep|CollisionFilter|(Take|Release)Controls|DetachFromAvatar|AttachToAvatar(Temp)?|InstantMessage|(GetNext)?Email|StopHover|MinEventDelay|RotLookAt|String(Length|Trim)|(Start|Stop)Animation|TargetOmega|Request(Experience)?Permissions|(Create|Break)Link|BreakAllLinks|(Give|Remove)Inventory|Water|PassTouches|Request(Agent|Inventory)Data|TeleportAgent(Home|GlobalCoords)?|ModifyLand|CollisionSound|ResetScript|MessageLinked|PushObject|PassCollisions|AxisAngle2Rot|Rot2(Axis|Angle)|A(cos|sin)|AngleBetween|AllowInventoryDrop|SubStringIndex|List2(CSV|Integer|Json|Float|String|Key|Vector|Rot|List(Strided)?)|DeleteSubList|List(Statistics|Sort|Randomize|(Insert|Find|Replace)List)|EdgeOfWorld|AdjustSoundVolume|Key2Name|TriggerSoundLimited|EjectFromLand|(CSV|ParseString)2List|OverMyLand|SameGroup|UnSit|Ground(Slope|Normal|Contour)|GroundRepel|(Set|Remove)VehicleFlags|SitOnLink|(AvatarOn)?(Link)?SitTarget|Script(Danger|Profiler)|Dialog|VolumeDetect|ResetOtherScript|RemoteLoadScriptPin|(Open|Close)RemoteDataChannel|SendRemoteData|RemoteDataReply|(Integer|String)ToBase64|XorBase64|Log(10)?|Base64To(String|Integer)|ParseStringKeepNulls|RezAtRoot|RequestSimulatorData|ForceMouselook|(Load|Release|(E|Une)scape)URL|ParcelMedia(CommandList|Query)|ModPow|MapDestination|(RemoveFrom|AddTo|Reset)Land(Pass|Ban)List|(Set|Clear)CameraParams|HTTP(Request|Response)|TextBox|DetectedTouch(UV|Face|Pos|(N|Bin)ormal|ST)|(MD5|SHA1|DumpList2)String|Request(Secure)?URL|Clear(Prim|Link)Media|(Link)?ParticleSystem|(Get|Request)(Username|DisplayName)|RegionSayTo|CastRay|GenerateKey|TransferLindenDollars|ManageEstateAccess|(Create|Delete)Character|ExecCharacterCmd|Evade|FleeFrom|NavigateTo|PatrolPoints|Pursue|UpdateCharacter|WanderWithin))\\b'
          };
 
          return {
            name: 'LSL (Linden Scripting Language)',
            illegal: ':',
            contains: [
              LSL_STRINGS,
              {
                className: 'comment',
                variants: [
                  hljs.COMMENT('//', '$'),
                  hljs.COMMENT('/\\*', '\\*/')
                ],
                relevance: 0
              },
              LSL_NUMBERS,
              {
                className: 'section',
                variants: [
                  { begin: '\\b(state|default)\\b' },
                  { begin: '\\b(state_(entry|exit)|touch(_(start|end))?|(land_)?collision(_(start|end))?|timer|listen|(no_)?sensor|control|(not_)?at_(rot_)?target|money|email|experience_permissions(_denied)?|run_time_permissions|changed|attach|dataserver|moving_(start|end)|link_message|(on|object)_rez|remote_data|http_re(sponse|quest)|path_update|transaction_result)\\b' }
                ]
              },
              LSL_FUNCTIONS,
              LSL_CONSTANTS,
              {
                className: 'type',
                begin: '\\b(integer|float|string|key|vector|quaternion|rotation|list)\\b'
              }
            ]
          };
        }
 
        lsl_1 = lsl;
        return lsl_1;
    }
 
    /*
    Language: Lua
    Description: Lua is a powerful, efficient, lightweight, embeddable scripting language.
    Author: Andrew Fedorov <dmmdrs@mail.ru>
    Category: common, scripting
    Website: https://www.lua.org
    */
 
    var lua_1;
    var hasRequiredLua;
 
    function requireLua () {
        if (hasRequiredLua) return lua_1;
        hasRequiredLua = 1;
        function lua(hljs) {
          const OPENING_LONG_BRACKET = '\\[=*\\[';
          const CLOSING_LONG_BRACKET = '\\]=*\\]';
          const LONG_BRACKETS = {
            begin: OPENING_LONG_BRACKET,
            end: CLOSING_LONG_BRACKET,
            contains: [ 'self' ]
          };
          const COMMENTS = [
            hljs.COMMENT('--(?!' + OPENING_LONG_BRACKET + ')', '$'),
            hljs.COMMENT(
              '--' + OPENING_LONG_BRACKET,
              CLOSING_LONG_BRACKET,
              {
                contains: [ LONG_BRACKETS ],
                relevance: 10
              }
            )
          ];
          return {
            name: 'Lua',
            keywords: {
              $pattern: hljs.UNDERSCORE_IDENT_RE,
              literal: "true false nil",
              keyword: "and break do else elseif end for goto if in local not or repeat return then until while",
              built_in:
                // Metatags and globals:
                '_G _ENV _VERSION __index __newindex __mode __call __metatable __tostring __len '
                + '__gc __add __sub __mul __div __mod __pow __concat __unm __eq __lt __le assert '
                // Standard methods and properties:
                + 'collectgarbage dofile error getfenv getmetatable ipairs load loadfile loadstring '
                + 'module next pairs pcall print rawequal rawget rawset require select setfenv '
                + 'setmetatable tonumber tostring type unpack xpcall arg self '
                // Library methods and properties (one line per library):
                + 'coroutine resume yield status wrap create running debug getupvalue '
                + 'debug sethook getmetatable gethook setmetatable setlocal traceback setfenv getinfo setupvalue getlocal getregistry getfenv '
                + 'io lines write close flush open output type read stderr stdin input stdout popen tmpfile '
                + 'math log max acos huge ldexp pi cos tanh pow deg tan cosh sinh random randomseed frexp ceil floor rad abs sqrt modf asin min mod fmod log10 atan2 exp sin atan '
                + 'os exit setlocale date getenv difftime remove time clock tmpname rename execute package preload loadlib loaded loaders cpath config path seeall '
                + 'string sub upper len gfind rep find match char dump gmatch reverse byte format gsub lower '
                + 'table setn insert getn foreachi maxn foreach concat sort remove'
            },
            contains: COMMENTS.concat([
              {
                className: 'function',
                beginKeywords: 'function',
                end: '\\)',
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, { begin: '([_a-zA-Z]\\w*\\.)*([_a-zA-Z]\\w*:)?[_a-zA-Z]\\w*' }),
                  {
                    className: 'params',
                    begin: '\\(',
                    endsWithParent: true,
                    contains: COMMENTS
                  }
                ].concat(COMMENTS)
              },
              hljs.C_NUMBER_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: OPENING_LONG_BRACKET,
                end: CLOSING_LONG_BRACKET,
                contains: [ LONG_BRACKETS ],
                relevance: 5
              }
            ])
          };
        }
 
        lua_1 = lua;
        return lua_1;
    }
 
    /*
    Language: Makefile
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Contributors: Joël Porquet <joel@porquet.org>
    Website: https://www.gnu.org/software/make/manual/html_node/Introduction.html
    Category: common
    */
 
    var makefile_1;
    var hasRequiredMakefile;
 
    function requireMakefile () {
        if (hasRequiredMakefile) return makefile_1;
        hasRequiredMakefile = 1;
        function makefile(hljs) {
          /* Variables: simple (eg $(var)) and special (eg $@) */
          const VARIABLE = {
            className: 'variable',
            variants: [
              {
                begin: '\\$\\(' + hljs.UNDERSCORE_IDENT_RE + '\\)',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              { begin: /\$[@%<?\^\+\*]/ }
            ]
          };
          /* Quoted string with variables inside */
          const QUOTE_STRING = {
            className: 'string',
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              VARIABLE
            ]
          };
          /* Function: $(func arg,...) */
          const FUNC = {
            className: 'variable',
            begin: /\$\([\w-]+\s/,
            end: /\)/,
            keywords: { built_in:
                'subst patsubst strip findstring filter filter-out sort '
                + 'word wordlist firstword lastword dir notdir suffix basename '
                + 'addsuffix addprefix join wildcard realpath abspath error warning '
                + 'shell origin flavor foreach if or and call eval file value' },
            contains: [ VARIABLE ]
          };
          /* Variable assignment */
          const ASSIGNMENT = { begin: '^' + hljs.UNDERSCORE_IDENT_RE + '\\s*(?=[:+?]?=)' };
          /* Meta targets (.PHONY) */
          const META = {
            className: 'meta',
            begin: /^\.PHONY:/,
            end: /$/,
            keywords: {
              $pattern: /[\.\w]+/,
              keyword: '.PHONY'
            }
          };
          /* Targets */
          const TARGET = {
            className: 'section',
            begin: /^[^\s]+:/,
            end: /$/,
            contains: [ VARIABLE ]
          };
          return {
            name: 'Makefile',
            aliases: [
              'mk',
              'mak',
              'make',
            ],
            keywords: {
              $pattern: /[\w-]+/,
              keyword: 'define endef undefine ifdef ifndef ifeq ifneq else endif '
              + 'include -include sinclude override export unexport private vpath'
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              VARIABLE,
              QUOTE_STRING,
              FUNC,
              ASSIGNMENT,
              META,
              TARGET
            ]
          };
        }
 
        makefile_1 = makefile;
        return makefile_1;
    }
 
    var mathematica_1;
    var hasRequiredMathematica;
 
    function requireMathematica () {
        if (hasRequiredMathematica) return mathematica_1;
        hasRequiredMathematica = 1;
        const SYSTEM_SYMBOLS = [
          "AASTriangle",
          "AbelianGroup",
          "Abort",
          "AbortKernels",
          "AbortProtect",
          "AbortScheduledTask",
          "Above",
          "Abs",
          "AbsArg",
          "AbsArgPlot",
          "Absolute",
          "AbsoluteCorrelation",
          "AbsoluteCorrelationFunction",
          "AbsoluteCurrentValue",
          "AbsoluteDashing",
          "AbsoluteFileName",
          "AbsoluteOptions",
          "AbsolutePointSize",
          "AbsoluteThickness",
          "AbsoluteTime",
          "AbsoluteTiming",
          "AcceptanceThreshold",
          "AccountingForm",
          "Accumulate",
          "Accuracy",
          "AccuracyGoal",
          "AcousticAbsorbingValue",
          "AcousticImpedanceValue",
          "AcousticNormalVelocityValue",
          "AcousticPDEComponent",
          "AcousticPressureCondition",
          "AcousticRadiationValue",
          "AcousticSoundHardValue",
          "AcousticSoundSoftCondition",
          "ActionDelay",
          "ActionMenu",
          "ActionMenuBox",
          "ActionMenuBoxOptions",
          "Activate",
          "Active",
          "ActiveClassification",
          "ActiveClassificationObject",
          "ActiveItem",
          "ActivePrediction",
          "ActivePredictionObject",
          "ActiveStyle",
          "AcyclicGraphQ",
          "AddOnHelpPath",
          "AddSides",
          "AddTo",
          "AddToSearchIndex",
          "AddUsers",
          "AdjacencyGraph",
          "AdjacencyList",
          "AdjacencyMatrix",
          "AdjacentMeshCells",
          "Adjugate",
          "AdjustmentBox",
          "AdjustmentBoxOptions",
          "AdjustTimeSeriesForecast",
          "AdministrativeDivisionData",
          "AffineHalfSpace",
          "AffineSpace",
          "AffineStateSpaceModel",
          "AffineTransform",
          "After",
          "AggregatedEntityClass",
          "AggregationLayer",
          "AircraftData",
          "AirportData",
          "AirPressureData",
          "AirSoundAttenuation",
          "AirTemperatureData",
          "AiryAi",
          "AiryAiPrime",
          "AiryAiZero",
          "AiryBi",
          "AiryBiPrime",
          "AiryBiZero",
          "AlgebraicIntegerQ",
          "AlgebraicNumber",
          "AlgebraicNumberDenominator",
          "AlgebraicNumberNorm",
          "AlgebraicNumberPolynomial",
          "AlgebraicNumberTrace",
          "AlgebraicRules",
          "AlgebraicRulesData",
          "Algebraics",
          "AlgebraicUnitQ",
          "Alignment",
          "AlignmentMarker",
          "AlignmentPoint",
          "All",
          "AllowAdultContent",
          "AllowChatServices",
          "AllowedCloudExtraParameters",
          "AllowedCloudParameterExtensions",
          "AllowedDimensions",
          "AllowedFrequencyRange",
          "AllowedHeads",
          "AllowGroupClose",
          "AllowIncomplete",
          "AllowInlineCells",
          "AllowKernelInitialization",
          "AllowLooseGrammar",
          "AllowReverseGroupClose",
          "AllowScriptLevelChange",
          "AllowVersionUpdate",
          "AllTrue",
          "Alphabet",
          "AlphabeticOrder",
          "AlphabeticSort",
          "AlphaChannel",
          "AlternateImage",
          "AlternatingFactorial",
          "AlternatingGroup",
          "AlternativeHypothesis",
          "Alternatives",
          "AltitudeMethod",
          "AmbientLight",
          "AmbiguityFunction",
          "AmbiguityList",
          "Analytic",
          "AnatomyData",
          "AnatomyForm",
          "AnatomyPlot3D",
          "AnatomySkinStyle",
          "AnatomyStyling",
          "AnchoredSearch",
          "And",
          "AndersonDarlingTest",
          "AngerJ",
          "AngleBisector",
          "AngleBracket",
          "AnglePath",
          "AnglePath3D",
          "AngleVector",
          "AngularGauge",
          "Animate",
          "AnimatedImage",
          "AnimationCycleOffset",
          "AnimationCycleRepetitions",
          "AnimationDirection",
          "AnimationDisplayTime",
          "AnimationRate",
          "AnimationRepetitions",
          "AnimationRunning",
          "AnimationRunTime",
          "AnimationTimeIndex",
          "AnimationVideo",
          "Animator",
          "AnimatorBox",
          "AnimatorBoxOptions",
          "AnimatorElements",
          "Annotate",
          "Annotation",
          "AnnotationDelete",
          "AnnotationKeys",
          "AnnotationRules",
          "AnnotationValue",
          "Annuity",
          "AnnuityDue",
          "Annulus",
          "AnomalyDetection",
          "AnomalyDetector",
          "AnomalyDetectorFunction",
          "Anonymous",
          "Antialiasing",
          "Antihermitian",
          "AntihermitianMatrixQ",
          "Antisymmetric",
          "AntisymmetricMatrixQ",
          "Antonyms",
          "AnyOrder",
          "AnySubset",
          "AnyTrue",
          "Apart",
          "ApartSquareFree",
          "APIFunction",
          "Appearance",
          "AppearanceElements",
          "AppearanceRules",
          "AppellF1",
          "Append",
          "AppendCheck",
          "AppendLayer",
          "AppendTo",
          "Application",
          "Apply",
          "ApplyReaction",
          "ApplySides",
          "ApplyTo",
          "ArcCos",
          "ArcCosh",
          "ArcCot",
          "ArcCoth",
          "ArcCsc",
          "ArcCsch",
          "ArcCurvature",
          "ARCHProcess",
          "ArcLength",
          "ArcSec",
          "ArcSech",
          "ArcSin",
          "ArcSinDistribution",
          "ArcSinh",
          "ArcTan",
          "ArcTanh",
          "Area",
          "Arg",
          "ArgMax",
          "ArgMin",
          "ArgumentCountQ",
          "ArgumentsOptions",
          "ARIMAProcess",
          "ArithmeticGeometricMean",
          "ARMAProcess",
          "Around",
          "AroundReplace",
          "ARProcess",
          "Array",
          "ArrayComponents",
          "ArrayDepth",
          "ArrayFilter",
          "ArrayFlatten",
          "ArrayMesh",
          "ArrayPad",
          "ArrayPlot",
          "ArrayPlot3D",
          "ArrayQ",
          "ArrayReduce",
          "ArrayResample",
          "ArrayReshape",
          "ArrayRules",
          "Arrays",
          "Arrow",
          "Arrow3DBox",
          "ArrowBox",
          "Arrowheads",
          "ASATriangle",
          "Ask",
          "AskAppend",
          "AskConfirm",
          "AskDisplay",
          "AskedQ",
          "AskedValue",
          "AskFunction",
          "AskState",
          "AskTemplateDisplay",
          "AspectRatio",
          "AspectRatioFixed",
          "Assert",
          "AssessmentFunction",
          "AssessmentResultObject",
          "AssociateTo",
          "Association",
          "AssociationFormat",
          "AssociationMap",
          "AssociationQ",
          "AssociationThread",
          "AssumeDeterministic",
          "Assuming",
          "Assumptions",
          "AstroAngularSeparation",
          "AstroBackground",
          "AstroCenter",
          "AstroDistance",
          "AstroGraphics",
          "AstroGridLines",
          "AstroGridLinesStyle",
          "AstronomicalData",
          "AstroPosition",
          "AstroProjection",
          "AstroRange",
          "AstroRangePadding",
          "AstroReferenceFrame",
          "AstroStyling",
          "AstroZoomLevel",
          "Asymptotic",
          "AsymptoticDSolveValue",
          "AsymptoticEqual",
          "AsymptoticEquivalent",
          "AsymptoticExpectation",
          "AsymptoticGreater",
          "AsymptoticGreaterEqual",
          "AsymptoticIntegrate",
          "AsymptoticLess",
          "AsymptoticLessEqual",
          "AsymptoticOutputTracker",
          "AsymptoticProbability",
          "AsymptoticProduct",
          "AsymptoticRSolveValue",
          "AsymptoticSolve",
          "AsymptoticSum",
          "Asynchronous",
          "AsynchronousTaskObject",
          "AsynchronousTasks",
          "Atom",
          "AtomCoordinates",
          "AtomCount",
          "AtomDiagramCoordinates",
          "AtomLabels",
          "AtomLabelStyle",
          "AtomList",
          "AtomQ",
          "AttachCell",
          "AttachedCell",
          "AttentionLayer",
          "Attributes",
          "Audio",
          "AudioAmplify",
          "AudioAnnotate",
          "AudioAnnotationLookup",
          "AudioBlockMap",
          "AudioCapture",
          "AudioChannelAssignment",
          "AudioChannelCombine",
          "AudioChannelMix",
          "AudioChannels",
          "AudioChannelSeparate",
          "AudioData",
          "AudioDelay",
          "AudioDelete",
          "AudioDevice",
          "AudioDistance",
          "AudioEncoding",
          "AudioFade",
          "AudioFrequencyShift",
          "AudioGenerator",
          "AudioIdentify",
          "AudioInputDevice",
          "AudioInsert",
          "AudioInstanceQ",
          "AudioIntervals",
          "AudioJoin",
          "AudioLabel",
          "AudioLength",
          "AudioLocalMeasurements",
          "AudioLooping",
          "AudioLoudness",
          "AudioMeasurements",
          "AudioNormalize",
          "AudioOutputDevice",
          "AudioOverlay",
          "AudioPad",
          "AudioPan",
          "AudioPartition",
          "AudioPause",
          "AudioPitchShift",
          "AudioPlay",
          "AudioPlot",
          "AudioQ",
          "AudioRecord",
          "AudioReplace",
          "AudioResample",
          "AudioReverb",
          "AudioReverse",
          "AudioSampleRate",
          "AudioSpectralMap",
          "AudioSpectralTransformation",
          "AudioSplit",
          "AudioStop",
          "AudioStream",
          "AudioStreams",
          "AudioTimeStretch",
          "AudioTrackApply",
          "AudioTrackSelection",
          "AudioTrim",
          "AudioType",
          "AugmentedPolyhedron",
          "AugmentedSymmetricPolynomial",
          "Authenticate",
          "Authentication",
          "AuthenticationDialog",
          "AutoAction",
          "Autocomplete",
          "AutocompletionFunction",
          "AutoCopy",
          "AutocorrelationTest",
          "AutoDelete",
          "AutoEvaluateEvents",
          "AutoGeneratedPackage",
          "AutoIndent",
          "AutoIndentSpacings",
          "AutoItalicWords",
          "AutoloadPath",
          "AutoMatch",
          "Automatic",
          "AutomaticImageSize",
          "AutoMultiplicationSymbol",
          "AutoNumberFormatting",
          "AutoOpenNotebooks",
          "AutoOpenPalettes",
          "AutoOperatorRenderings",
          "AutoQuoteCharacters",
          "AutoRefreshed",
          "AutoRemove",
          "AutorunSequencing",
          "AutoScaling",
          "AutoScroll",
          "AutoSpacing",
          "AutoStyleOptions",
          "AutoStyleWords",
          "AutoSubmitting",
          "Axes",
          "AxesEdge",
          "AxesLabel",
          "AxesOrigin",
          "AxesStyle",
          "AxiomaticTheory",
          "Axis",
          "Axis3DBox",
          "Axis3DBoxOptions",
          "AxisBox",
          "AxisBoxOptions",
          "AxisLabel",
          "AxisObject",
          "AxisStyle",
          "BabyMonsterGroupB",
          "Back",
          "BackFaceColor",
          "BackFaceGlowColor",
          "BackFaceOpacity",
          "BackFaceSpecularColor",
          "BackFaceSpecularExponent",
          "BackFaceSurfaceAppearance",
          "BackFaceTexture",
          "Background",
          "BackgroundAppearance",
          "BackgroundTasksSettings",
          "Backslash",
          "Backsubstitution",
          "Backward",
          "Ball",
          "Band",
          "BandpassFilter",
          "BandstopFilter",
          "BarabasiAlbertGraphDistribution",
          "BarChart",
          "BarChart3D",
          "BarcodeImage",
          "BarcodeRecognize",
          "BaringhausHenzeTest",
          "BarLegend",
          "BarlowProschanImportance",
          "BarnesG",
          "BarOrigin",
          "BarSpacing",
          "BartlettHannWindow",
          "BartlettWindow",
          "BaseDecode",
          "BaseEncode",
          "BaseForm",
          "Baseline",
          "BaselinePosition",
          "BaseStyle",
          "BasicRecurrentLayer",
          "BatchNormalizationLayer",
          "BatchSize",
          "BatesDistribution",
          "BattleLemarieWavelet",
          "BayesianMaximization",
          "BayesianMaximizationObject",
          "BayesianMinimization",
          "BayesianMinimizationObject",
          "Because",
          "BeckmannDistribution",
          "Beep",
          "Before",
          "Begin",
          "BeginDialogPacket",
          "BeginPackage",
          "BellB",
          "BellY",
          "Below",
          "BenfordDistribution",
          "BeniniDistribution",
          "BenktanderGibratDistribution",
          "BenktanderWeibullDistribution",
          "BernoulliB",
          "BernoulliDistribution",
          "BernoulliGraphDistribution",
          "BernoulliProcess",
          "BernsteinBasis",
          "BesagL",
          "BesselFilterModel",
          "BesselI",
          "BesselJ",
          "BesselJZero",
          "BesselK",
          "BesselY",
          "BesselYZero",
          "Beta",
          "BetaBinomialDistribution",
          "BetaDistribution",
          "BetaNegativeBinomialDistribution",
          "BetaPrimeDistribution",
          "BetaRegularized",
          "Between",
          "BetweennessCentrality",
          "Beveled",
          "BeveledPolyhedron",
          "BezierCurve",
          "BezierCurve3DBox",
          "BezierCurve3DBoxOptions",
          "BezierCurveBox",
          "BezierCurveBoxOptions",
          "BezierFunction",
          "BilateralFilter",
          "BilateralLaplaceTransform",
          "BilateralZTransform",
          "Binarize",
          "BinaryDeserialize",
          "BinaryDistance",
          "BinaryFormat",
          "BinaryImageQ",
          "BinaryRead",
          "BinaryReadList",
          "BinarySerialize",
          "BinaryWrite",
          "BinCounts",
          "BinLists",
          "BinnedVariogramList",
          "Binomial",
          "BinomialDistribution",
          "BinomialPointProcess",
          "BinomialProcess",
          "BinormalDistribution",
          "BiorthogonalSplineWavelet",
          "BioSequence",
          "BioSequenceBackTranslateList",
          "BioSequenceComplement",
          "BioSequenceInstances",
          "BioSequenceModify",
          "BioSequencePlot",
          "BioSequenceQ",
          "BioSequenceReverseComplement",
          "BioSequenceTranscribe",
          "BioSequenceTranslate",
          "BipartiteGraphQ",
          "BiquadraticFilterModel",
          "BirnbaumImportance",
          "BirnbaumSaundersDistribution",
          "BitAnd",
          "BitClear",
          "BitGet",
          "BitLength",
          "BitNot",
          "BitOr",
          "BitRate",
          "BitSet",
          "BitShiftLeft",
          "BitShiftRight",
          "BitXor",
          "BiweightLocation",
          "BiweightMidvariance",
          "Black",
          "BlackmanHarrisWindow",
          "BlackmanNuttallWindow",
          "BlackmanWindow",
          "Blank",
          "BlankForm",
          "BlankNullSequence",
          "BlankSequence",
          "Blend",
          "Block",
          "BlockchainAddressData",
          "BlockchainBase",
          "BlockchainBlockData",
          "BlockchainContractValue",
          "BlockchainData",
          "BlockchainGet",
          "BlockchainKeyEncode",
          "BlockchainPut",
          "BlockchainTokenData",
          "BlockchainTransaction",
          "BlockchainTransactionData",
          "BlockchainTransactionSign",
          "BlockchainTransactionSubmit",
          "BlockDiagonalMatrix",
          "BlockLowerTriangularMatrix",
          "BlockMap",
          "BlockRandom",
          "BlockUpperTriangularMatrix",
          "BlomqvistBeta",
          "BlomqvistBetaTest",
          "Blue",
          "Blur",
          "Blurring",
          "BodePlot",
          "BohmanWindow",
          "Bold",
          "Bond",
          "BondCount",
          "BondLabels",
          "BondLabelStyle",
          "BondList",
          "BondQ",
          "Bookmarks",
          "Boole",
          "BooleanConsecutiveFunction",
          "BooleanConvert",
          "BooleanCountingFunction",
          "BooleanFunction",
          "BooleanGraph",
          "BooleanMaxterms",
          "BooleanMinimize",
          "BooleanMinterms",
          "BooleanQ",
          "BooleanRegion",
          "Booleans",
          "BooleanStrings",
          "BooleanTable",
          "BooleanVariables",
          "BorderDimensions",
          "BorelTannerDistribution",
          "Bottom",
          "BottomHatTransform",
          "BoundaryDiscretizeGraphics",
          "BoundaryDiscretizeRegion",
          "BoundaryMesh",
          "BoundaryMeshRegion",
          "BoundaryMeshRegionQ",
          "BoundaryStyle",
          "BoundedRegionQ",
          "BoundingRegion",
          "Bounds",
          "Box",
          "BoxBaselineShift",
          "BoxData",
          "BoxDimensions",
          "Boxed",
          "Boxes",
          "BoxForm",
          "BoxFormFormatTypes",
          "BoxFrame",
          "BoxID",
          "BoxMargins",
          "BoxMatrix",
          "BoxObject",
          "BoxRatios",
          "BoxRotation",
          "BoxRotationPoint",
          "BoxStyle",
          "BoxWhiskerChart",
          "Bra",
          "BracketingBar",
          "BraKet",
          "BrayCurtisDistance",
          "BreadthFirstScan",
          "Break",
          "BridgeData",
          "BrightnessEqualize",
          "BroadcastStationData",
          "Brown",
          "BrownForsytheTest",
          "BrownianBridgeProcess",
          "BrowserCategory",
          "BSplineBasis",
          "BSplineCurve",
          "BSplineCurve3DBox",
          "BSplineCurve3DBoxOptions",
          "BSplineCurveBox",
          "BSplineCurveBoxOptions",
          "BSplineFunction",
          "BSplineSurface",
          "BSplineSurface3DBox",
          "BSplineSurface3DBoxOptions",
          "BubbleChart",
          "BubbleChart3D",
          "BubbleScale",
          "BubbleSizes",
          "BuckyballGraph",
          "BuildCompiledComponent",
          "BuildingData",
          "BulletGauge",
          "BusinessDayQ",
          "ButterflyGraph",
          "ButterworthFilterModel",
          "Button",
          "ButtonBar",
          "ButtonBox",
          "ButtonBoxOptions",
          "ButtonCell",
          "ButtonContents",
          "ButtonData",
          "ButtonEvaluator",
          "ButtonExpandable",
          "ButtonFrame",
          "ButtonFunction",
          "ButtonMargins",
          "ButtonMinHeight",
          "ButtonNote",
          "ButtonNotebook",
          "ButtonSource",
          "ButtonStyle",
          "ButtonStyleMenuListing",
          "Byte",
          "ByteArray",
          "ByteArrayFormat",
          "ByteArrayFormatQ",
          "ByteArrayQ",
          "ByteArrayToString",
          "ByteCount",
          "ByteOrdering",
          "C",
          "CachedValue",
          "CacheGraphics",
          "CachePersistence",
          "CalendarConvert",
          "CalendarData",
          "CalendarType",
          "Callout",
          "CalloutMarker",
          "CalloutStyle",
          "CallPacket",
          "CanberraDistance",
          "Cancel",
          "CancelButton",
          "CandlestickChart",
          "CanonicalGraph",
          "CanonicalizePolygon",
          "CanonicalizePolyhedron",
          "CanonicalizeRegion",
          "CanonicalName",
          "CanonicalWarpingCorrespondence",
          "CanonicalWarpingDistance",
          "CantorMesh",
          "CantorStaircase",
          "Canvas",
          "Cap",
          "CapForm",
          "CapitalDifferentialD",
          "Capitalize",
          "CapsuleShape",
          "CaptureRunning",
          "CaputoD",
          "CardinalBSplineBasis",
          "CarlemanLinearize",
          "CarlsonRC",
          "CarlsonRD",
          "CarlsonRE",
          "CarlsonRF",
          "CarlsonRG",
          "CarlsonRJ",
          "CarlsonRK",
          "CarlsonRM",
          "CarmichaelLambda",
          "CaseOrdering",
          "Cases",
          "CaseSensitive",
          "Cashflow",
          "Casoratian",
          "Cast",
          "Catalan",
          "CatalanNumber",
          "Catch",
          "CategoricalDistribution",
          "Catenate",
          "CatenateLayer",
          "CauchyDistribution",
          "CauchyMatrix",
          "CauchyPointProcess",
          "CauchyWindow",
          "CayleyGraph",
          "CDF",
          "CDFDeploy",
          "CDFInformation",
          "CDFWavelet",
          "Ceiling",
          "CelestialSystem",
          "Cell",
          "CellAutoOverwrite",
          "CellBaseline",
          "CellBoundingBox",
          "CellBracketOptions",
          "CellChangeTimes",
          "CellContents",
          "CellContext",
          "CellDingbat",
          "CellDingbatMargin",
          "CellDynamicExpression",
          "CellEditDuplicate",
          "CellElementsBoundingBox",
          "CellElementSpacings",
          "CellEpilog",
          "CellEvaluationDuplicate",
          "CellEvaluationFunction",
          "CellEvaluationLanguage",
          "CellEventActions",
          "CellFrame",
          "CellFrameColor",
          "CellFrameLabelMargins",
          "CellFrameLabels",
          "CellFrameMargins",
          "CellFrameStyle",
          "CellGroup",
          "CellGroupData",
          "CellGrouping",
          "CellGroupingRules",
          "CellHorizontalScrolling",
          "CellID",
          "CellInsertionPointCell",
          "CellLabel",
          "CellLabelAutoDelete",
          "CellLabelMargins",
          "CellLabelPositioning",
          "CellLabelStyle",
          "CellLabelTemplate",
          "CellMargins",
          "CellObject",
          "CellOpen",
          "CellPrint",
          "CellProlog",
          "Cells",
          "CellSize",
          "CellStyle",
          "CellTags",
          "CellTrayPosition",
          "CellTrayWidgets",
          "CellularAutomaton",
          "CensoredDistribution",
          "Censoring",
          "Center",
          "CenterArray",
          "CenterDot",
          "CenteredInterval",
          "CentralFeature",
          "CentralMoment",
          "CentralMomentGeneratingFunction",
          "Cepstrogram",
          "CepstrogramArray",
          "CepstrumArray",
          "CForm",
          "ChampernowneNumber",
          "ChangeOptions",
          "ChannelBase",
          "ChannelBrokerAction",
          "ChannelDatabin",
          "ChannelHistoryLength",
          "ChannelListen",
          "ChannelListener",
          "ChannelListeners",
          "ChannelListenerWait",
          "ChannelObject",
          "ChannelPreSendFunction",
          "ChannelReceiverFunction",
          "ChannelSend",
          "ChannelSubscribers",
          "ChanVeseBinarize",
          "Character",
          "CharacterCounts",
          "CharacterEncoding",
          "CharacterEncodingsPath",
          "CharacteristicFunction",
          "CharacteristicPolynomial",
          "CharacterName",
          "CharacterNormalize",
          "CharacterRange",
          "Characters",
          "ChartBaseStyle",
          "ChartElementData",
          "ChartElementDataFunction",
          "ChartElementFunction",
          "ChartElements",
          "ChartLabels",
          "ChartLayout",
          "ChartLegends",
          "ChartStyle",
          "Chebyshev1FilterModel",
          "Chebyshev2FilterModel",
          "ChebyshevDistance",
          "ChebyshevT",
          "ChebyshevU",
          "Check",
          "CheckAbort",
          "CheckAll",
          "CheckArguments",
          "Checkbox",
          "CheckboxBar",
          "CheckboxBox",
          "CheckboxBoxOptions",
          "ChemicalConvert",
          "ChemicalData",
          "ChemicalFormula",
          "ChemicalInstance",
          "ChemicalReaction",
          "ChessboardDistance",
          "ChiDistribution",
          "ChineseRemainder",
          "ChiSquareDistribution",
          "ChoiceButtons",
          "ChoiceDialog",
          "CholeskyDecomposition",
          "Chop",
          "ChromaticityPlot",
          "ChromaticityPlot3D",
          "ChromaticPolynomial",
          "Circle",
          "CircleBox",
          "CircleDot",
          "CircleMinus",
          "CirclePlus",
          "CirclePoints",
          "CircleThrough",
          "CircleTimes",
          "CirculantGraph",
          "CircularArcThrough",
          "CircularOrthogonalMatrixDistribution",
          "CircularQuaternionMatrixDistribution",
          "CircularRealMatrixDistribution",
          "CircularSymplecticMatrixDistribution",
          "CircularUnitaryMatrixDistribution",
          "Circumsphere",
          "CityData",
          "ClassifierFunction",
          "ClassifierInformation",
          "ClassifierMeasurements",
          "ClassifierMeasurementsObject",
          "Classify",
          "ClassPriors",
          "Clear",
          "ClearAll",
          "ClearAttributes",
          "ClearCookies",
          "ClearPermissions",
          "ClearSystemCache",
          "ClebschGordan",
          "ClickPane",
          "ClickToCopy",
          "ClickToCopyEnabled",
          "Clip",
          "ClipboardNotebook",
          "ClipFill",
          "ClippingStyle",
          "ClipPlanes",
          "ClipPlanesStyle",
          "ClipRange",
          "Clock",
          "ClockGauge",
          "ClockwiseContourIntegral",
          "Close",
          "Closed",
          "CloseKernels",
          "ClosenessCentrality",
          "Closing",
          "ClosingAutoSave",
          "ClosingEvent",
          "CloudAccountData",
          "CloudBase",
          "CloudConnect",
          "CloudConnections",
          "CloudDeploy",
          "CloudDirectory",
          "CloudDisconnect",
          "CloudEvaluate",
          "CloudExport",
          "CloudExpression",
          "CloudExpressions",
          "CloudFunction",
          "CloudGet",
          "CloudImport",
          "CloudLoggingData",
          "CloudObject",
          "CloudObjectInformation",
          "CloudObjectInformationData",
          "CloudObjectNameFormat",
          "CloudObjects",
          "CloudObjectURLType",
          "CloudPublish",
          "CloudPut",
          "CloudRenderingMethod",
          "CloudSave",
          "CloudShare",
          "CloudSubmit",
          "CloudSymbol",
          "CloudUnshare",
          "CloudUserID",
          "ClusterClassify",
          "ClusterDissimilarityFunction",
          "ClusteringComponents",
          "ClusteringMeasurements",
          "ClusteringTree",
          "CMYKColor",
          "Coarse",
          "CodeAssistOptions",
          "Coefficient",
          "CoefficientArrays",
          "CoefficientDomain",
          "CoefficientList",
          "CoefficientRules",
          "CoifletWavelet",
          "Collect",
          "CollinearPoints",
          "Colon",
          "ColonForm",
          "ColorBalance",
          "ColorCombine",
          "ColorConvert",
          "ColorCoverage",
          "ColorData",
          "ColorDataFunction",
          "ColorDetect",
          "ColorDistance",
          "ColorFunction",
          "ColorFunctionBinning",
          "ColorFunctionScaling",
          "Colorize",
          "ColorNegate",
          "ColorOutput",
          "ColorProfileData",
          "ColorQ",
          "ColorQuantize",
          "ColorReplace",
          "ColorRules",
          "ColorSelectorSettings",
          "ColorSeparate",
          "ColorSetter",
          "ColorSetterBox",
          "ColorSetterBoxOptions",
          "ColorSlider",
          "ColorsNear",
          "ColorSpace",
          "ColorToneMapping",
          "Column",
          "ColumnAlignments",
          "ColumnBackgrounds",
          "ColumnForm",
          "ColumnLines",
          "ColumnsEqual",
          "ColumnSpacings",
          "ColumnWidths",
          "CombinatorB",
          "CombinatorC",
          "CombinatorI",
          "CombinatorK",
          "CombinatorS",
          "CombinatorW",
          "CombinatorY",
          "CombinedEntityClass",
          "CombinerFunction",
          "CometData",
          "CommonDefaultFormatTypes",
          "Commonest",
          "CommonestFilter",
          "CommonName",
          "CommonUnits",
          "CommunityBoundaryStyle",
          "CommunityGraphPlot",
          "CommunityLabels",
          "CommunityRegionStyle",
          "CompanyData",
          "CompatibleUnitQ",
          "CompilationOptions",
          "CompilationTarget",
          "Compile",
          "Compiled",
          "CompiledCodeFunction",
          "CompiledComponent",
          "CompiledExpressionDeclaration",
          "CompiledFunction",
          "CompiledLayer",
          "CompilerCallback",
          "CompilerEnvironment",
          "CompilerEnvironmentAppend",
          "CompilerEnvironmentAppendTo",
          "CompilerEnvironmentObject",
          "CompilerOptions",
          "Complement",
          "ComplementedEntityClass",
          "CompleteGraph",
          "CompleteGraphQ",
          "CompleteIntegral",
          "CompleteKaryTree",
          "CompletionsListPacket",
          "Complex",
          "ComplexArrayPlot",
          "ComplexContourPlot",
          "Complexes",
          "ComplexExpand",
          "ComplexInfinity",
          "ComplexityFunction",
          "ComplexListPlot",
          "ComplexPlot",
          "ComplexPlot3D",
          "ComplexRegionPlot",
          "ComplexStreamPlot",
          "ComplexVectorPlot",
          "ComponentMeasurements",
          "ComponentwiseContextMenu",
          "Compose",
          "ComposeList",
          "ComposeSeries",
          "CompositeQ",
          "Composition",
          "CompoundElement",
          "CompoundExpression",
          "CompoundPoissonDistribution",
          "CompoundPoissonProcess",
          "CompoundRenewalProcess",
          "Compress",
          "CompressedData",
          "CompressionLevel",
          "ComputeUncertainty",
          "ConcaveHullMesh",
          "Condition",
          "ConditionalExpression",
          "Conditioned",
          "Cone",
          "ConeBox",
          "ConfidenceLevel",
          "ConfidenceRange",
          "ConfidenceTransform",
          "ConfigurationPath",
          "Confirm",
          "ConfirmAssert",
          "ConfirmBy",
          "ConfirmMatch",
          "ConfirmQuiet",
          "ConformationMethod",
          "ConformAudio",
          "ConformImages",
          "Congruent",
          "ConicGradientFilling",
          "ConicHullRegion",
          "ConicHullRegion3DBox",
          "ConicHullRegion3DBoxOptions",
          "ConicHullRegionBox",
          "ConicHullRegionBoxOptions",
          "ConicOptimization",
          "Conjugate",
          "ConjugateTranspose",
          "Conjunction",
          "Connect",
          "ConnectedComponents",
          "ConnectedGraphComponents",
          "ConnectedGraphQ",
          "ConnectedMeshComponents",
          "ConnectedMoleculeComponents",
          "ConnectedMoleculeQ",
          "ConnectionSettings",
          "ConnectLibraryCallbackFunction",
          "ConnectSystemModelComponents",
          "ConnectSystemModelController",
          "ConnesWindow",
          "ConoverTest",
          "ConservativeConvectionPDETerm",
          "ConsoleMessage",
          "Constant",
          "ConstantArray",
          "ConstantArrayLayer",
          "ConstantImage",
          "ConstantPlusLayer",
          "ConstantRegionQ",
          "Constants",
          "ConstantTimesLayer",
          "ConstellationData",
          "ConstrainedMax",
          "ConstrainedMin",
          "Construct",
          "Containing",
          "ContainsAll",
          "ContainsAny",
          "ContainsExactly",
          "ContainsNone",
          "ContainsOnly",
          "ContentDetectorFunction",
          "ContentFieldOptions",
          "ContentLocationFunction",
          "ContentObject",
          "ContentPadding",
          "ContentsBoundingBox",
          "ContentSelectable",
          "ContentSize",
          "Context",
          "ContextMenu",
          "Contexts",
          "ContextToFileName",
          "Continuation",
          "Continue",
          "ContinuedFraction",
          "ContinuedFractionK",
          "ContinuousAction",
          "ContinuousMarkovProcess",
          "ContinuousTask",
          "ContinuousTimeModelQ",
          "ContinuousWaveletData",
          "ContinuousWaveletTransform",
          "ContourDetect",
          "ContourGraphics",
          "ContourIntegral",
          "ContourLabels",
          "ContourLines",
          "ContourPlot",
          "ContourPlot3D",
          "Contours",
          "ContourShading",
          "ContourSmoothing",
          "ContourStyle",
          "ContraharmonicMean",
          "ContrastiveLossLayer",
          "Control",
          "ControlActive",
          "ControlAlignment",
          "ControlGroupContentsBox",
          "ControllabilityGramian",
          "ControllabilityMatrix",
          "ControllableDecomposition",
          "ControllableModelQ",
          "ControllerDuration",
          "ControllerInformation",
          "ControllerInformationData",
          "ControllerLinking",
          "ControllerManipulate",
          "ControllerMethod",
          "ControllerPath",
          "ControllerState",
          "ControlPlacement",
          "ControlsRendering",
          "ControlType",
          "ConvectionPDETerm",
          "Convergents",
          "ConversionOptions",
          "ConversionRules",
          "ConvertToPostScript",
          "ConvertToPostScriptPacket",
          "ConvexHullMesh",
          "ConvexHullRegion",
          "ConvexOptimization",
          "ConvexPolygonQ",
          "ConvexPolyhedronQ",
          "ConvexRegionQ",
          "ConvolutionLayer",
          "Convolve",
          "ConwayGroupCo1",
          "ConwayGroupCo2",
          "ConwayGroupCo3",
          "CookieFunction",
          "Cookies",
          "CoordinateBoundingBox",
          "CoordinateBoundingBoxArray",
          "CoordinateBounds",
          "CoordinateBoundsArray",
          "CoordinateChartData",
          "CoordinatesToolOptions",
          "CoordinateTransform",
          "CoordinateTransformData",
          "CoplanarPoints",
          "CoprimeQ",
          "Coproduct",
          "CopulaDistribution",
          "Copyable",
          "CopyDatabin",
          "CopyDirectory",
          "CopyFile",
          "CopyFunction",
          "CopyTag",
          "CopyToClipboard",
          "CoreNilpotentDecomposition",
          "CornerFilter",
          "CornerNeighbors",
          "Correlation",
          "CorrelationDistance",
          "CorrelationFunction",
          "CorrelationTest",
          "Cos",
          "Cosh",
          "CoshIntegral",
          "CosineDistance",
          "CosineWindow",
          "CosIntegral",
          "Cot",
          "Coth",
          "CoulombF",
          "CoulombG",
          "CoulombH1",
          "CoulombH2",
          "Count",
          "CountDistinct",
          "CountDistinctBy",
          "CounterAssignments",
          "CounterBox",
          "CounterBoxOptions",
          "CounterClockwiseContourIntegral",
          "CounterEvaluator",
          "CounterFunction",
          "CounterIncrements",
          "CounterStyle",
          "CounterStyleMenuListing",
          "CountRoots",
          "CountryData",
          "Counts",
          "CountsBy",
          "Covariance",
          "CovarianceEstimatorFunction",
          "CovarianceFunction",
          "CoxianDistribution",
          "CoxIngersollRossProcess",
          "CoxModel",
          "CoxModelFit",
          "CramerVonMisesTest",
          "CreateArchive",
          "CreateCellID",
          "CreateChannel",
          "CreateCloudExpression",
          "CreateCompilerEnvironment",
          "CreateDatabin",
          "CreateDataStructure",
          "CreateDataSystemModel",
          "CreateDialog",
          "CreateDirectory",
          "CreateDocument",
          "CreateFile",
          "CreateIntermediateDirectories",
          "CreateLicenseEntitlement",
          "CreateManagedLibraryExpression",
          "CreateNotebook",
          "CreatePacletArchive",
          "CreatePalette",
          "CreatePermissionsGroup",
          "CreateScheduledTask",
          "CreateSearchIndex",
          "CreateSystemModel",
          "CreateTemporary",
          "CreateTypeInstance",
          "CreateUUID",
          "CreateWindow",
          "CriterionFunction",
          "CriticalityFailureImportance",
          "CriticalitySuccessImportance",
          "CriticalSection",
          "Cross",
          "CrossEntropyLossLayer",
          "CrossingCount",
          "CrossingDetect",
          "CrossingPolygon",
          "CrossMatrix",
          "Csc",
          "Csch",
          "CSGRegion",
          "CSGRegionQ",
          "CSGRegionTree",
          "CTCLossLayer",
          "Cube",
          "CubeRoot",
          "Cubics",
          "Cuboid",
          "CuboidBox",
          "CuboidBoxOptions",
          "Cumulant",
          "CumulantGeneratingFunction",
          "CumulativeFeatureImpactPlot",
          "Cup",
          "CupCap",
          "Curl",
          "CurlyDoubleQuote",
          "CurlyQuote",
          "CurrencyConvert",
          "CurrentDate",
          "CurrentImage",
          "CurrentNotebookImage",
          "CurrentScreenImage",
          "CurrentValue",
          "Curry",
          "CurryApplied",
          "CurvatureFlowFilter",
          "CurveClosed",
          "Cyan",
          "CycleGraph",
          "CycleIndexPolynomial",
          "Cycles",
          "CyclicGroup",
          "Cyclotomic",
          "Cylinder",
          "CylinderBox",
          "CylinderBoxOptions",
          "CylindricalDecomposition",
          "CylindricalDecompositionFunction",
          "D",
          "DagumDistribution",
          "DamData",
          "DamerauLevenshteinDistance",
          "DampingFactor",
          "Darker",
          "Dashed",
          "Dashing",
          "DatabaseConnect",
          "DatabaseDisconnect",
          "DatabaseReference",
          "Databin",
          "DatabinAdd",
          "DatabinRemove",
          "Databins",
          "DatabinSubmit",
          "DatabinUpload",
          "DataCompression",
          "DataDistribution",
          "DataRange",
          "DataReversed",
          "Dataset",
          "DatasetDisplayPanel",
          "DatasetTheme",
          "DataStructure",
          "DataStructureQ",
          "Date",
          "DateBounds",
          "Dated",
          "DateDelimiters",
          "DateDifference",
          "DatedUnit",
          "DateFormat",
          "DateFunction",
          "DateGranularity",
          "DateHistogram",
          "DateInterval",
          "DateList",
          "DateListLogPlot",
          "DateListPlot",
          "DateListStepPlot",
          "DateObject",
          "DateObjectQ",
          "DateOverlapsQ",
          "DatePattern",
          "DatePlus",
          "DateRange",
          "DateReduction",
          "DateScale",
          "DateSelect",
          "DateString",
          "DateTicksFormat",
          "DateValue",
          "DateWithinQ",
          "DaubechiesWavelet",
          "DavisDistribution",
          "DawsonF",
          "DayCount",
          "DayCountConvention",
          "DayHemisphere",
          "DaylightQ",
          "DayMatchQ",
          "DayName",
          "DayNightTerminator",
          "DayPlus",
          "DayRange",
          "DayRound",
          "DeBruijnGraph",
          "DeBruijnSequence",
          "Debug",
          "DebugTag",
          "Decapitalize",
          "Decimal",
          "DecimalForm",
          "DeclareCompiledComponent",
          "DeclareKnownSymbols",
          "DeclarePackage",
          "Decompose",
          "DeconvolutionLayer",
          "Decrement",
          "Decrypt",
          "DecryptFile",
          "DedekindEta",
          "DeepSpaceProbeData",
          "Default",
          "Default2DTool",
          "Default3DTool",
          "DefaultAttachedCellStyle",
          "DefaultAxesStyle",
          "DefaultBaseStyle",
          "DefaultBoxStyle",
          "DefaultButton",
          "DefaultColor",
          "DefaultControlPlacement",
          "DefaultDockedCellStyle",
          "DefaultDuplicateCellStyle",
          "DefaultDuration",
          "DefaultElement",
          "DefaultFaceGridsStyle",
          "DefaultFieldHintStyle",
          "DefaultFont",
          "DefaultFontProperties",
          "DefaultFormatType",
          "DefaultFrameStyle",
          "DefaultFrameTicksStyle",
          "DefaultGridLinesStyle",
          "DefaultInlineFormatType",
          "DefaultInputFormatType",
          "DefaultLabelStyle",
          "DefaultMenuStyle",
          "DefaultNaturalLanguage",
          "DefaultNewCellStyle",
          "DefaultNewInlineCellStyle",
          "DefaultNotebook",
          "DefaultOptions",
          "DefaultOutputFormatType",
          "DefaultPrintPrecision",
          "DefaultStyle",
          "DefaultStyleDefinitions",
          "DefaultTextFormatType",
          "DefaultTextInlineFormatType",
          "DefaultTicksStyle",
          "DefaultTooltipStyle",
          "DefaultValue",
          "DefaultValues",
          "Defer",
          "DefineExternal",
          "DefineInputStreamMethod",
          "DefineOutputStreamMethod",
          "DefineResourceFunction",
          "Definition",
          "Degree",
          "DegreeCentrality",
          "DegreeGraphDistribution",
          "DegreeLexicographic",
          "DegreeReverseLexicographic",
          "DEigensystem",
          "DEigenvalues",
          "Deinitialization",
          "Del",
          "DelaunayMesh",
          "Delayed",
          "Deletable",
          "Delete",
          "DeleteAdjacentDuplicates",
          "DeleteAnomalies",
          "DeleteBorderComponents",
          "DeleteCases",
          "DeleteChannel",
          "DeleteCloudExpression",
          "DeleteContents",
          "DeleteDirectory",
          "DeleteDuplicates",
          "DeleteDuplicatesBy",
          "DeleteElements",
          "DeleteFile",
          "DeleteMissing",
          "DeleteObject",
          "DeletePermissionsKey",
          "DeleteSearchIndex",
          "DeleteSmallComponents",
          "DeleteStopwords",
          "DeleteWithContents",
          "DeletionWarning",
          "DelimitedArray",
          "DelimitedSequence",
          "Delimiter",
          "DelimiterAutoMatching",
          "DelimiterFlashTime",
          "DelimiterMatching",
          "Delimiters",
          "DeliveryFunction",
          "Dendrogram",
          "Denominator",
          "DensityGraphics",
          "DensityHistogram",
          "DensityPlot",
          "DensityPlot3D",
          "DependentVariables",
          "Deploy",
          "Deployed",
          "Depth",
          "DepthFirstScan",
          "Derivative",
          "DerivativeFilter",
          "DerivativePDETerm",
          "DerivedKey",
          "DescriptorStateSpace",
          "DesignMatrix",
          "DestroyAfterEvaluation",
          "Det",
          "DeviceClose",
          "DeviceConfigure",
          "DeviceExecute",
          "DeviceExecuteAsynchronous",
          "DeviceObject",
          "DeviceOpen",
          "DeviceOpenQ",
          "DeviceRead",
          "DeviceReadBuffer",
          "DeviceReadLatest",
          "DeviceReadList",
          "DeviceReadTimeSeries",
          "Devices",
          "DeviceStreams",
          "DeviceWrite",
          "DeviceWriteBuffer",
          "DGaussianWavelet",
          "DiacriticalPositioning",
          "Diagonal",
          "DiagonalizableMatrixQ",
          "DiagonalMatrix",
          "DiagonalMatrixQ",
          "Dialog",
          "DialogIndent",
          "DialogInput",
          "DialogLevel",
          "DialogNotebook",
          "DialogProlog",
          "DialogReturn",
          "DialogSymbols",
          "Diamond",
          "DiamondMatrix",
          "DiceDissimilarity",
          "DictionaryLookup",
          "DictionaryWordQ",
          "DifferenceDelta",
          "DifferenceOrder",
          "DifferenceQuotient",
          "DifferenceRoot",
          "DifferenceRootReduce",
          "Differences",
          "DifferentialD",
          "DifferentialRoot",
          "DifferentialRootReduce",
          "DifferentiatorFilter",
          "DiffusionPDETerm",
          "DiggleGatesPointProcess",
          "DiggleGrattonPointProcess",
          "DigitalSignature",
          "DigitBlock",
          "DigitBlockMinimum",
          "DigitCharacter",
          "DigitCount",
          "DigitQ",
          "DihedralAngle",
          "DihedralGroup",
          "Dilation",
          "DimensionalCombinations",
          "DimensionalMeshComponents",
          "DimensionReduce",
          "DimensionReducerFunction",
          "DimensionReduction",
          "Dimensions",
          "DiracComb",
          "DiracDelta",
          "DirectedEdge",
          "DirectedEdges",
          "DirectedGraph",
          "DirectedGraphQ",
          "DirectedInfinity",
          "Direction",
          "DirectionalLight",
          "Directive",
          "Directory",
          "DirectoryName",
          "DirectoryQ",
          "DirectoryStack",
          "DirichletBeta",
          "DirichletCharacter",
          "DirichletCondition",
          "DirichletConvolve",
          "DirichletDistribution",
          "DirichletEta",
          "DirichletL",
          "DirichletLambda",
          "DirichletTransform",
          "DirichletWindow",
          "DisableConsolePrintPacket",
          "DisableFormatting",
          "DiscreteAsymptotic",
          "DiscreteChirpZTransform",
          "DiscreteConvolve",
          "DiscreteDelta",
          "DiscreteHadamardTransform",
          "DiscreteIndicator",
          "DiscreteInputOutputModel",
          "DiscreteLimit",
          "DiscreteLQEstimatorGains",
          "DiscreteLQRegulatorGains",
          "DiscreteLyapunovSolve",
          "DiscreteMarkovProcess",
          "DiscreteMaxLimit",
          "DiscreteMinLimit",
          "DiscretePlot",
          "DiscretePlot3D",
          "DiscreteRatio",
          "DiscreteRiccatiSolve",
          "DiscreteShift",
          "DiscreteTimeModelQ",
          "DiscreteUniformDistribution",
          "DiscreteVariables",
          "DiscreteWaveletData",
          "DiscreteWaveletPacketTransform",
          "DiscreteWaveletTransform",
          "DiscretizeGraphics",
          "DiscretizeRegion",
          "Discriminant",
          "DisjointQ",
          "Disjunction",
          "Disk",
          "DiskBox",
          "DiskBoxOptions",
          "DiskMatrix",
          "DiskSegment",
          "Dispatch",
          "DispatchQ",
          "DispersionEstimatorFunction",
          "Display",
          "DisplayAllSteps",
          "DisplayEndPacket",
          "DisplayForm",
          "DisplayFunction",
          "DisplayPacket",
          "DisplayRules",
          "DisplayString",
          "DisplayTemporary",
          "DisplayWith",
          "DisplayWithRef",
          "DisplayWithVariable",
          "DistanceFunction",
          "DistanceMatrix",
          "DistanceTransform",
          "Distribute",
          "Distributed",
          "DistributedContexts",
          "DistributeDefinitions",
          "DistributionChart",
          "DistributionDomain",
          "DistributionFitTest",
          "DistributionParameterAssumptions",
          "DistributionParameterQ",
          "Dithering",
          "Div",
          "Divergence",
          "Divide",
          "DivideBy",
          "Dividers",
          "DivideSides",
          "Divisible",
          "Divisors",
          "DivisorSigma",
          "DivisorSum",
          "DMSList",
          "DMSString",
          "Do",
          "DockedCell",
          "DockedCells",
          "DocumentGenerator",
          "DocumentGeneratorInformation",
          "DocumentGeneratorInformationData",
          "DocumentGenerators",
          "DocumentNotebook",
          "DocumentWeightingRules",
          "Dodecahedron",
          "DomainRegistrationInformation",
          "DominantColors",
          "DominatorTreeGraph",
          "DominatorVertexList",
          "DOSTextFormat",
          "Dot",
          "DotDashed",
          "DotEqual",
          "DotLayer",
          "DotPlusLayer",
          "Dotted",
          "DoubleBracketingBar",
          "DoubleContourIntegral",
          "DoubleDownArrow",
          "DoubleLeftArrow",
          "DoubleLeftRightArrow",
          "DoubleLeftTee",
          "DoubleLongLeftArrow",
          "DoubleLongLeftRightArrow",
          "DoubleLongRightArrow",
          "DoubleRightArrow",
          "DoubleRightTee",
          "DoubleUpArrow",
          "DoubleUpDownArrow",
          "DoubleVerticalBar",
          "DoublyInfinite",
          "Down",
          "DownArrow",
          "DownArrowBar",
          "DownArrowUpArrow",
          "DownLeftRightVector",
          "DownLeftTeeVector",
          "DownLeftVector",
          "DownLeftVectorBar",
          "DownRightTeeVector",
          "DownRightVector",
          "DownRightVectorBar",
          "Downsample",
          "DownTee",
          "DownTeeArrow",
          "DownValues",
          "DownValuesFunction",
          "DragAndDrop",
          "DrawBackFaces",
          "DrawEdges",
          "DrawFrontFaces",
          "DrawHighlighted",
          "DrazinInverse",
          "Drop",
          "DropoutLayer",
          "DropShadowing",
          "DSolve",
          "DSolveChangeVariables",
          "DSolveValue",
          "Dt",
          "DualLinearProgramming",
          "DualPlanarGraph",
          "DualPolyhedron",
          "DualSystemsModel",
          "DumpGet",
          "DumpSave",
          "DuplicateFreeQ",
          "Duration",
          "Dynamic",
          "DynamicBox",
          "DynamicBoxOptions",
          "DynamicEvaluationTimeout",
          "DynamicGeoGraphics",
          "DynamicImage",
          "DynamicLocation",
          "DynamicModule",
          "DynamicModuleBox",
          "DynamicModuleBoxOptions",
          "DynamicModuleParent",
          "DynamicModuleValues",
          "DynamicName",
          "DynamicNamespace",
          "DynamicReference",
          "DynamicSetting",
          "DynamicUpdating",
          "DynamicWrapper",
          "DynamicWrapperBox",
          "DynamicWrapperBoxOptions",
          "E",
          "EarthImpactData",
          "EarthquakeData",
          "EccentricityCentrality",
          "Echo",
          "EchoEvaluation",
          "EchoFunction",
          "EchoLabel",
          "EchoTiming",
          "EclipseType",
          "EdgeAdd",
          "EdgeBetweennessCentrality",
          "EdgeCapacity",
          "EdgeCapForm",
          "EdgeChromaticNumber",
          "EdgeColor",
          "EdgeConnectivity",
          "EdgeContract",
          "EdgeCost",
          "EdgeCount",
          "EdgeCoverQ",
          "EdgeCycleMatrix",
          "EdgeDashing",
          "EdgeDelete",
          "EdgeDetect",
          "EdgeForm",
          "EdgeIndex",
          "EdgeJoinForm",
          "EdgeLabeling",
          "EdgeLabels",
          "EdgeLabelStyle",
          "EdgeList",
          "EdgeOpacity",
          "EdgeQ",
          "EdgeRenderingFunction",
          "EdgeRules",
          "EdgeShapeFunction",
          "EdgeStyle",
          "EdgeTaggedGraph",
          "EdgeTaggedGraphQ",
          "EdgeTags",
          "EdgeThickness",
          "EdgeTransitiveGraphQ",
          "EdgeValueRange",
          "EdgeValueSizes",
          "EdgeWeight",
          "EdgeWeightedGraphQ",
          "Editable",
          "EditButtonSettings",
          "EditCellTagsSettings",
          "EditDistance",
          "EffectiveInterest",
          "Eigensystem",
          "Eigenvalues",
          "EigenvectorCentrality",
          "Eigenvectors",
          "Element",
          "ElementData",
          "ElementwiseLayer",
          "ElidedForms",
          "Eliminate",
          "EliminationOrder",
          "Ellipsoid",
          "EllipticE",
          "EllipticExp",
          "EllipticExpPrime",
          "EllipticF",
          "EllipticFilterModel",
          "EllipticK",
          "EllipticLog",
          "EllipticNomeQ",
          "EllipticPi",
          "EllipticReducedHalfPeriods",
          "EllipticTheta",
          "EllipticThetaPrime",
          "EmbedCode",
          "EmbeddedHTML",
          "EmbeddedService",
          "EmbeddedSQLEntityClass",
          "EmbeddedSQLExpression",
          "EmbeddingLayer",
          "EmbeddingObject",
          "EmitSound",
          "EmphasizeSyntaxErrors",
          "EmpiricalDistribution",
          "Empty",
          "EmptyGraphQ",
          "EmptyRegion",
          "EmptySpaceF",
          "EnableConsolePrintPacket",
          "Enabled",
          "Enclose",
          "Encode",
          "Encrypt",
          "EncryptedObject",
          "EncryptFile",
          "End",
          "EndAdd",
          "EndDialogPacket",
          "EndOfBuffer",
          "EndOfFile",
          "EndOfLine",
          "EndOfString",
          "EndPackage",
          "EngineEnvironment",
          "EngineeringForm",
          "Enter",
          "EnterExpressionPacket",
          "EnterTextPacket",
          "Entity",
          "EntityClass",
          "EntityClassList",
          "EntityCopies",
          "EntityFunction",
          "EntityGroup",
          "EntityInstance",
          "EntityList",
          "EntityPrefetch",
          "EntityProperties",
          "EntityProperty",
          "EntityPropertyClass",
          "EntityRegister",
          "EntityStore",
          "EntityStores",
          "EntityTypeName",
          "EntityUnregister",
          "EntityValue",
          "Entropy",
          "EntropyFilter",
          "Environment",
          "Epilog",
          "EpilogFunction",
          "Equal",
          "EqualColumns",
          "EqualRows",
          "EqualTilde",
          "EqualTo",
          "EquatedTo",
          "Equilibrium",
          "EquirippleFilterKernel",
          "Equivalent",
          "Erf",
          "Erfc",
          "Erfi",
          "ErlangB",
          "ErlangC",
          "ErlangDistribution",
          "Erosion",
          "ErrorBox",
          "ErrorBoxOptions",
          "ErrorNorm",
          "ErrorPacket",
          "ErrorsDialogSettings",
          "EscapeRadius",
          "EstimatedBackground",
          "EstimatedDistribution",
          "EstimatedPointNormals",
          "EstimatedPointProcess",
          "EstimatedProcess",
          "EstimatedVariogramModel",
          "EstimatorGains",
          "EstimatorRegulator",
          "EuclideanDistance",
          "EulerAngles",
          "EulerCharacteristic",
          "EulerE",
          "EulerGamma",
          "EulerianGraphQ",
          "EulerMatrix",
          "EulerPhi",
          "Evaluatable",
          "Evaluate",
          "Evaluated",
          "EvaluatePacket",
          "EvaluateScheduledTask",
          "EvaluationBox",
          "EvaluationCell",
          "EvaluationCompletionAction",
          "EvaluationData",
          "EvaluationElements",
          "EvaluationEnvironment",
          "EvaluationMode",
          "EvaluationMonitor",
          "EvaluationNotebook",
          "EvaluationObject",
          "EvaluationOrder",
          "EvaluationPrivileges",
          "EvaluationRateLimit",
          "Evaluator",
          "EvaluatorNames",
          "EvenQ",
          "EventData",
          "EventEvaluator",
          "EventHandler",
          "EventHandlerTag",
          "EventLabels",
          "EventSeries",
          "ExactBlackmanWindow",
          "ExactNumberQ",
          "ExactRootIsolation",
          "ExampleData",
          "Except",
          "ExcludedContexts",
          "ExcludedForms",
          "ExcludedLines",
          "ExcludedPhysicalQuantities",
          "ExcludePods",
          "Exclusions",
          "ExclusionsStyle",
          "Exists",
          "Exit",
          "ExitDialog",
          "ExoplanetData",
          "Exp",
          "Expand",
          "ExpandAll",
          "ExpandDenominator",
          "ExpandFileName",
          "ExpandNumerator",
          "Expectation",
          "ExpectationE",
          "ExpectedValue",
          "ExpGammaDistribution",
          "ExpIntegralE",
          "ExpIntegralEi",
          "ExpirationDate",
          "Exponent",
          "ExponentFunction",
          "ExponentialDistribution",
          "ExponentialFamily",
          "ExponentialGeneratingFunction",
          "ExponentialMovingAverage",
          "ExponentialPowerDistribution",
          "ExponentPosition",
          "ExponentStep",
          "Export",
          "ExportAutoReplacements",
          "ExportByteArray",
          "ExportForm",
          "ExportPacket",
          "ExportString",
          "Expression",
          "ExpressionCell",
          "ExpressionGraph",
          "ExpressionPacket",
          "ExpressionTree",
          "ExpressionUUID",
          "ExpToTrig",
          "ExtendedEntityClass",
          "ExtendedGCD",
          "Extension",
          "ExtentElementFunction",
          "ExtentMarkers",
          "ExtentSize",
          "ExternalBundle",
          "ExternalCall",
          "ExternalDataCharacterEncoding",
          "ExternalEvaluate",
          "ExternalFunction",
          "ExternalFunctionName",
          "ExternalIdentifier",
          "ExternalObject",
          "ExternalOptions",
          "ExternalSessionObject",
          "ExternalSessions",
          "ExternalStorageBase",
          "ExternalStorageDownload",
          "ExternalStorageGet",
          "ExternalStorageObject",
          "ExternalStoragePut",
          "ExternalStorageUpload",
          "ExternalTypeSignature",
          "ExternalValue",
          "Extract",
          "ExtractArchive",
          "ExtractLayer",
          "ExtractPacletArchive",
          "ExtremeValueDistribution",
          "FaceAlign",
          "FaceForm",
          "FaceGrids",
          "FaceGridsStyle",
          "FaceRecognize",
          "FacialFeatures",
          "Factor",
          "FactorComplete",
          "Factorial",
          "Factorial2",
          "FactorialMoment",
          "FactorialMomentGeneratingFunction",
          "FactorialPower",
          "FactorInteger",
          "FactorList",
          "FactorSquareFree",
          "FactorSquareFreeList",
          "FactorTerms",
          "FactorTermsList",
          "Fail",
          "Failure",
          "FailureAction",
          "FailureDistribution",
          "FailureQ",
          "False",
          "FareySequence",
          "FARIMAProcess",
          "FeatureDistance",
          "FeatureExtract",
          "FeatureExtraction",
          "FeatureExtractor",
          "FeatureExtractorFunction",
          "FeatureImpactPlot",
          "FeatureNames",
          "FeatureNearest",
          "FeatureSpacePlot",
          "FeatureSpacePlot3D",
          "FeatureTypes",
          "FeatureValueDependencyPlot",
          "FeatureValueImpactPlot",
          "FEDisableConsolePrintPacket",
          "FeedbackLinearize",
          "FeedbackSector",
          "FeedbackSectorStyle",
          "FeedbackType",
          "FEEnableConsolePrintPacket",
          "FetalGrowthData",
          "Fibonacci",
          "Fibonorial",
          "FieldCompletionFunction",
          "FieldHint",
          "FieldHintStyle",
          "FieldMasked",
          "FieldSize",
          "File",
          "FileBaseName",
          "FileByteCount",
          "FileConvert",
          "FileDate",
          "FileExistsQ",
          "FileExtension",
          "FileFormat",
          "FileFormatProperties",
          "FileFormatQ",
          "FileHandler",
          "FileHash",
          "FileInformation",
          "FileName",
          "FileNameDepth",
          "FileNameDialogSettings",
          "FileNameDrop",
          "FileNameForms",
          "FileNameJoin",
          "FileNames",
          "FileNameSetter",
          "FileNameSplit",
          "FileNameTake",
          "FileNameToFormatList",
          "FilePrint",
          "FileSize",
          "FileSystemMap",
          "FileSystemScan",
          "FileSystemTree",
          "FileTemplate",
          "FileTemplateApply",
          "FileType",
          "FilledCurve",
          "FilledCurveBox",
          "FilledCurveBoxOptions",
          "FilledTorus",
          "FillForm",
          "Filling",
          "FillingStyle",
          "FillingTransform",
          "FilteredEntityClass",
          "FilterRules",
          "FinancialBond",
          "FinancialData",
          "FinancialDerivative",
          "FinancialIndicator",
          "Find",
          "FindAnomalies",
          "FindArgMax",
          "FindArgMin",
          "FindChannels",
          "FindClique",
          "FindClusters",
          "FindCookies",
          "FindCurvePath",
          "FindCycle",
          "FindDevices",
          "FindDistribution",
          "FindDistributionParameters",
          "FindDivisions",
          "FindEdgeColoring",
          "FindEdgeCover",
          "FindEdgeCut",
          "FindEdgeIndependentPaths",
          "FindEquationalProof",
          "FindEulerianCycle",
          "FindExternalEvaluators",
          "FindFaces",
          "FindFile",
          "FindFit",
          "FindFormula",
          "FindFundamentalCycles",
          "FindGeneratingFunction",
          "FindGeoLocation",
          "FindGeometricConjectures",
          "FindGeometricTransform",
          "FindGraphCommunities",
          "FindGraphIsomorphism",
          "FindGraphPartition",
          "FindHamiltonianCycle",
          "FindHamiltonianPath",
          "FindHiddenMarkovStates",
          "FindImageText",
          "FindIndependentEdgeSet",
          "FindIndependentVertexSet",
          "FindInstance",
          "FindIntegerNullVector",
          "FindIsomers",
          "FindIsomorphicSubgraph",
          "FindKClan",
          "FindKClique",
          "FindKClub",
          "FindKPlex",
          "FindLibrary",
          "FindLinearRecurrence",
          "FindList",
          "FindMatchingColor",
          "FindMaximum",
          "FindMaximumCut",
          "FindMaximumFlow",
          "FindMaxValue",
          "FindMeshDefects",
          "FindMinimum",
          "FindMinimumCostFlow",
          "FindMinimumCut",
          "FindMinValue",
          "FindMoleculeSubstructure",
          "FindPath",
          "FindPeaks",
          "FindPermutation",
          "FindPlanarColoring",
          "FindPointProcessParameters",
          "FindPostmanTour",
          "FindProcessParameters",
          "FindRegionTransform",
          "FindRepeat",
          "FindRoot",
          "FindSequenceFunction",
          "FindSettings",
          "FindShortestPath",
          "FindShortestTour",
          "FindSpanningTree",
          "FindSubgraphIsomorphism",
          "FindSystemModelEquilibrium",
          "FindTextualAnswer",
          "FindThreshold",
          "FindTransientRepeat",
          "FindVertexColoring",
          "FindVertexCover",
          "FindVertexCut",
          "FindVertexIndependentPaths",
          "Fine",
          "FinishDynamic",
          "FiniteAbelianGroupCount",
          "FiniteGroupCount",
          "FiniteGroupData",
          "First",
          "FirstCase",
          "FirstPassageTimeDistribution",
          "FirstPosition",
          "FischerGroupFi22",
          "FischerGroupFi23",
          "FischerGroupFi24Prime",
          "FisherHypergeometricDistribution",
          "FisherRatioTest",
          "FisherZDistribution",
          "Fit",
          "FitAll",
          "FitRegularization",
          "FittedModel",
          "FixedOrder",
          "FixedPoint",
          "FixedPointList",
          "FlashSelection",
          "Flat",
          "FlatShading",
          "Flatten",
          "FlattenAt",
          "FlattenLayer",
          "FlatTopWindow",
          "FlightData",
          "FlipView",
          "Floor",
          "FlowPolynomial",
          "Fold",
          "FoldList",
          "FoldPair",
          "FoldPairList",
          "FoldWhile",
          "FoldWhileList",
          "FollowRedirects",
          "Font",
          "FontColor",
          "FontFamily",
          "FontForm",
          "FontName",
          "FontOpacity",
          "FontPostScriptName",
          "FontProperties",
          "FontReencoding",
          "FontSize",
          "FontSlant",
          "FontSubstitutions",
          "FontTracking",
          "FontVariations",
          "FontWeight",
          "For",
          "ForAll",
          "ForAllType",
          "ForceVersionInstall",
          "Format",
          "FormatRules",
          "FormatType",
          "FormatTypeAutoConvert",
          "FormatValues",
          "FormBox",
          "FormBoxOptions",
          "FormControl",
          "FormFunction",
          "FormLayoutFunction",
          "FormObject",
          "FormPage",
          "FormProtectionMethod",
          "FormTheme",
          "FormulaData",
          "FormulaLookup",
          "FortranForm",
          "Forward",
          "ForwardBackward",
          "ForwardCloudCredentials",
          "Fourier",
          "FourierCoefficient",
          "FourierCosCoefficient",
          "FourierCosSeries",
          "FourierCosTransform",
          "FourierDCT",
          "FourierDCTFilter",
          "FourierDCTMatrix",
          "FourierDST",
          "FourierDSTMatrix",
          "FourierMatrix",
          "FourierParameters",
          "FourierSequenceTransform",
          "FourierSeries",
          "FourierSinCoefficient",
          "FourierSinSeries",
          "FourierSinTransform",
          "FourierTransform",
          "FourierTrigSeries",
          "FoxH",
          "FoxHReduce",
          "FractionalBrownianMotionProcess",
          "FractionalD",
          "FractionalGaussianNoiseProcess",
          "FractionalPart",
          "FractionBox",
          "FractionBoxOptions",
          "FractionLine",
          "Frame",
          "FrameBox",
          "FrameBoxOptions",
          "Framed",
          "FrameInset",
          "FrameLabel",
          "Frameless",
          "FrameListVideo",
          "FrameMargins",
          "FrameRate",
          "FrameStyle",
          "FrameTicks",
          "FrameTicksStyle",
          "FRatioDistribution",
          "FrechetDistribution",
          "FreeQ",
          "FrenetSerretSystem",
          "FrequencySamplingFilterKernel",
          "FresnelC",
          "FresnelF",
          "FresnelG",
          "FresnelS",
          "Friday",
          "FrobeniusNumber",
          "FrobeniusSolve",
          "FromAbsoluteTime",
          "FromCharacterCode",
          "FromCoefficientRules",
          "FromContinuedFraction",
          "FromDate",
          "FromDateString",
          "FromDigits",
          "FromDMS",
          "FromEntity",
          "FromJulianDate",
          "FromLetterNumber",
          "FromPolarCoordinates",
          "FromRawPointer",
          "FromRomanNumeral",
          "FromSphericalCoordinates",
          "FromUnixTime",
          "Front",
          "FrontEndDynamicExpression",
          "FrontEndEventActions",
          "FrontEndExecute",
          "FrontEndObject",
          "FrontEndResource",
          "FrontEndResourceString",
          "FrontEndStackSize",
          "FrontEndToken",
          "FrontEndTokenExecute",
          "FrontEndValueCache",
          "FrontEndVersion",
          "FrontFaceColor",
          "FrontFaceGlowColor",
          "FrontFaceOpacity",
          "FrontFaceSpecularColor",
          "FrontFaceSpecularExponent",
          "FrontFaceSurfaceAppearance",
          "FrontFaceTexture",
          "Full",
          "FullAxes",
          "FullDefinition",
          "FullForm",
          "FullGraphics",
          "FullInformationOutputRegulator",
          "FullOptions",
          "FullRegion",
          "FullSimplify",
          "Function",
          "FunctionAnalytic",
          "FunctionBijective",
          "FunctionCompile",
          "FunctionCompileExport",
          "FunctionCompileExportByteArray",
          "FunctionCompileExportLibrary",
          "FunctionCompileExportString",
          "FunctionContinuous",
          "FunctionConvexity",
          "FunctionDeclaration",
          "FunctionDiscontinuities",
          "FunctionDomain",
          "FunctionExpand",
          "FunctionInjective",
          "FunctionInterpolation",
          "FunctionLayer",
          "FunctionMeromorphic",
          "FunctionMonotonicity",
          "FunctionPeriod",
          "FunctionPoles",
          "FunctionRange",
          "FunctionSign",
          "FunctionSingularities",
          "FunctionSpace",
          "FunctionSurjective",
          "FussellVeselyImportance",
          "GaborFilter",
          "GaborMatrix",
          "GaborWavelet",
          "GainMargins",
          "GainPhaseMargins",
          "GalaxyData",
          "GalleryView",
          "Gamma",
          "GammaDistribution",
          "GammaRegularized",
          "GapPenalty",
          "GARCHProcess",
          "GatedRecurrentLayer",
          "Gather",
          "GatherBy",
          "GaugeFaceElementFunction",
          "GaugeFaceStyle",
          "GaugeFrameElementFunction",
          "GaugeFrameSize",
          "GaugeFrameStyle",
          "GaugeLabels",
          "GaugeMarkers",
          "GaugeStyle",
          "GaussianFilter",
          "GaussianIntegers",
          "GaussianMatrix",
          "GaussianOrthogonalMatrixDistribution",
          "GaussianSymplecticMatrixDistribution",
          "GaussianUnitaryMatrixDistribution",
          "GaussianWindow",
          "GCD",
          "GegenbauerC",
          "General",
          "GeneralizedLinearModelFit",
          "GenerateAsymmetricKeyPair",
          "GenerateConditions",
          "GeneratedAssetFormat",
          "GeneratedAssetLocation",
          "GeneratedCell",
          "GeneratedCellStyles",
          "GeneratedDocumentBinding",
          "GenerateDerivedKey",
          "GenerateDigitalSignature",
          "GenerateDocument",
          "GeneratedParameters",
          "GeneratedQuantityMagnitudes",
          "GenerateFileSignature",
          "GenerateHTTPResponse",
          "GenerateSecuredAuthenticationKey",
          "GenerateSymmetricKey",
          "GeneratingFunction",
          "GeneratorDescription",
          "GeneratorHistoryLength",
          "GeneratorOutputType",
          "Generic",
          "GenericCylindricalDecomposition",
          "GenomeData",
          "GenomeLookup",
          "GeoAntipode",
          "GeoArea",
          "GeoArraySize",
          "GeoBackground",
          "GeoBoundary",
          "GeoBoundingBox",
          "GeoBounds",
          "GeoBoundsRegion",
          "GeoBoundsRegionBoundary",
          "GeoBubbleChart",
          "GeoCenter",
          "GeoCircle",
          "GeoContourPlot",
          "GeoDensityPlot",
          "GeodesicClosing",
          "GeodesicDilation",
          "GeodesicErosion",
          "GeodesicOpening",
          "GeodesicPolyhedron",
          "GeoDestination",
          "GeodesyData",
          "GeoDirection",
          "GeoDisk",
          "GeoDisplacement",
          "GeoDistance",
          "GeoDistanceList",
          "GeoElevationData",
          "GeoEntities",
          "GeoGraphics",
          "GeoGraphPlot",
          "GeoGraphValuePlot",
          "GeogravityModelData",
          "GeoGridDirectionDifference",
          "GeoGridLines",
          "GeoGridLinesStyle",
          "GeoGridPosition",
          "GeoGridRange",
          "GeoGridRangePadding",
          "GeoGridUnitArea",
          "GeoGridUnitDistance",
          "GeoGridVector",
          "GeoGroup",
          "GeoHemisphere",
          "GeoHemisphereBoundary",
          "GeoHistogram",
          "GeoIdentify",
          "GeoImage",
          "GeoLabels",
          "GeoLength",
          "GeoListPlot",
          "GeoLocation",
          "GeologicalPeriodData",
          "GeomagneticModelData",
          "GeoMarker",
          "GeometricAssertion",
          "GeometricBrownianMotionProcess",
          "GeometricDistribution",
          "GeometricMean",
          "GeometricMeanFilter",
          "GeometricOptimization",
          "GeometricScene",
          "GeometricStep",
          "GeometricStylingRules",
          "GeometricTest",
          "GeometricTransformation",
          "GeometricTransformation3DBox",
          "GeometricTransformation3DBoxOptions",
          "GeometricTransformationBox",
          "GeometricTransformationBoxOptions",
          "GeoModel",
          "GeoNearest",
          "GeoOrientationData",
          "GeoPath",
          "GeoPolygon",
          "GeoPosition",
          "GeoPositionENU",
          "GeoPositionXYZ",
          "GeoProjection",
          "GeoProjectionData",
          "GeoRange",
          "GeoRangePadding",
          "GeoRegionValuePlot",
          "GeoResolution",
          "GeoScaleBar",
          "GeoServer",
          "GeoSmoothHistogram",
          "GeoStreamPlot",
          "GeoStyling",
          "GeoStylingImageFunction",
          "GeoVariant",
          "GeoVector",
          "GeoVectorENU",
          "GeoVectorPlot",
          "GeoVectorXYZ",
          "GeoVisibleRegion",
          "GeoVisibleRegionBoundary",
          "GeoWithinQ",
          "GeoZoomLevel",
          "GestureHandler",
          "GestureHandlerTag",
          "Get",
          "GetContext",
          "GetEnvironment",
          "GetFileName",
          "GetLinebreakInformationPacket",
          "GibbsPointProcess",
          "Glaisher",
          "GlobalClusteringCoefficient",
          "GlobalPreferences",
          "GlobalSession",
          "Glow",
          "GoldenAngle",
          "GoldenRatio",
          "GompertzMakehamDistribution",
          "GoochShading",
          "GoodmanKruskalGamma",
          "GoodmanKruskalGammaTest",
          "Goto",
          "GouraudShading",
          "Grad",
          "Gradient",
          "GradientFilter",
          "GradientFittedMesh",
          "GradientOrientationFilter",
          "GrammarApply",
          "GrammarRules",
          "GrammarToken",
          "Graph",
          "Graph3D",
          "GraphAssortativity",
          "GraphAutomorphismGroup",
          "GraphCenter",
          "GraphComplement",
          "GraphData",
          "GraphDensity",
          "GraphDiameter",
          "GraphDifference",
          "GraphDisjointUnion",
          "GraphDistance",
          "GraphDistanceMatrix",
          "GraphEmbedding",
          "GraphHighlight",
          "GraphHighlightStyle",
          "GraphHub",
          "Graphics",
          "Graphics3D",
          "Graphics3DBox",
          "Graphics3DBoxOptions",
          "GraphicsArray",
          "GraphicsBaseline",
          "GraphicsBox",
          "GraphicsBoxOptions",
          "GraphicsColor",
          "GraphicsColumn",
          "GraphicsComplex",
          "GraphicsComplex3DBox",
          "GraphicsComplex3DBoxOptions",
          "GraphicsComplexBox",
          "GraphicsComplexBoxOptions",
          "GraphicsContents",
          "GraphicsData",
          "GraphicsGrid",
          "GraphicsGridBox",
          "GraphicsGroup",
          "GraphicsGroup3DBox",
          "GraphicsGroup3DBoxOptions",
          "GraphicsGroupBox",
          "GraphicsGroupBoxOptions",
          "GraphicsGrouping",
          "GraphicsHighlightColor",
          "GraphicsRow",
          "GraphicsSpacing",
          "GraphicsStyle",
          "GraphIntersection",
          "GraphJoin",
          "GraphLayerLabels",
          "GraphLayers",
          "GraphLayerStyle",
          "GraphLayout",
          "GraphLinkEfficiency",
          "GraphPeriphery",
          "GraphPlot",
          "GraphPlot3D",
          "GraphPower",
          "GraphProduct",
          "GraphPropertyDistribution",
          "GraphQ",
          "GraphRadius",
          "GraphReciprocity",
          "GraphRoot",
          "GraphStyle",
          "GraphSum",
          "GraphTree",
          "GraphUnion",
          "Gray",
          "GrayLevel",
          "Greater",
          "GreaterEqual",
          "GreaterEqualLess",
          "GreaterEqualThan",
          "GreaterFullEqual",
          "GreaterGreater",
          "GreaterLess",
          "GreaterSlantEqual",
          "GreaterThan",
          "GreaterTilde",
          "GreekStyle",
          "Green",
          "GreenFunction",
          "Grid",
          "GridBaseline",
          "GridBox",
          "GridBoxAlignment",
          "GridBoxBackground",
          "GridBoxDividers",
          "GridBoxFrame",
          "GridBoxItemSize",
          "GridBoxItemStyle",
          "GridBoxOptions",
          "GridBoxSpacings",
          "GridCreationSettings",
          "GridDefaultElement",
          "GridElementStyleOptions",
          "GridFrame",
          "GridFrameMargins",
          "GridGraph",
          "GridLines",
          "GridLinesStyle",
          "GridVideo",
          "GroebnerBasis",
          "GroupActionBase",
          "GroupBy",
          "GroupCentralizer",
          "GroupElementFromWord",
          "GroupElementPosition",
          "GroupElementQ",
          "GroupElements",
          "GroupElementToWord",
          "GroupGenerators",
          "Groupings",
          "GroupMultiplicationTable",
          "GroupOpenerColor",
          "GroupOpenerInsideFrame",
          "GroupOrbits",
          "GroupOrder",
          "GroupPageBreakWithin",
          "GroupSetwiseStabilizer",
          "GroupStabilizer",
          "GroupStabilizerChain",
          "GroupTogetherGrouping",
          "GroupTogetherNestedGrouping",
          "GrowCutComponents",
          "Gudermannian",
          "GuidedFilter",
          "GumbelDistribution",
          "HaarWavelet",
          "HadamardMatrix",
          "HalfLine",
          "HalfNormalDistribution",
          "HalfPlane",
          "HalfSpace",
          "HalftoneShading",
          "HamiltonianGraphQ",
          "HammingDistance",
          "HammingWindow",
          "HandlerFunctions",
          "HandlerFunctionsKeys",
          "HankelH1",
          "HankelH2",
          "HankelMatrix",
          "HankelTransform",
          "HannPoissonWindow",
          "HannWindow",
          "HaradaNortonGroupHN",
          "HararyGraph",
          "HardcorePointProcess",
          "HarmonicMean",
          "HarmonicMeanFilter",
          "HarmonicNumber",
          "Hash",
          "HatchFilling",
          "HatchShading",
          "Haversine",
          "HazardFunction",
          "Head",
          "HeadCompose",
          "HeaderAlignment",
          "HeaderBackground",
          "HeaderDisplayFunction",
          "HeaderLines",
          "Headers",
          "HeaderSize",
          "HeaderStyle",
          "Heads",
          "HeatFluxValue",
          "HeatInsulationValue",
          "HeatOutflowValue",
          "HeatRadiationValue",
          "HeatSymmetryValue",
          "HeatTemperatureCondition",
          "HeatTransferPDEComponent",
          "HeatTransferValue",
          "HeavisideLambda",
          "HeavisidePi",
          "HeavisideTheta",
          "HeldGroupHe",
          "HeldPart",
          "HelmholtzPDEComponent",
          "HelpBrowserLookup",
          "HelpBrowserNotebook",
          "HelpBrowserSettings",
          "HelpViewerSettings",
          "Here",
          "HermiteDecomposition",
          "HermiteH",
          "Hermitian",
          "HermitianMatrixQ",
          "HessenbergDecomposition",
          "Hessian",
          "HeunB",
          "HeunBPrime",
          "HeunC",
          "HeunCPrime",
          "HeunD",
          "HeunDPrime",
          "HeunG",
          "HeunGPrime",
          "HeunT",
          "HeunTPrime",
          "HexadecimalCharacter",
          "Hexahedron",
          "HexahedronBox",
          "HexahedronBoxOptions",
          "HiddenItems",
          "HiddenMarkovProcess",
          "HiddenSurface",
          "Highlighted",
          "HighlightGraph",
          "HighlightImage",
          "HighlightMesh",
          "HighlightString",
          "HighpassFilter",
          "HigmanSimsGroupHS",
          "HilbertCurve",
          "HilbertFilter",
          "HilbertMatrix",
          "Histogram",
          "Histogram3D",
          "HistogramDistribution",
          "HistogramList",
          "HistogramPointDensity",
          "HistogramTransform",
          "HistogramTransformInterpolation",
          "HistoricalPeriodData",
          "HitMissTransform",
          "HITSCentrality",
          "HjorthDistribution",
          "HodgeDual",
          "HoeffdingD",
          "HoeffdingDTest",
          "Hold",
          "HoldAll",
          "HoldAllComplete",
          "HoldComplete",
          "HoldFirst",
          "HoldForm",
          "HoldPattern",
          "HoldRest",
          "HolidayCalendar",
          "HomeDirectory",
          "HomePage",
          "Horizontal",
          "HorizontalForm",
          "HorizontalGauge",
          "HorizontalScrollPosition",
          "HornerForm",
          "HostLookup",
          "HotellingTSquareDistribution",
          "HoytDistribution",
          "HTMLSave",
          "HTTPErrorResponse",
          "HTTPRedirect",
          "HTTPRequest",
          "HTTPRequestData",
          "HTTPResponse",
          "Hue",
          "HumanGrowthData",
          "HumpDownHump",
          "HumpEqual",
          "HurwitzLerchPhi",
          "HurwitzZeta",
          "HyperbolicDistribution",
          "HypercubeGraph",
          "HyperexponentialDistribution",
          "Hyperfactorial",
          "Hypergeometric0F1",
          "Hypergeometric0F1Regularized",
          "Hypergeometric1F1",
          "Hypergeometric1F1Regularized",
          "Hypergeometric2F1",
          "Hypergeometric2F1Regularized",
          "HypergeometricDistribution",
          "HypergeometricPFQ",
          "HypergeometricPFQRegularized",
          "HypergeometricU",
          "Hyperlink",
          "HyperlinkAction",
          "HyperlinkCreationSettings",
          "Hyperplane",
          "Hyphenation",
          "HyphenationOptions",
          "HypoexponentialDistribution",
          "HypothesisTestData",
          "I",
          "IconData",
          "Iconize",
          "IconizedObject",
          "IconRules",
          "Icosahedron",
          "Identity",
          "IdentityMatrix",
          "If",
          "IfCompiled",
          "IgnoreCase",
          "IgnoreDiacritics",
          "IgnoreIsotopes",
          "IgnorePunctuation",
          "IgnoreSpellCheck",
          "IgnoreStereochemistry",
          "IgnoringInactive",
          "Im",
          "Image",
          "Image3D",
          "Image3DProjection",
          "Image3DSlices",
          "ImageAccumulate",
          "ImageAdd",
          "ImageAdjust",
          "ImageAlign",
          "ImageApply",
          "ImageApplyIndexed",
          "ImageAspectRatio",
          "ImageAssemble",
          "ImageAugmentationLayer",
          "ImageBoundingBoxes",
          "ImageCache",
          "ImageCacheValid",
          "ImageCapture",
          "ImageCaptureFunction",
          "ImageCases",
          "ImageChannels",
          "ImageClip",
          "ImageCollage",
          "ImageColorSpace",
          "ImageCompose",
          "ImageContainsQ",
          "ImageContents",
          "ImageConvolve",
          "ImageCooccurrence",
          "ImageCorners",
          "ImageCorrelate",
          "ImageCorrespondingPoints",
          "ImageCrop",
          "ImageData",
          "ImageDeconvolve",
          "ImageDemosaic",
          "ImageDifference",
          "ImageDimensions",
          "ImageDisplacements",
          "ImageDistance",
          "ImageEditMode",
          "ImageEffect",
          "ImageExposureCombine",
          "ImageFeatureTrack",
          "ImageFileApply",
          "ImageFileFilter",
          "ImageFileScan",
          "ImageFilter",
          "ImageFocusCombine",
          "ImageForestingComponents",
          "ImageFormattingWidth",
          "ImageForwardTransformation",
          "ImageGraphics",
          "ImageHistogram",
          "ImageIdentify",
          "ImageInstanceQ",
          "ImageKeypoints",
          "ImageLabels",
          "ImageLegends",
          "ImageLevels",
          "ImageLines",
          "ImageMargins",
          "ImageMarker",
          "ImageMarkers",
          "ImageMeasurements",
          "ImageMesh",
          "ImageMultiply",
          "ImageOffset",
          "ImagePad",
          "ImagePadding",
          "ImagePartition",
          "ImagePeriodogram",
          "ImagePerspectiveTransformation",
          "ImagePosition",
          "ImagePreviewFunction",
          "ImagePyramid",
          "ImagePyramidApply",
          "ImageQ",
          "ImageRangeCache",
          "ImageRecolor",
          "ImageReflect",
          "ImageRegion",
          "ImageResize",
          "ImageResolution",
          "ImageRestyle",
          "ImageRotate",
          "ImageRotated",
          "ImageSaliencyFilter",
          "ImageScaled",
          "ImageScan",
          "ImageSize",
          "ImageSizeAction",
          "ImageSizeCache",
          "ImageSizeMultipliers",
          "ImageSizeRaw",
          "ImageStitch",
          "ImageSubtract",
          "ImageTake",
          "ImageTransformation",
          "ImageTrim",
          "ImageType",
          "ImageValue",
          "ImageValuePositions",
          "ImageVectorscopePlot",
          "ImageWaveformPlot",
          "ImagingDevice",
          "ImplicitD",
          "ImplicitRegion",
          "Implies",
          "Import",
          "ImportAutoReplacements",
          "ImportByteArray",
          "ImportedObject",
          "ImportOptions",
          "ImportString",
          "ImprovementImportance",
          "In",
          "Inactivate",
          "Inactive",
          "InactiveStyle",
          "IncidenceGraph",
          "IncidenceList",
          "IncidenceMatrix",
          "IncludeAromaticBonds",
          "IncludeConstantBasis",
          "IncludedContexts",
          "IncludeDefinitions",
          "IncludeDirectories",
          "IncludeFileExtension",
          "IncludeGeneratorTasks",
          "IncludeHydrogens",
          "IncludeInflections",
          "IncludeMetaInformation",
          "IncludePods",
          "IncludeQuantities",
          "IncludeRelatedTables",
          "IncludeSingularSolutions",
          "IncludeSingularTerm",
          "IncludeWindowTimes",
          "Increment",
          "IndefiniteMatrixQ",
          "Indent",
          "IndentingNewlineSpacings",
          "IndentMaxFraction",
          "IndependenceTest",
          "IndependentEdgeSetQ",
          "IndependentPhysicalQuantity",
          "IndependentUnit",
          "IndependentUnitDimension",
          "IndependentVertexSetQ",
          "Indeterminate",
          "IndeterminateThreshold",
          "IndexCreationOptions",
          "Indexed",
          "IndexEdgeTaggedGraph",
          "IndexGraph",
          "IndexTag",
          "Inequality",
          "InertEvaluate",
          "InertExpression",
          "InexactNumberQ",
          "InexactNumbers",
          "InfiniteFuture",
          "InfiniteLine",
          "InfiniteLineThrough",
          "InfinitePast",
          "InfinitePlane",
          "Infinity",
          "Infix",
          "InflationAdjust",
          "InflationMethod",
          "Information",
          "InformationData",
          "InformationDataGrid",
          "Inherited",
          "InheritScope",
          "InhomogeneousPoissonPointProcess",
          "InhomogeneousPoissonProcess",
          "InitialEvaluationHistory",
          "Initialization",
          "InitializationCell",
          "InitializationCellEvaluation",
          "InitializationCellWarning",
          "InitializationObject",
          "InitializationObjects",
          "InitializationValue",
          "Initialize",
          "InitialSeeding",
          "InlineCounterAssignments",
          "InlineCounterIncrements",
          "InlineRules",
          "Inner",
          "InnerPolygon",
          "InnerPolyhedron",
          "Inpaint",
          "Input",
          "InputAliases",
          "InputAssumptions",
          "InputAutoReplacements",
          "InputField",
          "InputFieldBox",
          "InputFieldBoxOptions",
          "InputForm",
          "InputGrouping",
          "InputNamePacket",
          "InputNotebook",
          "InputPacket",
          "InputPorts",
          "InputSettings",
          "InputStream",
          "InputString",
          "InputStringPacket",
          "InputToBoxFormPacket",
          "Insert",
          "InsertionFunction",
          "InsertionPointObject",
          "InsertLinebreaks",
          "InsertResults",
          "Inset",
          "Inset3DBox",
          "Inset3DBoxOptions",
          "InsetBox",
          "InsetBoxOptions",
          "Insphere",
          "Install",
          "InstallService",
          "InstanceNormalizationLayer",
          "InString",
          "Integer",
          "IntegerDigits",
          "IntegerExponent",
          "IntegerLength",
          "IntegerName",
          "IntegerPart",
          "IntegerPartitions",
          "IntegerQ",
          "IntegerReverse",
          "Integers",
          "IntegerString",
          "Integral",
          "Integrate",
          "IntegrateChangeVariables",
          "Interactive",
          "InteractiveTradingChart",
          "InterfaceSwitched",
          "Interlaced",
          "Interleaving",
          "InternallyBalancedDecomposition",
          "InterpolatingFunction",
          "InterpolatingPolynomial",
          "Interpolation",
          "InterpolationOrder",
          "InterpolationPoints",
          "InterpolationPrecision",
          "Interpretation",
          "InterpretationBox",
          "InterpretationBoxOptions",
          "InterpretationFunction",
          "Interpreter",
          "InterpretTemplate",
          "InterquartileRange",
          "Interrupt",
          "InterruptSettings",
          "IntersectedEntityClass",
          "IntersectingQ",
          "Intersection",
          "Interval",
          "IntervalIntersection",
          "IntervalMarkers",
          "IntervalMarkersStyle",
          "IntervalMemberQ",
          "IntervalSlider",
          "IntervalUnion",
          "Into",
          "Inverse",
          "InverseBetaRegularized",
          "InverseBilateralLaplaceTransform",
          "InverseBilateralZTransform",
          "InverseCDF",
          "InverseChiSquareDistribution",
          "InverseContinuousWaveletTransform",
          "InverseDistanceTransform",
          "InverseEllipticNomeQ",
          "InverseErf",
          "InverseErfc",
          "InverseFourier",
          "InverseFourierCosTransform",
          "InverseFourierSequenceTransform",
          "InverseFourierSinTransform",
          "InverseFourierTransform",
          "InverseFunction",
          "InverseFunctions",
          "InverseGammaDistribution",
          "InverseGammaRegularized",
          "InverseGaussianDistribution",
          "InverseGudermannian",
          "InverseHankelTransform",
          "InverseHaversine",
          "InverseImagePyramid",
          "InverseJacobiCD",
          "InverseJacobiCN",
          "InverseJacobiCS",
          "InverseJacobiDC",
          "InverseJacobiDN",
          "InverseJacobiDS",
          "InverseJacobiNC",
          "InverseJacobiND",
          "InverseJacobiNS",
          "InverseJacobiSC",
          "InverseJacobiSD",
          "InverseJacobiSN",
          "InverseLaplaceTransform",
          "InverseMellinTransform",
          "InversePermutation",
          "InverseRadon",
          "InverseRadonTransform",
          "InverseSeries",
          "InverseShortTimeFourier",
          "InverseSpectrogram",
          "InverseSurvivalFunction",
          "InverseTransformedRegion",
          "InverseWaveletTransform",
          "InverseWeierstrassP",
          "InverseWishartMatrixDistribution",
          "InverseZTransform",
          "Invisible",
          "InvisibleApplication",
          "InvisibleTimes",
          "IPAddress",
          "IrreduciblePolynomialQ",
          "IslandData",
          "IsolatingInterval",
          "IsomorphicGraphQ",
          "IsomorphicSubgraphQ",
          "IsotopeData",
          "Italic",
          "Item",
          "ItemAspectRatio",
          "ItemBox",
          "ItemBoxOptions",
          "ItemDisplayFunction",
          "ItemSize",
          "ItemStyle",
          "ItoProcess",
          "JaccardDissimilarity",
          "JacobiAmplitude",
          "Jacobian",
          "JacobiCD",
          "JacobiCN",
          "JacobiCS",
          "JacobiDC",
          "JacobiDN",
          "JacobiDS",
          "JacobiEpsilon",
          "JacobiNC",
          "JacobiND",
          "JacobiNS",
          "JacobiP",
          "JacobiSC",
          "JacobiSD",
          "JacobiSN",
          "JacobiSymbol",
          "JacobiZeta",
          "JacobiZN",
          "JankoGroupJ1",
          "JankoGroupJ2",
          "JankoGroupJ3",
          "JankoGroupJ4",
          "JarqueBeraALMTest",
          "JohnsonDistribution",
          "Join",
          "JoinAcross",
          "Joined",
          "JoinedCurve",
          "JoinedCurveBox",
          "JoinedCurveBoxOptions",
          "JoinForm",
          "JordanDecomposition",
          "JordanModelDecomposition",
          "JulianDate",
          "JuliaSetBoettcher",
          "JuliaSetIterationCount",
          "JuliaSetPlot",
          "JuliaSetPoints",
          "K",
          "KagiChart",
          "KaiserBesselWindow",
          "KaiserWindow",
          "KalmanEstimator",
          "KalmanFilter",
          "KarhunenLoeveDecomposition",
          "KaryTree",
          "KatzCentrality",
          "KCoreComponents",
          "KDistribution",
          "KEdgeConnectedComponents",
          "KEdgeConnectedGraphQ",
          "KeepExistingVersion",
          "KelvinBei",
          "KelvinBer",
          "KelvinKei",
          "KelvinKer",
          "KendallTau",
          "KendallTauTest",
          "KernelConfiguration",
          "KernelExecute",
          "KernelFunction",
          "KernelMixtureDistribution",
          "KernelObject",
          "Kernels",
          "Ket",
          "Key",
          "KeyCollisionFunction",
          "KeyComplement",
          "KeyDrop",
          "KeyDropFrom",
          "KeyExistsQ",
          "KeyFreeQ",
          "KeyIntersection",
          "KeyMap",
          "KeyMemberQ",
          "KeypointStrength",
          "Keys",
          "KeySelect",
          "KeySort",
          "KeySortBy",
          "KeyTake",
          "KeyUnion",
          "KeyValueMap",
          "KeyValuePattern",
          "Khinchin",
          "KillProcess",
          "KirchhoffGraph",
          "KirchhoffMatrix",
          "KleinInvariantJ",
          "KnapsackSolve",
          "KnightTourGraph",
          "KnotData",
          "KnownUnitQ",
          "KochCurve",
          "KolmogorovSmirnovTest",
          "KroneckerDelta",
          "KroneckerModelDecomposition",
          "KroneckerProduct",
          "KroneckerSymbol",
          "KuiperTest",
          "KumaraswamyDistribution",
          "Kurtosis",
          "KuwaharaFilter",
          "KVertexConnectedComponents",
          "KVertexConnectedGraphQ",
          "LABColor",
          "Label",
          "Labeled",
          "LabeledSlider",
          "LabelingFunction",
          "LabelingSize",
          "LabelStyle",
          "LabelVisibility",
          "LaguerreL",
          "LakeData",
          "LambdaComponents",
          "LambertW",
          "LameC",
          "LameCPrime",
          "LameEigenvalueA",
          "LameEigenvalueB",
          "LameS",
          "LameSPrime",
          "LaminaData",
          "LanczosWindow",
          "LandauDistribution",
          "Language",
          "LanguageCategory",
          "LanguageData",
          "LanguageIdentify",
          "LanguageOptions",
          "LaplaceDistribution",
          "LaplaceTransform",
          "Laplacian",
          "LaplacianFilter",
          "LaplacianGaussianFilter",
          "LaplacianPDETerm",
          "Large",
          "Larger",
          "Last",
          "Latitude",
          "LatitudeLongitude",
          "LatticeData",
          "LatticeReduce",
          "Launch",
          "LaunchKernels",
          "LayeredGraphPlot",
          "LayeredGraphPlot3D",
          "LayerSizeFunction",
          "LayoutInformation",
          "LCHColor",
          "LCM",
          "LeaderSize",
          "LeafCount",
          "LeapVariant",
          "LeapYearQ",
          "LearnDistribution",
          "LearnedDistribution",
          "LearningRate",
          "LearningRateMultipliers",
          "LeastSquares",
          "LeastSquaresFilterKernel",
          "Left",
          "LeftArrow",
          "LeftArrowBar",
          "LeftArrowRightArrow",
          "LeftDownTeeVector",
          "LeftDownVector",
          "LeftDownVectorBar",
          "LeftRightArrow",
          "LeftRightVector",
          "LeftTee",
          "LeftTeeArrow",
          "LeftTeeVector",
          "LeftTriangle",
          "LeftTriangleBar",
          "LeftTriangleEqual",
          "LeftUpDownVector",
          "LeftUpTeeVector",
          "LeftUpVector",
          "LeftUpVectorBar",
          "LeftVector",
          "LeftVectorBar",
          "LegendAppearance",
          "Legended",
          "LegendFunction",
          "LegendLabel",
          "LegendLayout",
          "LegendMargins",
          "LegendMarkers",
          "LegendMarkerSize",
          "LegendreP",
          "LegendreQ",
          "LegendreType",
          "Length",
          "LengthWhile",
          "LerchPhi",
          "Less",
          "LessEqual",
          "LessEqualGreater",
          "LessEqualThan",
          "LessFullEqual",
          "LessGreater",
          "LessLess",
          "LessSlantEqual",
          "LessThan",
          "LessTilde",
          "LetterCharacter",
          "LetterCounts",
          "LetterNumber",
          "LetterQ",
          "Level",
          "LeveneTest",
          "LeviCivitaTensor",
          "LevyDistribution",
          "Lexicographic",
          "LexicographicOrder",
          "LexicographicSort",
          "LibraryDataType",
          "LibraryFunction",
          "LibraryFunctionDeclaration",
          "LibraryFunctionError",
          "LibraryFunctionInformation",
          "LibraryFunctionLoad",
          "LibraryFunctionUnload",
          "LibraryLoad",
          "LibraryUnload",
          "LicenseEntitlementObject",
          "LicenseEntitlements",
          "LicenseID",
          "LicensingSettings",
          "LiftingFilterData",
          "LiftingWaveletTransform",
          "LightBlue",
          "LightBrown",
          "LightCyan",
          "Lighter",
          "LightGray",
          "LightGreen",
          "Lighting",
          "LightingAngle",
          "LightMagenta",
          "LightOrange",
          "LightPink",
          "LightPurple",
          "LightRed",
          "LightSources",
          "LightYellow",
          "Likelihood",
          "Limit",
          "LimitsPositioning",
          "LimitsPositioningTokens",
          "LindleyDistribution",
          "Line",
          "Line3DBox",
          "Line3DBoxOptions",
          "LinearFilter",
          "LinearFractionalOptimization",
          "LinearFractionalTransform",
          "LinearGradientFilling",
          "LinearGradientImage",
          "LinearizingTransformationData",
          "LinearLayer",
          "LinearModelFit",
          "LinearOffsetFunction",
          "LinearOptimization",
          "LinearProgramming",
          "LinearRecurrence",
          "LinearSolve",
          "LinearSolveFunction",
          "LineBox",
          "LineBoxOptions",
          "LineBreak",
          "LinebreakAdjustments",
          "LineBreakChart",
          "LinebreakSemicolonWeighting",
          "LineBreakWithin",
          "LineColor",
          "LineGraph",
          "LineIndent",
          "LineIndentMaxFraction",
          "LineIntegralConvolutionPlot",
          "LineIntegralConvolutionScale",
          "LineLegend",
          "LineOpacity",
          "LineSpacing",
          "LineWrapParts",
          "LinkActivate",
          "LinkClose",
          "LinkConnect",
          "LinkConnectedQ",
          "LinkCreate",
          "LinkError",
          "LinkFlush",
          "LinkFunction",
          "LinkHost",
          "LinkInterrupt",
          "LinkLaunch",
          "LinkMode",
          "LinkObject",
          "LinkOpen",
          "LinkOptions",
          "LinkPatterns",
          "LinkProtocol",
          "LinkRankCentrality",
          "LinkRead",
          "LinkReadHeld",
          "LinkReadyQ",
          "Links",
          "LinkService",
          "LinkWrite",
          "LinkWriteHeld",
          "LiouvilleLambda",
          "List",
          "Listable",
          "ListAnimate",
          "ListContourPlot",
          "ListContourPlot3D",
          "ListConvolve",
          "ListCorrelate",
          "ListCurvePathPlot",
          "ListDeconvolve",
          "ListDensityPlot",
          "ListDensityPlot3D",
          "Listen",
          "ListFormat",
          "ListFourierSequenceTransform",
          "ListInterpolation",
          "ListLineIntegralConvolutionPlot",
          "ListLinePlot",
          "ListLinePlot3D",
          "ListLogLinearPlot",
          "ListLogLogPlot",
          "ListLogPlot",
          "ListPicker",
          "ListPickerBox",
          "ListPickerBoxBackground",
          "ListPickerBoxOptions",
          "ListPlay",
          "ListPlot",
          "ListPlot3D",
          "ListPointPlot3D",
          "ListPolarPlot",
          "ListQ",
          "ListSliceContourPlot3D",
          "ListSliceDensityPlot3D",
          "ListSliceVectorPlot3D",
          "ListStepPlot",
          "ListStreamDensityPlot",
          "ListStreamPlot",
          "ListStreamPlot3D",
          "ListSurfacePlot3D",
          "ListVectorDensityPlot",
          "ListVectorDisplacementPlot",
          "ListVectorDisplacementPlot3D",
          "ListVectorPlot",
          "ListVectorPlot3D",
          "ListZTransform",
          "Literal",
          "LiteralSearch",
          "LiteralType",
          "LoadCompiledComponent",
          "LocalAdaptiveBinarize",
          "LocalCache",
          "LocalClusteringCoefficient",
          "LocalEvaluate",
          "LocalizeDefinitions",
          "LocalizeVariables",
          "LocalObject",
          "LocalObjects",
          "LocalResponseNormalizationLayer",
          "LocalSubmit",
          "LocalSymbol",
          "LocalTime",
          "LocalTimeZone",
          "LocationEquivalenceTest",
          "LocationTest",
          "Locator",
          "LocatorAutoCreate",
          "LocatorBox",
          "LocatorBoxOptions",
          "LocatorCentering",
          "LocatorPane",
          "LocatorPaneBox",
          "LocatorPaneBoxOptions",
          "LocatorRegion",
          "Locked",
          "Log",
          "Log10",
          "Log2",
          "LogBarnesG",
          "LogGamma",
          "LogGammaDistribution",
          "LogicalExpand",
          "LogIntegral",
          "LogisticDistribution",
          "LogisticSigmoid",
          "LogitModelFit",
          "LogLikelihood",
          "LogLinearPlot",
          "LogLogisticDistribution",
          "LogLogPlot",
          "LogMultinormalDistribution",
          "LogNormalDistribution",
          "LogPlot",
          "LogRankTest",
          "LogSeriesDistribution",
          "LongEqual",
          "Longest",
          "LongestCommonSequence",
          "LongestCommonSequencePositions",
          "LongestCommonSubsequence",
          "LongestCommonSubsequencePositions",
          "LongestMatch",
          "LongestOrderedSequence",
          "LongForm",
          "Longitude",
          "LongLeftArrow",
          "LongLeftRightArrow",
          "LongRightArrow",
          "LongShortTermMemoryLayer",
          "Lookup",
          "Loopback",
          "LoopFreeGraphQ",
          "Looping",
          "LossFunction",
          "LowerCaseQ",
          "LowerLeftArrow",
          "LowerRightArrow",
          "LowerTriangularize",
          "LowerTriangularMatrix",
          "LowerTriangularMatrixQ",
          "LowpassFilter",
          "LQEstimatorGains",
          "LQGRegulator",
          "LQOutputRegulatorGains",
          "LQRegulatorGains",
          "LUBackSubstitution",
          "LucasL",
          "LuccioSamiComponents",
          "LUDecomposition",
          "LunarEclipse",
          "LUVColor",
          "LyapunovSolve",
          "LyonsGroupLy",
          "MachineID",
          "MachineName",
          "MachineNumberQ",
          "MachinePrecision",
          "MacintoshSystemPageSetup",
          "Magenta",
          "Magnification",
          "Magnify",
          "MailAddressValidation",
          "MailExecute",
          "MailFolder",
          "MailItem",
          "MailReceiverFunction",
          "MailResponseFunction",
          "MailSearch",
          "MailServerConnect",
          "MailServerConnection",
          "MailSettings",
          "MainSolve",
          "MaintainDynamicCaches",
          "Majority",
          "MakeBoxes",
          "MakeExpression",
          "MakeRules",
          "ManagedLibraryExpressionID",
          "ManagedLibraryExpressionQ",
          "MandelbrotSetBoettcher",
          "MandelbrotSetDistance",
          "MandelbrotSetIterationCount",
          "MandelbrotSetMemberQ",
          "MandelbrotSetPlot",
          "MangoldtLambda",
          "ManhattanDistance",
          "Manipulate",
          "Manipulator",
          "MannedSpaceMissionData",
          "MannWhitneyTest",
          "MantissaExponent",
          "Manual",
          "Map",
          "MapAll",
          "MapApply",
          "MapAt",
          "MapIndexed",
          "MAProcess",
          "MapThread",
          "MarchenkoPasturDistribution",
          "MarcumQ",
          "MardiaCombinedTest",
          "MardiaKurtosisTest",
          "MardiaSkewnessTest",
          "MarginalDistribution",
          "MarkovProcessProperties",
          "Masking",
          "MassConcentrationCondition",
          "MassFluxValue",
          "MassImpermeableBoundaryValue",
          "MassOutflowValue",
          "MassSymmetryValue",
          "MassTransferValue",
          "MassTransportPDEComponent",
          "MatchingDissimilarity",
          "MatchLocalNameQ",
          "MatchLocalNames",
          "MatchQ",
          "Material",
          "MaterialShading",
          "MaternPointProcess",
          "MathematicalFunctionData",
          "MathematicaNotation",
          "MathieuC",
          "MathieuCharacteristicA",
          "MathieuCharacteristicB",
          "MathieuCharacteristicExponent",
          "MathieuCPrime",
          "MathieuGroupM11",
          "MathieuGroupM12",
          "MathieuGroupM22",
          "MathieuGroupM23",
          "MathieuGroupM24",
          "MathieuS",
          "MathieuSPrime",
          "MathMLForm",
          "MathMLText",
          "Matrices",
          "MatrixExp",
          "MatrixForm",
          "MatrixFunction",
          "MatrixLog",
          "MatrixNormalDistribution",
          "MatrixPlot",
          "MatrixPower",
          "MatrixPropertyDistribution",
          "MatrixQ",
          "MatrixRank",
          "MatrixTDistribution",
          "Max",
          "MaxBend",
          "MaxCellMeasure",
          "MaxColorDistance",
          "MaxDate",
          "MaxDetect",
          "MaxDisplayedChildren",
          "MaxDuration",
          "MaxExtraBandwidths",
          "MaxExtraConditions",
          "MaxFeatureDisplacement",
          "MaxFeatures",
          "MaxFilter",
          "MaximalBy",
          "Maximize",
          "MaxItems",
          "MaxIterations",
          "MaxLimit",
          "MaxMemoryUsed",
          "MaxMixtureKernels",
          "MaxOverlapFraction",
          "MaxPlotPoints",
          "MaxPoints",
          "MaxRecursion",
          "MaxStableDistribution",
          "MaxStepFraction",
          "MaxSteps",
          "MaxStepSize",
          "MaxTrainingRounds",
          "MaxValue",
          "MaxwellDistribution",
          "MaxWordGap",
          "McLaughlinGroupMcL",
          "Mean",
          "MeanAbsoluteLossLayer",
          "MeanAround",
          "MeanClusteringCoefficient",
          "MeanDegreeConnectivity",
          "MeanDeviation",
          "MeanFilter",
          "MeanGraphDistance",
          "MeanNeighborDegree",
          "MeanPointDensity",
          "MeanShift",
          "MeanShiftFilter",
          "MeanSquaredLossLayer",
          "Median",
          "MedianDeviation",
          "MedianFilter",
          "MedicalTestData",
          "Medium",
          "MeijerG",
          "MeijerGReduce",
          "MeixnerDistribution",
          "MellinConvolve",
          "MellinTransform",
          "MemberQ",
          "MemoryAvailable",
          "MemoryConstrained",
          "MemoryConstraint",
          "MemoryInUse",
          "MengerMesh",
          "Menu",
          "MenuAppearance",
          "MenuCommandKey",
          "MenuEvaluator",
          "MenuItem",
          "MenuList",
          "MenuPacket",
          "MenuSortingValue",
          "MenuStyle",
          "MenuView",
          "Merge",
          "MergeDifferences",
          "MergingFunction",
          "MersennePrimeExponent",
          "MersennePrimeExponentQ",
          "Mesh",
          "MeshCellCentroid",
          "MeshCellCount",
          "MeshCellHighlight",
          "MeshCellIndex",
          "MeshCellLabel",
          "MeshCellMarker",
          "MeshCellMeasure",
          "MeshCellQuality",
          "MeshCells",
          "MeshCellShapeFunction",
          "MeshCellStyle",
          "MeshConnectivityGraph",
          "MeshCoordinates",
          "MeshFunctions",
          "MeshPrimitives",
          "MeshQualityGoal",
          "MeshRange",
          "MeshRefinementFunction",
          "MeshRegion",
          "MeshRegionQ",
          "MeshShading",
          "MeshStyle",
          "Message",
          "MessageDialog",
          "MessageList",
          "MessageName",
          "MessageObject",
          "MessageOptions",
          "MessagePacket",
          "Messages",
          "MessagesNotebook",
          "MetaCharacters",
          "MetaInformation",
          "MeteorShowerData",
          "Method",
          "MethodOptions",
          "MexicanHatWavelet",
          "MeyerWavelet",
          "Midpoint",
          "MIMETypeToFormatList",
          "Min",
          "MinColorDistance",
          "MinDate",
          "MinDetect",
          "MineralData",
          "MinFilter",
          "MinimalBy",
          "MinimalPolynomial",
          "MinimalStateSpaceModel",
          "Minimize",
          "MinimumTimeIncrement",
          "MinIntervalSize",
          "MinkowskiQuestionMark",
          "MinLimit",
          "MinMax",
          "MinorPlanetData",
          "Minors",
          "MinPointSeparation",
          "MinRecursion",
          "MinSize",
          "MinStableDistribution",
          "Minus",
          "MinusPlus",
          "MinValue",
          "Missing",
          "MissingBehavior",
          "MissingDataMethod",
          "MissingDataRules",
          "MissingQ",
          "MissingString",
          "MissingStyle",
          "MissingValuePattern",
          "MissingValueSynthesis",
          "MittagLefflerE",
          "MixedFractionParts",
          "MixedGraphQ",
          "MixedMagnitude",
          "MixedRadix",
          "MixedRadixQuantity",
          "MixedUnit",
          "MixtureDistribution",
          "Mod",
          "Modal",
          "Mode",
          "ModelPredictiveController",
          "Modular",
          "ModularInverse",
          "ModularLambda",
          "Module",
          "Modulus",
          "MoebiusMu",
          "Molecule",
          "MoleculeAlign",
          "MoleculeContainsQ",
          "MoleculeDraw",
          "MoleculeEquivalentQ",
          "MoleculeFreeQ",
          "MoleculeGraph",
          "MoleculeMatchQ",
          "MoleculeMaximumCommonSubstructure",
          "MoleculeModify",
          "MoleculeName",
          "MoleculePattern",
          "MoleculePlot",
          "MoleculePlot3D",
          "MoleculeProperty",
          "MoleculeQ",
          "MoleculeRecognize",
          "MoleculeSubstructureCount",
          "MoleculeValue",
          "Moment",
          "MomentConvert",
          "MomentEvaluate",
          "MomentGeneratingFunction",
          "MomentOfInertia",
          "Monday",
          "Monitor",
          "MonomialList",
          "MonomialOrder",
          "MonsterGroupM",
          "MoonPhase",
          "MoonPosition",
          "MorletWavelet",
          "MorphologicalBinarize",
          "MorphologicalBranchPoints",
          "MorphologicalComponents",
          "MorphologicalEulerNumber",
          "MorphologicalGraph",
          "MorphologicalPerimeter",
          "MorphologicalTransform",
          "MortalityData",
          "Most",
          "MountainData",
          "MouseAnnotation",
          "MouseAppearance",
          "MouseAppearanceTag",
          "MouseButtons",
          "Mouseover",
          "MousePointerNote",
          "MousePosition",
          "MovieData",
          "MovingAverage",
          "MovingMap",
          "MovingMedian",
          "MoyalDistribution",
          "MultiaxisArrangement",
          "Multicolumn",
          "MultiedgeStyle",
          "MultigraphQ",
          "MultilaunchWarning",
          "MultiLetterItalics",
          "MultiLetterStyle",
          "MultilineFunction",
          "Multinomial",
          "MultinomialDistribution",
          "MultinormalDistribution",
          "MultiplicativeOrder",
          "Multiplicity",
          "MultiplySides",
          "MultiscriptBoxOptions",
          "Multiselection",
          "MultivariateHypergeometricDistribution",
          "MultivariatePoissonDistribution",
          "MultivariateTDistribution",
          "N",
          "NakagamiDistribution",
          "NameQ",
          "Names",
          "NamespaceBox",
          "NamespaceBoxOptions",
          "Nand",
          "NArgMax",
          "NArgMin",
          "NBernoulliB",
          "NBodySimulation",
          "NBodySimulationData",
          "NCache",
          "NCaputoD",
          "NDEigensystem",
          "NDEigenvalues",
          "NDSolve",
          "NDSolveValue",
          "Nearest",
          "NearestFunction",
          "NearestMeshCells",
          "NearestNeighborG",
          "NearestNeighborGraph",
          "NearestTo",
          "NebulaData",
          "NeedlemanWunschSimilarity",
          "Needs",
          "Negative",
          "NegativeBinomialDistribution",
          "NegativeDefiniteMatrixQ",
          "NegativeIntegers",
          "NegativelyOrientedPoints",
          "NegativeMultinomialDistribution",
          "NegativeRationals",
          "NegativeReals",
          "NegativeSemidefiniteMatrixQ",
          "NeighborhoodData",
          "NeighborhoodGraph",
          "Nest",
          "NestedGreaterGreater",
          "NestedLessLess",
          "NestedScriptRules",
          "NestGraph",
          "NestList",
          "NestTree",
          "NestWhile",
          "NestWhileList",
          "NetAppend",
          "NetArray",
          "NetArrayLayer",
          "NetBidirectionalOperator",
          "NetChain",
          "NetDecoder",
          "NetDelete",
          "NetDrop",
          "NetEncoder",
          "NetEvaluationMode",
          "NetExternalObject",
          "NetExtract",
          "NetFlatten",
          "NetFoldOperator",
          "NetGANOperator",
          "NetGraph",
          "NetInformation",
          "NetInitialize",
          "NetInsert",
          "NetInsertSharedArrays",
          "NetJoin",
          "NetMapOperator",
          "NetMapThreadOperator",
          "NetMeasurements",
          "NetModel",
          "NetNestOperator",
          "NetPairEmbeddingOperator",
          "NetPort",
          "NetPortGradient",
          "NetPrepend",
          "NetRename",
          "NetReplace",
          "NetReplacePart",
          "NetSharedArray",
          "NetStateObject",
          "NetTake",
          "NetTrain",
          "NetTrainResultsObject",
          "NetUnfold",
          "NetworkPacketCapture",
          "NetworkPacketRecording",
          "NetworkPacketRecordingDuring",
          "NetworkPacketTrace",
          "NeumannValue",
          "NevilleThetaC",
          "NevilleThetaD",
          "NevilleThetaN",
          "NevilleThetaS",
          "NewPrimitiveStyle",
          "NExpectation",
          "Next",
          "NextCell",
          "NextDate",
          "NextPrime",
          "NextScheduledTaskTime",
          "NeymanScottPointProcess",
          "NFractionalD",
          "NHoldAll",
          "NHoldFirst",
          "NHoldRest",
          "NicholsGridLines",
          "NicholsPlot",
          "NightHemisphere",
          "NIntegrate",
          "NMaximize",
          "NMaxValue",
          "NMinimize",
          "NMinValue",
          "NominalScale",
          "NominalVariables",
          "NonAssociative",
          "NoncentralBetaDistribution",
          "NoncentralChiSquareDistribution",
          "NoncentralFRatioDistribution",
          "NoncentralStudentTDistribution",
          "NonCommutativeMultiply",
          "NonConstants",
          "NondimensionalizationTransform",
          "None",
          "NoneTrue",
          "NonlinearModelFit",
          "NonlinearStateSpaceModel",
          "NonlocalMeansFilter",
          "NonNegative",
          "NonNegativeIntegers",
          "NonNegativeRationals",
          "NonNegativeReals",
          "NonPositive",
          "NonPositiveIntegers",
          "NonPositiveRationals",
          "NonPositiveReals",
          "Nor",
          "NorlundB",
          "Norm",
          "Normal",
          "NormalDistribution",
          "NormalGrouping",
          "NormalizationLayer",
          "Normalize",
          "Normalized",
          "NormalizedSquaredEuclideanDistance",
          "NormalMatrixQ",
          "NormalsFunction",
          "NormFunction",
          "Not",
          "NotCongruent",
          "NotCupCap",
          "NotDoubleVerticalBar",
          "Notebook",
          "NotebookApply",
          "NotebookAutoSave",
          "NotebookBrowseDirectory",
          "NotebookClose",
          "NotebookConvertSettings",
          "NotebookCreate",
          "NotebookDefault",
          "NotebookDelete",
          "NotebookDirectory",
          "NotebookDynamicExpression",
          "NotebookEvaluate",
          "NotebookEventActions",
          "NotebookFileName",
          "NotebookFind",
          "NotebookGet",
          "NotebookImport",
          "NotebookInformation",
          "NotebookInterfaceObject",
          "NotebookLocate",
          "NotebookObject",
          "NotebookOpen",
          "NotebookPath",
          "NotebookPrint",
          "NotebookPut",
          "NotebookRead",
          "Notebooks",
          "NotebookSave",
          "NotebookSelection",
          "NotebooksMenu",
          "NotebookTemplate",
          "NotebookWrite",
          "NotElement",
          "NotEqualTilde",
          "NotExists",
          "NotGreater",
          "NotGreaterEqual",
          "NotGreaterFullEqual",
          "NotGreaterGreater",
          "NotGreaterLess",
          "NotGreaterSlantEqual",
          "NotGreaterTilde",
          "Nothing",
          "NotHumpDownHump",
          "NotHumpEqual",
          "NotificationFunction",
          "NotLeftTriangle",
          "NotLeftTriangleBar",
          "NotLeftTriangleEqual",
          "NotLess",
          "NotLessEqual",
          "NotLessFullEqual",
          "NotLessGreater",
          "NotLessLess",
          "NotLessSlantEqual",
          "NotLessTilde",
          "NotNestedGreaterGreater",
          "NotNestedLessLess",
          "NotPrecedes",
          "NotPrecedesEqual",
          "NotPrecedesSlantEqual",
          "NotPrecedesTilde",
          "NotReverseElement",
          "NotRightTriangle",
          "NotRightTriangleBar",
          "NotRightTriangleEqual",
          "NotSquareSubset",
          "NotSquareSubsetEqual",
          "NotSquareSuperset",
          "NotSquareSupersetEqual",
          "NotSubset",
          "NotSubsetEqual",
          "NotSucceeds",
          "NotSucceedsEqual",
          "NotSucceedsSlantEqual",
          "NotSucceedsTilde",
          "NotSuperset",
          "NotSupersetEqual",
          "NotTilde",
          "NotTildeEqual",
          "NotTildeFullEqual",
          "NotTildeTilde",
          "NotVerticalBar",
          "Now",
          "NoWhitespace",
          "NProbability",
          "NProduct",
          "NProductFactors",
          "NRoots",
          "NSolve",
          "NSolveValues",
          "NSum",
          "NSumTerms",
          "NuclearExplosionData",
          "NuclearReactorData",
          "Null",
          "NullRecords",
          "NullSpace",
          "NullWords",
          "Number",
          "NumberCompose",
          "NumberDecompose",
          "NumberDigit",
          "NumberExpand",
          "NumberFieldClassNumber",
          "NumberFieldDiscriminant",
          "NumberFieldFundamentalUnits",
          "NumberFieldIntegralBasis",
          "NumberFieldNormRepresentatives",
          "NumberFieldRegulator",
          "NumberFieldRootsOfUnity",
          "NumberFieldSignature",
          "NumberForm",
          "NumberFormat",
          "NumberLinePlot",
          "NumberMarks",
          "NumberMultiplier",
          "NumberPadding",
          "NumberPoint",
          "NumberQ",
          "NumberSeparator",
          "NumberSigns",
          "NumberString",
          "Numerator",
          "NumeratorDenominator",
          "NumericalOrder",
          "NumericalSort",
          "NumericArray",
          "NumericArrayQ",
          "NumericArrayType",
          "NumericFunction",
          "NumericQ",
          "NuttallWindow",
          "NValues",
          "NyquistGridLines",
          "NyquistPlot",
          "O",
          "ObjectExistsQ",
          "ObservabilityGramian",
          "ObservabilityMatrix",
          "ObservableDecomposition",
          "ObservableModelQ",
          "OceanData",
          "Octahedron",
          "OddQ",
          "Off",
          "Offset",
          "OLEData",
          "On",
          "ONanGroupON",
          "Once",
          "OneIdentity",
          "Opacity",
          "OpacityFunction",
          "OpacityFunctionScaling",
          "Open",
          "OpenAppend",
          "Opener",
          "OpenerBox",
          "OpenerBoxOptions",
          "OpenerView",
          "OpenFunctionInspectorPacket",
          "Opening",
          "OpenRead",
          "OpenSpecialOptions",
          "OpenTemporary",
          "OpenWrite",
          "Operate",
          "OperatingSystem",
          "OperatorApplied",
          "OptimumFlowData",
          "Optional",
          "OptionalElement",
          "OptionInspectorSettings",
          "OptionQ",
          "Options",
          "OptionsPacket",
          "OptionsPattern",
          "OptionValue",
          "OptionValueBox",
          "OptionValueBoxOptions",
          "Or",
          "Orange",
          "Order",
          "OrderDistribution",
          "OrderedQ",
          "Ordering",
          "OrderingBy",
          "OrderingLayer",
          "Orderless",
          "OrderlessPatternSequence",
          "OrdinalScale",
          "OrnsteinUhlenbeckProcess",
          "Orthogonalize",
          "OrthogonalMatrixQ",
          "Out",
          "Outer",
          "OuterPolygon",
          "OuterPolyhedron",
          "OutputAutoOverwrite",
          "OutputControllabilityMatrix",
          "OutputControllableModelQ",
          "OutputForm",
          "OutputFormData",
          "OutputGrouping",
          "OutputMathEditExpression",
          "OutputNamePacket",
          "OutputPorts",
          "OutputResponse",
          "OutputSizeLimit",
          "OutputStream",
          "Over",
          "OverBar",
          "OverDot",
          "Overflow",
          "OverHat",
          "Overlaps",
          "Overlay",
          "OverlayBox",
          "OverlayBoxOptions",
          "OverlayVideo",
          "Overscript",
          "OverscriptBox",
          "OverscriptBoxOptions",
          "OverTilde",
          "OverVector",
          "OverwriteTarget",
          "OwenT",
          "OwnValues",
          "Package",
          "PackingMethod",
          "PackPaclet",
          "PacletDataRebuild",
          "PacletDirectoryAdd",
          "PacletDirectoryLoad",
          "PacletDirectoryRemove",
          "PacletDirectoryUnload",
          "PacletDisable",
          "PacletEnable",
          "PacletFind",
          "PacletFindRemote",
          "PacletInformation",
          "PacletInstall",
          "PacletInstallSubmit",
          "PacletNewerQ",
          "PacletObject",
          "PacletObjectQ",
          "PacletSite",
          "PacletSiteObject",
          "PacletSiteRegister",
          "PacletSites",
          "PacletSiteUnregister",
          "PacletSiteUpdate",
          "PacletSymbol",
          "PacletUninstall",
          "PacletUpdate",
          "PaddedForm",
          "Padding",
          "PaddingLayer",
          "PaddingSize",
          "PadeApproximant",
          "PadLeft",
          "PadRight",
          "PageBreakAbove",
          "PageBreakBelow",
          "PageBreakWithin",
          "PageFooterLines",
          "PageFooters",
          "PageHeaderLines",
          "PageHeaders",
          "PageHeight",
          "PageRankCentrality",
          "PageTheme",
          "PageWidth",
          "Pagination",
          "PairCorrelationG",
          "PairedBarChart",
          "PairedHistogram",
          "PairedSmoothHistogram",
          "PairedTTest",
          "PairedZTest",
          "PaletteNotebook",
          "PalettePath",
          "PalettesMenuSettings",
          "PalindromeQ",
          "Pane",
          "PaneBox",
          "PaneBoxOptions",
          "Panel",
          "PanelBox",
          "PanelBoxOptions",
          "Paneled",
          "PaneSelector",
          "PaneSelectorBox",
          "PaneSelectorBoxOptions",
          "PaperWidth",
          "ParabolicCylinderD",
          "ParagraphIndent",
          "ParagraphSpacing",
          "ParallelArray",
          "ParallelAxisPlot",
          "ParallelCombine",
          "ParallelDo",
          "Parallelepiped",
          "ParallelEvaluate",
          "Parallelization",
          "Parallelize",
          "ParallelKernels",
          "ParallelMap",
          "ParallelNeeds",
          "Parallelogram",
          "ParallelProduct",
          "ParallelSubmit",
          "ParallelSum",
          "ParallelTable",
          "ParallelTry",
          "Parameter",
          "ParameterEstimator",
          "ParameterMixtureDistribution",
          "ParameterVariables",
          "ParametricConvexOptimization",
          "ParametricFunction",
          "ParametricNDSolve",
          "ParametricNDSolveValue",
          "ParametricPlot",
          "ParametricPlot3D",
          "ParametricRampLayer",
          "ParametricRegion",
          "ParentBox",
          "ParentCell",
          "ParentConnect",
          "ParentDirectory",
          "ParentEdgeLabel",
          "ParentEdgeLabelFunction",
          "ParentEdgeLabelStyle",
          "ParentEdgeShapeFunction",
          "ParentEdgeStyle",
          "ParentEdgeStyleFunction",
          "ParentForm",
          "Parenthesize",
          "ParentList",
          "ParentNotebook",
          "ParetoDistribution",
          "ParetoPickandsDistribution",
          "ParkData",
          "Part",
          "PartBehavior",
          "PartialCorrelationFunction",
          "PartialD",
          "ParticleAcceleratorData",
          "ParticleData",
          "Partition",
          "PartitionGranularity",
          "PartitionsP",
          "PartitionsQ",
          "PartLayer",
          "PartOfSpeech",
          "PartProtection",
          "ParzenWindow",
          "PascalDistribution",
          "PassEventsDown",
          "PassEventsUp",
          "Paste",
          "PasteAutoQuoteCharacters",
          "PasteBoxFormInlineCells",
          "PasteButton",
          "Path",
          "PathGraph",
          "PathGraphQ",
          "Pattern",
          "PatternFilling",
          "PatternReaction",
          "PatternSequence",
          "PatternTest",
          "PauliMatrix",
          "PaulWavelet",
          "Pause",
          "PausedTime",
          "PDF",
          "PeakDetect",
          "PeanoCurve",
          "PearsonChiSquareTest",
          "PearsonCorrelationTest",
          "PearsonDistribution",
          "PenttinenPointProcess",
          "PercentForm",
          "PerfectNumber",
          "PerfectNumberQ",
          "PerformanceGoal",
          "Perimeter",
          "PeriodicBoundaryCondition",
          "PeriodicInterpolation",
          "Periodogram",
          "PeriodogramArray",
          "Permanent",
          "Permissions",
          "PermissionsGroup",
          "PermissionsGroupMemberQ",
          "PermissionsGroups",
          "PermissionsKey",
          "PermissionsKeys",
          "PermutationCycles",
          "PermutationCyclesQ",
          "PermutationGroup",
          "PermutationLength",
          "PermutationList",
          "PermutationListQ",
          "PermutationMatrix",
          "PermutationMax",
          "PermutationMin",
          "PermutationOrder",
          "PermutationPower",
          "PermutationProduct",
          "PermutationReplace",
          "Permutations",
          "PermutationSupport",
          "Permute",
          "PeronaMalikFilter",
          "Perpendicular",
          "PerpendicularBisector",
          "PersistenceLocation",
          "PersistenceTime",
          "PersistentObject",
          "PersistentObjects",
          "PersistentSymbol",
          "PersistentValue",
          "PersonData",
          "PERTDistribution",
          "PetersenGraph",
          "PhaseMargins",
          "PhaseRange",
          "PhongShading",
          "PhysicalSystemData",
          "Pi",
          "Pick",
          "PickedElements",
          "PickMode",
          "PIDData",
          "PIDDerivativeFilter",
          "PIDFeedforward",
          "PIDTune",
          "Piecewise",
          "PiecewiseExpand",
          "PieChart",
          "PieChart3D",
          "PillaiTrace",
          "PillaiTraceTest",
          "PingTime",
          "Pink",
          "PitchRecognize",
          "Pivoting",
          "PixelConstrained",
          "PixelValue",
          "PixelValuePositions",
          "Placed",
          "Placeholder",
          "PlaceholderLayer",
          "PlaceholderReplace",
          "Plain",
          "PlanarAngle",
          "PlanarFaceList",
          "PlanarGraph",
          "PlanarGraphQ",
          "PlanckRadiationLaw",
          "PlaneCurveData",
          "PlanetaryMoonData",
          "PlanetData",
          "PlantData",
          "Play",
          "PlaybackSettings",
          "PlayRange",
          "Plot",
          "Plot3D",
          "Plot3Matrix",
          "PlotDivision",
          "PlotJoined",
          "PlotLabel",
          "PlotLabels",
          "PlotLayout",
          "PlotLegends",
          "PlotMarkers",
          "PlotPoints",
          "PlotRange",
          "PlotRangeClipping",
          "PlotRangeClipPlanesStyle",
          "PlotRangePadding",
          "PlotRegion",
          "PlotStyle",
          "PlotTheme",
          "Pluralize",
          "Plus",
          "PlusMinus",
          "Pochhammer",
          "PodStates",
          "PodWidth",
          "Point",
          "Point3DBox",
          "Point3DBoxOptions",
          "PointBox",
          "PointBoxOptions",
          "PointCountDistribution",
          "PointDensity",
          "PointDensityFunction",
          "PointFigureChart",
          "PointLegend",
          "PointLight",
          "PointProcessEstimator",
          "PointProcessFitTest",
          "PointProcessParameterAssumptions",
          "PointProcessParameterQ",
          "PointSize",
          "PointStatisticFunction",
          "PointValuePlot",
          "PoissonConsulDistribution",
          "PoissonDistribution",
          "PoissonPDEComponent",
          "PoissonPointProcess",
          "PoissonProcess",
          "PoissonWindow",
          "PolarAxes",
          "PolarAxesOrigin",
          "PolarGridLines",
          "PolarPlot",
          "PolarTicks",
          "PoleZeroMarkers",
          "PolyaAeppliDistribution",
          "PolyGamma",
          "Polygon",
          "Polygon3DBox",
          "Polygon3DBoxOptions",
          "PolygonalNumber",
          "PolygonAngle",
          "PolygonBox",
          "PolygonBoxOptions",
          "PolygonCoordinates",
          "PolygonDecomposition",
          "PolygonHoleScale",
          "PolygonIntersections",
          "PolygonScale",
          "Polyhedron",
          "PolyhedronAngle",
          "PolyhedronBox",
          "PolyhedronBoxOptions",
          "PolyhedronCoordinates",
          "PolyhedronData",
          "PolyhedronDecomposition",
          "PolyhedronGenus",
          "PolyLog",
          "PolynomialExpressionQ",
          "PolynomialExtendedGCD",
          "PolynomialForm",
          "PolynomialGCD",
          "PolynomialLCM",
          "PolynomialMod",
          "PolynomialQ",
          "PolynomialQuotient",
          "PolynomialQuotientRemainder",
          "PolynomialReduce",
          "PolynomialRemainder",
          "Polynomials",
          "PolynomialSumOfSquaresList",
          "PoolingLayer",
          "PopupMenu",
          "PopupMenuBox",
          "PopupMenuBoxOptions",
          "PopupView",
          "PopupWindow",
          "Position",
          "PositionIndex",
          "PositionLargest",
          "PositionSmallest",
          "Positive",
          "PositiveDefiniteMatrixQ",
          "PositiveIntegers",
          "PositivelyOrientedPoints",
          "PositiveRationals",
          "PositiveReals",
          "PositiveSemidefiniteMatrixQ",
          "PossibleZeroQ",
          "Postfix",
          "PostScript",
          "Power",
          "PowerDistribution",
          "PowerExpand",
          "PowerMod",
          "PowerModList",
          "PowerRange",
          "PowerSpectralDensity",
          "PowersRepresentations",
          "PowerSymmetricPolynomial",
          "Precedence",
          "PrecedenceForm",
          "Precedes",
          "PrecedesEqual",
          "PrecedesSlantEqual",
          "PrecedesTilde",
          "Precision",
          "PrecisionGoal",
          "PreDecrement",
          "Predict",
          "PredictionRoot",
          "PredictorFunction",
          "PredictorInformation",
          "PredictorMeasurements",
          "PredictorMeasurementsObject",
          "PreemptProtect",
          "PreferencesPath",
          "PreferencesSettings",
          "Prefix",
          "PreIncrement",
          "Prepend",
          "PrependLayer",
          "PrependTo",
          "PreprocessingRules",
          "PreserveColor",
          "PreserveImageOptions",
          "Previous",
          "PreviousCell",
          "PreviousDate",
          "PriceGraphDistribution",
          "PrimaryPlaceholder",
          "Prime",
          "PrimeNu",
          "PrimeOmega",
          "PrimePi",
          "PrimePowerQ",
          "PrimeQ",
          "Primes",
          "PrimeZetaP",
          "PrimitivePolynomialQ",
          "PrimitiveRoot",
          "PrimitiveRootList",
          "PrincipalComponents",
          "PrincipalValue",
          "Print",
          "PrintableASCIIQ",
          "PrintAction",
          "PrintForm",
          "PrintingCopies",
          "PrintingOptions",
          "PrintingPageRange",
          "PrintingStartingPageNumber",
          "PrintingStyleEnvironment",
          "Printout3D",
          "Printout3DPreviewer",
          "PrintPrecision",
          "PrintTemporary",
          "Prism",
          "PrismBox",
          "PrismBoxOptions",
          "PrivateCellOptions",
          "PrivateEvaluationOptions",
          "PrivateFontOptions",
          "PrivateFrontEndOptions",
          "PrivateKey",
          "PrivateNotebookOptions",
          "PrivatePaths",
          "Probability",
          "ProbabilityDistribution",
          "ProbabilityPlot",
          "ProbabilityPr",
          "ProbabilityScalePlot",
          "ProbitModelFit",
          "ProcessConnection",
          "ProcessDirectory",
          "ProcessEnvironment",
          "Processes",
          "ProcessEstimator",
          "ProcessInformation",
          "ProcessObject",
          "ProcessParameterAssumptions",
          "ProcessParameterQ",
          "ProcessStateDomain",
          "ProcessStatus",
          "ProcessTimeDomain",
          "Product",
          "ProductDistribution",
          "ProductLog",
          "ProgressIndicator",
          "ProgressIndicatorBox",
          "ProgressIndicatorBoxOptions",
          "ProgressReporting",
          "Projection",
          "Prolog",
          "PromptForm",
          "ProofObject",
          "PropagateAborts",
          "Properties",
          "Property",
          "PropertyList",
          "PropertyValue",
          "Proportion",
          "Proportional",
          "Protect",
          "Protected",
          "ProteinData",
          "Pruning",
          "PseudoInverse",
          "PsychrometricPropertyData",
          "PublicKey",
          "PublisherID",
          "PulsarData",
          "PunctuationCharacter",
          "Purple",
          "Put",
          "PutAppend",
          "Pyramid",
          "PyramidBox",
          "PyramidBoxOptions",
          "QBinomial",
          "QFactorial",
          "QGamma",
          "QHypergeometricPFQ",
          "QnDispersion",
          "QPochhammer",
          "QPolyGamma",
          "QRDecomposition",
          "QuadraticIrrationalQ",
          "QuadraticOptimization",
          "Quantile",
          "QuantilePlot",
          "Quantity",
          "QuantityArray",
          "QuantityDistribution",
          "QuantityForm",
          "QuantityMagnitude",
          "QuantityQ",
          "QuantityUnit",
          "QuantityVariable",
          "QuantityVariableCanonicalUnit",
          "QuantityVariableDimensions",
          "QuantityVariableIdentifier",
          "QuantityVariablePhysicalQuantity",
          "Quartics",
          "QuartileDeviation",
          "Quartiles",
          "QuartileSkewness",
          "Query",
          "QuestionGenerator",
          "QuestionInterface",
          "QuestionObject",
          "QuestionSelector",
          "QueueingNetworkProcess",
          "QueueingProcess",
          "QueueProperties",
          "Quiet",
          "QuietEcho",
          "Quit",
          "Quotient",
          "QuotientRemainder",
          "RadialAxisPlot",
          "RadialGradientFilling",
          "RadialGradientImage",
          "RadialityCentrality",
          "RadicalBox",
          "RadicalBoxOptions",
          "RadioButton",
          "RadioButtonBar",
          "RadioButtonBox",
          "RadioButtonBoxOptions",
          "Radon",
          "RadonTransform",
          "RamanujanTau",
          "RamanujanTauL",
          "RamanujanTauTheta",
          "RamanujanTauZ",
          "Ramp",
          "Random",
          "RandomArrayLayer",
          "RandomChoice",
          "RandomColor",
          "RandomComplex",
          "RandomDate",
          "RandomEntity",
          "RandomFunction",
          "RandomGeneratorState",
          "RandomGeoPosition",
          "RandomGraph",
          "RandomImage",
          "RandomInstance",
          "RandomInteger",
          "RandomPermutation",
          "RandomPoint",
          "RandomPointConfiguration",
          "RandomPolygon",
          "RandomPolyhedron",
          "RandomPrime",
          "RandomReal",
          "RandomSample",
          "RandomSeed",
          "RandomSeeding",
          "RandomTime",
          "RandomTree",
          "RandomVariate",
          "RandomWalkProcess",
          "RandomWord",
          "Range",
          "RangeFilter",
          "RangeSpecification",
          "RankedMax",
          "RankedMin",
          "RarerProbability",
          "Raster",
          "Raster3D",
          "Raster3DBox",
          "Raster3DBoxOptions",
          "RasterArray",
          "RasterBox",
          "RasterBoxOptions",
          "Rasterize",
          "RasterSize",
          "Rational",
          "RationalExpressionQ",
          "RationalFunctions",
          "Rationalize",
          "Rationals",
          "Ratios",
          "RawArray",
          "RawBoxes",
          "RawData",
          "RawMedium",
          "RayleighDistribution",
          "Re",
          "ReactionBalance",
          "ReactionBalancedQ",
          "ReactionPDETerm",
          "Read",
          "ReadByteArray",
          "ReadLine",
          "ReadList",
          "ReadProtected",
          "ReadString",
          "Real",
          "RealAbs",
          "RealBlockDiagonalForm",
          "RealDigits",
          "RealExponent",
          "Reals",
          "RealSign",
          "Reap",
          "RebuildPacletData",
          "RecalibrationFunction",
          "RecognitionPrior",
          "RecognitionThreshold",
          "ReconstructionMesh",
          "Record",
          "RecordLists",
          "RecordSeparators",
          "Rectangle",
          "RectangleBox",
          "RectangleBoxOptions",
          "RectangleChart",
          "RectangleChart3D",
          "RectangularRepeatingElement",
          "RecurrenceFilter",
          "RecurrenceTable",
          "RecurringDigitsForm",
          "Red",
          "Reduce",
          "RefBox",
          "ReferenceLineStyle",
          "ReferenceMarkers",
          "ReferenceMarkerStyle",
          "Refine",
          "ReflectionMatrix",
          "ReflectionTransform",
          "Refresh",
          "RefreshRate",
          "Region",
          "RegionBinarize",
          "RegionBoundary",
          "RegionBoundaryStyle",
          "RegionBounds",
          "RegionCentroid",
          "RegionCongruent",
          "RegionConvert",
          "RegionDifference",
          "RegionDilation",
          "RegionDimension",
          "RegionDisjoint",
          "RegionDistance",
          "RegionDistanceFunction",
          "RegionEmbeddingDimension",
          "RegionEqual",
          "RegionErosion",
          "RegionFillingStyle",
          "RegionFit",
          "RegionFunction",
          "RegionImage",
          "RegionIntersection",
          "RegionMeasure",
          "RegionMember",
          "RegionMemberFunction",
          "RegionMoment",
          "RegionNearest",
          "RegionNearestFunction",
          "RegionPlot",
          "RegionPlot3D",
          "RegionProduct",
          "RegionQ",
          "RegionResize",
          "RegionSimilar",
          "RegionSize",
          "RegionSymmetricDifference",
          "RegionUnion",
          "RegionWithin",
          "RegisterExternalEvaluator",
          "RegularExpression",
          "Regularization",
          "RegularlySampledQ",
          "RegularPolygon",
          "ReIm",
          "ReImLabels",
          "ReImPlot",
          "ReImStyle",
          "Reinstall",
          "RelationalDatabase",
          "RelationGraph",
          "Release",
          "ReleaseHold",
          "ReliabilityDistribution",
          "ReliefImage",
          "ReliefPlot",
          "RemoteAuthorizationCaching",
          "RemoteBatchJobAbort",
          "RemoteBatchJobObject",
          "RemoteBatchJobs",
          "RemoteBatchMapSubmit",
          "RemoteBatchSubmissionEnvironment",
          "RemoteBatchSubmit",
          "RemoteConnect",
          "RemoteConnectionObject",
          "RemoteEvaluate",
          "RemoteFile",
          "RemoteInputFiles",
          "RemoteKernelObject",
          "RemoteProviderSettings",
          "RemoteRun",
          "RemoteRunProcess",
          "RemovalConditions",
          "Remove",
          "RemoveAlphaChannel",
          "RemoveAsynchronousTask",
          "RemoveAudioStream",
          "RemoveBackground",
          "RemoveChannelListener",
          "RemoveChannelSubscribers",
          "Removed",
          "RemoveDiacritics",
          "RemoveInputStreamMethod",
          "RemoveOutputStreamMethod",
          "RemoveProperty",
          "RemoveScheduledTask",
          "RemoveUsers",
          "RemoveVideoStream",
          "RenameDirectory",
          "RenameFile",
          "RenderAll",
          "RenderingOptions",
          "RenewalProcess",
          "RenkoChart",
          "RepairMesh",
          "Repeated",
          "RepeatedNull",
          "RepeatedString",
          "RepeatedTiming",
          "RepeatingElement",
          "Replace",
          "ReplaceAll",
          "ReplaceAt",
          "ReplaceHeldPart",
          "ReplaceImageValue",
          "ReplaceList",
          "ReplacePart",
          "ReplacePixelValue",
          "ReplaceRepeated",
          "ReplicateLayer",
          "RequiredPhysicalQuantities",
          "Resampling",
          "ResamplingAlgorithmData",
          "ResamplingMethod",
          "Rescale",
          "RescalingTransform",
          "ResetDirectory",
          "ResetScheduledTask",
          "ReshapeLayer",
          "Residue",
          "ResidueSum",
          "ResizeLayer",
          "Resolve",
          "ResolveContextAliases",
          "ResourceAcquire",
          "ResourceData",
          "ResourceFunction",
          "ResourceObject",
          "ResourceRegister",
          "ResourceRemove",
          "ResourceSearch",
          "ResourceSubmissionObject",
          "ResourceSubmit",
          "ResourceSystemBase",
          "ResourceSystemPath",
          "ResourceUpdate",
          "ResourceVersion",
          "ResponseForm",
          "Rest",
          "RestartInterval",
          "Restricted",
          "Resultant",
          "ResumePacket",
          "Return",
          "ReturnCreatesNewCell",
          "ReturnEntersInput",
          "ReturnExpressionPacket",
          "ReturnInputFormPacket",
          "ReturnPacket",
          "ReturnReceiptFunction",
          "ReturnTextPacket",
          "Reverse",
          "ReverseApplied",
          "ReverseBiorthogonalSplineWavelet",
          "ReverseElement",
          "ReverseEquilibrium",
          "ReverseGraph",
          "ReverseSort",
          "ReverseSortBy",
          "ReverseUpEquilibrium",
          "RevolutionAxis",
          "RevolutionPlot3D",
          "RGBColor",
          "RiccatiSolve",
          "RiceDistribution",
          "RidgeFilter",
          "RiemannR",
          "RiemannSiegelTheta",
          "RiemannSiegelZ",
          "RiemannXi",
          "Riffle",
          "Right",
          "RightArrow",
          "RightArrowBar",
          "RightArrowLeftArrow",
          "RightComposition",
          "RightCosetRepresentative",
          "RightDownTeeVector",
          "RightDownVector",
          "RightDownVectorBar",
          "RightTee",
          "RightTeeArrow",
          "RightTeeVector",
          "RightTriangle",
          "RightTriangleBar",
          "RightTriangleEqual",
          "RightUpDownVector",
          "RightUpTeeVector",
          "RightUpVector",
          "RightUpVectorBar",
          "RightVector",
          "RightVectorBar",
          "RipleyK",
          "RipleyRassonRegion",
          "RiskAchievementImportance",
          "RiskReductionImportance",
          "RobustConvexOptimization",
          "RogersTanimotoDissimilarity",
          "RollPitchYawAngles",
          "RollPitchYawMatrix",
          "RomanNumeral",
          "Root",
          "RootApproximant",
          "RootIntervals",
          "RootLocusPlot",
          "RootMeanSquare",
          "RootOfUnityQ",
          "RootReduce",
          "Roots",
          "RootSum",
          "RootTree",
          "Rotate",
          "RotateLabel",
          "RotateLeft",
          "RotateRight",
          "RotationAction",
          "RotationBox",
          "RotationBoxOptions",
          "RotationMatrix",
          "RotationTransform",
          "Round",
          "RoundImplies",
          "RoundingRadius",
          "Row",
          "RowAlignments",
          "RowBackgrounds",
          "RowBox",
          "RowHeights",
          "RowLines",
          "RowMinHeight",
          "RowReduce",
          "RowsEqual",
          "RowSpacings",
          "RSolve",
          "RSolveValue",
          "RudinShapiro",
          "RudvalisGroupRu",
          "Rule",
          "RuleCondition",
          "RuleDelayed",
          "RuleForm",
          "RulePlot",
          "RulerUnits",
          "RulesTree",
          "Run",
          "RunProcess",
          "RunScheduledTask",
          "RunThrough",
          "RuntimeAttributes",
          "RuntimeOptions",
          "RussellRaoDissimilarity",
          "SameAs",
          "SameQ",
          "SameTest",
          "SameTestProperties",
          "SampledEntityClass",
          "SampleDepth",
          "SampledSoundFunction",
          "SampledSoundList",
          "SampleRate",
          "SamplingPeriod",
          "SARIMAProcess",
          "SARMAProcess",
          "SASTriangle",
          "SatelliteData",
          "SatisfiabilityCount",
          "SatisfiabilityInstances",
          "SatisfiableQ",
          "Saturday",
          "Save",
          "Saveable",
          "SaveAutoDelete",
          "SaveConnection",
          "SaveDefinitions",
          "SavitzkyGolayMatrix",
          "SawtoothWave",
          "Scale",
          "Scaled",
          "ScaleDivisions",
          "ScaledMousePosition",
          "ScaleOrigin",
          "ScalePadding",
          "ScaleRanges",
          "ScaleRangeStyle",
          "ScalingFunctions",
          "ScalingMatrix",
          "ScalingTransform",
          "Scan",
          "ScheduledTask",
          "ScheduledTaskActiveQ",
          "ScheduledTaskInformation",
          "ScheduledTaskInformationData",
          "ScheduledTaskObject",
          "ScheduledTasks",
          "SchurDecomposition",
          "ScientificForm",
          "ScientificNotationThreshold",
          "ScorerGi",
          "ScorerGiPrime",
          "ScorerHi",
          "ScorerHiPrime",
          "ScreenRectangle",
          "ScreenStyleEnvironment",
          "ScriptBaselineShifts",
          "ScriptForm",
          "ScriptLevel",
          "ScriptMinSize",
          "ScriptRules",
          "ScriptSizeMultipliers",
          "Scrollbars",
          "ScrollingOptions",
          "ScrollPosition",
          "SearchAdjustment",
          "SearchIndexObject",
          "SearchIndices",
          "SearchQueryString",
          "SearchResultObject",
          "Sec",
          "Sech",
          "SechDistribution",
          "SecondOrderConeOptimization",
          "SectionGrouping",
          "SectorChart",
          "SectorChart3D",
          "SectorOrigin",
          "SectorSpacing",
          "SecuredAuthenticationKey",
          "SecuredAuthenticationKeys",
          "SecurityCertificate",
          "SeedRandom",
          "Select",
          "Selectable",
          "SelectComponents",
          "SelectedCells",
          "SelectedNotebook",
          "SelectFirst",
          "Selection",
          "SelectionAnimate",
          "SelectionCell",
          "SelectionCellCreateCell",
          "SelectionCellDefaultStyle",
          "SelectionCellParentStyle",
          "SelectionCreateCell",
          "SelectionDebuggerTag",
          "SelectionEvaluate",
          "SelectionEvaluateCreateCell",
          "SelectionMove",
          "SelectionPlaceholder",
          "SelectWithContents",
          "SelfLoops",
          "SelfLoopStyle",
          "SemanticImport",
          "SemanticImportString",
          "SemanticInterpretation",
          "SemialgebraicComponentInstances",
          "SemidefiniteOptimization",
          "SendMail",
          "SendMessage",
          "Sequence",
          "SequenceAlignment",
          "SequenceAttentionLayer",
          "SequenceCases",
          "SequenceCount",
          "SequenceFold",
          "SequenceFoldList",
          "SequenceForm",
          "SequenceHold",
          "SequenceIndicesLayer",
          "SequenceLastLayer",
          "SequenceMostLayer",
          "SequencePosition",
          "SequencePredict",
          "SequencePredictorFunction",
          "SequenceReplace",
          "SequenceRestLayer",
          "SequenceReverseLayer",
          "SequenceSplit",
          "Series",
          "SeriesCoefficient",
          "SeriesData",
          "SeriesTermGoal",
          "ServiceConnect",
          "ServiceDisconnect",
          "ServiceExecute",
          "ServiceObject",
          "ServiceRequest",
          "ServiceResponse",
          "ServiceSubmit",
          "SessionSubmit",
          "SessionTime",
          "Set",
          "SetAccuracy",
          "SetAlphaChannel",
          "SetAttributes",
          "Setbacks",
          "SetCloudDirectory",
          "SetCookies",
          "SetDelayed",
          "SetDirectory",
          "SetEnvironment",
          "SetFileDate",
          "SetFileFormatProperties",
          "SetOptions",
          "SetOptionsPacket",
          "SetPermissions",
          "SetPrecision",
          "SetProperty",
          "SetSecuredAuthenticationKey",
          "SetSelectedNotebook",
          "SetSharedFunction",
          "SetSharedVariable",
          "SetStreamPosition",
          "SetSystemModel",
          "SetSystemOptions",
          "Setter",
          "SetterBar",
          "SetterBox",
          "SetterBoxOptions",
          "Setting",
          "SetUsers",
          "Shading",
          "Shallow",
          "ShannonWavelet",
          "ShapiroWilkTest",
          "Share",
          "SharingList",
          "Sharpen",
          "ShearingMatrix",
          "ShearingTransform",
          "ShellRegion",
          "ShenCastanMatrix",
          "ShiftedGompertzDistribution",
          "ShiftRegisterSequence",
          "Short",
          "ShortDownArrow",
          "Shortest",
          "ShortestMatch",
          "ShortestPathFunction",
          "ShortLeftArrow",
          "ShortRightArrow",
          "ShortTimeFourier",
          "ShortTimeFourierData",
          "ShortUpArrow",
          "Show",
          "ShowAutoConvert",
          "ShowAutoSpellCheck",
          "ShowAutoStyles",
          "ShowCellBracket",
          "ShowCellLabel",
          "ShowCellTags",
          "ShowClosedCellArea",
          "ShowCodeAssist",
          "ShowContents",
          "ShowControls",
          "ShowCursorTracker",
          "ShowGroupOpenCloseIcon",
          "ShowGroupOpener",
          "ShowInvisibleCharacters",
          "ShowPageBreaks",
          "ShowPredictiveInterface",
          "ShowSelection",
          "ShowShortBoxForm",
          "ShowSpecialCharacters",
          "ShowStringCharacters",
          "ShowSyntaxStyles",
          "ShrinkingDelay",
          "ShrinkWrapBoundingBox",
          "SiderealTime",
          "SiegelTheta",
          "SiegelTukeyTest",
          "SierpinskiCurve",
          "SierpinskiMesh",
          "Sign",
          "Signature",
          "SignedRankTest",
          "SignedRegionDistance",
          "SignificanceLevel",
          "SignPadding",
          "SignTest",
          "SimilarityRules",
          "SimpleGraph",
          "SimpleGraphQ",
          "SimplePolygonQ",
          "SimplePolyhedronQ",
          "Simplex",
          "Simplify",
          "Sin",
          "Sinc",
          "SinghMaddalaDistribution",
          "SingleEvaluation",
          "SingleLetterItalics",
          "SingleLetterStyle",
          "SingularValueDecomposition",
          "SingularValueList",
          "SingularValuePlot",
          "SingularValues",
          "Sinh",
          "SinhIntegral",
          "SinIntegral",
          "SixJSymbol",
          "Skeleton",
          "SkeletonTransform",
          "SkellamDistribution",
          "Skewness",
          "SkewNormalDistribution",
          "SkinStyle",
          "Skip",
          "SliceContourPlot3D",
          "SliceDensityPlot3D",
          "SliceDistribution",
          "SliceVectorPlot3D",
          "Slider",
          "Slider2D",
          "Slider2DBox",
          "Slider2DBoxOptions",
          "SliderBox",
          "SliderBoxOptions",
          "SlideShowVideo",
          "SlideView",
          "Slot",
          "SlotSequence",
          "Small",
          "SmallCircle",
          "Smaller",
          "SmithDecomposition",
          "SmithDelayCompensator",
          "SmithWatermanSimilarity",
          "SmoothDensityHistogram",
          "SmoothHistogram",
          "SmoothHistogram3D",
          "SmoothKernelDistribution",
          "SmoothPointDensity",
          "SnDispersion",
          "Snippet",
          "SnippetsVideo",
          "SnubPolyhedron",
          "SocialMediaData",
          "Socket",
          "SocketConnect",
          "SocketListen",
          "SocketListener",
          "SocketObject",
          "SocketOpen",
          "SocketReadMessage",
          "SocketReadyQ",
          "Sockets",
          "SocketWaitAll",
          "SocketWaitNext",
          "SoftmaxLayer",
          "SokalSneathDissimilarity",
          "SolarEclipse",
          "SolarSystemFeatureData",
          "SolarTime",
          "SolidAngle",
          "SolidBoundaryLoadValue",
          "SolidData",
          "SolidDisplacementCondition",
          "SolidFixedCondition",
          "SolidMechanicsPDEComponent",
          "SolidMechanicsStrain",
          "SolidMechanicsStress",
          "SolidRegionQ",
          "Solve",
          "SolveAlways",
          "SolveDelayed",
          "SolveValues",
          "Sort",
          "SortBy",
          "SortedBy",
          "SortedEntityClass",
          "Sound",
          "SoundAndGraphics",
          "SoundNote",
          "SoundVolume",
          "SourceLink",
          "SourcePDETerm",
          "Sow",
          "Space",
          "SpaceCurveData",
          "SpaceForm",
          "Spacer",
          "Spacings",
          "Span",
          "SpanAdjustments",
          "SpanCharacterRounding",
          "SpanFromAbove",
          "SpanFromBoth",
          "SpanFromLeft",
          "SpanLineThickness",
          "SpanMaxSize",
          "SpanMinSize",
          "SpanningCharacters",
          "SpanSymmetric",
          "SparseArray",
          "SparseArrayQ",
          "SpatialBinnedPointData",
          "SpatialBoundaryCorrection",
          "SpatialEstimate",
          "SpatialEstimatorFunction",
          "SpatialGraphDistribution",
          "SpatialJ",
          "SpatialMedian",
          "SpatialNoiseLevel",
          "SpatialObservationRegionQ",
          "SpatialPointData",
          "SpatialPointSelect",
          "SpatialRandomnessTest",
          "SpatialTransformationLayer",
          "SpatialTrendFunction",
          "Speak",
          "SpeakerMatchQ",
          "SpearmanRankTest",
          "SpearmanRho",
          "SpeciesData",
          "SpecificityGoal",
          "SpectralLineData",
          "Spectrogram",
          "SpectrogramArray",
          "Specularity",
          "SpeechCases",
          "SpeechInterpreter",
          "SpeechRecognize",
          "SpeechSynthesize",
          "SpellingCorrection",
          "SpellingCorrectionList",
          "SpellingDictionaries",
          "SpellingDictionariesPath",
          "SpellingOptions",
          "Sphere",
          "SphereBox",
          "SphereBoxOptions",
          "SpherePoints",
          "SphericalBesselJ",
          "SphericalBesselY",
          "SphericalHankelH1",
          "SphericalHankelH2",
          "SphericalHarmonicY",
          "SphericalPlot3D",
          "SphericalRegion",
          "SphericalShell",
          "SpheroidalEigenvalue",
          "SpheroidalJoiningFactor",
          "SpheroidalPS",
          "SpheroidalPSPrime",
          "SpheroidalQS",
          "SpheroidalQSPrime",
          "SpheroidalRadialFactor",
          "SpheroidalS1",
          "SpheroidalS1Prime",
          "SpheroidalS2",
          "SpheroidalS2Prime",
          "Splice",
          "SplicedDistribution",
          "SplineClosed",
          "SplineDegree",
          "SplineKnots",
          "SplineWeights",
          "Split",
          "SplitBy",
          "SpokenString",
          "SpotLight",
          "Sqrt",
          "SqrtBox",
          "SqrtBoxOptions",
          "Square",
          "SquaredEuclideanDistance",
          "SquareFreeQ",
          "SquareIntersection",
          "SquareMatrixQ",
          "SquareRepeatingElement",
          "SquaresR",
          "SquareSubset",
          "SquareSubsetEqual",
          "SquareSuperset",
          "SquareSupersetEqual",
          "SquareUnion",
          "SquareWave",
          "SSSTriangle",
          "StabilityMargins",
          "StabilityMarginsStyle",
          "StableDistribution",
          "Stack",
          "StackBegin",
          "StackComplete",
          "StackedDateListPlot",
          "StackedListPlot",
          "StackInhibit",
          "StadiumShape",
          "StandardAtmosphereData",
          "StandardDeviation",
          "StandardDeviationFilter",
          "StandardForm",
          "Standardize",
          "Standardized",
          "StandardOceanData",
          "StandbyDistribution",
          "Star",
          "StarClusterData",
          "StarData",
          "StarGraph",
          "StartAsynchronousTask",
          "StartExternalSession",
          "StartingStepSize",
          "StartOfLine",
          "StartOfString",
          "StartProcess",
          "StartScheduledTask",
          "StartupSound",
          "StartWebSession",
          "StateDimensions",
          "StateFeedbackGains",
          "StateOutputEstimator",
          "StateResponse",
          "StateSpaceModel",
          "StateSpaceRealization",
          "StateSpaceTransform",
          "StateTransformationLinearize",
          "StationaryDistribution",
          "StationaryWaveletPacketTransform",
          "StationaryWaveletTransform",
          "StatusArea",
          "StatusCentrality",
          "StepMonitor",
          "StereochemistryElements",
          "StieltjesGamma",
          "StippleShading",
          "StirlingS1",
          "StirlingS2",
          "StopAsynchronousTask",
          "StoppingPowerData",
          "StopScheduledTask",
          "StrataVariables",
          "StratonovichProcess",
          "StraussHardcorePointProcess",
          "StraussPointProcess",
          "StreamColorFunction",
          "StreamColorFunctionScaling",
          "StreamDensityPlot",
          "StreamMarkers",
          "StreamPlot",
          "StreamPlot3D",
          "StreamPoints",
          "StreamPosition",
          "Streams",
          "StreamScale",
          "StreamStyle",
          "StrictInequalities",
          "String",
          "StringBreak",
          "StringByteCount",
          "StringCases",
          "StringContainsQ",
          "StringCount",
          "StringDelete",
          "StringDrop",
          "StringEndsQ",
          "StringExpression",
          "StringExtract",
          "StringForm",
          "StringFormat",
          "StringFormatQ",
          "StringFreeQ",
          "StringInsert",
          "StringJoin",
          "StringLength",
          "StringMatchQ",
          "StringPadLeft",
          "StringPadRight",
          "StringPart",
          "StringPartition",
          "StringPosition",
          "StringQ",
          "StringRepeat",
          "StringReplace",
          "StringReplaceList",
          "StringReplacePart",
          "StringReverse",
          "StringRiffle",
          "StringRotateLeft",
          "StringRotateRight",
          "StringSkeleton",
          "StringSplit",
          "StringStartsQ",
          "StringTake",
          "StringTakeDrop",
          "StringTemplate",
          "StringToByteArray",
          "StringToStream",
          "StringTrim",
          "StripBoxes",
          "StripOnInput",
          "StripStyleOnPaste",
          "StripWrapperBoxes",
          "StrokeForm",
          "Struckthrough",
          "StructuralImportance",
          "StructuredArray",
          "StructuredArrayHeadQ",
          "StructuredSelection",
          "StruveH",
          "StruveL",
          "Stub",
          "StudentTDistribution",
          "Style",
          "StyleBox",
          "StyleBoxAutoDelete",
          "StyleData",
          "StyleDefinitions",
          "StyleForm",
          "StyleHints",
          "StyleKeyMapping",
          "StyleMenuListing",
          "StyleNameDialogSettings",
          "StyleNames",
          "StylePrint",
          "StyleSheetPath",
          "Subdivide",
          "Subfactorial",
          "Subgraph",
          "SubMinus",
          "SubPlus",
          "SubresultantPolynomialRemainders",
          "SubresultantPolynomials",
          "Subresultants",
          "Subscript",
          "SubscriptBox",
          "SubscriptBoxOptions",
          "Subscripted",
          "Subsequences",
          "Subset",
          "SubsetCases",
          "SubsetCount",
          "SubsetEqual",
          "SubsetMap",
          "SubsetPosition",
          "SubsetQ",
          "SubsetReplace",
          "Subsets",
          "SubStar",
          "SubstitutionSystem",
          "Subsuperscript",
          "SubsuperscriptBox",
          "SubsuperscriptBoxOptions",
          "SubtitleEncoding",
          "SubtitleTrackSelection",
          "Subtract",
          "SubtractFrom",
          "SubtractSides",
          "SubValues",
          "Succeeds",
          "SucceedsEqual",
          "SucceedsSlantEqual",
          "SucceedsTilde",
          "Success",
          "SuchThat",
          "Sum",
          "SumConvergence",
          "SummationLayer",
          "Sunday",
          "SunPosition",
          "Sunrise",
          "Sunset",
          "SuperDagger",
          "SuperMinus",
          "SupernovaData",
          "SuperPlus",
          "Superscript",
          "SuperscriptBox",
          "SuperscriptBoxOptions",
          "Superset",
          "SupersetEqual",
          "SuperStar",
          "Surd",
          "SurdForm",
          "SurfaceAppearance",
          "SurfaceArea",
          "SurfaceColor",
          "SurfaceData",
          "SurfaceGraphics",
          "SurvivalDistribution",
          "SurvivalFunction",
          "SurvivalModel",
          "SurvivalModelFit",
          "SuspendPacket",
          "SuzukiDistribution",
          "SuzukiGroupSuz",
          "SwatchLegend",
          "Switch",
          "Symbol",
          "SymbolName",
          "SymletWavelet",
          "Symmetric",
          "SymmetricDifference",
          "SymmetricGroup",
          "SymmetricKey",
          "SymmetricMatrixQ",
          "SymmetricPolynomial",
          "SymmetricReduction",
          "Symmetrize",
          "SymmetrizedArray",
          "SymmetrizedArrayRules",
          "SymmetrizedDependentComponents",
          "SymmetrizedIndependentComponents",
          "SymmetrizedReplacePart",
          "SynchronousInitialization",
          "SynchronousUpdating",
          "Synonyms",
          "Syntax",
          "SyntaxForm",
          "SyntaxInformation",
          "SyntaxLength",
          "SyntaxPacket",
          "SyntaxQ",
          "SynthesizeMissingValues",
          "SystemCredential",
          "SystemCredentialData",
          "SystemCredentialKey",
          "SystemCredentialKeys",
          "SystemCredentialStoreObject",
          "SystemDialogInput",
          "SystemException",
          "SystemGet",
          "SystemHelpPath",
          "SystemInformation",
          "SystemInformationData",
          "SystemInstall",
          "SystemModel",
          "SystemModeler",
          "SystemModelExamples",
          "SystemModelLinearize",
          "SystemModelMeasurements",
          "SystemModelParametricSimulate",
          "SystemModelPlot",
          "SystemModelProgressReporting",
          "SystemModelReliability",
          "SystemModels",
          "SystemModelSimulate",
          "SystemModelSimulateSensitivity",
          "SystemModelSimulationData",
          "SystemOpen",
          "SystemOptions",
          "SystemProcessData",
          "SystemProcesses",
          "SystemsConnectionsModel",
          "SystemsModelControllerData",
          "SystemsModelDelay",
          "SystemsModelDelayApproximate",
          "SystemsModelDelete",
          "SystemsModelDimensions",
          "SystemsModelExtract",
          "SystemsModelFeedbackConnect",
          "SystemsModelLabels",
          "SystemsModelLinearity",
          "SystemsModelMerge",
          "SystemsModelOrder",
          "SystemsModelParallelConnect",
          "SystemsModelSeriesConnect",
          "SystemsModelStateFeedbackConnect",
          "SystemsModelVectorRelativeOrders",
          "SystemStub",
          "SystemTest",
          "Tab",
          "TabFilling",
          "Table",
          "TableAlignments",
          "TableDepth",
          "TableDirections",
          "TableForm",
          "TableHeadings",
          "TableSpacing",
          "TableView",
          "TableViewBox",
          "TableViewBoxAlignment",
          "TableViewBoxBackground",
          "TableViewBoxHeaders",
          "TableViewBoxItemSize",
          "TableViewBoxItemStyle",
          "TableViewBoxOptions",
          "TabSpacings",
          "TabView",
          "TabViewBox",
          "TabViewBoxOptions",
          "TagBox",
          "TagBoxNote",
          "TagBoxOptions",
          "TaggingRules",
          "TagSet",
          "TagSetDelayed",
          "TagStyle",
          "TagUnset",
          "Take",
          "TakeDrop",
          "TakeLargest",
          "TakeLargestBy",
          "TakeList",
          "TakeSmallest",
          "TakeSmallestBy",
          "TakeWhile",
          "Tally",
          "Tan",
          "Tanh",
          "TargetDevice",
          "TargetFunctions",
          "TargetSystem",
          "TargetUnits",
          "TaskAbort",
          "TaskExecute",
          "TaskObject",
          "TaskRemove",
          "TaskResume",
          "Tasks",
          "TaskSuspend",
          "TaskWait",
          "TautologyQ",
          "TelegraphProcess",
          "TemplateApply",
          "TemplateArgBox",
          "TemplateBox",
          "TemplateBoxOptions",
          "TemplateEvaluate",
          "TemplateExpression",
          "TemplateIf",
          "TemplateObject",
          "TemplateSequence",
          "TemplateSlot",
          "TemplateSlotSequence",
          "TemplateUnevaluated",
          "TemplateVerbatim",
          "TemplateWith",
          "TemporalData",
          "TemporalRegularity",
          "Temporary",
          "TemporaryVariable",
          "TensorContract",
          "TensorDimensions",
          "TensorExpand",
          "TensorProduct",
          "TensorQ",
          "TensorRank",
          "TensorReduce",
          "TensorSymmetry",
          "TensorTranspose",
          "TensorWedge",
          "TerminatedEvaluation",
          "TernaryListPlot",
          "TernaryPlotCorners",
          "TestID",
          "TestReport",
          "TestReportObject",
          "TestResultObject",
          "Tetrahedron",
          "TetrahedronBox",
          "TetrahedronBoxOptions",
          "TeXForm",
          "TeXSave",
          "Text",
          "Text3DBox",
          "Text3DBoxOptions",
          "TextAlignment",
          "TextBand",
          "TextBoundingBox",
          "TextBox",
          "TextCases",
          "TextCell",
          "TextClipboardType",
          "TextContents",
          "TextData",
          "TextElement",
          "TextForm",
          "TextGrid",
          "TextJustification",
          "TextLine",
          "TextPacket",
          "TextParagraph",
          "TextPosition",
          "TextRecognize",
          "TextSearch",
          "TextSearchReport",
          "TextSentences",
          "TextString",
          "TextStructure",
          "TextStyle",
          "TextTranslation",
          "Texture",
          "TextureCoordinateFunction",
          "TextureCoordinateScaling",
          "TextWords",
          "Therefore",
          "ThermodynamicData",
          "ThermometerGauge",
          "Thick",
          "Thickness",
          "Thin",
          "Thinning",
          "ThisLink",
          "ThomasPointProcess",
          "ThompsonGroupTh",
          "Thread",
          "Threaded",
          "ThreadingLayer",
          "ThreeJSymbol",
          "Threshold",
          "Through",
          "Throw",
          "ThueMorse",
          "Thumbnail",
          "Thursday",
          "TickDirection",
          "TickLabelOrientation",
          "TickLabelPositioning",
          "TickLabels",
          "TickLengths",
          "TickPositions",
          "Ticks",
          "TicksStyle",
          "TideData",
          "Tilde",
          "TildeEqual",
          "TildeFullEqual",
          "TildeTilde",
          "TimeConstrained",
          "TimeConstraint",
          "TimeDirection",
          "TimeFormat",
          "TimeGoal",
          "TimelinePlot",
          "TimeObject",
          "TimeObjectQ",
          "TimeRemaining",
          "Times",
          "TimesBy",
          "TimeSeries",
          "TimeSeriesAggregate",
          "TimeSeriesForecast",
          "TimeSeriesInsert",
          "TimeSeriesInvertibility",
          "TimeSeriesMap",
          "TimeSeriesMapThread",
          "TimeSeriesModel",
          "TimeSeriesModelFit",
          "TimeSeriesResample",
          "TimeSeriesRescale",
          "TimeSeriesShift",
          "TimeSeriesThread",
          "TimeSeriesWindow",
          "TimeSystem",
          "TimeSystemConvert",
          "TimeUsed",
          "TimeValue",
          "TimeWarpingCorrespondence",
          "TimeWarpingDistance",
          "TimeZone",
          "TimeZoneConvert",
          "TimeZoneOffset",
          "Timing",
          "Tiny",
          "TitleGrouping",
          "TitsGroupT",
          "ToBoxes",
          "ToCharacterCode",
          "ToColor",
          "ToContinuousTimeModel",
          "ToDate",
          "Today",
          "ToDiscreteTimeModel",
          "ToEntity",
          "ToeplitzMatrix",
          "ToExpression",
          "ToFileName",
          "Together",
          "Toggle",
          "ToggleFalse",
          "Toggler",
          "TogglerBar",
          "TogglerBox",
          "TogglerBoxOptions",
          "ToHeldExpression",
          "ToInvertibleTimeSeries",
          "TokenWords",
          "Tolerance",
          "ToLowerCase",
          "Tomorrow",
          "ToNumberField",
          "TooBig",
          "Tooltip",
          "TooltipBox",
          "TooltipBoxOptions",
          "TooltipDelay",
          "TooltipStyle",
          "ToonShading",
          "Top",
          "TopHatTransform",
          "ToPolarCoordinates",
          "TopologicalSort",
          "ToRadicals",
          "ToRawPointer",
          "ToRules",
          "Torus",
          "TorusGraph",
          "ToSphericalCoordinates",
          "ToString",
          "Total",
          "TotalHeight",
          "TotalLayer",
          "TotalVariationFilter",
          "TotalWidth",
          "TouchPosition",
          "TouchscreenAutoZoom",
          "TouchscreenControlPlacement",
          "ToUpperCase",
          "TourVideo",
          "Tr",
          "Trace",
          "TraceAbove",
          "TraceAction",
          "TraceBackward",
          "TraceDepth",
          "TraceDialog",
          "TraceForward",
          "TraceInternal",
          "TraceLevel",
          "TraceOff",
          "TraceOn",
          "TraceOriginal",
          "TracePrint",
          "TraceScan",
          "TrackCellChangeTimes",
          "TrackedSymbols",
          "TrackingFunction",
          "TracyWidomDistribution",
          "TradingChart",
          "TraditionalForm",
          "TraditionalFunctionNotation",
          "TraditionalNotation",
          "TraditionalOrder",
          "TrainImageContentDetector",
          "TrainingProgressCheckpointing",
          "TrainingProgressFunction",
          "TrainingProgressMeasurements",
          "TrainingProgressReporting",
          "TrainingStoppingCriterion",
          "TrainingUpdateSchedule",
          "TrainTextContentDetector",
          "TransferFunctionCancel",
          "TransferFunctionExpand",
          "TransferFunctionFactor",
          "TransferFunctionModel",
          "TransferFunctionPoles",
          "TransferFunctionTransform",
          "TransferFunctionZeros",
          "TransformationClass",
          "TransformationFunction",
          "TransformationFunctions",
          "TransformationMatrix",
          "TransformedDistribution",
          "TransformedField",
          "TransformedProcess",
          "TransformedRegion",
          "TransitionDirection",
          "TransitionDuration",
          "TransitionEffect",
          "TransitiveClosureGraph",
          "TransitiveReductionGraph",
          "Translate",
          "TranslationOptions",
          "TranslationTransform",
          "Transliterate",
          "Transparent",
          "TransparentColor",
          "Transpose",
          "TransposeLayer",
          "TrapEnterKey",
          "TrapSelection",
          "TravelDirections",
          "TravelDirectionsData",
          "TravelDistance",
          "TravelDistanceList",
          "TravelMethod",
          "TravelTime",
          "Tree",
          "TreeCases",
          "TreeChildren",
          "TreeCount",
          "TreeData",
          "TreeDelete",
          "TreeDepth",
          "TreeElementCoordinates",
          "TreeElementLabel",
          "TreeElementLabelFunction",
          "TreeElementLabelStyle",
          "TreeElementShape",
          "TreeElementShapeFunction",
          "TreeElementSize",
          "TreeElementSizeFunction",
          "TreeElementStyle",
          "TreeElementStyleFunction",
          "TreeExpression",
          "TreeExtract",
          "TreeFold",
          "TreeForm",
          "TreeGraph",
          "TreeGraphQ",
          "TreeInsert",
          "TreeLayout",
          "TreeLeafCount",
          "TreeLeafQ",
          "TreeLeaves",
          "TreeLevel",
          "TreeMap",
          "TreeMapAt",
          "TreeOutline",
          "TreePlot",
          "TreePosition",
          "TreeQ",
          "TreeReplacePart",
          "TreeRules",
          "TreeScan",
          "TreeSelect",
          "TreeSize",
          "TreeTraversalOrder",
          "TrendStyle",
          "Triangle",
          "TriangleCenter",
          "TriangleConstruct",
          "TriangleMeasurement",
          "TriangleWave",
          "TriangularDistribution",
          "TriangulateMesh",
          "Trig",
          "TrigExpand",
          "TrigFactor",
          "TrigFactorList",
          "Trigger",
          "TrigReduce",
          "TrigToExp",
          "TrimmedMean",
          "TrimmedVariance",
          "TropicalStormData",
          "True",
          "TrueQ",
          "TruncatedDistribution",
          "TruncatedPolyhedron",
          "TsallisQExponentialDistribution",
          "TsallisQGaussianDistribution",
          "TTest",
          "Tube",
          "TubeBezierCurveBox",
          "TubeBezierCurveBoxOptions",
          "TubeBox",
          "TubeBoxOptions",
          "TubeBSplineCurveBox",
          "TubeBSplineCurveBoxOptions",
          "Tuesday",
          "TukeyLambdaDistribution",
          "TukeyWindow",
          "TunnelData",
          "Tuples",
          "TuranGraph",
          "TuringMachine",
          "TuttePolynomial",
          "TwoWayRule",
          "Typed",
          "TypeDeclaration",
          "TypeEvaluate",
          "TypeHint",
          "TypeOf",
          "TypeSpecifier",
          "UnateQ",
          "Uncompress",
          "UnconstrainedParameters",
          "Undefined",
          "UnderBar",
          "Underflow",
          "Underlined",
          "Underoverscript",
          "UnderoverscriptBox",
          "UnderoverscriptBoxOptions",
          "Underscript",
          "UnderscriptBox",
          "UnderscriptBoxOptions",
          "UnderseaFeatureData",
          "UndirectedEdge",
          "UndirectedGraph",
          "UndirectedGraphQ",
          "UndoOptions",
          "UndoTrackedVariables",
          "Unequal",
          "UnequalTo",
          "Unevaluated",
          "UniformDistribution",
          "UniformGraphDistribution",
          "UniformPolyhedron",
          "UniformSumDistribution",
          "Uninstall",
          "Union",
          "UnionedEntityClass",
          "UnionPlus",
          "Unique",
          "UniqueElements",
          "UnitaryMatrixQ",
          "UnitBox",
          "UnitConvert",
          "UnitDimensions",
          "Unitize",
          "UnitRootTest",
          "UnitSimplify",
          "UnitStep",
          "UnitSystem",
          "UnitTriangle",
          "UnitVector",
          "UnitVectorLayer",
          "UnityDimensions",
          "UniverseModelData",
          "UniversityData",
          "UnixTime",
          "UnlabeledTree",
          "UnmanageObject",
          "Unprotect",
          "UnregisterExternalEvaluator",
          "UnsameQ",
          "UnsavedVariables",
          "Unset",
          "UnsetShared",
          "Until",
          "UntrackedVariables",
          "Up",
          "UpArrow",
          "UpArrowBar",
          "UpArrowDownArrow",
          "Update",
          "UpdateDynamicObjects",
          "UpdateDynamicObjectsSynchronous",
          "UpdateInterval",
          "UpdatePacletSites",
          "UpdateSearchIndex",
          "UpDownArrow",
          "UpEquilibrium",
          "UpperCaseQ",
          "UpperLeftArrow",
          "UpperRightArrow",
          "UpperTriangularize",
          "UpperTriangularMatrix",
          "UpperTriangularMatrixQ",
          "Upsample",
          "UpSet",
          "UpSetDelayed",
          "UpTee",
          "UpTeeArrow",
          "UpTo",
          "UpValues",
          "URL",
          "URLBuild",
          "URLDecode",
          "URLDispatcher",
          "URLDownload",
          "URLDownloadSubmit",
          "URLEncode",
          "URLExecute",
          "URLExpand",
          "URLFetch",
          "URLFetchAsynchronous",
          "URLParse",
          "URLQueryDecode",
          "URLQueryEncode",
          "URLRead",
          "URLResponseTime",
          "URLSave",
          "URLSaveAsynchronous",
          "URLShorten",
          "URLSubmit",
          "UseEmbeddedLibrary",
          "UseGraphicsRange",
          "UserDefinedWavelet",
          "Using",
          "UsingFrontEnd",
          "UtilityFunction",
          "V2Get",
          "ValenceErrorHandling",
          "ValenceFilling",
          "ValidationLength",
          "ValidationSet",
          "ValueBox",
          "ValueBoxOptions",
          "ValueDimensions",
          "ValueForm",
          "ValuePreprocessingFunction",
          "ValueQ",
          "Values",
          "ValuesData",
          "VandermondeMatrix",
          "Variables",
          "Variance",
          "VarianceEquivalenceTest",
          "VarianceEstimatorFunction",
          "VarianceGammaDistribution",
          "VarianceGammaPointProcess",
          "VarianceTest",
          "VariogramFunction",
          "VariogramModel",
          "VectorAngle",
          "VectorAround",
          "VectorAspectRatio",
          "VectorColorFunction",
          "VectorColorFunctionScaling",
          "VectorDensityPlot",
          "VectorDisplacementPlot",
          "VectorDisplacementPlot3D",
          "VectorGlyphData",
          "VectorGreater",
          "VectorGreaterEqual",
          "VectorLess",
          "VectorLessEqual",
          "VectorMarkers",
          "VectorPlot",
          "VectorPlot3D",
          "VectorPoints",
          "VectorQ",
          "VectorRange",
          "Vectors",
          "VectorScale",
          "VectorScaling",
          "VectorSizes",
          "VectorStyle",
          "Vee",
          "Verbatim",
          "Verbose",
          "VerificationTest",
          "VerifyConvergence",
          "VerifyDerivedKey",
          "VerifyDigitalSignature",
          "VerifyFileSignature",
          "VerifyInterpretation",
          "VerifySecurityCertificates",
          "VerifySolutions",
          "VerifyTestAssumptions",
          "VersionedPreferences",
          "VertexAdd",
          "VertexCapacity",
          "VertexChromaticNumber",
          "VertexColors",
          "VertexComponent",
          "VertexConnectivity",
          "VertexContract",
          "VertexCoordinateRules",
          "VertexCoordinates",
          "VertexCorrelationSimilarity",
          "VertexCosineSimilarity",
          "VertexCount",
          "VertexCoverQ",
          "VertexDataCoordinates",
          "VertexDegree",
          "VertexDelete",
          "VertexDiceSimilarity",
          "VertexEccentricity",
          "VertexInComponent",
          "VertexInComponentGraph",
          "VertexInDegree",
          "VertexIndex",
          "VertexJaccardSimilarity",
          "VertexLabeling",
          "VertexLabels",
          "VertexLabelStyle",
          "VertexList",
          "VertexNormals",
          "VertexOutComponent",
          "VertexOutComponentGraph",
          "VertexOutDegree",
          "VertexQ",
          "VertexRenderingFunction",
          "VertexReplace",
          "VertexShape",
          "VertexShapeFunction",
          "VertexSize",
          "VertexStyle",
          "VertexTextureCoordinates",
          "VertexTransitiveGraphQ",
          "VertexWeight",
          "VertexWeightedGraphQ",
          "Vertical",
          "VerticalBar",
          "VerticalForm",
          "VerticalGauge",
          "VerticalSeparator",
          "VerticalSlider",
          "VerticalTilde",
          "Video",
          "VideoCapture",
          "VideoCombine",
          "VideoDelete",
          "VideoEncoding",
          "VideoExtractFrames",
          "VideoFrameList",
          "VideoFrameMap",
          "VideoGenerator",
          "VideoInsert",
          "VideoIntervals",
          "VideoJoin",
          "VideoMap",
          "VideoMapList",
          "VideoMapTimeSeries",
          "VideoPadding",
          "VideoPause",
          "VideoPlay",
          "VideoQ",
          "VideoRecord",
          "VideoReplace",
          "VideoScreenCapture",
          "VideoSplit",
          "VideoStop",
          "VideoStream",
          "VideoStreams",
          "VideoTimeStretch",
          "VideoTrackSelection",
          "VideoTranscode",
          "VideoTransparency",
          "VideoTrim",
          "ViewAngle",
          "ViewCenter",
          "ViewMatrix",
          "ViewPoint",
          "ViewPointSelectorSettings",
          "ViewPort",
          "ViewProjection",
          "ViewRange",
          "ViewVector",
          "ViewVertical",
          "VirtualGroupData",
          "Visible",
          "VisibleCell",
          "VoiceStyleData",
          "VoigtDistribution",
          "VolcanoData",
          "Volume",
          "VonMisesDistribution",
          "VoronoiMesh",
          "WaitAll",
          "WaitAsynchronousTask",
          "WaitNext",
          "WaitUntil",
          "WakebyDistribution",
          "WalleniusHypergeometricDistribution",
          "WaringYuleDistribution",
          "WarpingCorrespondence",
          "WarpingDistance",
          "WatershedComponents",
          "WatsonUSquareTest",
          "WattsStrogatzGraphDistribution",
          "WaveletBestBasis",
          "WaveletFilterCoefficients",
          "WaveletImagePlot",
          "WaveletListPlot",
          "WaveletMapIndexed",
          "WaveletMatrixPlot",
          "WaveletPhi",
          "WaveletPsi",
          "WaveletScale",
          "WaveletScalogram",
          "WaveletThreshold",
          "WavePDEComponent",
          "WeaklyConnectedComponents",
          "WeaklyConnectedGraphComponents",
          "WeaklyConnectedGraphQ",
          "WeakStationarity",
          "WeatherData",
          "WeatherForecastData",
          "WebAudioSearch",
          "WebColumn",
          "WebElementObject",
          "WeberE",
          "WebExecute",
          "WebImage",
          "WebImageSearch",
          "WebItem",
          "WebPageMetaInformation",
          "WebRow",
          "WebSearch",
          "WebSessionObject",
          "WebSessions",
          "WebWindowObject",
          "Wedge",
          "Wednesday",
          "WeibullDistribution",
          "WeierstrassE1",
          "WeierstrassE2",
          "WeierstrassE3",
          "WeierstrassEta1",
          "WeierstrassEta2",
          "WeierstrassEta3",
          "WeierstrassHalfPeriods",
          "WeierstrassHalfPeriodW1",
          "WeierstrassHalfPeriodW2",
          "WeierstrassHalfPeriodW3",
          "WeierstrassInvariantG2",
          "WeierstrassInvariantG3",
          "WeierstrassInvariants",
          "WeierstrassP",
          "WeierstrassPPrime",
          "WeierstrassSigma",
          "WeierstrassZeta",
          "WeightedAdjacencyGraph",
          "WeightedAdjacencyMatrix",
          "WeightedData",
          "WeightedGraphQ",
          "Weights",
          "WelchWindow",
          "WheelGraph",
          "WhenEvent",
          "Which",
          "While",
          "White",
          "WhiteNoiseProcess",
          "WhitePoint",
          "Whitespace",
          "WhitespaceCharacter",
          "WhittakerM",
          "WhittakerW",
          "WholeCellGroupOpener",
          "WienerFilter",
          "WienerProcess",
          "WignerD",
          "WignerSemicircleDistribution",
          "WikidataData",
          "WikidataSearch",
          "WikipediaData",
          "WikipediaSearch",
          "WilksW",
          "WilksWTest",
          "WindDirectionData",
          "WindingCount",
          "WindingPolygon",
          "WindowClickSelect",
          "WindowElements",
          "WindowFloating",
          "WindowFrame",
          "WindowFrameElements",
          "WindowMargins",
          "WindowMovable",
          "WindowOpacity",
          "WindowPersistentStyles",
          "WindowSelected",
          "WindowSize",
          "WindowStatusArea",
          "WindowTitle",
          "WindowToolbars",
          "WindowWidth",
          "WindSpeedData",
          "WindVectorData",
          "WinsorizedMean",
          "WinsorizedVariance",
          "WishartMatrixDistribution",
          "With",
          "WithCleanup",
          "WithLock",
          "WolframAlpha",
          "WolframAlphaDate",
          "WolframAlphaQuantity",
          "WolframAlphaResult",
          "WolframCloudSettings",
          "WolframLanguageData",
          "Word",
          "WordBoundary",
          "WordCharacter",
          "WordCloud",
          "WordCount",
          "WordCounts",
          "WordData",
          "WordDefinition",
          "WordFrequency",
          "WordFrequencyData",
          "WordList",
          "WordOrientation",
          "WordSearch",
          "WordSelectionFunction",
          "WordSeparators",
          "WordSpacings",
          "WordStem",
          "WordTranslation",
          "WorkingPrecision",
          "WrapAround",
          "Write",
          "WriteLine",
          "WriteString",
          "Wronskian",
          "XMLElement",
          "XMLObject",
          "XMLTemplate",
          "Xnor",
          "Xor",
          "XYZColor",
          "Yellow",
          "Yesterday",
          "YuleDissimilarity",
          "ZernikeR",
          "ZeroSymmetric",
          "ZeroTest",
          "ZeroWidthTimes",
          "Zeta",
          "ZetaZero",
          "ZIPCodeData",
          "ZipfDistribution",
          "ZoomCenter",
          "ZoomFactor",
          "ZTest",
          "ZTransform",
          "$Aborted",
          "$ActivationGroupID",
          "$ActivationKey",
          "$ActivationUserRegistered",
          "$AddOnsDirectory",
          "$AllowDataUpdates",
          "$AllowExternalChannelFunctions",
          "$AllowInternet",
          "$AssertFunction",
          "$Assumptions",
          "$AsynchronousTask",
          "$AudioDecoders",
          "$AudioEncoders",
          "$AudioInputDevices",
          "$AudioOutputDevices",
          "$BaseDirectory",
          "$BasePacletsDirectory",
          "$BatchInput",
          "$BatchOutput",
          "$BlockchainBase",
          "$BoxForms",
          "$ByteOrdering",
          "$CacheBaseDirectory",
          "$Canceled",
          "$ChannelBase",
          "$CharacterEncoding",
          "$CharacterEncodings",
          "$CloudAccountName",
          "$CloudBase",
          "$CloudConnected",
          "$CloudConnection",
          "$CloudCreditsAvailable",
          "$CloudEvaluation",
          "$CloudExpressionBase",
          "$CloudObjectNameFormat",
          "$CloudObjectURLType",
          "$CloudRootDirectory",
          "$CloudSymbolBase",
          "$CloudUserID",
          "$CloudUserUUID",
          "$CloudVersion",
          "$CloudVersionNumber",
          "$CloudWolframEngineVersionNumber",
          "$CommandLine",
          "$CompilationTarget",
          "$CompilerEnvironment",
          "$ConditionHold",
          "$ConfiguredKernels",
          "$Context",
          "$ContextAliases",
          "$ContextPath",
          "$ControlActiveSetting",
          "$Cookies",
          "$CookieStore",
          "$CreationDate",
          "$CryptographicEllipticCurveNames",
          "$CurrentLink",
          "$CurrentTask",
          "$CurrentWebSession",
          "$DataStructures",
          "$DateStringFormat",
          "$DefaultAudioInputDevice",
          "$DefaultAudioOutputDevice",
          "$DefaultFont",
          "$DefaultFrontEnd",
          "$DefaultImagingDevice",
          "$DefaultKernels",
          "$DefaultLocalBase",
          "$DefaultLocalKernel",
          "$DefaultMailbox",
          "$DefaultNetworkInterface",
          "$DefaultPath",
          "$DefaultProxyRules",
          "$DefaultRemoteBatchSubmissionEnvironment",
          "$DefaultRemoteKernel",
          "$DefaultSystemCredentialStore",
          "$Display",
          "$DisplayFunction",
          "$DistributedContexts",
          "$DynamicEvaluation",
          "$Echo",
          "$EmbedCodeEnvironments",
          "$EmbeddableServices",
          "$EntityStores",
          "$Epilog",
          "$EvaluationCloudBase",
          "$EvaluationCloudObject",
          "$EvaluationEnvironment",
          "$ExportFormats",
          "$ExternalIdentifierTypes",
          "$ExternalStorageBase",
          "$Failed",
          "$FinancialDataSource",
          "$FontFamilies",
          "$FormatType",
          "$FrontEnd",
          "$FrontEndSession",
          "$GeneratedAssetLocation",
          "$GeoEntityTypes",
          "$GeoLocation",
          "$GeoLocationCity",
          "$GeoLocationCountry",
          "$GeoLocationPrecision",
          "$GeoLocationSource",
          "$HistoryLength",
          "$HomeDirectory",
          "$HTMLExportRules",
          "$HTTPCookies",
          "$HTTPRequest",
          "$IgnoreEOF",
          "$ImageFormattingWidth",
          "$ImageResolution",
          "$ImagingDevice",
          "$ImagingDevices",
          "$ImportFormats",
          "$IncomingMailSettings",
          "$InitialDirectory",
          "$Initialization",
          "$InitializationContexts",
          "$Input",
          "$InputFileName",
          "$InputStreamMethods",
          "$Inspector",
          "$InstallationDate",
          "$InstallationDirectory",
          "$InterfaceEnvironment",
          "$InterpreterTypes",
          "$IterationLimit",
          "$KernelCount",
          "$KernelID",
          "$Language",
          "$LaunchDirectory",
          "$LibraryPath",
          "$LicenseExpirationDate",
          "$LicenseID",
          "$LicenseProcesses",
          "$LicenseServer",
          "$LicenseSubprocesses",
          "$LicenseType",
          "$Line",
          "$Linked",
          "$LinkSupported",
          "$LoadedFiles",
          "$LocalBase",
          "$LocalSymbolBase",
          "$MachineAddresses",
          "$MachineDomain",
          "$MachineDomains",
          "$MachineEpsilon",
          "$MachineID",
          "$MachineName",
          "$MachinePrecision",
          "$MachineType",
          "$MaxDisplayedChildren",
          "$MaxExtraPrecision",
          "$MaxLicenseProcesses",
          "$MaxLicenseSubprocesses",
          "$MaxMachineNumber",
          "$MaxNumber",
          "$MaxPiecewiseCases",
          "$MaxPrecision",
          "$MaxRootDegree",
          "$MessageGroups",
          "$MessageList",
          "$MessagePrePrint",
          "$Messages",
          "$MinMachineNumber",
          "$MinNumber",
          "$MinorReleaseNumber",
          "$MinPrecision",
          "$MobilePhone",
          "$ModuleNumber",
          "$NetworkConnected",
          "$NetworkInterfaces",
          "$NetworkLicense",
          "$NewMessage",
          "$NewSymbol",
          "$NotebookInlineStorageLimit",
          "$Notebooks",
          "$NoValue",
          "$NumberMarks",
          "$Off",
          "$OperatingSystem",
          "$Output",
          "$OutputForms",
          "$OutputSizeLimit",
          "$OutputStreamMethods",
          "$Packages",
          "$ParentLink",
          "$ParentProcessID",
          "$PasswordFile",
          "$PatchLevelID",
          "$Path",
          "$PathnameSeparator",
          "$PerformanceGoal",
          "$Permissions",
          "$PermissionsGroupBase",
          "$PersistenceBase",
          "$PersistencePath",
          "$PipeSupported",
          "$PlotTheme",
          "$Post",
          "$Pre",
          "$PreferencesDirectory",
          "$PreInitialization",
          "$PrePrint",
          "$PreRead",
          "$PrintForms",
          "$PrintLiteral",
          "$Printout3DPreviewer",
          "$ProcessID",
          "$ProcessorCount",
          "$ProcessorType",
          "$ProductInformation",
          "$ProgramName",
          "$ProgressReporting",
          "$PublisherID",
          "$RandomGeneratorState",
          "$RandomState",
          "$RecursionLimit",
          "$RegisteredDeviceClasses",
          "$RegisteredUserName",
          "$ReleaseNumber",
          "$RequesterAddress",
          "$RequesterCloudUserID",
          "$RequesterCloudUserUUID",
          "$RequesterWolframID",
          "$RequesterWolframUUID",
          "$ResourceSystemBase",
          "$ResourceSystemPath",
          "$RootDirectory",
          "$ScheduledTask",
          "$ScriptCommandLine",
          "$ScriptInputString",
          "$SecuredAuthenticationKeyTokens",
          "$ServiceCreditsAvailable",
          "$Services",
          "$SessionID",
          "$SetParentLink",
          "$SharedFunctions",
          "$SharedVariables",
          "$SoundDisplay",
          "$SoundDisplayFunction",
          "$SourceLink",
          "$SSHAuthentication",
          "$SubtitleDecoders",
          "$SubtitleEncoders",
          "$SummaryBoxDataSizeLimit",
          "$SuppressInputFormHeads",
          "$SynchronousEvaluation",
          "$SyntaxHandler",
          "$System",
          "$SystemCharacterEncoding",
          "$SystemCredentialStore",
          "$SystemID",
          "$SystemMemory",
          "$SystemShell",
          "$SystemTimeZone",
          "$SystemWordLength",
          "$TargetSystems",
          "$TemplatePath",
          "$TemporaryDirectory",
          "$TemporaryPrefix",
          "$TestFileName",
          "$TextStyle",
          "$TimedOut",
          "$TimeUnit",
          "$TimeZone",
          "$TimeZoneEntity",
          "$TopDirectory",
          "$TraceOff",
          "$TraceOn",
          "$TracePattern",
          "$TracePostAction",
          "$TracePreAction",
          "$UnitSystem",
          "$Urgent",
          "$UserAddOnsDirectory",
          "$UserAgentLanguages",
          "$UserAgentMachine",
          "$UserAgentName",
          "$UserAgentOperatingSystem",
          "$UserAgentString",
          "$UserAgentVersion",
          "$UserBaseDirectory",
          "$UserBasePacletsDirectory",
          "$UserDocumentsDirectory",
          "$Username",
          "$UserName",
          "$UserURLBase",
          "$Version",
          "$VersionNumber",
          "$VideoDecoders",
          "$VideoEncoders",
          "$VoiceStyles",
          "$WolframDocumentsDirectory",
          "$WolframID",
          "$WolframUUID"
        ];
 
        /*
        Language: Wolfram Language
        Description: The Wolfram Language is the programming language used in Wolfram Mathematica, a modern technical computing system spanning most areas of technical computing.
        Authors: Patrick Scheibe <patrick@halirutan.de>, Robert Jacobson <robertjacobson@acm.org>
        Website: https://www.wolfram.com/mathematica/
        Category: scientific
        */
 
        /** @type LanguageFn */
        function mathematica(hljs) {
          const regex = hljs.regex;
          /*
          This rather scary looking matching of Mathematica numbers is carefully explained by Robert Jacobson here:
          https://wltools.github.io/LanguageSpec/Specification/Syntax/Number-representations/
           */
          const BASE_RE = /([2-9]|[1-2]\d|[3][0-5])\^\^/;
          const BASE_DIGITS_RE = /(\w*\.\w+|\w+\.\w*|\w+)/;
          const NUMBER_RE = /(\d*\.\d+|\d+\.\d*|\d+)/;
          const BASE_NUMBER_RE = regex.either(regex.concat(BASE_RE, BASE_DIGITS_RE), NUMBER_RE);
 
          const ACCURACY_RE = /``[+-]?(\d*\.\d+|\d+\.\d*|\d+)/;
          const PRECISION_RE = /`([+-]?(\d*\.\d+|\d+\.\d*|\d+))?/;
          const APPROXIMATE_NUMBER_RE = regex.either(ACCURACY_RE, PRECISION_RE);
 
          const SCIENTIFIC_NOTATION_RE = /\*\^[+-]?\d+/;
 
          const MATHEMATICA_NUMBER_RE = regex.concat(
            BASE_NUMBER_RE,
            regex.optional(APPROXIMATE_NUMBER_RE),
            regex.optional(SCIENTIFIC_NOTATION_RE)
          );
 
          const NUMBERS = {
            className: 'number',
            relevance: 0,
            begin: MATHEMATICA_NUMBER_RE
          };
 
          const SYMBOL_RE = /[a-zA-Z$][a-zA-Z0-9$]*/;
          const SYSTEM_SYMBOLS_SET = new Set(SYSTEM_SYMBOLS);
          /** @type {Mode} */
          const SYMBOLS = { variants: [
            {
              className: 'builtin-symbol',
              begin: SYMBOL_RE,
              // for performance out of fear of regex.either(...Mathematica.SYSTEM_SYMBOLS)
              "on:begin": (match, response) => {
                if (!SYSTEM_SYMBOLS_SET.has(match[0])) response.ignoreMatch();
              }
            },
            {
              className: 'symbol',
              relevance: 0,
              begin: SYMBOL_RE
            }
          ] };
 
          const NAMED_CHARACTER = {
            className: 'named-character',
            begin: /\\\[[$a-zA-Z][$a-zA-Z0-9]+\]/
          };
 
          const OPERATORS = {
            className: 'operator',
            relevance: 0,
            begin: /[+\-*/,;.:@~=><&|_`'^?!%]+/
          };
          const PATTERNS = {
            className: 'pattern',
            relevance: 0,
            begin: /([a-zA-Z$][a-zA-Z0-9$]*)?_+([a-zA-Z$][a-zA-Z0-9$]*)?/
          };
 
          const SLOTS = {
            className: 'slot',
            relevance: 0,
            begin: /#[a-zA-Z$][a-zA-Z0-9$]*|#+[0-9]?/
          };
 
          const BRACES = {
            className: 'brace',
            relevance: 0,
            begin: /[[\](){}]/
          };
 
          const MESSAGES = {
            className: 'message-name',
            relevance: 0,
            begin: regex.concat("::", SYMBOL_RE)
          };
 
          return {
            name: 'Mathematica',
            aliases: [
              'mma',
              'wl'
            ],
            classNameAliases: {
              brace: 'punctuation',
              pattern: 'type',
              slot: 'type',
              symbol: 'variable',
              'named-character': 'variable',
              'builtin-symbol': 'built_in',
              'message-name': 'string'
            },
            contains: [
              hljs.COMMENT(/\(\*/, /\*\)/, { contains: [ 'self' ] }),
              PATTERNS,
              SLOTS,
              MESSAGES,
              SYMBOLS,
              NAMED_CHARACTER,
              hljs.QUOTE_STRING_MODE,
              NUMBERS,
              OPERATORS,
              BRACES
            ]
          };
        }
 
        mathematica_1 = mathematica;
        return mathematica_1;
    }
 
    /*
    Language: Matlab
    Author: Denis Bardadym <bardadymchik@gmail.com>
    Contributors: Eugene Nizhibitsky <nizhibitsky@ya.ru>, Egor Rogov <e.rogov@postgrespro.ru>
    Website: https://www.mathworks.com/products/matlab.html
    Category: scientific
    */
 
    var matlab_1;
    var hasRequiredMatlab;
 
    function requireMatlab () {
        if (hasRequiredMatlab) return matlab_1;
        hasRequiredMatlab = 1;
        /*
          Formal syntax is not published, helpful link:
          https://github.com/kornilova-l/matlab-IntelliJ-plugin/blob/master/src/main/grammar/Matlab.bnf
        */
        function matlab(hljs) {
          const TRANSPOSE_RE = '(\'|\\.\')+';
          const TRANSPOSE = {
            relevance: 0,
            contains: [ { begin: TRANSPOSE_RE } ]
          };
 
          return {
            name: 'Matlab',
            keywords: {
              keyword:
                'arguments break case catch classdef continue else elseif end enumeration events for function '
                + 'global if methods otherwise parfor persistent properties return spmd switch try while',
              built_in:
                'sin sind sinh asin asind asinh cos cosd cosh acos acosd acosh tan tand tanh atan '
                + 'atand atan2 atanh sec secd sech asec asecd asech csc cscd csch acsc acscd acsch cot '
                + 'cotd coth acot acotd acoth hypot exp expm1 log log1p log10 log2 pow2 realpow reallog '
                + 'realsqrt sqrt nthroot nextpow2 abs angle complex conj imag real unwrap isreal '
                + 'cplxpair fix floor ceil round mod rem sign airy besselj bessely besselh besseli '
                + 'besselk beta betainc betaln ellipj ellipke erf erfc erfcx erfinv expint gamma '
                + 'gammainc gammaln psi legendre cross dot factor isprime primes gcd lcm rat rats perms '
                + 'nchoosek factorial cart2sph cart2pol pol2cart sph2cart hsv2rgb rgb2hsv zeros ones '
                + 'eye repmat rand randn linspace logspace freqspace meshgrid accumarray size length '
                + 'ndims numel disp isempty isequal isequalwithequalnans cat reshape diag blkdiag tril '
                + 'triu fliplr flipud flipdim rot90 find sub2ind ind2sub bsxfun ndgrid permute ipermute '
                + 'shiftdim circshift squeeze isscalar isvector ans eps realmax realmin pi i|0 inf nan '
                + 'isnan isinf isfinite j|0 why compan gallery hadamard hankel hilb invhilb magic pascal '
                + 'rosser toeplitz vander wilkinson max min nanmax nanmin mean nanmean type table '
                + 'readtable writetable sortrows sort figure plot plot3 scatter scatter3 cellfun '
                + 'legend intersect ismember procrustes hold num2cell '
            },
            illegal: '(//|"|#|/\\*|\\s+/\\w+)',
            contains: [
              {
                className: 'function',
                beginKeywords: 'function',
                end: '$',
                contains: [
                  hljs.UNDERSCORE_TITLE_MODE,
                  {
                    className: 'params',
                    variants: [
                      {
                        begin: '\\(',
                        end: '\\)'
                      },
                      {
                        begin: '\\[',
                        end: '\\]'
                      }
                    ]
                  }
                ]
              },
              {
                className: 'built_in',
                begin: /true|false/,
                relevance: 0,
                starts: TRANSPOSE
              },
              {
                begin: '[a-zA-Z][a-zA-Z_0-9]*' + TRANSPOSE_RE,
                relevance: 0
              },
              {
                className: 'number',
                begin: hljs.C_NUMBER_RE,
                relevance: 0,
                starts: TRANSPOSE
              },
              {
                className: 'string',
                begin: '\'',
                end: '\'',
                contains: [ { begin: '\'\'' } ]
              },
              {
                begin: /\]|\}|\)/,
                relevance: 0,
                starts: TRANSPOSE
              },
              {
                className: 'string',
                begin: '"',
                end: '"',
                contains: [ { begin: '""' } ],
                starts: TRANSPOSE
              },
              hljs.COMMENT('^\\s*%\\{\\s*$', '^\\s*%\\}\\s*$'),
              hljs.COMMENT('%', '$')
            ]
          };
        }
 
        matlab_1 = matlab;
        return matlab_1;
    }
 
    /*
    Language: Maxima
    Author: Robert Dodier <robert.dodier@gmail.com>
    Website: http://maxima.sourceforge.net
    Category: scientific
    */
 
    var maxima_1;
    var hasRequiredMaxima;
 
    function requireMaxima () {
        if (hasRequiredMaxima) return maxima_1;
        hasRequiredMaxima = 1;
        function maxima(hljs) {
          const KEYWORDS =
            'if then else elseif for thru do while unless step in and or not';
          const LITERALS =
            'true false unknown inf minf ind und %e %i %pi %phi %gamma';
          const BUILTIN_FUNCTIONS =
            ' abasep abs absint absolute_real_time acos acosh acot acoth acsc acsch activate'
            + ' addcol add_edge add_edges addmatrices addrow add_vertex add_vertices adjacency_matrix'
            + ' adjoin adjoint af agd airy airy_ai airy_bi airy_dai airy_dbi algsys alg_type'
            + ' alias allroots alphacharp alphanumericp amortization %and annuity_fv'
            + ' annuity_pv antid antidiff AntiDifference append appendfile apply apply1 apply2'
            + ' applyb1 apropos args arit_amortization arithmetic arithsum array arrayapply'
            + ' arrayinfo arraymake arraysetapply ascii asec asech asin asinh askinteger'
            + ' asksign assoc assoc_legendre_p assoc_legendre_q assume assume_external_byte_order'
            + ' asympa at atan atan2 atanh atensimp atom atvalue augcoefmatrix augmented_lagrangian_method'
            + ' av average_degree backtrace bars barsplot barsplot_description base64 base64_decode'
            + ' bashindices batch batchload bc2 bdvac belln benefit_cost bern bernpoly bernstein_approx'
            + ' bernstein_expand bernstein_poly bessel bessel_i bessel_j bessel_k bessel_simplify'
            + ' bessel_y beta beta_incomplete beta_incomplete_generalized beta_incomplete_regularized'
            + ' bezout bfallroots bffac bf_find_root bf_fmin_cobyla bfhzeta bfloat bfloatp'
            + ' bfpsi bfpsi0 bfzeta biconnected_components bimetric binomial bipartition'
            + ' block blockmatrixp bode_gain bode_phase bothcoef box boxplot boxplot_description'
            + ' break bug_report build_info|10 buildq build_sample burn cabs canform canten'
            + ' cardinality carg cartan cartesian_product catch cauchy_matrix cbffac cdf_bernoulli'
            + ' cdf_beta cdf_binomial cdf_cauchy cdf_chi2 cdf_continuous_uniform cdf_discrete_uniform'
            + ' cdf_exp cdf_f cdf_gamma cdf_general_finite_discrete cdf_geometric cdf_gumbel'
            + ' cdf_hypergeometric cdf_laplace cdf_logistic cdf_lognormal cdf_negative_binomial'
            + ' cdf_noncentral_chi2 cdf_noncentral_student_t cdf_normal cdf_pareto cdf_poisson'
            + ' cdf_rank_sum cdf_rayleigh cdf_signed_rank cdf_student_t cdf_weibull cdisplay'
            + ' ceiling central_moment cequal cequalignore cf cfdisrep cfexpand cgeodesic'
            + ' cgreaterp cgreaterpignore changename changevar chaosgame charat charfun charfun2'
            + ' charlist charp charpoly chdir chebyshev_t chebyshev_u checkdiv check_overlaps'
            + ' chinese cholesky christof chromatic_index chromatic_number cint circulant_graph'
            + ' clear_edge_weight clear_rules clear_vertex_label clebsch_gordan clebsch_graph'
            + ' clessp clesspignore close closefile cmetric coeff coefmatrix cograd col collapse'
            + ' collectterms columnop columnspace columnswap columnvector combination combine'
            + ' comp2pui compare compfile compile compile_file complement_graph complete_bipartite_graph'
            + ' complete_graph complex_number_p components compose_functions concan concat'
            + ' conjugate conmetderiv connected_components connect_vertices cons constant'
            + ' constantp constituent constvalue cont2part content continuous_freq contortion'
            + ' contour_plot contract contract_edge contragrad contrib_ode convert coord'
            + ' copy copy_file copy_graph copylist copymatrix cor cos cosh cot coth cov cov1'
            + ' covdiff covect covers crc24sum create_graph create_list csc csch csetup cspline'
            + ' ctaylor ct_coordsys ctransform ctranspose cube_graph cuboctahedron_graph'
            + ' cunlisp cv cycle_digraph cycle_graph cylindrical days360 dblint deactivate'
            + ' declare declare_constvalue declare_dimensions declare_fundamental_dimensions'
            + ' declare_fundamental_units declare_qty declare_translated declare_unit_conversion'
            + ' declare_units declare_weights decsym defcon define define_alt_display define_variable'
            + ' defint defmatch defrule defstruct deftaylor degree_sequence del delete deleten'
            + ' delta demo demoivre denom depends derivdegree derivlist describe desolve'
            + ' determinant dfloat dgauss_a dgauss_b dgeev dgemm dgeqrf dgesv dgesvd diag'
            + ' diagmatrix diag_matrix diagmatrixp diameter diff digitcharp dimacs_export'
            + ' dimacs_import dimension dimensionless dimensions dimensions_as_list direct'
            + ' directory discrete_freq disjoin disjointp disolate disp dispcon dispform'
            + ' dispfun dispJordan display disprule dispterms distrib divide divisors divsum'
            + ' dkummer_m dkummer_u dlange dodecahedron_graph dotproduct dotsimp dpart'
            + ' draw draw2d draw3d drawdf draw_file draw_graph dscalar echelon edge_coloring'
            + ' edge_connectivity edges eigens_by_jacobi eigenvalues eigenvectors eighth'
            + ' einstein eivals eivects elapsed_real_time elapsed_run_time ele2comp ele2polynome'
            + ' ele2pui elem elementp elevation_grid elim elim_allbut eliminate eliminate_using'
            + ' ellipse elliptic_e elliptic_ec elliptic_eu elliptic_f elliptic_kc elliptic_pi'
            + ' ematrix empty_graph emptyp endcons entermatrix entertensor entier equal equalp'
            + ' equiv_classes erf erfc erf_generalized erfi errcatch error errormsg errors'
            + ' euler ev eval_string evenp every evolution evolution2d evundiff example exp'
            + ' expand expandwrt expandwrt_factored expint expintegral_chi expintegral_ci'
            + ' expintegral_e expintegral_e1 expintegral_ei expintegral_e_simplify expintegral_li'
            + ' expintegral_shi expintegral_si explicit explose exponentialize express expt'
            + ' exsec extdiff extract_linear_equations extremal_subset ezgcd %f f90 facsum'
            + ' factcomb factor factorfacsum factorial factorout factorsum facts fast_central_elements'
            + ' fast_linsolve fasttimes featurep fernfale fft fib fibtophi fifth filename_merge'
            + ' file_search file_type fillarray findde find_root find_root_abs find_root_error'
            + ' find_root_rel first fix flatten flength float floatnump floor flower_snark'
            + ' flush flush1deriv flushd flushnd flush_output fmin_cobyla forget fortran'
            + ' fourcos fourexpand fourier fourier_elim fourint fourintcos fourintsin foursimp'
            + ' foursin fourth fposition frame_bracket freeof freshline fresnel_c fresnel_s'
            + ' from_adjacency_matrix frucht_graph full_listify fullmap fullmapl fullratsimp'
            + ' fullratsubst fullsetify funcsolve fundamental_dimensions fundamental_units'
            + ' fundef funmake funp fv g0 g1 gamma gamma_greek gamma_incomplete gamma_incomplete_generalized'
            + ' gamma_incomplete_regularized gauss gauss_a gauss_b gaussprob gcd gcdex gcdivide'
            + ' gcfac gcfactor gd generalized_lambert_w genfact gen_laguerre genmatrix gensym'
            + ' geo_amortization geo_annuity_fv geo_annuity_pv geomap geometric geometric_mean'
            + ' geosum get getcurrentdirectory get_edge_weight getenv get_lu_factors get_output_stream_string'
            + ' get_pixel get_plot_option get_tex_environment get_tex_environment_default'
            + ' get_vertex_label gfactor gfactorsum ggf girth global_variances gn gnuplot_close'
            + ' gnuplot_replot gnuplot_reset gnuplot_restart gnuplot_start go Gosper GosperSum'
            + ' gr2d gr3d gradef gramschmidt graph6_decode graph6_encode graph6_export graph6_import'
            + ' graph_center graph_charpoly graph_eigenvalues graph_flow graph_order graph_periphery'
            + ' graph_product graph_size graph_union great_rhombicosidodecahedron_graph great_rhombicuboctahedron_graph'
            + ' grid_graph grind grobner_basis grotzch_graph hamilton_cycle hamilton_path'
            + ' hankel hankel_1 hankel_2 harmonic harmonic_mean hav heawood_graph hermite'
            + ' hessian hgfred hilbertmap hilbert_matrix hipow histogram histogram_description'
            + ' hodge horner hypergeometric i0 i1 %ibes ic1 ic2 ic_convert ichr1 ichr2 icosahedron_graph'
            + ' icosidodecahedron_graph icurvature ident identfor identity idiff idim idummy'
            + ' ieqn %if ifactors iframes ifs igcdex igeodesic_coords ilt image imagpart'
            + ' imetric implicit implicit_derivative implicit_plot indexed_tensor indices'
            + ' induced_subgraph inferencep inference_result infix info_display init_atensor'
            + ' init_ctensor in_neighbors innerproduct inpart inprod inrt integerp integer_partitions'
            + ' integrate intersect intersection intervalp intopois intosum invariant1 invariant2'
            + ' inverse_fft inverse_jacobi_cd inverse_jacobi_cn inverse_jacobi_cs inverse_jacobi_dc'
            + ' inverse_jacobi_dn inverse_jacobi_ds inverse_jacobi_nc inverse_jacobi_nd inverse_jacobi_ns'
            + ' inverse_jacobi_sc inverse_jacobi_sd inverse_jacobi_sn invert invert_by_adjoint'
            + ' invert_by_lu inv_mod irr is is_biconnected is_bipartite is_connected is_digraph'
            + ' is_edge_in_graph is_graph is_graph_or_digraph ishow is_isomorphic isolate'
            + ' isomorphism is_planar isqrt isreal_p is_sconnected is_tree is_vertex_in_graph'
            + ' items_inference %j j0 j1 jacobi jacobian jacobi_cd jacobi_cn jacobi_cs jacobi_dc'
            + ' jacobi_dn jacobi_ds jacobi_nc jacobi_nd jacobi_ns jacobi_p jacobi_sc jacobi_sd'
            + ' jacobi_sn JF jn join jordan julia julia_set julia_sin %k kdels kdelta kill'
            + ' killcontext kostka kron_delta kronecker_product kummer_m kummer_u kurtosis'
            + ' kurtosis_bernoulli kurtosis_beta kurtosis_binomial kurtosis_chi2 kurtosis_continuous_uniform'
            + ' kurtosis_discrete_uniform kurtosis_exp kurtosis_f kurtosis_gamma kurtosis_general_finite_discrete'
            + ' kurtosis_geometric kurtosis_gumbel kurtosis_hypergeometric kurtosis_laplace'
            + ' kurtosis_logistic kurtosis_lognormal kurtosis_negative_binomial kurtosis_noncentral_chi2'
            + ' kurtosis_noncentral_student_t kurtosis_normal kurtosis_pareto kurtosis_poisson'
            + ' kurtosis_rayleigh kurtosis_student_t kurtosis_weibull label labels lagrange'
            + ' laguerre lambda lambert_w laplace laplacian_matrix last lbfgs lc2kdt lcharp'
            + ' lc_l lcm lc_u ldefint ldisp ldisplay legendre_p legendre_q leinstein length'
            + ' let letrules letsimp levi_civita lfreeof lgtreillis lhs li liediff limit'
            + ' Lindstedt linear linearinterpol linear_program linear_regression line_graph'
            + ' linsolve listarray list_correlations listify list_matrix_entries list_nc_monomials'
            + ' listoftens listofvars listp lmax lmin load loadfile local locate_matrix_entry'
            + ' log logcontract log_gamma lopow lorentz_gauge lowercasep lpart lratsubst'
            + ' lreduce lriemann lsquares_estimates lsquares_estimates_approximate lsquares_estimates_exact'
            + ' lsquares_mse lsquares_residual_mse lsquares_residuals lsum ltreillis lu_backsub'
            + ' lucas lu_factor %m macroexpand macroexpand1 make_array makebox makefact makegamma'
            + ' make_graph make_level_picture makelist makeOrders make_poly_continent make_poly_country'
            + ' make_polygon make_random_state make_rgb_picture makeset make_string_input_stream'
            + ' make_string_output_stream make_transform mandelbrot mandelbrot_set map mapatom'
            + ' maplist matchdeclare matchfix mat_cond mat_fullunblocker mat_function mathml_display'
            + ' mat_norm matrix matrixmap matrixp matrix_size mattrace mat_trace mat_unblocker'
            + ' max max_clique max_degree max_flow maximize_lp max_independent_set max_matching'
            + ' maybe md5sum mean mean_bernoulli mean_beta mean_binomial mean_chi2 mean_continuous_uniform'
            + ' mean_deviation mean_discrete_uniform mean_exp mean_f mean_gamma mean_general_finite_discrete'
            + ' mean_geometric mean_gumbel mean_hypergeometric mean_laplace mean_logistic'
            + ' mean_lognormal mean_negative_binomial mean_noncentral_chi2 mean_noncentral_student_t'
            + ' mean_normal mean_pareto mean_poisson mean_rayleigh mean_student_t mean_weibull'
            + ' median median_deviation member mesh metricexpandall mgf1_sha1 min min_degree'
            + ' min_edge_cut minfactorial minimalPoly minimize_lp minimum_spanning_tree minor'
            + ' minpack_lsquares minpack_solve min_vertex_cover min_vertex_cut mkdir mnewton'
            + ' mod mode_declare mode_identity ModeMatrix moebius mon2schur mono monomial_dimensions'
            + ' multibernstein_poly multi_display_for_texinfo multi_elem multinomial multinomial_coeff'
            + ' multi_orbit multiplot_mode multi_pui multsym multthru mycielski_graph nary'
            + ' natural_unit nc_degree ncexpt ncharpoly negative_picture neighbors new newcontext'
            + ' newdet new_graph newline newton new_variable next_prime nicedummies niceindices'
            + ' ninth nofix nonarray noncentral_moment nonmetricity nonnegintegerp nonscalarp'
            + ' nonzeroandfreeof notequal nounify nptetrad npv nroots nterms ntermst'
            + ' nthroot nullity nullspace num numbered_boundaries numberp number_to_octets'
            + ' num_distinct_partitions numerval numfactor num_partitions nusum nzeta nzetai'
            + ' nzetar octets_to_number octets_to_oid odd_girth oddp ode2 ode_check odelin'
            + ' oid_to_octets op opena opena_binary openr openr_binary openw openw_binary'
            + ' operatorp opsubst optimize %or orbit orbits ordergreat ordergreatp orderless'
            + ' orderlessp orthogonal_complement orthopoly_recur orthopoly_weight outermap'
            + ' out_neighbors outofpois pade parabolic_cylinder_d parametric parametric_surface'
            + ' parg parGosper parse_string parse_timedate part part2cont partfrac partition'
            + ' partition_set partpol path_digraph path_graph pathname_directory pathname_name'
            + ' pathname_type pdf_bernoulli pdf_beta pdf_binomial pdf_cauchy pdf_chi2 pdf_continuous_uniform'
            + ' pdf_discrete_uniform pdf_exp pdf_f pdf_gamma pdf_general_finite_discrete'
            + ' pdf_geometric pdf_gumbel pdf_hypergeometric pdf_laplace pdf_logistic pdf_lognormal'
            + ' pdf_negative_binomial pdf_noncentral_chi2 pdf_noncentral_student_t pdf_normal'
            + ' pdf_pareto pdf_poisson pdf_rank_sum pdf_rayleigh pdf_signed_rank pdf_student_t'
            + ' pdf_weibull pearson_skewness permanent permut permutation permutations petersen_graph'
            + ' petrov pickapart picture_equalp picturep piechart piechart_description planar_embedding'
            + ' playback plog plot2d plot3d plotdf ploteq plsquares pochhammer points poisdiff'
            + ' poisexpt poisint poismap poisplus poissimp poissubst poistimes poistrim polar'
            + ' polarform polartorect polar_to_xy poly_add poly_buchberger poly_buchberger_criterion'
            + ' poly_colon_ideal poly_content polydecomp poly_depends_p poly_elimination_ideal'
            + ' poly_exact_divide poly_expand poly_expt poly_gcd polygon poly_grobner poly_grobner_equal'
            + ' poly_grobner_member poly_grobner_subsetp poly_ideal_intersection poly_ideal_polysaturation'
            + ' poly_ideal_polysaturation1 poly_ideal_saturation poly_ideal_saturation1 poly_lcm'
            + ' poly_minimization polymod poly_multiply polynome2ele polynomialp poly_normal_form'
            + ' poly_normalize poly_normalize_list poly_polysaturation_extension poly_primitive_part'
            + ' poly_pseudo_divide poly_reduced_grobner poly_reduction poly_saturation_extension'
            + ' poly_s_polynomial poly_subtract polytocompanion pop postfix potential power_mod'
            + ' powerseries powerset prefix prev_prime primep primes principal_components'
            + ' print printf printfile print_graph printpois printprops prodrac product properties'
            + ' propvars psi psubst ptriangularize pui pui2comp pui2ele pui2polynome pui_direct'
            + ' puireduc push put pv qput qrange qty quad_control quad_qag quad_qagi quad_qagp'
            + ' quad_qags quad_qawc quad_qawf quad_qawo quad_qaws quadrilateral quantile'
            + ' quantile_bernoulli quantile_beta quantile_binomial quantile_cauchy quantile_chi2'
            + ' quantile_continuous_uniform quantile_discrete_uniform quantile_exp quantile_f'
            + ' quantile_gamma quantile_general_finite_discrete quantile_geometric quantile_gumbel'
            + ' quantile_hypergeometric quantile_laplace quantile_logistic quantile_lognormal'
            + ' quantile_negative_binomial quantile_noncentral_chi2 quantile_noncentral_student_t'
            + ' quantile_normal quantile_pareto quantile_poisson quantile_rayleigh quantile_student_t'
            + ' quantile_weibull quartile_skewness quit qunit quotient racah_v racah_w radcan'
            + ' radius random random_bernoulli random_beta random_binomial random_bipartite_graph'
            + ' random_cauchy random_chi2 random_continuous_uniform random_digraph random_discrete_uniform'
            + ' random_exp random_f random_gamma random_general_finite_discrete random_geometric'
            + ' random_graph random_graph1 random_gumbel random_hypergeometric random_laplace'
            + ' random_logistic random_lognormal random_negative_binomial random_network'
            + ' random_noncentral_chi2 random_noncentral_student_t random_normal random_pareto'
            + ' random_permutation random_poisson random_rayleigh random_regular_graph random_student_t'
            + ' random_tournament random_tree random_weibull range rank rat ratcoef ratdenom'
            + ' ratdiff ratdisrep ratexpand ratinterpol rational rationalize ratnumer ratnump'
            + ' ratp ratsimp ratsubst ratvars ratweight read read_array read_binary_array'
            + ' read_binary_list read_binary_matrix readbyte readchar read_hashed_array readline'
            + ' read_list read_matrix read_nested_list readonly read_xpm real_imagpart_to_conjugate'
            + ' realpart realroots rearray rectangle rectform rectform_log_if_constant recttopolar'
            + ' rediff reduce_consts reduce_order region region_boundaries region_boundaries_plus'
            + ' rem remainder remarray rembox remcomps remcon remcoord remfun remfunction'
            + ' remlet remove remove_constvalue remove_dimensions remove_edge remove_fundamental_dimensions'
            + ' remove_fundamental_units remove_plot_option remove_vertex rempart remrule'
            + ' remsym remvalue rename rename_file reset reset_displays residue resolvante'
            + ' resolvante_alternee1 resolvante_bipartite resolvante_diedrale resolvante_klein'
            + ' resolvante_klein3 resolvante_produit_sym resolvante_unitaire resolvante_vierer'
            + ' rest resultant return reveal reverse revert revert2 rgb2level rhs ricci riemann'
            + ' rinvariant risch rk rmdir rncombine romberg room rootscontract round row'
            + ' rowop rowswap rreduce run_testsuite %s save saving scalarp scaled_bessel_i'
            + ' scaled_bessel_i0 scaled_bessel_i1 scalefactors scanmap scatterplot scatterplot_description'
            + ' scene schur2comp sconcat scopy scsimp scurvature sdowncase sec sech second'
            + ' sequal sequalignore set_alt_display setdifference set_draw_defaults set_edge_weight'
            + ' setelmx setequalp setify setp set_partitions set_plot_option set_prompt set_random_state'
            + ' set_tex_environment set_tex_environment_default setunits setup_autoload set_up_dot_simplifications'
            + ' set_vertex_label seventh sexplode sf sha1sum sha256sum shortest_path shortest_weighted_path'
            + ' show showcomps showratvars sierpinskiale sierpinskimap sign signum similaritytransform'
            + ' simp_inequality simplify_sum simplode simpmetderiv simtran sin sinh sinsert'
            + ' sinvertcase sixth skewness skewness_bernoulli skewness_beta skewness_binomial'
            + ' skewness_chi2 skewness_continuous_uniform skewness_discrete_uniform skewness_exp'
            + ' skewness_f skewness_gamma skewness_general_finite_discrete skewness_geometric'
            + ' skewness_gumbel skewness_hypergeometric skewness_laplace skewness_logistic'
            + ' skewness_lognormal skewness_negative_binomial skewness_noncentral_chi2 skewness_noncentral_student_t'
            + ' skewness_normal skewness_pareto skewness_poisson skewness_rayleigh skewness_student_t'
            + ' skewness_weibull slength smake small_rhombicosidodecahedron_graph small_rhombicuboctahedron_graph'
            + ' smax smin smismatch snowmap snub_cube_graph snub_dodecahedron_graph solve'
            + ' solve_rec solve_rec_rat some somrac sort sparse6_decode sparse6_encode sparse6_export'
            + ' sparse6_import specint spherical spherical_bessel_j spherical_bessel_y spherical_hankel1'
            + ' spherical_hankel2 spherical_harmonic spherical_to_xyz splice split sposition'
            + ' sprint sqfr sqrt sqrtdenest sremove sremovefirst sreverse ssearch ssort sstatus'
            + ' ssubst ssubstfirst staircase standardize standardize_inverse_trig starplot'
            + ' starplot_description status std std1 std_bernoulli std_beta std_binomial'
            + ' std_chi2 std_continuous_uniform std_discrete_uniform std_exp std_f std_gamma'
            + ' std_general_finite_discrete std_geometric std_gumbel std_hypergeometric std_laplace'
            + ' std_logistic std_lognormal std_negative_binomial std_noncentral_chi2 std_noncentral_student_t'
            + ' std_normal std_pareto std_poisson std_rayleigh std_student_t std_weibull'
            + ' stemplot stirling stirling1 stirling2 strim striml strimr string stringout'
            + ' stringp strong_components struve_h struve_l sublis sublist sublist_indices'
            + ' submatrix subsample subset subsetp subst substinpart subst_parallel substpart'
            + ' substring subvar subvarp sum sumcontract summand_to_rec supcase supcontext'
            + ' symbolp symmdifference symmetricp system take_channel take_inference tan'
            + ' tanh taylor taylorinfo taylorp taylor_simplifier taytorat tcl_output tcontract'
            + ' tellrat tellsimp tellsimpafter tentex tenth test_mean test_means_difference'
            + ' test_normality test_proportion test_proportions_difference test_rank_sum'
            + ' test_sign test_signed_rank test_variance test_variance_ratio tex tex1 tex_display'
            + ' texput %th third throw time timedate timer timer_info tldefint tlimit todd_coxeter'
            + ' toeplitz tokens to_lisp topological_sort to_poly to_poly_solve totaldisrep'
            + ' totalfourier totient tpartpol trace tracematrix trace_options transform_sample'
            + ' translate translate_file transpose treefale tree_reduce treillis treinat'
            + ' triangle triangularize trigexpand trigrat trigreduce trigsimp trunc truncate'
            + ' truncated_cube_graph truncated_dodecahedron_graph truncated_icosahedron_graph'
            + ' truncated_tetrahedron_graph tr_warnings_get tube tutte_graph ueivects uforget'
            + ' ultraspherical underlying_graph undiff union unique uniteigenvectors unitp'
            + ' units unit_step unitvector unorder unsum untellrat untimer'
            + ' untrace uppercasep uricci uriemann uvect vandermonde_matrix var var1 var_bernoulli'
            + ' var_beta var_binomial var_chi2 var_continuous_uniform var_discrete_uniform'
            + ' var_exp var_f var_gamma var_general_finite_discrete var_geometric var_gumbel'
            + ' var_hypergeometric var_laplace var_logistic var_lognormal var_negative_binomial'
            + ' var_noncentral_chi2 var_noncentral_student_t var_normal var_pareto var_poisson'
            + ' var_rayleigh var_student_t var_weibull vector vectorpotential vectorsimp'
            + ' verbify vers vertex_coloring vertex_connectivity vertex_degree vertex_distance'
            + ' vertex_eccentricity vertex_in_degree vertex_out_degree vertices vertices_to_cycle'
            + ' vertices_to_path %w weyl wheel_graph wiener_index wigner_3j wigner_6j'
            + ' wigner_9j with_stdout write_binary_data writebyte write_data writefile wronskian'
            + ' xreduce xthru %y Zeilberger zeroequiv zerofor zeromatrix zeromatrixp zeta'
            + ' zgeev zheev zlange zn_add_table zn_carmichael_lambda zn_characteristic_factors'
            + ' zn_determinant zn_factor_generators zn_invert_by_lu zn_log zn_mult_table'
            + ' absboxchar activecontexts adapt_depth additive adim aform algebraic'
            + ' algepsilon algexact aliases allbut all_dotsimp_denoms allocation allsym alphabetic'
            + ' animation antisymmetric arrays askexp assume_pos assume_pos_pred assumescalar'
            + ' asymbol atomgrad atrig1 axes axis_3d axis_bottom axis_left axis_right axis_top'
            + ' azimuth background background_color backsubst berlefact bernstein_explicit'
            + ' besselexpand beta_args_sum_to_integer beta_expand bftorat bftrunc bindtest'
            + ' border boundaries_array box boxchar breakup %c capping cauchysum cbrange'
            + ' cbtics center cflength cframe_flag cnonmet_flag color color_bar color_bar_tics'
            + ' colorbox columns commutative complex cone context contexts contour contour_levels'
            + ' cosnpiflag ctaypov ctaypt ctayswitch ctayvar ct_coords ctorsion_flag ctrgsimp'
            + ' cube current_let_rule_package cylinder data_file_name debugmode decreasing'
            + ' default_let_rule_package delay dependencies derivabbrev derivsubst detout'
            + ' diagmetric diff dim dimensions dispflag display2d|10 display_format_internal'
            + ' distribute_over doallmxops domain domxexpt domxmxops domxnctimes dontfactor'
            + ' doscmxops doscmxplus dot0nscsimp dot0simp dot1simp dotassoc dotconstrules'
            + ' dotdistrib dotexptsimp dotident dotscrules draw_graph_program draw_realpart'
            + ' edge_color edge_coloring edge_partition edge_type edge_width %edispflag'
            + ' elevation %emode endphi endtheta engineering_format_floats enhanced3d %enumer'
            + ' epsilon_lp erfflag erf_representation errormsg error_size error_syms error_type'
            + ' %e_to_numlog eval even evenfun evflag evfun ev_point expandwrt_denom expintexpand'
            + ' expintrep expon expop exptdispflag exptisolate exptsubst facexpand facsum_combine'
            + ' factlim factorflag factorial_expand factors_only fb feature features'
            + ' file_name file_output_append file_search_demo file_search_lisp file_search_maxima|10'
            + ' file_search_tests file_search_usage file_type_lisp file_type_maxima|10 fill_color'
            + ' fill_density filled_func fixed_vertices flipflag float2bf font font_size'
            + ' fortindent fortspaces fpprec fpprintprec functions gamma_expand gammalim'
            + ' gdet genindex gensumnum GGFCFMAX GGFINFINITY globalsolve gnuplot_command'
            + ' gnuplot_curve_styles gnuplot_curve_titles gnuplot_default_term_command gnuplot_dumb_term_command'
            + ' gnuplot_file_args gnuplot_file_name gnuplot_out_file gnuplot_pdf_term_command'
            + ' gnuplot_pm3d gnuplot_png_term_command gnuplot_postamble gnuplot_preamble'
            + ' gnuplot_ps_term_command gnuplot_svg_term_command gnuplot_term gnuplot_view_args'
            + ' Gosper_in_Zeilberger gradefs grid grid2d grind halfangles head_angle head_both'
            + ' head_length head_type height hypergeometric_representation %iargs ibase'
            + ' icc1 icc2 icounter idummyx ieqnprint ifb ifc1 ifc2 ifg ifgi ifr iframe_bracket_form'
            + ' ifri igeowedge_flag ikt1 ikt2 imaginary inchar increasing infeval'
            + ' infinity inflag infolists inm inmc1 inmc2 intanalysis integer integervalued'
            + ' integrate_use_rootsof integration_constant integration_constant_counter interpolate_color'
            + ' intfaclim ip_grid ip_grid_in irrational isolate_wrt_times iterations itr'
            + ' julia_parameter %k1 %k2 keepfloat key key_pos kinvariant kt label label_alignment'
            + ' label_orientation labels lassociative lbfgs_ncorrections lbfgs_nfeval_max'
            + ' leftjust legend letrat let_rule_packages lfg lg lhospitallim limsubst linear'
            + ' linear_solver linechar linel|10 linenum line_type linewidth line_width linsolve_params'
            + ' linsolvewarn lispdisp listarith listconstvars listdummyvars lmxchar load_pathname'
            + ' loadprint logabs logarc logcb logconcoeffp logexpand lognegint logsimp logx'
            + ' logx_secondary logy logy_secondary logz lriem m1pbranch macroexpansion macros'
            + ' mainvar manual_demo maperror mapprint matrix_element_add matrix_element_mult'
            + ' matrix_element_transpose maxapplydepth maxapplyheight maxima_tempdir|10 maxima_userdir|10'
            + ' maxnegex MAX_ORD maxposex maxpsifracdenom maxpsifracnum maxpsinegint maxpsiposint'
            + ' maxtayorder mesh_lines_color method mod_big_prime mode_check_errorp'
            + ' mode_checkp mode_check_warnp mod_test mod_threshold modular_linear_solver'
            + ' modulus multiplicative multiplicities myoptions nary negdistrib negsumdispflag'
            + ' newline newtonepsilon newtonmaxiter nextlayerfactor niceindicespref nm nmc'
            + ' noeval nolabels nonegative_lp noninteger nonscalar noun noundisp nouns np'
            + ' npi nticks ntrig numer numer_pbranch obase odd oddfun opacity opproperties'
            + ' opsubst optimprefix optionset orientation origin orthopoly_returns_intervals'
            + ' outative outchar packagefile palette partswitch pdf_file pfeformat phiresolution'
            + ' %piargs piece pivot_count_sx pivot_max_sx plot_format plot_options plot_realpart'
            + ' png_file pochhammer_max_index points pointsize point_size points_joined point_type'
            + ' poislim poisson poly_coefficient_ring poly_elimination_order polyfactor poly_grobner_algorithm'
            + ' poly_grobner_debug poly_monomial_order poly_primary_elimination_order poly_return_term_list'
            + ' poly_secondary_elimination_order poly_top_reduction_only posfun position'
            + ' powerdisp pred prederror primep_number_of_tests product_use_gamma program'
            + ' programmode promote_float_to_bigfloat prompt proportional_axes props psexpand'
            + ' ps_file radexpand radius radsubstflag rassociative ratalgdenom ratchristof'
            + ' ratdenomdivide rateinstein ratepsilon ratfac rational ratmx ratprint ratriemann'
            + ' ratsimpexpons ratvarswitch ratweights ratweyl ratwtlvl real realonly redraw'
            + ' refcheck resolution restart resultant ric riem rmxchar %rnum_list rombergabs'
            + ' rombergit rombergmin rombergtol rootsconmode rootsepsilon run_viewer same_xy'
            + ' same_xyz savedef savefactors scalar scalarmatrixp scale scale_lp setcheck'
            + ' setcheckbreak setval show_edge_color show_edges show_edge_type show_edge_width'
            + ' show_id show_label showtime show_vertex_color show_vertex_size show_vertex_type'
            + ' show_vertices show_weight simp simplified_output simplify_products simpproduct'
            + ' simpsum sinnpiflag solvedecomposes solveexplicit solvefactors solvenullwarn'
            + ' solveradcan solvetrigwarn space sparse sphere spring_embedding_depth sqrtdispflag'
            + ' stardisp startphi starttheta stats_numer stringdisp structures style sublis_apply_lambda'
            + ' subnumsimp sumexpand sumsplitfact surface surface_hide svg_file symmetric'
            + ' tab taylordepth taylor_logexpand taylor_order_coefficients taylor_truncate_polynomials'
            + ' tensorkill terminal testsuite_files thetaresolution timer_devalue title tlimswitch'
            + ' tr track transcompile transform transform_xy translate_fast_arrays transparent'
            + ' transrun tr_array_as_ref tr_bound_function_applyp tr_file_tty_messagesp tr_float_can_branch_complex'
            + ' tr_function_call_default trigexpandplus trigexpandtimes triginverses trigsign'
            + ' trivial_solutions tr_numer tr_optimize_max_loop tr_semicompile tr_state_vars'
            + ' tr_warn_bad_function_calls tr_warn_fexpr tr_warn_meval tr_warn_mode'
            + ' tr_warn_undeclared tr_warn_undefined_variable tstep ttyoff tube_extremes'
            + ' ufg ug %unitexpand unit_vectors uric uriem use_fast_arrays user_preamble'
            + ' usersetunits values vect_cross verbose vertex_color vertex_coloring vertex_partition'
            + ' vertex_size vertex_type view warnings weyl width windowname windowtitle wired_surface'
            + ' wireframe xaxis xaxis_color xaxis_secondary xaxis_type xaxis_width xlabel'
            + ' xlabel_secondary xlength xrange xrange_secondary xtics xtics_axis xtics_rotate'
            + ' xtics_rotate_secondary xtics_secondary xtics_secondary_axis xu_grid x_voxel'
            + ' xy_file xyplane xy_scale yaxis yaxis_color yaxis_secondary yaxis_type yaxis_width'
            + ' ylabel ylabel_secondary ylength yrange yrange_secondary ytics ytics_axis'
            + ' ytics_rotate ytics_rotate_secondary ytics_secondary ytics_secondary_axis'
            + ' yv_grid y_voxel yx_ratio zaxis zaxis_color zaxis_type zaxis_width zeroa zerob'
            + ' zerobern zeta%pi zlabel zlabel_rotate zlength zmin zn_primroot_limit zn_primroot_pretest';
          const SYMBOLS = '_ __ %|0 %%|0';
 
          return {
            name: 'Maxima',
            keywords: {
              $pattern: '[A-Za-z_%][0-9A-Za-z_%]*',
              keyword: KEYWORDS,
              literal: LITERALS,
              built_in: BUILTIN_FUNCTIONS,
              symbol: SYMBOLS
            },
            contains: [
              {
                className: 'comment',
                begin: '/\\*',
                end: '\\*/',
                contains: [ 'self' ]
              },
              hljs.QUOTE_STRING_MODE,
              {
                className: 'number',
                relevance: 0,
                variants: [
                  {
                    // float number w/ exponent
                    // hmm, I wonder if we ought to include other exponent markers?
                    begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Ee][-+]?\\d+\\b' },
                  {
                    // bigfloat number
                    begin: '\\b(\\d+|\\d+\\.|\\.\\d+|\\d+\\.\\d+)[Bb][-+]?\\d+\\b',
                    relevance: 10
                  },
                  {
                    // float number w/out exponent
                    // Doesn't seem to recognize floats which start with '.'
                    begin: '\\b(\\.\\d+|\\d+\\.\\d+)\\b' },
                  {
                    // integer in base up to 36
                    // Doesn't seem to recognize integers which end with '.'
                    begin: '\\b(\\d+|0[0-9A-Za-z]+)\\.?\\b' }
                ]
              }
            ],
            illegal: /@/
          };
        }
 
        maxima_1 = maxima;
        return maxima_1;
    }
 
    /*
    Language: MEL
    Description: Maya Embedded Language
    Author: Shuen-Huei Guan <drake.guan@gmail.com>
    Website: http://www.autodesk.com/products/autodesk-maya/overview
    Category: graphics
    */
 
    var mel_1;
    var hasRequiredMel;
 
    function requireMel () {
        if (hasRequiredMel) return mel_1;
        hasRequiredMel = 1;
        function mel(hljs) {
          return {
            name: 'MEL',
            keywords:
              'int float string vector matrix if else switch case default while do for in break '
              + 'continue global proc return about abs addAttr addAttributeEditorNodeHelp addDynamic '
              + 'addNewShelfTab addPP addPanelCategory addPrefixToName advanceToNextDrivenKey '
              + 'affectedNet affects aimConstraint air alias aliasAttr align alignCtx alignCurve '
              + 'alignSurface allViewFit ambientLight angle angleBetween animCone animCurveEditor '
              + 'animDisplay animView annotate appendStringArray applicationName applyAttrPreset '
              + 'applyTake arcLenDimContext arcLengthDimension arclen arrayMapper art3dPaintCtx '
              + 'artAttrCtx artAttrPaintVertexCtx artAttrSkinPaintCtx artAttrTool artBuildPaintMenu '
              + 'artFluidAttrCtx artPuttyCtx artSelectCtx artSetPaintCtx artUserPaintCtx assignCommand '
              + 'assignInputDevice assignViewportFactories attachCurve attachDeviceAttr attachSurface '
              + 'attrColorSliderGrp attrCompatibility attrControlGrp attrEnumOptionMenu '
              + 'attrEnumOptionMenuGrp attrFieldGrp attrFieldSliderGrp attrNavigationControlGrp '
              + 'attrPresetEditWin attributeExists attributeInfo attributeMenu attributeQuery '
              + 'autoKeyframe autoPlace bakeClip bakeFluidShading bakePartialHistory bakeResults '
              + 'bakeSimulation basename basenameEx batchRender bessel bevel bevelPlus binMembership '
              + 'bindSkin blend2 blendShape blendShapeEditor blendShapePanel blendTwoAttr blindDataType '
              + 'boneLattice boundary boxDollyCtx boxZoomCtx bufferCurve buildBookmarkMenu '
              + 'buildKeyframeMenu button buttonManip CBG cacheFile cacheFileCombine cacheFileMerge '
              + 'cacheFileTrack camera cameraView canCreateManip canvas capitalizeString catch '
              + 'catchQuiet ceil changeSubdivComponentDisplayLevel changeSubdivRegion channelBox '
              + 'character characterMap characterOutlineEditor characterize chdir checkBox checkBoxGrp '
              + 'checkDefaultRenderGlobals choice circle circularFillet clamp clear clearCache clip '
              + 'clipEditor clipEditorCurrentTimeCtx clipSchedule clipSchedulerOutliner clipTrimBefore '
              + 'closeCurve closeSurface cluster cmdFileOutput cmdScrollFieldExecuter '
              + 'cmdScrollFieldReporter cmdShell coarsenSubdivSelectionList collision color '
              + 'colorAtPoint colorEditor colorIndex colorIndexSliderGrp colorSliderButtonGrp '
              + 'colorSliderGrp columnLayout commandEcho commandLine commandPort compactHairSystem '
              + 'componentEditor compositingInterop computePolysetVolume condition cone confirmDialog '
              + 'connectAttr connectControl connectDynamic connectJoint connectionInfo constrain '
              + 'constrainValue constructionHistory container containsMultibyte contextInfo control '
              + 'convertFromOldLayers convertIffToPsd convertLightmap convertSolidTx convertTessellation '
              + 'convertUnit copyArray copyFlexor copyKey copySkinWeights cos cpButton cpCache '
              + 'cpClothSet cpCollision cpConstraint cpConvClothToMesh cpForces cpGetSolverAttr cpPanel '
              + 'cpProperty cpRigidCollisionFilter cpSeam cpSetEdit cpSetSolverAttr cpSolver '
              + 'cpSolverTypes cpTool cpUpdateClothUVs createDisplayLayer createDrawCtx createEditor '
              + 'createLayeredPsdFile createMotionField createNewShelf createNode createRenderLayer '
              + 'createSubdivRegion cross crossProduct ctxAbort ctxCompletion ctxEditMode ctxTraverse '
              + 'currentCtx currentTime currentTimeCtx currentUnit curve curveAddPtCtx '
              + 'curveCVCtx curveEPCtx curveEditorCtx curveIntersect curveMoveEPCtx curveOnSurface '
              + 'curveSketchCtx cutKey cycleCheck cylinder dagPose date defaultLightListCheckBox '
              + 'defaultNavigation defineDataServer defineVirtualDevice deformer deg_to_rad delete '
              + 'deleteAttr deleteShadingGroupsAndMaterials deleteShelfTab deleteUI deleteUnusedBrushes '
              + 'delrandstr detachCurve detachDeviceAttr detachSurface deviceEditor devicePanel dgInfo '
              + 'dgdirty dgeval dgtimer dimWhen directKeyCtx directionalLight dirmap dirname disable '
              + 'disconnectAttr disconnectJoint diskCache displacementToPoly displayAffected '
              + 'displayColor displayCull displayLevelOfDetail displayPref displayRGBColor '
              + 'displaySmoothness displayStats displayString displaySurface distanceDimContext '
              + 'distanceDimension doBlur dolly dollyCtx dopeSheetEditor dot dotProduct '
              + 'doubleProfileBirailSurface drag dragAttrContext draggerContext dropoffLocator '
              + 'duplicate duplicateCurve duplicateSurface dynCache dynControl dynExport dynExpression '
              + 'dynGlobals dynPaintEditor dynParticleCtx dynPref dynRelEdPanel dynRelEditor '
              + 'dynamicLoad editAttrLimits editDisplayLayerGlobals editDisplayLayerMembers '
              + 'editRenderLayerAdjustment editRenderLayerGlobals editRenderLayerMembers editor '
              + 'editorTemplate effector emit emitter enableDevice encodeString endString endsWith env '
              + 'equivalent equivalentTol erf error eval evalDeferred evalEcho event '
              + 'exactWorldBoundingBox exclusiveLightCheckBox exec executeForEachObject exists exp '
              + 'expression expressionEditorListen extendCurve extendSurface extrude fcheck fclose feof '
              + 'fflush fgetline fgetword file fileBrowserDialog fileDialog fileExtension fileInfo '
              + 'filetest filletCurve filter filterCurve filterExpand filterStudioImport '
              + 'findAllIntersections findAnimCurves findKeyframe findMenuItem findRelatedSkinCluster '
              + 'finder firstParentOf fitBspline flexor floatEq floatField floatFieldGrp floatScrollBar '
              + 'floatSlider floatSlider2 floatSliderButtonGrp floatSliderGrp floor flow fluidCacheInfo '
              + 'fluidEmitter fluidVoxelInfo flushUndo fmod fontDialog fopen formLayout format fprint '
              + 'frameLayout fread freeFormFillet frewind fromNativePath fwrite gamma gauss '
              + 'geometryConstraint getApplicationVersionAsFloat getAttr getClassification '
              + 'getDefaultBrush getFileList getFluidAttr getInputDeviceRange getMayaPanelTypes '
              + 'getModifiers getPanel getParticleAttr getPluginResource getenv getpid glRender '
              + 'glRenderEditor globalStitch gmatch goal gotoBindPose grabColor gradientControl '
              + 'gradientControlNoAttr graphDollyCtx graphSelectContext graphTrackCtx gravity grid '
              + 'gridLayout group groupObjectsByName HfAddAttractorToAS HfAssignAS HfBuildEqualMap '
              + 'HfBuildFurFiles HfBuildFurImages HfCancelAFR HfConnectASToHF HfCreateAttractor '
              + 'HfDeleteAS HfEditAS HfPerformCreateAS HfRemoveAttractorFromAS HfSelectAttached '
              + 'HfSelectAttractors HfUnAssignAS hardenPointCurve hardware hardwareRenderPanel '
              + 'headsUpDisplay headsUpMessage help helpLine hermite hide hilite hitTest hotBox hotkey '
              + 'hotkeyCheck hsv_to_rgb hudButton hudSlider hudSliderButton hwReflectionMap hwRender '
              + 'hwRenderLoad hyperGraph hyperPanel hyperShade hypot iconTextButton iconTextCheckBox '
              + 'iconTextRadioButton iconTextRadioCollection iconTextScrollList iconTextStaticLabel '
              + 'ikHandle ikHandleCtx ikHandleDisplayScale ikSolver ikSplineHandleCtx ikSystem '
              + 'ikSystemInfo ikfkDisplayMethod illustratorCurves image imfPlugins inheritTransform '
              + 'insertJoint insertJointCtx insertKeyCtx insertKnotCurve insertKnotSurface instance '
              + 'instanceable instancer intField intFieldGrp intScrollBar intSlider intSliderGrp '
              + 'interToUI internalVar intersect iprEngine isAnimCurve isConnected isDirty isParentOf '
              + 'isSameObject isTrue isValidObjectName isValidString isValidUiName isolateSelect '
              + 'itemFilter itemFilterAttr itemFilterRender itemFilterType joint jointCluster jointCtx '
              + 'jointDisplayScale jointLattice keyTangent keyframe keyframeOutliner '
              + 'keyframeRegionCurrentTimeCtx keyframeRegionDirectKeyCtx keyframeRegionDollyCtx '
              + 'keyframeRegionInsertKeyCtx keyframeRegionMoveKeyCtx keyframeRegionScaleKeyCtx '
              + 'keyframeRegionSelectKeyCtx keyframeRegionSetKeyCtx keyframeRegionTrackCtx '
              + 'keyframeStats lassoContext lattice latticeDeformKeyCtx launch launchImageEditor '
              + 'layerButton layeredShaderPort layeredTexturePort layout layoutDialog lightList '
              + 'lightListEditor lightListPanel lightlink lineIntersection linearPrecision linstep '
              + 'listAnimatable listAttr listCameras listConnections listDeviceAttachments listHistory '
              + 'listInputDeviceAxes listInputDeviceButtons listInputDevices listMenuAnnotation '
              + 'listNodeTypes listPanelCategories listRelatives listSets listTransforms '
              + 'listUnselected listerEditor loadFluid loadNewShelf loadPlugin '
              + 'loadPluginLanguageResources loadPrefObjects localizedPanelLabel lockNode loft log '
              + 'longNameOf lookThru ls lsThroughFilter lsType lsUI Mayatomr mag makeIdentity makeLive '
              + 'makePaintable makeRoll makeSingleSurface makeTubeOn makebot manipMoveContext '
              + 'manipMoveLimitsCtx manipOptions manipRotateContext manipRotateLimitsCtx '
              + 'manipScaleContext manipScaleLimitsCtx marker match max memory menu menuBarLayout '
              + 'menuEditor menuItem menuItemToShelf menuSet menuSetPref messageLine min minimizeApp '
              + 'mirrorJoint modelCurrentTimeCtx modelEditor modelPanel mouse movIn movOut move '
              + 'moveIKtoFK moveKeyCtx moveVertexAlongDirection multiProfileBirailSurface mute '
              + 'nParticle nameCommand nameField namespace namespaceInfo newPanelItems newton nodeCast '
              + 'nodeIconButton nodeOutliner nodePreset nodeType noise nonLinear normalConstraint '
              + 'normalize nurbsBoolean nurbsCopyUVSet nurbsCube nurbsEditUV nurbsPlane nurbsSelect '
              + 'nurbsSquare nurbsToPoly nurbsToPolygonsPref nurbsToSubdiv nurbsToSubdivPref '
              + 'nurbsUVSet nurbsViewDirectionVector objExists objectCenter objectLayer objectType '
              + 'objectTypeUI obsoleteProc oceanNurbsPreviewPlane offsetCurve offsetCurveOnSurface '
              + 'offsetSurface openGLExtension openMayaPref optionMenu optionMenuGrp optionVar orbit '
              + 'orbitCtx orientConstraint outlinerEditor outlinerPanel overrideModifier '
              + 'paintEffectsDisplay pairBlend palettePort paneLayout panel panelConfiguration '
              + 'panelHistory paramDimContext paramDimension paramLocator parent parentConstraint '
              + 'particle particleExists particleInstancer particleRenderInfo partition pasteKey '
              + 'pathAnimation pause pclose percent performanceOptions pfxstrokes pickWalk picture '
              + 'pixelMove planarSrf plane play playbackOptions playblast plugAttr plugNode pluginInfo '
              + 'pluginResourceUtil pointConstraint pointCurveConstraint pointLight pointMatrixMult '
              + 'pointOnCurve pointOnSurface pointPosition poleVectorConstraint polyAppend '
              + 'polyAppendFacetCtx polyAppendVertex polyAutoProjection polyAverageNormal '
              + 'polyAverageVertex polyBevel polyBlendColor polyBlindData polyBoolOp polyBridgeEdge '
              + 'polyCacheMonitor polyCheck polyChipOff polyClipboard polyCloseBorder polyCollapseEdge '
              + 'polyCollapseFacet polyColorBlindData polyColorDel polyColorPerVertex polyColorSet '
              + 'polyCompare polyCone polyCopyUV polyCrease polyCreaseCtx polyCreateFacet '
              + 'polyCreateFacetCtx polyCube polyCut polyCutCtx polyCylinder polyCylindricalProjection '
              + 'polyDelEdge polyDelFacet polyDelVertex polyDuplicateAndConnect polyDuplicateEdge '
              + 'polyEditUV polyEditUVShell polyEvaluate polyExtrudeEdge polyExtrudeFacet '
              + 'polyExtrudeVertex polyFlipEdge polyFlipUV polyForceUV polyGeoSampler polyHelix '
              + 'polyInfo polyInstallAction polyLayoutUV polyListComponentConversion polyMapCut '
              + 'polyMapDel polyMapSew polyMapSewMove polyMergeEdge polyMergeEdgeCtx polyMergeFacet '
              + 'polyMergeFacetCtx polyMergeUV polyMergeVertex polyMirrorFace polyMoveEdge '
              + 'polyMoveFacet polyMoveFacetUV polyMoveUV polyMoveVertex polyNormal polyNormalPerVertex '
              + 'polyNormalizeUV polyOptUvs polyOptions polyOutput polyPipe polyPlanarProjection '
              + 'polyPlane polyPlatonicSolid polyPoke polyPrimitive polyPrism polyProjection '
              + 'polyPyramid polyQuad polyQueryBlindData polyReduce polySelect polySelectConstraint '
              + 'polySelectConstraintMonitor polySelectCtx polySelectEditCtx polySeparate '
              + 'polySetToFaceNormal polySewEdge polyShortestPathCtx polySmooth polySoftEdge '
              + 'polySphere polySphericalProjection polySplit polySplitCtx polySplitEdge polySplitRing '
              + 'polySplitVertex polyStraightenUVBorder polySubdivideEdge polySubdivideFacet '
              + 'polyToSubdiv polyTorus polyTransfer polyTriangulate polyUVSet polyUnite polyWedgeFace '
              + 'popen popupMenu pose pow preloadRefEd print progressBar progressWindow projFileViewer '
              + 'projectCurve projectTangent projectionContext projectionManip promptDialog propModCtx '
              + 'propMove psdChannelOutliner psdEditTextureFile psdExport psdTextureFile putenv pwd '
              + 'python querySubdiv quit rad_to_deg radial radioButton radioButtonGrp radioCollection '
              + 'radioMenuItemCollection rampColorPort rand randomizeFollicles randstate rangeControl '
              + 'readTake rebuildCurve rebuildSurface recordAttr recordDevice redo reference '
              + 'referenceEdit referenceQuery refineSubdivSelectionList refresh refreshAE '
              + 'registerPluginResource rehash reloadImage removeJoint removeMultiInstance '
              + 'removePanelCategory rename renameAttr renameSelectionList renameUI render '
              + 'renderGlobalsNode renderInfo renderLayerButton renderLayerParent '
              + 'renderLayerPostProcess renderLayerUnparent renderManip renderPartition '
              + 'renderQualityNode renderSettings renderThumbnailUpdate renderWindowEditor '
              + 'renderWindowSelectContext renderer reorder reorderDeformers requires reroot '
              + 'resampleFluid resetAE resetPfxToPolyCamera resetTool resolutionNode retarget '
              + 'reverseCurve reverseSurface revolve rgb_to_hsv rigidBody rigidSolver roll rollCtx '
              + 'rootOf rot rotate rotationInterpolation roundConstantRadius rowColumnLayout rowLayout '
              + 'runTimeCommand runup sampleImage saveAllShelves saveAttrPreset saveFluid saveImage '
              + 'saveInitialState saveMenu savePrefObjects savePrefs saveShelf saveToolSettings scale '
              + 'scaleBrushBrightness scaleComponents scaleConstraint scaleKey scaleKeyCtx sceneEditor '
              + 'sceneUIReplacement scmh scriptCtx scriptEditorInfo scriptJob scriptNode scriptTable '
              + 'scriptToShelf scriptedPanel scriptedPanelType scrollField scrollLayout sculpt '
              + 'searchPathArray seed selLoadSettings select selectContext selectCurveCV selectKey '
              + 'selectKeyCtx selectKeyframeRegionCtx selectMode selectPref selectPriority selectType '
              + 'selectedNodes selectionConnection separator setAttr setAttrEnumResource '
              + 'setAttrMapping setAttrNiceNameResource setConstraintRestPosition '
              + 'setDefaultShadingGroup setDrivenKeyframe setDynamic setEditCtx setEditor setFluidAttr '
              + 'setFocus setInfinity setInputDeviceMapping setKeyCtx setKeyPath setKeyframe '
              + 'setKeyframeBlendshapeTargetWts setMenuMode setNodeNiceNameResource setNodeTypeFlag '
              + 'setParent setParticleAttr setPfxToPolyCamera setPluginResource setProject '
              + 'setStampDensity setStartupMessage setState setToolTo setUITemplate setXformManip sets '
              + 'shadingConnection shadingGeometryRelCtx shadingLightRelCtx shadingNetworkCompare '
              + 'shadingNode shapeCompare shelfButton shelfLayout shelfTabLayout shellField '
              + 'shortNameOf showHelp showHidden showManipCtx showSelectionInTitle '
              + 'showShadingGroupAttrEditor showWindow sign simplify sin singleProfileBirailSurface '
              + 'size sizeBytes skinCluster skinPercent smoothCurve smoothTangentSurface smoothstep '
              + 'snap2to2 snapKey snapMode snapTogetherCtx snapshot soft softMod softModCtx sort sound '
              + 'soundControl source spaceLocator sphere sphrand spotLight spotLightPreviewPort '
              + 'spreadSheetEditor spring sqrt squareSurface srtContext stackTrace startString '
              + 'startsWith stitchAndExplodeShell stitchSurface stitchSurfacePoints strcmp '
              + 'stringArrayCatenate stringArrayContains stringArrayCount stringArrayInsertAtIndex '
              + 'stringArrayIntersector stringArrayRemove stringArrayRemoveAtIndex '
              + 'stringArrayRemoveDuplicates stringArrayRemoveExact stringArrayToString '
              + 'stringToStringArray strip stripPrefixFromName stroke subdAutoProjection '
              + 'subdCleanTopology subdCollapse subdDuplicateAndConnect subdEditUV '
              + 'subdListComponentConversion subdMapCut subdMapSewMove subdMatchTopology subdMirror '
              + 'subdToBlind subdToPoly subdTransferUVsToCache subdiv subdivCrease '
              + 'subdivDisplaySmoothness substitute substituteAllString substituteGeometry substring '
              + 'surface surfaceSampler surfaceShaderList swatchDisplayPort switchTable symbolButton '
              + 'symbolCheckBox sysFile system tabLayout tan tangentConstraint texLatticeDeformContext '
              + 'texManipContext texMoveContext texMoveUVShellContext texRotateContext texScaleContext '
              + 'texSelectContext texSelectShortestPathCtx texSmudgeUVContext texWinToolCtx text '
              + 'textCurves textField textFieldButtonGrp textFieldGrp textManip textScrollList '
              + 'textToShelf textureDisplacePlane textureHairColor texturePlacementContext '
              + 'textureWindow threadCount threePointArcCtx timeControl timePort timerX toNativePath '
              + 'toggle toggleAxis toggleWindowVisibility tokenize tokenizeList tolerance tolower '
              + 'toolButton toolCollection toolDropped toolHasOptions toolPropertyWindow torus toupper '
              + 'trace track trackCtx transferAttributes transformCompare transformLimits translator '
              + 'trim trunc truncateFluidCache truncateHairCache tumble tumbleCtx turbulence '
              + 'twoPointArcCtx uiRes uiTemplate unassignInputDevice undo undoInfo ungroup uniform unit '
              + 'unloadPlugin untangleUV untitledFileName untrim upAxis updateAE userCtx uvLink '
              + 'uvSnapshot validateShelfName vectorize view2dToolCtx viewCamera viewClipPlane '
              + 'viewFit viewHeadOn viewLookAt viewManip viewPlace viewSet visor volumeAxis vortex '
              + 'waitCursor warning webBrowser webBrowserPrefs whatIs window windowPref wire '
              + 'wireContext workspace wrinkle wrinkleContext writeTake xbmLangPathList xform',
            illegal: '</',
            contains: [
              hljs.C_NUMBER_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: '`',
                end: '`',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              { // eats variables
                begin: /[$%@](\^\w\b|#\w+|[^\s\w{]|\{\w+\}|\w+)/ },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
        }
 
        mel_1 = mel;
        return mel_1;
    }
 
    /*
    Language: Mercury
    Author: mucaho <mkucko@gmail.com>
    Description: Mercury is a logic/functional programming language which combines the clarity and expressiveness of declarative programming with advanced static analysis and error detection features.
    Website: https://www.mercurylang.org
    */
 
    var mercury_1;
    var hasRequiredMercury;
 
    function requireMercury () {
        if (hasRequiredMercury) return mercury_1;
        hasRequiredMercury = 1;
        function mercury(hljs) {
          const KEYWORDS = {
            keyword:
              'module use_module import_module include_module end_module initialise '
              + 'mutable initialize finalize finalise interface implementation pred '
              + 'mode func type inst solver any_pred any_func is semidet det nondet '
              + 'multi erroneous failure cc_nondet cc_multi typeclass instance where '
              + 'pragma promise external trace atomic or_else require_complete_switch '
              + 'require_det require_semidet require_multi require_nondet '
              + 'require_cc_multi require_cc_nondet require_erroneous require_failure',
            meta:
              // pragma
              'inline no_inline type_spec source_file fact_table obsolete memo '
              + 'loop_check minimal_model terminates does_not_terminate '
              + 'check_termination promise_equivalent_clauses '
              // preprocessor
              + 'foreign_proc foreign_decl foreign_code foreign_type '
              + 'foreign_import_module foreign_export_enum foreign_export '
              + 'foreign_enum may_call_mercury will_not_call_mercury thread_safe '
              + 'not_thread_safe maybe_thread_safe promise_pure promise_semipure '
              + 'tabled_for_io local untrailed trailed attach_to_io_state '
              + 'can_pass_as_mercury_type stable will_not_throw_exception '
              + 'may_modify_trail will_not_modify_trail may_duplicate '
              + 'may_not_duplicate affects_liveness does_not_affect_liveness '
              + 'doesnt_affect_liveness no_sharing unknown_sharing sharing',
            built_in:
              'some all not if then else true fail false try catch catch_any '
              + 'semidet_true semidet_false semidet_fail impure_true impure semipure'
          };
 
          const COMMENT = hljs.COMMENT('%', '$');
 
          const NUMCODE = {
            className: 'number',
            begin: "0'.\\|0[box][0-9a-fA-F]*"
          };
 
          const ATOM = hljs.inherit(hljs.APOS_STRING_MODE, { relevance: 0 });
          const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { relevance: 0 });
          const STRING_FMT = {
            className: 'subst',
            begin: '\\\\[abfnrtv]\\|\\\\x[0-9a-fA-F]*\\\\\\|%[-+# *.0-9]*[dioxXucsfeEgGp]',
            relevance: 0
          };
          STRING.contains = STRING.contains.slice(); // we need our own copy of contains
          STRING.contains.push(STRING_FMT);
 
          const IMPLICATION = {
            className: 'built_in',
            variants: [
              { begin: '<=>' },
              {
                begin: '<=',
                relevance: 0
              },
              {
                begin: '=>',
                relevance: 0
              },
              { begin: '/\\\\' },
              { begin: '\\\\/' }
            ]
          };
 
          const HEAD_BODY_CONJUNCTION = {
            className: 'built_in',
            variants: [
              { begin: ':-\\|-->' },
              {
                begin: '=',
                relevance: 0
              }
            ]
          };
 
          return {
            name: 'Mercury',
            aliases: [
              'm',
              'moo'
            ],
            keywords: KEYWORDS,
            contains: [
              IMPLICATION,
              HEAD_BODY_CONJUNCTION,
              COMMENT,
              hljs.C_BLOCK_COMMENT_MODE,
              NUMCODE,
              hljs.NUMBER_MODE,
              ATOM,
              STRING,
              { // relevance booster
                begin: /:-/ },
              { // relevance booster
                begin: /\.$/ }
            ]
          };
        }
 
        mercury_1 = mercury;
        return mercury_1;
    }
 
    /*
    Language: MIPS Assembly
    Author: Nebuleon Fumika <nebuleon.fumika@gmail.com>
    Description: MIPS Assembly (up to MIPS32R2)
    Website: https://en.wikipedia.org/wiki/MIPS_architecture
    Category: assembler
    */
 
    var mipsasm_1;
    var hasRequiredMipsasm;
 
    function requireMipsasm () {
        if (hasRequiredMipsasm) return mipsasm_1;
        hasRequiredMipsasm = 1;
        function mipsasm(hljs) {
          // local labels: %?[FB]?[AT]?\d{1,2}\w+
          return {
            name: 'MIPS Assembly',
            case_insensitive: true,
            aliases: [ 'mips' ],
            keywords: {
              $pattern: '\\.?' + hljs.IDENT_RE,
              meta:
                // GNU preprocs
                '.2byte .4byte .align .ascii .asciz .balign .byte .code .data .else .end .endif .endm .endr .equ .err .exitm .extern .global .hword .if .ifdef .ifndef .include .irp .long .macro .rept .req .section .set .skip .space .text .word .ltorg ',
              built_in:
                '$0 $1 $2 $3 $4 $5 $6 $7 $8 $9 $10 $11 $12 $13 $14 $15 ' // integer registers
                + '$16 $17 $18 $19 $20 $21 $22 $23 $24 $25 $26 $27 $28 $29 $30 $31 ' // integer registers
                + 'zero at v0 v1 a0 a1 a2 a3 a4 a5 a6 a7 ' // integer register aliases
                + 't0 t1 t2 t3 t4 t5 t6 t7 t8 t9 s0 s1 s2 s3 s4 s5 s6 s7 s8 ' // integer register aliases
                + 'k0 k1 gp sp fp ra ' // integer register aliases
                + '$f0 $f1 $f2 $f2 $f4 $f5 $f6 $f7 $f8 $f9 $f10 $f11 $f12 $f13 $f14 $f15 ' // floating-point registers
                + '$f16 $f17 $f18 $f19 $f20 $f21 $f22 $f23 $f24 $f25 $f26 $f27 $f28 $f29 $f30 $f31 ' // floating-point registers
                + 'Context Random EntryLo0 EntryLo1 Context PageMask Wired EntryHi ' // Coprocessor 0 registers
                + 'HWREna BadVAddr Count Compare SR IntCtl SRSCtl SRSMap Cause EPC PRId ' // Coprocessor 0 registers
                + 'EBase Config Config1 Config2 Config3 LLAddr Debug DEPC DESAVE CacheErr ' // Coprocessor 0 registers
                + 'ECC ErrorEPC TagLo DataLo TagHi DataHi WatchLo WatchHi PerfCtl PerfCnt ' // Coprocessor 0 registers
            },
            contains: [
              {
                className: 'keyword',
                begin: '\\b(' // mnemonics
                    // 32-bit integer instructions
                    + 'addi?u?|andi?|b(al)?|beql?|bgez(al)?l?|bgtzl?|blezl?|bltz(al)?l?|'
                    + 'bnel?|cl[oz]|divu?|ext|ins|j(al)?|jalr(\\.hb)?|jr(\\.hb)?|lbu?|lhu?|'
                    + 'll|lui|lw[lr]?|maddu?|mfhi|mflo|movn|movz|move|msubu?|mthi|mtlo|mul|'
                    + 'multu?|nop|nor|ori?|rotrv?|sb|sc|se[bh]|sh|sllv?|slti?u?|srav?|'
                    + 'srlv?|subu?|sw[lr]?|xori?|wsbh|'
                    // floating-point instructions
                    + 'abs\\.[sd]|add\\.[sd]|alnv.ps|bc1[ft]l?|'
                    + 'c\\.(s?f|un|u?eq|[ou]lt|[ou]le|ngle?|seq|l[et]|ng[et])\\.[sd]|'
                    + '(ceil|floor|round|trunc)\\.[lw]\\.[sd]|cfc1|cvt\\.d\\.[lsw]|'
                    + 'cvt\\.l\\.[dsw]|cvt\\.ps\\.s|cvt\\.s\\.[dlw]|cvt\\.s\\.p[lu]|cvt\\.w\\.[dls]|'
                    + 'div\\.[ds]|ldx?c1|luxc1|lwx?c1|madd\\.[sd]|mfc1|mov[fntz]?\\.[ds]|'
                    + 'msub\\.[sd]|mth?c1|mul\\.[ds]|neg\\.[ds]|nmadd\\.[ds]|nmsub\\.[ds]|'
                    + 'p[lu][lu]\\.ps|recip\\.fmt|r?sqrt\\.[ds]|sdx?c1|sub\\.[ds]|suxc1|'
                    + 'swx?c1|'
                    // system control instructions
                    + 'break|cache|d?eret|[de]i|ehb|mfc0|mtc0|pause|prefx?|rdhwr|'
                    + 'rdpgpr|sdbbp|ssnop|synci?|syscall|teqi?|tgei?u?|tlb(p|r|w[ir])|'
                    + 'tlti?u?|tnei?|wait|wrpgpr'
                + ')',
                end: '\\s'
              },
              // lines ending with ; or # aren't really comments, probably auto-detect fail
              hljs.COMMENT('[;#](?!\\s*$)', '$'),
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: '\'',
                end: '[^\\\\]\'',
                relevance: 0
              },
              {
                className: 'title',
                begin: '\\|',
                end: '\\|',
                illegal: '\\n',
                relevance: 0
              },
              {
                className: 'number',
                variants: [
                  { // hex
                    begin: '0x[0-9a-f]+' },
                  { // bare number
                    begin: '\\b-?\\d+' }
                ],
                relevance: 0
              },
              {
                className: 'symbol',
                variants: [
                  { // GNU MIPS syntax
                    begin: '^\\s*[a-z_\\.\\$][a-z0-9_\\.\\$]+:' },
                  { // numbered local labels
                    begin: '^\\s*[0-9]+:' },
                  { // number local label reference (backwards, forwards)
                    begin: '[0-9]+[bf]' }
                ],
                relevance: 0
              }
            ],
            // forward slashes are not allowed
            illegal: /\//
          };
        }
 
        mipsasm_1 = mipsasm;
        return mipsasm_1;
    }
 
    /*
    Language: Mizar
    Description: The Mizar Language is a formal language derived from the mathematical vernacular.
    Author: Kelley van Evert <kelleyvanevert@gmail.com>
    Website: http://mizar.org/language/
    Category: scientific
    */
 
    var mizar_1;
    var hasRequiredMizar;
 
    function requireMizar () {
        if (hasRequiredMizar) return mizar_1;
        hasRequiredMizar = 1;
        function mizar(hljs) {
          return {
            name: 'Mizar',
            keywords:
              'environ vocabularies notations constructors definitions '
              + 'registrations theorems schemes requirements begin end definition '
              + 'registration cluster existence pred func defpred deffunc theorem '
              + 'proof let take assume then thus hence ex for st holds consider '
              + 'reconsider such that and in provided of as from be being by means '
              + 'equals implies iff redefine define now not or attr is mode '
              + 'suppose per cases set thesis contradiction scheme reserve struct '
              + 'correctness compatibility coherence symmetry assymetry '
              + 'reflexivity irreflexivity connectedness uniqueness commutativity '
              + 'idempotence involutiveness projectivity',
            contains: [ hljs.COMMENT('::', '$') ]
          };
        }
 
        mizar_1 = mizar;
        return mizar_1;
    }
 
    /*
    Language: Perl
    Author: Peter Leonov <gojpeg@yandex.ru>
    Website: https://www.perl.org
    Category: common
    */
 
    var perl_1;
    var hasRequiredPerl;
 
    function requirePerl () {
        if (hasRequiredPerl) return perl_1;
        hasRequiredPerl = 1;
        /** @type LanguageFn */
        function perl(hljs) {
          const regex = hljs.regex;
          const KEYWORDS = [
            'abs',
            'accept',
            'alarm',
            'and',
            'atan2',
            'bind',
            'binmode',
            'bless',
            'break',
            'caller',
            'chdir',
            'chmod',
            'chomp',
            'chop',
            'chown',
            'chr',
            'chroot',
            'close',
            'closedir',
            'connect',
            'continue',
            'cos',
            'crypt',
            'dbmclose',
            'dbmopen',
            'defined',
            'delete',
            'die',
            'do',
            'dump',
            'each',
            'else',
            'elsif',
            'endgrent',
            'endhostent',
            'endnetent',
            'endprotoent',
            'endpwent',
            'endservent',
            'eof',
            'eval',
            'exec',
            'exists',
            'exit',
            'exp',
            'fcntl',
            'fileno',
            'flock',
            'for',
            'foreach',
            'fork',
            'format',
            'formline',
            'getc',
            'getgrent',
            'getgrgid',
            'getgrnam',
            'gethostbyaddr',
            'gethostbyname',
            'gethostent',
            'getlogin',
            'getnetbyaddr',
            'getnetbyname',
            'getnetent',
            'getpeername',
            'getpgrp',
            'getpriority',
            'getprotobyname',
            'getprotobynumber',
            'getprotoent',
            'getpwent',
            'getpwnam',
            'getpwuid',
            'getservbyname',
            'getservbyport',
            'getservent',
            'getsockname',
            'getsockopt',
            'given',
            'glob',
            'gmtime',
            'goto',
            'grep',
            'gt',
            'hex',
            'if',
            'index',
            'int',
            'ioctl',
            'join',
            'keys',
            'kill',
            'last',
            'lc',
            'lcfirst',
            'length',
            'link',
            'listen',
            'local',
            'localtime',
            'log',
            'lstat',
            'lt',
            'ma',
            'map',
            'mkdir',
            'msgctl',
            'msgget',
            'msgrcv',
            'msgsnd',
            'my',
            'ne',
            'next',
            'no',
            'not',
            'oct',
            'open',
            'opendir',
            'or',
            'ord',
            'our',
            'pack',
            'package',
            'pipe',
            'pop',
            'pos',
            'print',
            'printf',
            'prototype',
            'push',
            'q|0',
            'qq',
            'quotemeta',
            'qw',
            'qx',
            'rand',
            'read',
            'readdir',
            'readline',
            'readlink',
            'readpipe',
            'recv',
            'redo',
            'ref',
            'rename',
            'require',
            'reset',
            'return',
            'reverse',
            'rewinddir',
            'rindex',
            'rmdir',
            'say',
            'scalar',
            'seek',
            'seekdir',
            'select',
            'semctl',
            'semget',
            'semop',
            'send',
            'setgrent',
            'sethostent',
            'setnetent',
            'setpgrp',
            'setpriority',
            'setprotoent',
            'setpwent',
            'setservent',
            'setsockopt',
            'shift',
            'shmctl',
            'shmget',
            'shmread',
            'shmwrite',
            'shutdown',
            'sin',
            'sleep',
            'socket',
            'socketpair',
            'sort',
            'splice',
            'split',
            'sprintf',
            'sqrt',
            'srand',
            'stat',
            'state',
            'study',
            'sub',
            'substr',
            'symlink',
            'syscall',
            'sysopen',
            'sysread',
            'sysseek',
            'system',
            'syswrite',
            'tell',
            'telldir',
            'tie',
            'tied',
            'time',
            'times',
            'tr',
            'truncate',
            'uc',
            'ucfirst',
            'umask',
            'undef',
            'unless',
            'unlink',
            'unpack',
            'unshift',
            'untie',
            'until',
            'use',
            'utime',
            'values',
            'vec',
            'wait',
            'waitpid',
            'wantarray',
            'warn',
            'when',
            'while',
            'write',
            'x|0',
            'xor',
            'y|0'
          ];
 
          // https://perldoc.perl.org/perlre#Modifiers
          const REGEX_MODIFIERS = /[dualxmsipngr]{0,12}/; // aa and xx are valid, making max length 12
          const PERL_KEYWORDS = {
            $pattern: /[\w.]+/,
            keyword: KEYWORDS.join(" ")
          };
          const SUBST = {
            className: 'subst',
            begin: '[$@]\\{',
            end: '\\}',
            keywords: PERL_KEYWORDS
          };
          const METHOD = {
            begin: /->\{/,
            end: /\}/
            // contains defined later
          };
          const VAR = { variants: [
            { begin: /\$\d/ },
            { begin: regex.concat(
              /[$%@](\^\w\b|#\w+(::\w+)*|\{\w+\}|\w+(::\w*)*)/,
              // negative look-ahead tries to avoid matching patterns that are not
              // Perl at all like $ident$, @ident@, etc.
              `(?![A-Za-z])(?![@$%])`
            ) },
            {
              begin: /[$%@][^\s\w{]/,
              relevance: 0
            }
          ] };
          const STRING_CONTAINS = [
            hljs.BACKSLASH_ESCAPE,
            SUBST,
            VAR
          ];
          const REGEX_DELIMS = [
            /!/,
            /\//,
            /\|/,
            /\?/,
            /'/,
            /"/, // valid but infrequent and weird
            /#/ // valid but infrequent and weird
          ];
          /**
           * @param {string|RegExp} prefix
           * @param {string|RegExp} open
           * @param {string|RegExp} close
           */
          const PAIRED_DOUBLE_RE = (prefix, open, close = '\\1') => {
            const middle = (close === '\\1')
              ? close
              : regex.concat(close, open);
            return regex.concat(
              regex.concat("(?:", prefix, ")"),
              open,
              /(?:\\.|[^\\\/])*?/,
              middle,
              /(?:\\.|[^\\\/])*?/,
              close,
              REGEX_MODIFIERS
            );
          };
          /**
           * @param {string|RegExp} prefix
           * @param {string|RegExp} open
           * @param {string|RegExp} close
           */
          const PAIRED_RE = (prefix, open, close) => {
            return regex.concat(
              regex.concat("(?:", prefix, ")"),
              open,
              /(?:\\.|[^\\\/])*?/,
              close,
              REGEX_MODIFIERS
            );
          };
          const PERL_DEFAULT_CONTAINS = [
            VAR,
            hljs.HASH_COMMENT_MODE,
            hljs.COMMENT(
              /^=\w/,
              /=cut/,
              { endsWithParent: true }
            ),
            METHOD,
            {
              className: 'string',
              contains: STRING_CONTAINS,
              variants: [
                {
                  begin: 'q[qwxr]?\\s*\\(',
                  end: '\\)',
                  relevance: 5
                },
                {
                  begin: 'q[qwxr]?\\s*\\[',
                  end: '\\]',
                  relevance: 5
                },
                {
                  begin: 'q[qwxr]?\\s*\\{',
                  end: '\\}',
                  relevance: 5
                },
                {
                  begin: 'q[qwxr]?\\s*\\|',
                  end: '\\|',
                  relevance: 5
                },
                {
                  begin: 'q[qwxr]?\\s*<',
                  end: '>',
                  relevance: 5
                },
                {
                  begin: 'qw\\s+q',
                  end: 'q',
                  relevance: 5
                },
                {
                  begin: '\'',
                  end: '\'',
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: '"',
                  end: '"'
                },
                {
                  begin: '`',
                  end: '`',
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: /\{\w+\}/,
                  relevance: 0
                },
                {
                  begin: '-?\\w+\\s*=>',
                  relevance: 0
                }
              ]
            },
            {
              className: 'number',
              begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
              relevance: 0
            },
            { // regexp container
              begin: '(\\/\\/|' + hljs.RE_STARTERS_RE + '|\\b(split|return|print|reverse|grep)\\b)\\s*',
              keywords: 'split return print reverse grep',
              relevance: 0,
              contains: [
                hljs.HASH_COMMENT_MODE,
                {
                  className: 'regexp',
                  variants: [
                    // allow matching common delimiters
                    { begin: PAIRED_DOUBLE_RE("s|tr|y", regex.either(...REGEX_DELIMS, { capture: true })) },
                    // and then paired delmis
                    { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\(", "\\)") },
                    { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\[", "\\]") },
                    { begin: PAIRED_DOUBLE_RE("s|tr|y", "\\{", "\\}") }
                  ],
                  relevance: 2
                },
                {
                  className: 'regexp',
                  variants: [
                    {
                      // could be a comment in many languages so do not count
                      // as relevant
                      begin: /(m|qr)\/\//,
                      relevance: 0
                    },
                    // prefix is optional with /regex/
                    { begin: PAIRED_RE("(?:m|qr)?", /\//, /\//) },
                    // allow matching common delimiters
                    { begin: PAIRED_RE("m|qr", regex.either(...REGEX_DELIMS, { capture: true }), /\1/) },
                    // allow common paired delmins
                    { begin: PAIRED_RE("m|qr", /\(/, /\)/) },
                    { begin: PAIRED_RE("m|qr", /\[/, /\]/) },
                    { begin: PAIRED_RE("m|qr", /\{/, /\}/) }
                  ]
                }
              ]
            },
            {
              className: 'function',
              beginKeywords: 'sub',
              end: '(\\s*\\(.*?\\))?[;{]',
              excludeEnd: true,
              relevance: 5,
              contains: [ hljs.TITLE_MODE ]
            },
            {
              begin: '-\\w\\b',
              relevance: 0
            },
            {
              begin: "^__DATA__$",
              end: "^__END__$",
              subLanguage: 'mojolicious',
              contains: [
                {
                  begin: "^@@.*",
                  end: "$",
                  className: "comment"
                }
              ]
            }
          ];
          SUBST.contains = PERL_DEFAULT_CONTAINS;
          METHOD.contains = PERL_DEFAULT_CONTAINS;
 
          return {
            name: 'Perl',
            aliases: [
              'pl',
              'pm'
            ],
            keywords: PERL_KEYWORDS,
            contains: PERL_DEFAULT_CONTAINS
          };
        }
 
        perl_1 = perl;
        return perl_1;
    }
 
    /*
    Language: Mojolicious
    Requires: xml.js, perl.js
    Author: Dotan Dimet <dotan@corky.net>
    Description: Mojolicious .ep (Embedded Perl) templates
    Website: https://mojolicious.org
    Category: template
    */
 
    var mojolicious_1;
    var hasRequiredMojolicious;
 
    function requireMojolicious () {
        if (hasRequiredMojolicious) return mojolicious_1;
        hasRequiredMojolicious = 1;
        function mojolicious(hljs) {
          return {
            name: 'Mojolicious',
            subLanguage: 'xml',
            contains: [
              {
                className: 'meta',
                begin: '^__(END|DATA)__$'
              },
              // mojolicious line
              {
                begin: "^\\s*%{1,2}={0,2}",
                end: '$',
                subLanguage: 'perl'
              },
              // mojolicious block
              {
                begin: "<%{1,2}={0,2}",
                end: "={0,1}%>",
                subLanguage: 'perl',
                excludeBegin: true,
                excludeEnd: true
              }
            ]
          };
        }
 
        mojolicious_1 = mojolicious;
        return mojolicious_1;
    }
 
    /*
    Language: Monkey
    Description: Monkey2 is an easy to use, cross platform, games oriented programming language from Blitz Research.
    Author: Arthur Bikmullin <devolonter@gmail.com>
    Website: https://blitzresearch.itch.io/monkey2
    */
 
    var monkey_1;
    var hasRequiredMonkey;
 
    function requireMonkey () {
        if (hasRequiredMonkey) return monkey_1;
        hasRequiredMonkey = 1;
        function monkey(hljs) {
          const NUMBER = {
            className: 'number',
            relevance: 0,
            variants: [
              { begin: '[$][a-fA-F0-9]+' },
              hljs.NUMBER_MODE
            ]
          };
          const FUNC_DEFINITION = {
            variants: [
              { match: [
                /(function|method)/,
                /\s+/,
                hljs.UNDERSCORE_IDENT_RE,
              ] },
            ],
            scope: {
              1: "keyword",
              3: "title.function"
            }
          };
          const CLASS_DEFINITION = {
            variants: [
              { match: [
                /(class|interface|extends|implements)/,
                /\s+/,
                hljs.UNDERSCORE_IDENT_RE,
              ] },
            ],
            scope: {
              1: "keyword",
              3: "title.class"
            }
          };
          const BUILT_INS = [
            "DebugLog",
            "DebugStop",
            "Error",
            "Print",
            "ACos",
            "ACosr",
            "ASin",
            "ASinr",
            "ATan",
            "ATan2",
            "ATan2r",
            "ATanr",
            "Abs",
            "Abs",
            "Ceil",
            "Clamp",
            "Clamp",
            "Cos",
            "Cosr",
            "Exp",
            "Floor",
            "Log",
            "Max",
            "Max",
            "Min",
            "Min",
            "Pow",
            "Sgn",
            "Sgn",
            "Sin",
            "Sinr",
            "Sqrt",
            "Tan",
            "Tanr",
            "Seed",
            "PI",
            "HALFPI",
            "TWOPI"
          ];
          const LITERALS = [
            "true",
            "false",
            "null"
          ];
          const KEYWORDS = [
            "public",
            "private",
            "property",
            "continue",
            "exit",
            "extern",
            "new",
            "try",
            "catch",
            "eachin",
            "not",
            "abstract",
            "final",
            "select",
            "case",
            "default",
            "const",
            "local",
            "global",
            "field",
            "end",
            "if",
            "then",
            "else",
            "elseif",
            "endif",
            "while",
            "wend",
            "repeat",
            "until",
            "forever",
            "for",
            "to",
            "step",
            "next",
            "return",
            "module",
            "inline",
            "throw",
            "import",
            // not positive, but these are not literals
            "and",
            "or",
            "shl",
            "shr",
            "mod"
          ];
 
          return {
            name: 'Monkey',
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_INS,
              literal: LITERALS
            },
            illegal: /\/\*/,
            contains: [
              hljs.COMMENT('#rem', '#end'),
              hljs.COMMENT(
                "'",
                '$',
                { relevance: 0 }
              ),
              FUNC_DEFINITION,
              CLASS_DEFINITION,
              {
                className: 'variable.language',
                begin: /\b(self|super)\b/
              },
              {
                className: 'meta',
                begin: /\s*#/,
                end: '$',
                keywords: { keyword: 'if else elseif endif end then' }
              },
              {
                match: [
                  /^\s*/,
                  /strict\b/
                ],
                scope: { 2: "meta" }
              },
              {
                beginKeywords: 'alias',
                end: '=',
                contains: [ hljs.UNDERSCORE_TITLE_MODE ]
              },
              hljs.QUOTE_STRING_MODE,
              NUMBER
            ]
          };
        }
 
        monkey_1 = monkey;
        return monkey_1;
    }
 
    /*
    Language: MoonScript
    Author: Billy Quith <chinbillybilbo@gmail.com>
    Description: MoonScript is a programming language that transcompiles to Lua.
    Origin: coffeescript.js
    Website: http://moonscript.org/
    Category: scripting
    */
 
    var moonscript_1;
    var hasRequiredMoonscript;
 
    function requireMoonscript () {
        if (hasRequiredMoonscript) return moonscript_1;
        hasRequiredMoonscript = 1;
        function moonscript(hljs) {
          const KEYWORDS = {
            keyword:
              // Moonscript keywords
              'if then not for in while do return else elseif break continue switch and or '
              + 'unless when class extends super local import export from using',
            literal:
              'true false nil',
            built_in:
              '_G _VERSION assert collectgarbage dofile error getfenv getmetatable ipairs load '
              + 'loadfile loadstring module next pairs pcall print rawequal rawget rawset require '
              + 'select setfenv setmetatable tonumber tostring type unpack xpcall coroutine debug '
              + 'io math os package string table'
          };
          const JS_IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
          const SUBST = {
            className: 'subst',
            begin: /#\{/,
            end: /\}/,
            keywords: KEYWORDS
          };
          const EXPRESSIONS = [
            hljs.inherit(hljs.C_NUMBER_MODE,
              { starts: {
                end: '(\\s*/)?',
                relevance: 0
              } }), // a number tries to eat the following slash to prevent treating it as a regexp
            {
              className: 'string',
              variants: [
                {
                  begin: /'/,
                  end: /'/,
                  contains: [ hljs.BACKSLASH_ESCAPE ]
                },
                {
                  begin: /"/,
                  end: /"/,
                  contains: [
                    hljs.BACKSLASH_ESCAPE,
                    SUBST
                  ]
                }
              ]
            },
            {
              className: 'built_in',
              begin: '@__' + hljs.IDENT_RE
            },
            { begin: '@' + hljs.IDENT_RE // relevance booster on par with CoffeeScript
            },
            { begin: hljs.IDENT_RE + '\\\\' + hljs.IDENT_RE // inst\method
            }
          ];
          SUBST.contains = EXPRESSIONS;
 
          const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: JS_IDENT_RE });
          const POSSIBLE_PARAMS_RE = '(\\(.*\\)\\s*)?\\B[-=]>';
          const PARAMS = {
            className: 'params',
            begin: '\\([^\\(]',
            returnBegin: true,
            /* We need another contained nameless mode to not have every nested
            pair of parens to be called "params" */
            contains: [
              {
                begin: /\(/,
                end: /\)/,
                keywords: KEYWORDS,
                contains: [ 'self' ].concat(EXPRESSIONS)
              }
            ]
          };
 
          return {
            name: 'MoonScript',
            aliases: [ 'moon' ],
            keywords: KEYWORDS,
            illegal: /\/\*/,
            contains: EXPRESSIONS.concat([
              hljs.COMMENT('--', '$'),
              {
                className: 'function', // function: -> =>
                begin: '^\\s*' + JS_IDENT_RE + '\\s*=\\s*' + POSSIBLE_PARAMS_RE,
                end: '[-=]>',
                returnBegin: true,
                contains: [
                  TITLE,
                  PARAMS
                ]
              },
              {
                begin: /[\(,:=]\s*/, // anonymous function start
                relevance: 0,
                contains: [
                  {
                    className: 'function',
                    begin: POSSIBLE_PARAMS_RE,
                    end: '[-=]>',
                    returnBegin: true,
                    contains: [ PARAMS ]
                  }
                ]
              },
              {
                className: 'class',
                beginKeywords: 'class',
                end: '$',
                illegal: /[:="\[\]]/,
                contains: [
                  {
                    beginKeywords: 'extends',
                    endsWithParent: true,
                    illegal: /[:="\[\]]/,
                    contains: [ TITLE ]
                  },
                  TITLE
                ]
              },
              {
                className: 'name', // table
                begin: JS_IDENT_RE + ':',
                end: ':',
                returnBegin: true,
                returnEnd: true,
                relevance: 0
              }
            ])
          };
        }
 
        moonscript_1 = moonscript;
        return moonscript_1;
    }
 
    /*
     Language: N1QL
     Author: Andres Täht <andres.taht@gmail.com>
     Contributors: Rene Saarsoo <nene@triin.net>
     Description: Couchbase query language
     Website: https://www.couchbase.com/products/n1ql
     */
 
    var n1ql_1;
    var hasRequiredN1ql;
 
    function requireN1ql () {
        if (hasRequiredN1ql) return n1ql_1;
        hasRequiredN1ql = 1;
        function n1ql(hljs) {
          // Taken from http://developer.couchbase.com/documentation/server/current/n1ql/n1ql-language-reference/reservedwords.html
          const KEYWORDS = [
            "all",
            "alter",
            "analyze",
            "and",
            "any",
            "array",
            "as",
            "asc",
            "begin",
            "between",
            "binary",
            "boolean",
            "break",
            "bucket",
            "build",
            "by",
            "call",
            "case",
            "cast",
            "cluster",
            "collate",
            "collection",
            "commit",
            "connect",
            "continue",
            "correlate",
            "cover",
            "create",
            "database",
            "dataset",
            "datastore",
            "declare",
            "decrement",
            "delete",
            "derived",
            "desc",
            "describe",
            "distinct",
            "do",
            "drop",
            "each",
            "element",
            "else",
            "end",
            "every",
            "except",
            "exclude",
            "execute",
            "exists",
            "explain",
            "fetch",
            "first",
            "flatten",
            "for",
            "force",
            "from",
            "function",
            "grant",
            "group",
            "gsi",
            "having",
            "if",
            "ignore",
            "ilike",
            "in",
            "include",
            "increment",
            "index",
            "infer",
            "inline",
            "inner",
            "insert",
            "intersect",
            "into",
            "is",
            "join",
            "key",
            "keys",
            "keyspace",
            "known",
            "last",
            "left",
            "let",
            "letting",
            "like",
            "limit",
            "lsm",
            "map",
            "mapping",
            "matched",
            "materialized",
            "merge",
            "minus",
            "namespace",
            "nest",
            "not",
            "number",
            "object",
            "offset",
            "on",
            "option",
            "or",
            "order",
            "outer",
            "over",
            "parse",
            "partition",
            "password",
            "path",
            "pool",
            "prepare",
            "primary",
            "private",
            "privilege",
            "procedure",
            "public",
            "raw",
            "realm",
            "reduce",
            "rename",
            "return",
            "returning",
            "revoke",
            "right",
            "role",
            "rollback",
            "satisfies",
            "schema",
            "select",
            "self",
            "semi",
            "set",
            "show",
            "some",
            "start",
            "statistics",
            "string",
            "system",
            "then",
            "to",
            "transaction",
            "trigger",
            "truncate",
            "under",
            "union",
            "unique",
            "unknown",
            "unnest",
            "unset",
            "update",
            "upsert",
            "use",
            "user",
            "using",
            "validate",
            "value",
            "valued",
            "values",
            "via",
            "view",
            "when",
            "where",
            "while",
            "with",
            "within",
            "work",
            "xor"
          ];
          // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/literals.html
          const LITERALS = [
            "true",
            "false",
            "null",
            "missing|5"
          ];
          // Taken from http://developer.couchbase.com/documentation/server/4.5/n1ql/n1ql-language-reference/functions.html
          const BUILT_INS = [
            "array_agg",
            "array_append",
            "array_concat",
            "array_contains",
            "array_count",
            "array_distinct",
            "array_ifnull",
            "array_length",
            "array_max",
            "array_min",
            "array_position",
            "array_prepend",
            "array_put",
            "array_range",
            "array_remove",
            "array_repeat",
            "array_replace",
            "array_reverse",
            "array_sort",
            "array_sum",
            "avg",
            "count",
            "max",
            "min",
            "sum",
            "greatest",
            "least",
            "ifmissing",
            "ifmissingornull",
            "ifnull",
            "missingif",
            "nullif",
            "ifinf",
            "ifnan",
            "ifnanorinf",
            "naninf",
            "neginfif",
            "posinfif",
            "clock_millis",
            "clock_str",
            "date_add_millis",
            "date_add_str",
            "date_diff_millis",
            "date_diff_str",
            "date_part_millis",
            "date_part_str",
            "date_trunc_millis",
            "date_trunc_str",
            "duration_to_str",
            "millis",
            "str_to_millis",
            "millis_to_str",
            "millis_to_utc",
            "millis_to_zone_name",
            "now_millis",
            "now_str",
            "str_to_duration",
            "str_to_utc",
            "str_to_zone_name",
            "decode_json",
            "encode_json",
            "encoded_size",
            "poly_length",
            "base64",
            "base64_encode",
            "base64_decode",
            "meta",
            "uuid",
            "abs",
            "acos",
            "asin",
            "atan",
            "atan2",
            "ceil",
            "cos",
            "degrees",
            "e",
            "exp",
            "ln",
            "log",
            "floor",
            "pi",
            "power",
            "radians",
            "random",
            "round",
            "sign",
            "sin",
            "sqrt",
            "tan",
            "trunc",
            "object_length",
            "object_names",
            "object_pairs",
            "object_inner_pairs",
            "object_values",
            "object_inner_values",
            "object_add",
            "object_put",
            "object_remove",
            "object_unwrap",
            "regexp_contains",
            "regexp_like",
            "regexp_position",
            "regexp_replace",
            "contains",
            "initcap",
            "length",
            "lower",
            "ltrim",
            "position",
            "repeat",
            "replace",
            "rtrim",
            "split",
            "substr",
            "title",
            "trim",
            "upper",
            "isarray",
            "isatom",
            "isboolean",
            "isnumber",
            "isobject",
            "isstring",
            "type",
            "toarray",
            "toatom",
            "toboolean",
            "tonumber",
            "toobject",
            "tostring"
          ];
 
          return {
            name: 'N1QL',
            case_insensitive: true,
            contains: [
              {
                beginKeywords:
                  'build create index delete drop explain infer|10 insert merge prepare select update upsert|10',
                end: /;/,
                keywords: {
                  keyword: KEYWORDS,
                  literal: LITERALS,
                  built_in: BUILT_INS
                },
                contains: [
                  {
                    className: 'string',
                    begin: '\'',
                    end: '\'',
                    contains: [ hljs.BACKSLASH_ESCAPE ]
                  },
                  {
                    className: 'string',
                    begin: '"',
                    end: '"',
                    contains: [ hljs.BACKSLASH_ESCAPE ]
                  },
                  {
                    className: 'symbol',
                    begin: '`',
                    end: '`',
                    contains: [ hljs.BACKSLASH_ESCAPE ]
                  },
                  hljs.C_NUMBER_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
        }
 
        n1ql_1 = n1ql;
        return n1ql_1;
    }
 
    /*
    Language: NestedText
    Description: NestedText is a file format for holding data that is to be entered, edited, or viewed by people.
    Website: https://nestedtext.org/
    Category: config
    */
 
    var nestedtext_1;
    var hasRequiredNestedtext;
 
    function requireNestedtext () {
        if (hasRequiredNestedtext) return nestedtext_1;
        hasRequiredNestedtext = 1;
        /** @type LanguageFn */
        function nestedtext(hljs) {
          const NESTED = {
            match: [
              /^\s*(?=\S)/, // have to look forward here to avoid polynomial backtracking
              /[^:]+/,
              /:\s*/,
              /$/
            ],
            className: {
              2: "attribute",
              3: "punctuation"
            }
          };
          const DICTIONARY_ITEM = {
            match: [
              /^\s*(?=\S)/, // have to look forward here to avoid polynomial backtracking
              /[^:]*[^: ]/,
              /[ ]*:/,
              /[ ]/,
              /.*$/
            ],
            className: {
              2: "attribute",
              3: "punctuation",
              5: "string"
            }
          };
          const STRING = {
            match: [
              /^\s*/,
              />/,
              /[ ]/,
              /.*$/
            ],
            className: {
              2: "punctuation",
              4: "string"
            }
          };
          const LIST_ITEM = {
            variants: [
              { match: [
                /^\s*/,
                /-/,
                /[ ]/,
                /.*$/
              ] },
              { match: [
                /^\s*/,
                /-$/
              ] }
            ],
            className: {
              2: "bullet",
              4: "string"
            }
          };
 
          return {
            name: 'Nested Text',
            aliases: [ 'nt' ],
            contains: [
              hljs.inherit(hljs.HASH_COMMENT_MODE, {
                begin: /^\s*(?=#)/,
                excludeBegin: true
              }),
              LIST_ITEM,
              STRING,
              NESTED,
              DICTIONARY_ITEM
            ]
          };
        }
 
        nestedtext_1 = nestedtext;
        return nestedtext_1;
    }
 
    /*
    Language: Nginx config
    Author: Peter Leonov <gojpeg@yandex.ru>
    Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Category: config, web
    Website: https://www.nginx.com
    */
 
    var nginx_1;
    var hasRequiredNginx;
 
    function requireNginx () {
        if (hasRequiredNginx) return nginx_1;
        hasRequiredNginx = 1;
        /** @type LanguageFn */
        function nginx(hljs) {
          const regex = hljs.regex;
          const VAR = {
            className: 'variable',
            variants: [
              { begin: /\$\d+/ },
              { begin: /\$\{\w+\}/ },
              { begin: regex.concat(/[$@]/, hljs.UNDERSCORE_IDENT_RE) }
            ]
          };
          const LITERALS = [
            "on",
            "off",
            "yes",
            "no",
            "true",
            "false",
            "none",
            "blocked",
            "debug",
            "info",
            "notice",
            "warn",
            "error",
            "crit",
            "select",
            "break",
            "last",
            "permanent",
            "redirect",
            "kqueue",
            "rtsig",
            "epoll",
            "poll",
            "/dev/poll"
          ];
          const DEFAULT = {
            endsWithParent: true,
            keywords: {
              $pattern: /[a-z_]{2,}|\/dev\/poll/,
              literal: LITERALS
            },
            relevance: 0,
            illegal: '=>',
            contains: [
              hljs.HASH_COMMENT_MODE,
              {
                className: 'string',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  VAR
                ],
                variants: [
                  {
                    begin: /"/,
                    end: /"/
                  },
                  {
                    begin: /'/,
                    end: /'/
                  }
                ]
              },
              // this swallows entire URLs to avoid detecting numbers within
              {
                begin: '([a-z]+):/',
                end: '\\s',
                endsWithParent: true,
                excludeEnd: true,
                contains: [ VAR ]
              },
              {
                className: 'regexp',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  VAR
                ],
                variants: [
                  {
                    begin: "\\s\\^",
                    end: "\\s|\\{|;",
                    returnEnd: true
                  },
                  // regexp locations (~, ~*)
                  {
                    begin: "~\\*?\\s+",
                    end: "\\s|\\{|;",
                    returnEnd: true
                  },
                  // *.example.com
                  { begin: "\\*(\\.[a-z\\-]+)+" },
                  // sub.example.*
                  { begin: "([a-z\\-]+\\.)+\\*" }
                ]
              },
              // IP
              {
                className: 'number',
                begin: '\\b\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}(:\\d{1,5})?\\b'
              },
              // units
              {
                className: 'number',
                begin: '\\b\\d+[kKmMgGdshdwy]?\\b',
                relevance: 0
              },
              VAR
            ]
          };
 
          return {
            name: 'Nginx config',
            aliases: [ 'nginxconf' ],
            contains: [
              hljs.HASH_COMMENT_MODE,
              {
                beginKeywords: "upstream location",
                end: /;|\{/,
                contains: DEFAULT.contains,
                keywords: { section: "upstream location" }
              },
              {
                className: 'section',
                begin: regex.concat(hljs.UNDERSCORE_IDENT_RE + regex.lookahead(/\s+\{/)),
                relevance: 0
              },
              {
                begin: regex.lookahead(hljs.UNDERSCORE_IDENT_RE + '\\s'),
                end: ';|\\{',
                contains: [
                  {
                    className: 'attribute',
                    begin: hljs.UNDERSCORE_IDENT_RE,
                    starts: DEFAULT
                  }
                ],
                relevance: 0
              }
            ],
            illegal: '[^\\s\\}\\{]'
          };
        }
 
        nginx_1 = nginx;
        return nginx_1;
    }
 
    /*
    Language: Nim
    Description: Nim is a statically typed compiled systems programming language.
    Website: https://nim-lang.org
    Category: system
    */
 
    var nim_1;
    var hasRequiredNim;
 
    function requireNim () {
        if (hasRequiredNim) return nim_1;
        hasRequiredNim = 1;
        function nim(hljs) {
          const TYPES = [
            "int",
            "int8",
            "int16",
            "int32",
            "int64",
            "uint",
            "uint8",
            "uint16",
            "uint32",
            "uint64",
            "float",
            "float32",
            "float64",
            "bool",
            "char",
            "string",
            "cstring",
            "pointer",
            "expr",
            "stmt",
            "void",
            "auto",
            "any",
            "range",
            "array",
            "openarray",
            "varargs",
            "seq",
            "set",
            "clong",
            "culong",
            "cchar",
            "cschar",
            "cshort",
            "cint",
            "csize",
            "clonglong",
            "cfloat",
            "cdouble",
            "clongdouble",
            "cuchar",
            "cushort",
            "cuint",
            "culonglong",
            "cstringarray",
            "semistatic"
          ];
          const KEYWORDS = [
            "addr",
            "and",
            "as",
            "asm",
            "bind",
            "block",
            "break",
            "case",
            "cast",
            "const",
            "continue",
            "converter",
            "discard",
            "distinct",
            "div",
            "do",
            "elif",
            "else",
            "end",
            "enum",
            "except",
            "export",
            "finally",
            "for",
            "from",
            "func",
            "generic",
            "guarded",
            "if",
            "import",
            "in",
            "include",
            "interface",
            "is",
            "isnot",
            "iterator",
            "let",
            "macro",
            "method",
            "mixin",
            "mod",
            "nil",
            "not",
            "notin",
            "object",
            "of",
            "or",
            "out",
            "proc",
            "ptr",
            "raise",
            "ref",
            "return",
            "shared",
            "shl",
            "shr",
            "static",
            "template",
            "try",
            "tuple",
            "type",
            "using",
            "var",
            "when",
            "while",
            "with",
            "without",
            "xor",
            "yield"
          ];
          const BUILT_INS = [
            "stdin",
            "stdout",
            "stderr",
            "result"
          ];
          const LITERALS = [
            "true",
            "false"
          ];
          return {
            name: 'Nim',
            keywords: {
              keyword: KEYWORDS,
              literal: LITERALS,
              type: TYPES,
              built_in: BUILT_INS
            },
            contains: [
              {
                className: 'meta', // Actually pragma
                begin: /\{\./,
                end: /\.\}/,
                relevance: 10
              },
              {
                className: 'string',
                begin: /[a-zA-Z]\w*"/,
                end: /"/,
                contains: [ { begin: /""/ } ]
              },
              {
                className: 'string',
                begin: /([a-zA-Z]\w*)?"""/,
                end: /"""/
              },
              hljs.QUOTE_STRING_MODE,
              {
                className: 'type',
                begin: /\b[A-Z]\w+\b/,
                relevance: 0
              },
              {
                className: 'number',
                relevance: 0,
                variants: [
                  { begin: /\b(0[xX][0-9a-fA-F][_0-9a-fA-F]*)('?[iIuU](8|16|32|64))?/ },
                  { begin: /\b(0o[0-7][_0-7]*)('?[iIuUfF](8|16|32|64))?/ },
                  { begin: /\b(0(b|B)[01][_01]*)('?[iIuUfF](8|16|32|64))?/ },
                  { begin: /\b(\d[_\d]*)('?[iIuUfF](8|16|32|64))?/ }
                ]
              },
              hljs.HASH_COMMENT_MODE
            ]
          };
        }
 
        nim_1 = nim;
        return nim_1;
    }
 
    /*
    Language: Nix
    Author: Domen Kožar <domen@dev.si>
    Description: Nix functional language
    Website: http://nixos.org/nix
    */
 
    var nix_1;
    var hasRequiredNix;
 
    function requireNix () {
        if (hasRequiredNix) return nix_1;
        hasRequiredNix = 1;
        function nix(hljs) {
          const KEYWORDS = {
            keyword: [
              "rec",
              "with",
              "let",
              "in",
              "inherit",
              "assert",
              "if",
              "else",
              "then"
            ],
            literal: [
              "true",
              "false",
              "or",
              "and",
              "null"
            ],
            built_in: [
              "import",
              "abort",
              "baseNameOf",
              "dirOf",
              "isNull",
              "builtins",
              "map",
              "removeAttrs",
              "throw",
              "toString",
              "derivation"
            ]
          };
          const ANTIQUOTE = {
            className: 'subst',
            begin: /\$\{/,
            end: /\}/,
            keywords: KEYWORDS
          };
          const ESCAPED_DOLLAR = {
            className: 'char.escape',
            begin: /''\$/,
          };
          const ATTRS = {
            begin: /[a-zA-Z0-9-_]+(\s*=)/,
            returnBegin: true,
            relevance: 0,
            contains: [
              {
                className: 'attr',
                begin: /\S+/,
                relevance: 0.2
              }
            ]
          };
          const STRING = {
            className: 'string',
            contains: [ ESCAPED_DOLLAR, ANTIQUOTE ],
            variants: [
              {
                begin: "''",
                end: "''"
              },
              {
                begin: '"',
                end: '"'
              }
            ]
          };
          const EXPRESSIONS = [
            hljs.NUMBER_MODE,
            hljs.HASH_COMMENT_MODE,
            hljs.C_BLOCK_COMMENT_MODE,
            STRING,
            ATTRS
          ];
          ANTIQUOTE.contains = EXPRESSIONS;
          return {
            name: 'Nix',
            aliases: [ "nixos" ],
            keywords: KEYWORDS,
            contains: EXPRESSIONS
          };
        }
 
        nix_1 = nix;
        return nix_1;
    }
 
    /*
    Language: Node REPL
    Requires: javascript.js
    Author: Marat Nagayev <nagaevmt@yandex.ru>
    Category: scripting
    */
 
    var nodeRepl_1;
    var hasRequiredNodeRepl;
 
    function requireNodeRepl () {
        if (hasRequiredNodeRepl) return nodeRepl_1;
        hasRequiredNodeRepl = 1;
        /** @type LanguageFn */
        function nodeRepl(hljs) {
          return {
            name: 'Node REPL',
            contains: [
              {
                className: 'meta.prompt',
                starts: {
                  // a space separates the REPL prefix from the actual code
                  // this is purely for cleaner HTML output
                  end: / |$/,
                  starts: {
                    end: '$',
                    subLanguage: 'javascript'
                  }
                },
                variants: [
                  { begin: /^>(?=[ ]|$)/ },
                  { begin: /^\.\.\.(?=[ ]|$)/ }
                ]
              }
            ]
          };
        }
 
        nodeRepl_1 = nodeRepl;
        return nodeRepl_1;
    }
 
    /*
    Language: NSIS
    Description: Nullsoft Scriptable Install System
    Author: Jan T. Sott <jan.sott@gmail.com>
    Website: https://nsis.sourceforge.io/Main_Page
    */
 
    var nsis_1;
    var hasRequiredNsis;
 
    function requireNsis () {
        if (hasRequiredNsis) return nsis_1;
        hasRequiredNsis = 1;
        function nsis(hljs) {
          const regex = hljs.regex;
          const LANGUAGE_CONSTANTS = [
            "ADMINTOOLS",
            "APPDATA",
            "CDBURN_AREA",
            "CMDLINE",
            "COMMONFILES32",
            "COMMONFILES64",
            "COMMONFILES",
            "COOKIES",
            "DESKTOP",
            "DOCUMENTS",
            "EXEDIR",
            "EXEFILE",
            "EXEPATH",
            "FAVORITES",
            "FONTS",
            "HISTORY",
            "HWNDPARENT",
            "INSTDIR",
            "INTERNET_CACHE",
            "LANGUAGE",
            "LOCALAPPDATA",
            "MUSIC",
            "NETHOOD",
            "OUTDIR",
            "PICTURES",
            "PLUGINSDIR",
            "PRINTHOOD",
            "PROFILE",
            "PROGRAMFILES32",
            "PROGRAMFILES64",
            "PROGRAMFILES",
            "QUICKLAUNCH",
            "RECENT",
            "RESOURCES_LOCALIZED",
            "RESOURCES",
            "SENDTO",
            "SMPROGRAMS",
            "SMSTARTUP",
            "STARTMENU",
            "SYSDIR",
            "TEMP",
            "TEMPLATES",
            "VIDEOS",
            "WINDIR"
          ];
 
          const PARAM_NAMES = [
            "ARCHIVE",
            "FILE_ATTRIBUTE_ARCHIVE",
            "FILE_ATTRIBUTE_NORMAL",
            "FILE_ATTRIBUTE_OFFLINE",
            "FILE_ATTRIBUTE_READONLY",
            "FILE_ATTRIBUTE_SYSTEM",
            "FILE_ATTRIBUTE_TEMPORARY",
            "HKCR",
            "HKCU",
            "HKDD",
            "HKEY_CLASSES_ROOT",
            "HKEY_CURRENT_CONFIG",
            "HKEY_CURRENT_USER",
            "HKEY_DYN_DATA",
            "HKEY_LOCAL_MACHINE",
            "HKEY_PERFORMANCE_DATA",
            "HKEY_USERS",
            "HKLM",
            "HKPD",
            "HKU",
            "IDABORT",
            "IDCANCEL",
            "IDIGNORE",
            "IDNO",
            "IDOK",
            "IDRETRY",
            "IDYES",
            "MB_ABORTRETRYIGNORE",
            "MB_DEFBUTTON1",
            "MB_DEFBUTTON2",
            "MB_DEFBUTTON3",
            "MB_DEFBUTTON4",
            "MB_ICONEXCLAMATION",
            "MB_ICONINFORMATION",
            "MB_ICONQUESTION",
            "MB_ICONSTOP",
            "MB_OK",
            "MB_OKCANCEL",
            "MB_RETRYCANCEL",
            "MB_RIGHT",
            "MB_RTLREADING",
            "MB_SETFOREGROUND",
            "MB_TOPMOST",
            "MB_USERICON",
            "MB_YESNO",
            "NORMAL",
            "OFFLINE",
            "READONLY",
            "SHCTX",
            "SHELL_CONTEXT",
            "SYSTEM|TEMPORARY",
          ];
 
          const COMPILER_FLAGS = [
            "addincludedir",
            "addplugindir",
            "appendfile",
            "cd",
            "define",
            "delfile",
            "echo",
            "else",
            "endif",
            "error",
            "execute",
            "finalize",
            "getdllversion",
            "gettlbversion",
            "if",
            "ifdef",
            "ifmacrodef",
            "ifmacrondef",
            "ifndef",
            "include",
            "insertmacro",
            "macro",
            "macroend",
            "makensis",
            "packhdr",
            "searchparse",
            "searchreplace",
            "system",
            "tempfile",
            "undef",
            "uninstfinalize",
            "verbose",
            "warning",
          ];
 
          const CONSTANTS = {
            className: 'variable.constant',
            begin: regex.concat(/\$/, regex.either(...LANGUAGE_CONSTANTS))
          };
 
          const DEFINES = {
            // ${defines}
            className: 'variable',
            begin: /\$+\{[\!\w.:-]+\}/
          };
 
          const VARIABLES = {
            // $variables
            className: 'variable',
            begin: /\$+\w[\w\.]*/,
            illegal: /\(\)\{\}/
          };
 
          const LANGUAGES = {
            // $(language_strings)
            className: 'variable',
            begin: /\$+\([\w^.:!-]+\)/
          };
 
          const PARAMETERS = {
            // command parameters
            className: 'params',
            begin: regex.either(...PARAM_NAMES)
          };
 
          const COMPILER = {
            // !compiler_flags
            className: 'keyword',
            begin: regex.concat(
              /!/,
              regex.either(...COMPILER_FLAGS)
            )
          };
 
          const ESCAPE_CHARS = {
            // $\n, $\r, $\t, $$
            className: 'char.escape',
            begin: /\$(\\[nrt]|\$)/
          };
 
          const PLUGINS = {
            // plug::ins
            className: 'title.function',
            begin: /\w+::\w+/
          };
 
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: '"',
                end: '"'
              },
              {
                begin: '\'',
                end: '\''
              },
              {
                begin: '`',
                end: '`'
              }
            ],
            illegal: /\n/,
            contains: [
              ESCAPE_CHARS,
              CONSTANTS,
              DEFINES,
              VARIABLES,
              LANGUAGES
            ]
          };
 
          const KEYWORDS = [
            "Abort",
            "AddBrandingImage",
            "AddSize",
            "AllowRootDirInstall",
            "AllowSkipFiles",
            "AutoCloseWindow",
            "BGFont",
            "BGGradient",
            "BrandingText",
            "BringToFront",
            "Call",
            "CallInstDLL",
            "Caption",
            "ChangeUI",
            "CheckBitmap",
            "ClearErrors",
            "CompletedText",
            "ComponentText",
            "CopyFiles",
            "CRCCheck",
            "CreateDirectory",
            "CreateFont",
            "CreateShortCut",
            "Delete",
            "DeleteINISec",
            "DeleteINIStr",
            "DeleteRegKey",
            "DeleteRegValue",
            "DetailPrint",
            "DetailsButtonText",
            "DirText",
            "DirVar",
            "DirVerify",
            "EnableWindow",
            "EnumRegKey",
            "EnumRegValue",
            "Exch",
            "Exec",
            "ExecShell",
            "ExecShellWait",
            "ExecWait",
            "ExpandEnvStrings",
            "File",
            "FileBufSize",
            "FileClose",
            "FileErrorText",
            "FileOpen",
            "FileRead",
            "FileReadByte",
            "FileReadUTF16LE",
            "FileReadWord",
            "FileWriteUTF16LE",
            "FileSeek",
            "FileWrite",
            "FileWriteByte",
            "FileWriteWord",
            "FindClose",
            "FindFirst",
            "FindNext",
            "FindWindow",
            "FlushINI",
            "GetCurInstType",
            "GetCurrentAddress",
            "GetDlgItem",
            "GetDLLVersion",
            "GetDLLVersionLocal",
            "GetErrorLevel",
            "GetFileTime",
            "GetFileTimeLocal",
            "GetFullPathName",
            "GetFunctionAddress",
            "GetInstDirError",
            "GetKnownFolderPath",
            "GetLabelAddress",
            "GetTempFileName",
            "GetWinVer",
            "Goto",
            "HideWindow",
            "Icon",
            "IfAbort",
            "IfErrors",
            "IfFileExists",
            "IfRebootFlag",
            "IfRtlLanguage",
            "IfShellVarContextAll",
            "IfSilent",
            "InitPluginsDir",
            "InstallButtonText",
            "InstallColors",
            "InstallDir",
            "InstallDirRegKey",
            "InstProgressFlags",
            "InstType",
            "InstTypeGetText",
            "InstTypeSetText",
            "Int64Cmp",
            "Int64CmpU",
            "Int64Fmt",
            "IntCmp",
            "IntCmpU",
            "IntFmt",
            "IntOp",
            "IntPtrCmp",
            "IntPtrCmpU",
            "IntPtrOp",
            "IsWindow",
            "LangString",
            "LicenseBkColor",
            "LicenseData",
            "LicenseForceSelection",
            "LicenseLangString",
            "LicenseText",
            "LoadAndSetImage",
            "LoadLanguageFile",
            "LockWindow",
            "LogSet",
            "LogText",
            "ManifestDPIAware",
            "ManifestLongPathAware",
            "ManifestMaxVersionTested",
            "ManifestSupportedOS",
            "MessageBox",
            "MiscButtonText",
            "Name|0",
            "Nop",
            "OutFile",
            "Page",
            "PageCallbacks",
            "PEAddResource",
            "PEDllCharacteristics",
            "PERemoveResource",
            "PESubsysVer",
            "Pop",
            "Push",
            "Quit",
            "ReadEnvStr",
            "ReadINIStr",
            "ReadRegDWORD",
            "ReadRegStr",
            "Reboot",
            "RegDLL",
            "Rename",
            "RequestExecutionLevel",
            "ReserveFile",
            "Return",
            "RMDir",
            "SearchPath",
            "SectionGetFlags",
            "SectionGetInstTypes",
            "SectionGetSize",
            "SectionGetText",
            "SectionIn",
            "SectionSetFlags",
            "SectionSetInstTypes",
            "SectionSetSize",
            "SectionSetText",
            "SendMessage",
            "SetAutoClose",
            "SetBrandingImage",
            "SetCompress",
            "SetCompressor",
            "SetCompressorDictSize",
            "SetCtlColors",
            "SetCurInstType",
            "SetDatablockOptimize",
            "SetDateSave",
            "SetDetailsPrint",
            "SetDetailsView",
            "SetErrorLevel",
            "SetErrors",
            "SetFileAttributes",
            "SetFont",
            "SetOutPath",
            "SetOverwrite",
            "SetRebootFlag",
            "SetRegView",
            "SetShellVarContext",
            "SetSilent",
            "ShowInstDetails",
            "ShowUninstDetails",
            "ShowWindow",
            "SilentInstall",
            "SilentUnInstall",
            "Sleep",
            "SpaceTexts",
            "StrCmp",
            "StrCmpS",
            "StrCpy",
            "StrLen",
            "SubCaption",
            "Unicode",
            "UninstallButtonText",
            "UninstallCaption",
            "UninstallIcon",
            "UninstallSubCaption",
            "UninstallText",
            "UninstPage",
            "UnRegDLL",
            "Var",
            "VIAddVersionKey",
            "VIFileVersion",
            "VIProductVersion",
            "WindowIcon",
            "WriteINIStr",
            "WriteRegBin",
            "WriteRegDWORD",
            "WriteRegExpandStr",
            "WriteRegMultiStr",
            "WriteRegNone",
            "WriteRegStr",
            "WriteUninstaller",
            "XPStyle"
          ];
 
          const LITERALS = [
            "admin",
            "all",
            "auto",
            "both",
            "bottom",
            "bzip2",
            "colored",
            "components",
            "current",
            "custom",
            "directory",
            "false",
            "force",
            "hide",
            "highest",
            "ifdiff",
            "ifnewer",
            "instfiles",
            "lastused",
            "leave",
            "left",
            "license",
            "listonly",
            "lzma",
            "nevershow",
            "none",
            "normal",
            "notset",
            "off",
            "on",
            "open",
            "print",
            "right",
            "show",
            "silent",
            "silentlog",
            "smooth",
            "textonly",
            "top",
            "true",
            "try",
            "un.components",
            "un.custom",
            "un.directory",
            "un.instfiles",
            "un.license",
            "uninstConfirm",
            "user",
            "Win10",
            "Win7",
            "Win8",
            "WinVista",
            "zlib"
          ];
 
          const FUNCTION_DEFINITION = {
            match: [
              /Function/,
              /\s+/,
              regex.concat(/(\.)?/, hljs.IDENT_RE)
            ],
            scope: {
              1: "keyword",
              3: "title.function"
            }
          };
 
          // Var Custom.Variable.Name.Item
          // Var /GLOBAL Custom.Variable.Name.Item
          const VARIABLE_NAME_RE = /[A-Za-z][\w.]*/;
          const VARIABLE_DEFINITION = {
            match: [
              /Var/,
              /\s+/,
              /(?:\/GLOBAL\s+)?/,
              VARIABLE_NAME_RE
            ],
            scope: {
              1: "keyword",
              3: "params",
              4: "variable"
            }
          };
 
          return {
            name: 'NSIS',
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              literal: LITERALS
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.COMMENT(
                ';',
                '$',
                { relevance: 0 }
              ),
              VARIABLE_DEFINITION,
              FUNCTION_DEFINITION,
              { beginKeywords: 'Function PageEx Section SectionGroup FunctionEnd SectionEnd', },
              STRING,
              COMPILER,
              DEFINES,
              VARIABLES,
              LANGUAGES,
              PARAMETERS,
              PLUGINS,
              hljs.NUMBER_MODE
            ]
          };
        }
 
        nsis_1 = nsis;
        return nsis_1;
    }
 
    /*
    Language: Objective-C
    Author: Valerii Hiora <valerii.hiora@gmail.com>
    Contributors: Angel G. Olloqui <angelgarcia.mail@gmail.com>, Matt Diephouse <matt@diephouse.com>, Andrew Farmer <ahfarmer@gmail.com>, Minh Nguyễn <mxn@1ec5.org>
    Website: https://developer.apple.com/documentation/objectivec
    Category: common
    */
 
    var objectivec_1;
    var hasRequiredObjectivec;
 
    function requireObjectivec () {
        if (hasRequiredObjectivec) return objectivec_1;
        hasRequiredObjectivec = 1;
        function objectivec(hljs) {
          const API_CLASS = {
            className: 'built_in',
            begin: '\\b(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)\\w+'
          };
          const IDENTIFIER_RE = /[a-zA-Z@][a-zA-Z0-9_]*/;
          const TYPES = [
            "int",
            "float",
            "char",
            "unsigned",
            "signed",
            "short",
            "long",
            "double",
            "wchar_t",
            "unichar",
            "void",
            "bool",
            "BOOL",
            "id|0",
            "_Bool"
          ];
          const KWS = [
            "while",
            "export",
            "sizeof",
            "typedef",
            "const",
            "struct",
            "for",
            "union",
            "volatile",
            "static",
            "mutable",
            "if",
            "do",
            "return",
            "goto",
            "enum",
            "else",
            "break",
            "extern",
            "asm",
            "case",
            "default",
            "register",
            "explicit",
            "typename",
            "switch",
            "continue",
            "inline",
            "readonly",
            "assign",
            "readwrite",
            "self",
            "@synchronized",
            "id",
            "typeof",
            "nonatomic",
            "IBOutlet",
            "IBAction",
            "strong",
            "weak",
            "copy",
            "in",
            "out",
            "inout",
            "bycopy",
            "byref",
            "oneway",
            "__strong",
            "__weak",
            "__block",
            "__autoreleasing",
            "@private",
            "@protected",
            "@public",
            "@try",
            "@property",
            "@end",
            "@throw",
            "@catch",
            "@finally",
            "@autoreleasepool",
            "@synthesize",
            "@dynamic",
            "@selector",
            "@optional",
            "@required",
            "@encode",
            "@package",
            "@import",
            "@defs",
            "@compatibility_alias",
            "__bridge",
            "__bridge_transfer",
            "__bridge_retained",
            "__bridge_retain",
            "__covariant",
            "__contravariant",
            "__kindof",
            "_Nonnull",
            "_Nullable",
            "_Null_unspecified",
            "__FUNCTION__",
            "__PRETTY_FUNCTION__",
            "__attribute__",
            "getter",
            "setter",
            "retain",
            "unsafe_unretained",
            "nonnull",
            "nullable",
            "null_unspecified",
            "null_resettable",
            "class",
            "instancetype",
            "NS_DESIGNATED_INITIALIZER",
            "NS_UNAVAILABLE",
            "NS_REQUIRES_SUPER",
            "NS_RETURNS_INNER_POINTER",
            "NS_INLINE",
            "NS_AVAILABLE",
            "NS_DEPRECATED",
            "NS_ENUM",
            "NS_OPTIONS",
            "NS_SWIFT_UNAVAILABLE",
            "NS_ASSUME_NONNULL_BEGIN",
            "NS_ASSUME_NONNULL_END",
            "NS_REFINED_FOR_SWIFT",
            "NS_SWIFT_NAME",
            "NS_SWIFT_NOTHROW",
            "NS_DURING",
            "NS_HANDLER",
            "NS_ENDHANDLER",
            "NS_VALUERETURN",
            "NS_VOIDRETURN"
          ];
          const LITERALS = [
            "false",
            "true",
            "FALSE",
            "TRUE",
            "nil",
            "YES",
            "NO",
            "NULL"
          ];
          const BUILT_INS = [
            "dispatch_once_t",
            "dispatch_queue_t",
            "dispatch_sync",
            "dispatch_async",
            "dispatch_once"
          ];
          const KEYWORDS = {
            "variable.language": [
              "this",
              "super"
            ],
            $pattern: IDENTIFIER_RE,
            keyword: KWS,
            literal: LITERALS,
            built_in: BUILT_INS,
            type: TYPES
          };
          const CLASS_KEYWORDS = {
            $pattern: IDENTIFIER_RE,
            keyword: [
              "@interface",
              "@class",
              "@protocol",
              "@implementation"
            ]
          };
          return {
            name: 'Objective-C',
            aliases: [
              'mm',
              'objc',
              'obj-c',
              'obj-c++',
              'objective-c++'
            ],
            keywords: KEYWORDS,
            illegal: '</',
            contains: [
              API_CLASS,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_NUMBER_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              {
                className: 'string',
                variants: [
                  {
                    begin: '@"',
                    end: '"',
                    illegal: '\\n',
                    contains: [ hljs.BACKSLASH_ESCAPE ]
                  }
                ]
              },
              {
                className: 'meta',
                begin: /#\s*[a-z]+\b/,
                end: /$/,
                keywords: { keyword:
                    'if else elif endif define undef warning error line '
                    + 'pragma ifdef ifndef include' },
                contains: [
                  {
                    begin: /\\\n/,
                    relevance: 0
                  },
                  hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' }),
                  {
                    className: 'string',
                    begin: /<.*?>/,
                    end: /$/,
                    illegal: '\\n'
                  },
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE
                ]
              },
              {
                className: 'class',
                begin: '(' + CLASS_KEYWORDS.keyword.join('|') + ')\\b',
                end: /(\{|$)/,
                excludeEnd: true,
                keywords: CLASS_KEYWORDS,
                contains: [ hljs.UNDERSCORE_TITLE_MODE ]
              },
              {
                begin: '\\.' + hljs.UNDERSCORE_IDENT_RE,
                relevance: 0
              }
            ]
          };
        }
 
        objectivec_1 = objectivec;
        return objectivec_1;
    }
 
    /*
    Language: OCaml
    Author: Mehdi Dogguy <mehdi@dogguy.org>
    Contributors: Nicolas Braud-Santoni <nicolas.braud-santoni@ens-cachan.fr>, Mickael Delahaye <mickael.delahaye@gmail.com>
    Description: OCaml language definition.
    Website: https://ocaml.org
    Category: functional
    */
 
    var ocaml_1;
    var hasRequiredOcaml;
 
    function requireOcaml () {
        if (hasRequiredOcaml) return ocaml_1;
        hasRequiredOcaml = 1;
        function ocaml(hljs) {
          /* missing support for heredoc-like string (OCaml 4.0.2+) */
          return {
            name: 'OCaml',
            aliases: [ 'ml' ],
            keywords: {
              $pattern: '[a-z_]\\w*!?',
              keyword:
                'and as assert asr begin class constraint do done downto else end '
                + 'exception external for fun function functor if in include '
                + 'inherit! inherit initializer land lazy let lor lsl lsr lxor match method!|10 method '
                + 'mod module mutable new object of open! open or private rec sig struct '
                + 'then to try type val! val virtual when while with '
                /* camlp4 */
                + 'parser value',
              built_in:
                /* built-in types */
                'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 string unit '
                /* (some) types in Pervasives */
                + 'in_channel out_channel ref',
              literal:
                'true false'
            },
            illegal: /\/\/|>>/,
            contains: [
              {
                className: 'literal',
                begin: '\\[(\\|\\|)?\\]|\\(\\)',
                relevance: 0
              },
              hljs.COMMENT(
                '\\(\\*',
                '\\*\\)',
                { contains: [ 'self' ] }
              ),
              { /* type variable */
                className: 'symbol',
                begin: '\'[A-Za-z_](?!\')[\\w\']*'
                /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
              },
              { /* polymorphic variant */
                className: 'type',
                begin: '`[A-Z][\\w\']*'
              },
              { /* module or constructor */
                className: 'type',
                begin: '\\b[A-Z][\\w\']*',
                relevance: 0
              },
              { /* don't color identifiers, but safely catch all identifiers with ' */
                begin: '[a-z_]\\w*\'[\\w\']*',
                relevance: 0
              },
              hljs.inherit(hljs.APOS_STRING_MODE, {
                className: 'string',
                relevance: 0
              }),
              hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
              {
                className: 'number',
                begin:
                  '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
                  + '0[oO][0-7_]+[Lln]?|'
                  + '0[bB][01_]+[Lln]?|'
                  + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
                relevance: 0
              },
              { begin: /->/ // relevance booster
              }
            ]
          };
        }
 
        ocaml_1 = ocaml;
        return ocaml_1;
    }
 
    /*
    Language: OpenSCAD
    Author: Dan Panzarella <alsoelp@gmail.com>
    Description: OpenSCAD is a language for the 3D CAD modeling software of the same name.
    Website: https://www.openscad.org
    Category: scientific
    */
 
    var openscad_1;
    var hasRequiredOpenscad;
 
    function requireOpenscad () {
        if (hasRequiredOpenscad) return openscad_1;
        hasRequiredOpenscad = 1;
        function openscad(hljs) {
          const SPECIAL_VARS = {
            className: 'keyword',
            begin: '\\$(f[asn]|t|vp[rtd]|children)'
          };
          const LITERALS = {
            className: 'literal',
            begin: 'false|true|PI|undef'
          };
          const NUMBERS = {
            className: 'number',
            begin: '\\b\\d+(\\.\\d+)?(e-?\\d+)?', // adds 1e5, 1e-10
            relevance: 0
          };
          const STRING = hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null });
          const PREPRO = {
            className: 'meta',
            keywords: { keyword: 'include use' },
            begin: 'include|use <',
            end: '>'
          };
          const PARAMS = {
            className: 'params',
            begin: '\\(',
            end: '\\)',
            contains: [
              'self',
              NUMBERS,
              STRING,
              SPECIAL_VARS,
              LITERALS
            ]
          };
          const MODIFIERS = {
            begin: '[*!#%]',
            relevance: 0
          };
          const FUNCTIONS = {
            className: 'function',
            beginKeywords: 'module function',
            end: /=|\{/,
            contains: [
              PARAMS,
              hljs.UNDERSCORE_TITLE_MODE
            ]
          };
 
          return {
            name: 'OpenSCAD',
            aliases: [ 'scad' ],
            keywords: {
              keyword: 'function module include use for intersection_for if else \\%',
              literal: 'false true PI undef',
              built_in: 'circle square polygon text sphere cube cylinder polyhedron translate rotate scale resize mirror multmatrix color offset hull minkowski union difference intersection abs sign sin cos tan acos asin atan atan2 floor round ceil ln log pow sqrt exp rands min max concat lookup str chr search version version_num norm cross parent_module echo import import_dxf dxf_linear_extrude linear_extrude rotate_extrude surface projection render children dxf_cross dxf_dim let assign'
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              NUMBERS,
              PREPRO,
              STRING,
              SPECIAL_VARS,
              MODIFIERS,
              FUNCTIONS
            ]
          };
        }
 
        openscad_1 = openscad;
        return openscad_1;
    }
 
    /*
    Language: Oxygene
    Author: Carlo Kok <ck@remobjects.com>
    Description: Oxygene is built on the foundation of Object Pascal, revamped and extended to be a modern language for the twenty-first century.
    Website: https://www.elementscompiler.com/elements/default.aspx
    */
 
    var oxygene_1;
    var hasRequiredOxygene;
 
    function requireOxygene () {
        if (hasRequiredOxygene) return oxygene_1;
        hasRequiredOxygene = 1;
        function oxygene(hljs) {
          const OXYGENE_KEYWORDS = {
            $pattern: /\.?\w+/,
            keyword:
              'abstract add and array as asc aspect assembly async begin break block by case class concat const copy constructor continue '
              + 'create default delegate desc distinct div do downto dynamic each else empty end ensure enum equals event except exit extension external false '
              + 'final finalize finalizer finally flags for forward from function future global group has if implementation implements implies in index inherited '
              + 'inline interface into invariants is iterator join locked locking loop matching method mod module namespace nested new nil not notify nullable of '
              + 'old on operator or order out override parallel params partial pinned private procedure property protected public queryable raise read readonly '
              + 'record reintroduce remove repeat require result reverse sealed select self sequence set shl shr skip static step soft take then to true try tuple '
              + 'type union unit unsafe until uses using var virtual raises volatile where while with write xor yield await mapped deprecated stdcall cdecl pascal '
              + 'register safecall overload library platform reference packed strict published autoreleasepool selector strong weak unretained'
          };
          const CURLY_COMMENT = hljs.COMMENT(
            /\{/,
            /\}/,
            { relevance: 0 }
          );
          const PAREN_COMMENT = hljs.COMMENT(
            '\\(\\*',
            '\\*\\)',
            { relevance: 10 }
          );
          const STRING = {
            className: 'string',
            begin: '\'',
            end: '\'',
            contains: [ { begin: '\'\'' } ]
          };
          const CHAR_STRING = {
            className: 'string',
            begin: '(#\\d+)+'
          };
          const FUNCTION = {
            beginKeywords: 'function constructor destructor procedure method',
            end: '[:;]',
            keywords: 'function constructor|10 destructor|10 procedure|10 method|10',
            contains: [
              hljs.inherit(hljs.TITLE_MODE, { scope: "title.function" }),
              {
                className: 'params',
                begin: '\\(',
                end: '\\)',
                keywords: OXYGENE_KEYWORDS,
                contains: [
                  STRING,
                  CHAR_STRING
                ]
              },
              CURLY_COMMENT,
              PAREN_COMMENT
            ]
          };
 
          const SEMICOLON = {
            scope: "punctuation",
            match: /;/,
            relevance: 0
          };
 
          return {
            name: 'Oxygene',
            case_insensitive: true,
            keywords: OXYGENE_KEYWORDS,
            illegal: '("|\\$[G-Zg-z]|\\/\\*|</|=>|->)',
            contains: [
              CURLY_COMMENT,
              PAREN_COMMENT,
              hljs.C_LINE_COMMENT_MODE,
              STRING,
              CHAR_STRING,
              hljs.NUMBER_MODE,
              FUNCTION,
              SEMICOLON
            ]
          };
        }
 
        oxygene_1 = oxygene;
        return oxygene_1;
    }
 
    /*
    Language: Parser3
    Requires: xml.js
    Author: Oleg Volchkov <oleg@volchkov.net>
    Website: https://www.parser.ru/en/
    Category: template
    */
 
    var parser3_1;
    var hasRequiredParser3;
 
    function requireParser3 () {
        if (hasRequiredParser3) return parser3_1;
        hasRequiredParser3 = 1;
        function parser3(hljs) {
          const CURLY_SUBCOMMENT = hljs.COMMENT(
            /\{/,
            /\}/,
            { contains: [ 'self' ] }
          );
          return {
            name: 'Parser3',
            subLanguage: 'xml',
            relevance: 0,
            contains: [
              hljs.COMMENT('^#', '$'),
              hljs.COMMENT(
                /\^rem\{/,
                /\}/,
                {
                  relevance: 10,
                  contains: [ CURLY_SUBCOMMENT ]
                }
              ),
              {
                className: 'meta',
                begin: '^@(?:BASE|USE|CLASS|OPTIONS)$',
                relevance: 10
              },
              {
                className: 'title',
                begin: '@[\\w\\-]+\\[[\\w^;\\-]*\\](?:\\[[\\w^;\\-]*\\])?(?:.*)$'
              },
              {
                className: 'variable',
                begin: /\$\{?[\w\-.:]+\}?/
              },
              {
                className: 'keyword',
                begin: /\^[\w\-.:]+/
              },
              {
                className: 'number',
                begin: '\\^#[0-9a-fA-F]+'
              },
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        parser3_1 = parser3;
        return parser3_1;
    }
 
    /*
    Language: Packet Filter config
    Description: pf.conf — packet filter configuration file (OpenBSD)
    Author: Peter Piwowarski <oldlaptop654@aol.com>
    Website: http://man.openbsd.org/pf.conf
    Category: config
    */
 
    var pf_1;
    var hasRequiredPf;
 
    function requirePf () {
        if (hasRequiredPf) return pf_1;
        hasRequiredPf = 1;
        function pf(hljs) {
          const MACRO = {
            className: 'variable',
            begin: /\$[\w\d#@][\w\d_]*/,
            relevance: 0
          };
          const TABLE = {
            className: 'variable',
            begin: /<(?!\/)/,
            end: />/
          };
 
          return {
            name: 'Packet Filter config',
            aliases: [ 'pf.conf' ],
            keywords: {
              $pattern: /[a-z0-9_<>-]+/,
              built_in: /* block match pass are "actions" in pf.conf(5), the rest are
                         * lexically similar top-level commands.
                         */
                'block match pass load anchor|5 antispoof|10 set table',
              keyword:
                'in out log quick on rdomain inet inet6 proto from port os to route '
                + 'allow-opts divert-packet divert-reply divert-to flags group icmp-type '
                + 'icmp6-type label once probability recieved-on rtable prio queue '
                + 'tos tag tagged user keep fragment for os drop '
                + 'af-to|10 binat-to|10 nat-to|10 rdr-to|10 bitmask least-stats random round-robin '
                + 'source-hash static-port '
                + 'dup-to reply-to route-to '
                + 'parent bandwidth default min max qlimit '
                + 'block-policy debug fingerprints hostid limit loginterface optimization '
                + 'reassemble ruleset-optimization basic none profile skip state-defaults '
                + 'state-policy timeout '
                + 'const counters persist '
                + 'no modulate synproxy state|5 floating if-bound no-sync pflow|10 sloppy '
                + 'source-track global rule max-src-nodes max-src-states max-src-conn '
                + 'max-src-conn-rate overload flush '
                + 'scrub|5 max-mss min-ttl no-df|10 random-id',
              literal:
                'all any no-route self urpf-failed egress|5 unknown'
            },
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.NUMBER_MODE,
              hljs.QUOTE_STRING_MODE,
              MACRO,
              TABLE
            ]
          };
        }
 
        pf_1 = pf;
        return pf_1;
    }
 
    /*
    Language: PostgreSQL and PL/pgSQL
    Author: Egor Rogov (e.rogov@postgrespro.ru)
    Website: https://www.postgresql.org/docs/11/sql.html
    Description:
        This language incorporates both PostgreSQL SQL dialect and PL/pgSQL language.
        It is based on PostgreSQL version 11. Some notes:
        - Text in double-dollar-strings is _always_ interpreted as some programming code. Text
          in ordinary quotes is _never_ interpreted that way and highlighted just as a string.
        - There are quite a bit "special cases". That's because many keywords are not strictly
          they are keywords in some contexts and ordinary identifiers in others. Only some
          of such cases are handled; you still can get some of your identifiers highlighted
          wrong way.
        - Function names deliberately are not highlighted. There is no way to tell function
          call from other constructs, hence we can't highlight _all_ function names. And
          some names highlighted while others not looks ugly.
    */
 
    var pgsql_1;
    var hasRequiredPgsql;
 
    function requirePgsql () {
        if (hasRequiredPgsql) return pgsql_1;
        hasRequiredPgsql = 1;
        function pgsql(hljs) {
          const COMMENT_MODE = hljs.COMMENT('--', '$');
          const UNQUOTED_IDENT = '[a-zA-Z_][a-zA-Z_0-9$]*';
          const DOLLAR_STRING = '\\$([a-zA-Z_]?|[a-zA-Z_][a-zA-Z_0-9]*)\\$';
          const LABEL = '<<\\s*' + UNQUOTED_IDENT + '\\s*>>';
 
          const SQL_KW =
            // https://www.postgresql.org/docs/11/static/sql-keywords-appendix.html
            // https://www.postgresql.org/docs/11/static/sql-commands.html
            // SQL commands (starting words)
            'ABORT ALTER ANALYZE BEGIN CALL CHECKPOINT|10 CLOSE CLUSTER COMMENT COMMIT COPY CREATE DEALLOCATE DECLARE '
            + 'DELETE DISCARD DO DROP END EXECUTE EXPLAIN FETCH GRANT IMPORT INSERT LISTEN LOAD LOCK MOVE NOTIFY '
            + 'PREPARE REASSIGN|10 REFRESH REINDEX RELEASE RESET REVOKE ROLLBACK SAVEPOINT SECURITY SELECT SET SHOW '
            + 'START TRUNCATE UNLISTEN|10 UPDATE VACUUM|10 VALUES '
            // SQL commands (others)
            + 'AGGREGATE COLLATION CONVERSION|10 DATABASE DEFAULT PRIVILEGES DOMAIN TRIGGER EXTENSION FOREIGN '
            + 'WRAPPER|10 TABLE FUNCTION GROUP LANGUAGE LARGE OBJECT MATERIALIZED VIEW OPERATOR CLASS '
            + 'FAMILY POLICY PUBLICATION|10 ROLE RULE SCHEMA SEQUENCE SERVER STATISTICS SUBSCRIPTION SYSTEM '
            + 'TABLESPACE CONFIGURATION DICTIONARY PARSER TEMPLATE TYPE USER MAPPING PREPARED ACCESS '
            + 'METHOD CAST AS TRANSFORM TRANSACTION OWNED TO INTO SESSION AUTHORIZATION '
            + 'INDEX PROCEDURE ASSERTION '
            // additional reserved key words
            + 'ALL ANALYSE AND ANY ARRAY ASC ASYMMETRIC|10 BOTH CASE CHECK '
            + 'COLLATE COLUMN CONCURRENTLY|10 CONSTRAINT CROSS '
            + 'DEFERRABLE RANGE '
            + 'DESC DISTINCT ELSE EXCEPT FOR FREEZE|10 FROM FULL HAVING '
            + 'ILIKE IN INITIALLY INNER INTERSECT IS ISNULL JOIN LATERAL LEADING LIKE LIMIT '
            + 'NATURAL NOT NOTNULL NULL OFFSET ON ONLY OR ORDER OUTER OVERLAPS PLACING PRIMARY '
            + 'REFERENCES RETURNING SIMILAR SOME SYMMETRIC TABLESAMPLE THEN '
            + 'TRAILING UNION UNIQUE USING VARIADIC|10 VERBOSE WHEN WHERE WINDOW WITH '
            // some of non-reserved (which are used in clauses or as PL/pgSQL keyword)
            + 'BY RETURNS INOUT OUT SETOF|10 IF STRICT CURRENT CONTINUE OWNER LOCATION OVER PARTITION WITHIN '
            + 'BETWEEN ESCAPE EXTERNAL INVOKER DEFINER WORK RENAME VERSION CONNECTION CONNECT '
            + 'TABLES TEMP TEMPORARY FUNCTIONS SEQUENCES TYPES SCHEMAS OPTION CASCADE RESTRICT ADD ADMIN '
            + 'EXISTS VALID VALIDATE ENABLE DISABLE REPLICA|10 ALWAYS PASSING COLUMNS PATH '
            + 'REF VALUE OVERRIDING IMMUTABLE STABLE VOLATILE BEFORE AFTER EACH ROW PROCEDURAL '
            + 'ROUTINE NO HANDLER VALIDATOR OPTIONS STORAGE OIDS|10 WITHOUT INHERIT DEPENDS CALLED '
            + 'INPUT LEAKPROOF|10 COST ROWS NOWAIT SEARCH UNTIL ENCRYPTED|10 PASSWORD CONFLICT|10 '
            + 'INSTEAD INHERITS CHARACTERISTICS WRITE CURSOR ALSO STATEMENT SHARE EXCLUSIVE INLINE '
            + 'ISOLATION REPEATABLE READ COMMITTED SERIALIZABLE UNCOMMITTED LOCAL GLOBAL SQL PROCEDURES '
            + 'RECURSIVE SNAPSHOT ROLLUP CUBE TRUSTED|10 INCLUDE FOLLOWING PRECEDING UNBOUNDED RANGE GROUPS '
            + 'UNENCRYPTED|10 SYSID FORMAT DELIMITER HEADER QUOTE ENCODING FILTER OFF '
            // some parameters of VACUUM/ANALYZE/EXPLAIN
            + 'FORCE_QUOTE FORCE_NOT_NULL FORCE_NULL COSTS BUFFERS TIMING SUMMARY DISABLE_PAGE_SKIPPING '
            //
            + 'RESTART CYCLE GENERATED IDENTITY DEFERRED IMMEDIATE LEVEL LOGGED UNLOGGED '
            + 'OF NOTHING NONE EXCLUDE ATTRIBUTE '
            // from GRANT (not keywords actually)
            + 'USAGE ROUTINES '
            // actually literals, but look better this way (due to IS TRUE, IS FALSE, ISNULL etc)
            + 'TRUE FALSE NAN INFINITY ';
 
          const ROLE_ATTRS = // only those not in keywrods already
            'SUPERUSER NOSUPERUSER CREATEDB NOCREATEDB CREATEROLE NOCREATEROLE INHERIT NOINHERIT '
            + 'LOGIN NOLOGIN REPLICATION NOREPLICATION BYPASSRLS NOBYPASSRLS ';
 
          const PLPGSQL_KW =
            'ALIAS BEGIN CONSTANT DECLARE END EXCEPTION RETURN PERFORM|10 RAISE GET DIAGNOSTICS '
            + 'STACKED|10 FOREACH LOOP ELSIF EXIT WHILE REVERSE SLICE DEBUG LOG INFO NOTICE WARNING ASSERT '
            + 'OPEN ';
 
          const TYPES =
            // https://www.postgresql.org/docs/11/static/datatype.html
            'BIGINT INT8 BIGSERIAL SERIAL8 BIT VARYING VARBIT BOOLEAN BOOL BOX BYTEA CHARACTER CHAR VARCHAR '
            + 'CIDR CIRCLE DATE DOUBLE PRECISION FLOAT8 FLOAT INET INTEGER INT INT4 INTERVAL JSON JSONB LINE LSEG|10 '
            + 'MACADDR MACADDR8 MONEY NUMERIC DEC DECIMAL PATH POINT POLYGON REAL FLOAT4 SMALLINT INT2 '
            + 'SMALLSERIAL|10 SERIAL2|10 SERIAL|10 SERIAL4|10 TEXT TIME ZONE TIMETZ|10 TIMESTAMP TIMESTAMPTZ|10 TSQUERY|10 TSVECTOR|10 '
            + 'TXID_SNAPSHOT|10 UUID XML NATIONAL NCHAR '
            + 'INT4RANGE|10 INT8RANGE|10 NUMRANGE|10 TSRANGE|10 TSTZRANGE|10 DATERANGE|10 '
            // pseudotypes
            + 'ANYELEMENT ANYARRAY ANYNONARRAY ANYENUM ANYRANGE CSTRING INTERNAL '
            + 'RECORD PG_DDL_COMMAND VOID UNKNOWN OPAQUE REFCURSOR '
            // spec. type
            + 'NAME '
            // OID-types
            + 'OID REGPROC|10 REGPROCEDURE|10 REGOPER|10 REGOPERATOR|10 REGCLASS|10 REGTYPE|10 REGROLE|10 '
            + 'REGNAMESPACE|10 REGCONFIG|10 REGDICTIONARY|10 ';// +
 
          const TYPES_RE =
            TYPES.trim()
              .split(' ')
              .map(function(val) { return val.split('|')[0]; })
              .join('|');
 
          const SQL_BI =
            'CURRENT_TIME CURRENT_TIMESTAMP CURRENT_USER CURRENT_CATALOG|10 CURRENT_DATE LOCALTIME LOCALTIMESTAMP '
            + 'CURRENT_ROLE|10 CURRENT_SCHEMA|10 SESSION_USER PUBLIC ';
 
          const PLPGSQL_BI =
            'FOUND NEW OLD TG_NAME|10 TG_WHEN|10 TG_LEVEL|10 TG_OP|10 TG_RELID|10 TG_RELNAME|10 '
            + 'TG_TABLE_NAME|10 TG_TABLE_SCHEMA|10 TG_NARGS|10 TG_ARGV|10 TG_EVENT|10 TG_TAG|10 '
            // get diagnostics
            + 'ROW_COUNT RESULT_OID|10 PG_CONTEXT|10 RETURNED_SQLSTATE COLUMN_NAME CONSTRAINT_NAME '
            + 'PG_DATATYPE_NAME|10 MESSAGE_TEXT TABLE_NAME SCHEMA_NAME PG_EXCEPTION_DETAIL|10 '
            + 'PG_EXCEPTION_HINT|10 PG_EXCEPTION_CONTEXT|10 ';
 
          const PLPGSQL_EXCEPTIONS =
            // exceptions https://www.postgresql.org/docs/current/static/errcodes-appendix.html
            'SQLSTATE SQLERRM|10 '
            + 'SUCCESSFUL_COMPLETION WARNING DYNAMIC_RESULT_SETS_RETURNED IMPLICIT_ZERO_BIT_PADDING '
            + 'NULL_VALUE_ELIMINATED_IN_SET_FUNCTION PRIVILEGE_NOT_GRANTED PRIVILEGE_NOT_REVOKED '
            + 'STRING_DATA_RIGHT_TRUNCATION DEPRECATED_FEATURE NO_DATA NO_ADDITIONAL_DYNAMIC_RESULT_SETS_RETURNED '
            + 'SQL_STATEMENT_NOT_YET_COMPLETE CONNECTION_EXCEPTION CONNECTION_DOES_NOT_EXIST CONNECTION_FAILURE '
            + 'SQLCLIENT_UNABLE_TO_ESTABLISH_SQLCONNECTION SQLSERVER_REJECTED_ESTABLISHMENT_OF_SQLCONNECTION '
            + 'TRANSACTION_RESOLUTION_UNKNOWN PROTOCOL_VIOLATION TRIGGERED_ACTION_EXCEPTION FEATURE_NOT_SUPPORTED '
            + 'INVALID_TRANSACTION_INITIATION LOCATOR_EXCEPTION INVALID_LOCATOR_SPECIFICATION INVALID_GRANTOR '
            + 'INVALID_GRANT_OPERATION INVALID_ROLE_SPECIFICATION DIAGNOSTICS_EXCEPTION '
            + 'STACKED_DIAGNOSTICS_ACCESSED_WITHOUT_ACTIVE_HANDLER CASE_NOT_FOUND CARDINALITY_VIOLATION '
            + 'DATA_EXCEPTION ARRAY_SUBSCRIPT_ERROR CHARACTER_NOT_IN_REPERTOIRE DATETIME_FIELD_OVERFLOW '
            + 'DIVISION_BY_ZERO ERROR_IN_ASSIGNMENT ESCAPE_CHARACTER_CONFLICT INDICATOR_OVERFLOW '
            + 'INTERVAL_FIELD_OVERFLOW INVALID_ARGUMENT_FOR_LOGARITHM INVALID_ARGUMENT_FOR_NTILE_FUNCTION '
            + 'INVALID_ARGUMENT_FOR_NTH_VALUE_FUNCTION INVALID_ARGUMENT_FOR_POWER_FUNCTION '
            + 'INVALID_ARGUMENT_FOR_WIDTH_BUCKET_FUNCTION INVALID_CHARACTER_VALUE_FOR_CAST '
            + 'INVALID_DATETIME_FORMAT INVALID_ESCAPE_CHARACTER INVALID_ESCAPE_OCTET INVALID_ESCAPE_SEQUENCE '
            + 'NONSTANDARD_USE_OF_ESCAPE_CHARACTER INVALID_INDICATOR_PARAMETER_VALUE INVALID_PARAMETER_VALUE '
            + 'INVALID_REGULAR_EXPRESSION INVALID_ROW_COUNT_IN_LIMIT_CLAUSE '
            + 'INVALID_ROW_COUNT_IN_RESULT_OFFSET_CLAUSE INVALID_TABLESAMPLE_ARGUMENT INVALID_TABLESAMPLE_REPEAT '
            + 'INVALID_TIME_ZONE_DISPLACEMENT_VALUE INVALID_USE_OF_ESCAPE_CHARACTER MOST_SPECIFIC_TYPE_MISMATCH '
            + 'NULL_VALUE_NOT_ALLOWED NULL_VALUE_NO_INDICATOR_PARAMETER NUMERIC_VALUE_OUT_OF_RANGE '
            + 'SEQUENCE_GENERATOR_LIMIT_EXCEEDED STRING_DATA_LENGTH_MISMATCH STRING_DATA_RIGHT_TRUNCATION '
            + 'SUBSTRING_ERROR TRIM_ERROR UNTERMINATED_C_STRING ZERO_LENGTH_CHARACTER_STRING '
            + 'FLOATING_POINT_EXCEPTION INVALID_TEXT_REPRESENTATION INVALID_BINARY_REPRESENTATION '
            + 'BAD_COPY_FILE_FORMAT UNTRANSLATABLE_CHARACTER NOT_AN_XML_DOCUMENT INVALID_XML_DOCUMENT '
            + 'INVALID_XML_CONTENT INVALID_XML_COMMENT INVALID_XML_PROCESSING_INSTRUCTION '
            + 'INTEGRITY_CONSTRAINT_VIOLATION RESTRICT_VIOLATION NOT_NULL_VIOLATION FOREIGN_KEY_VIOLATION '
            + 'UNIQUE_VIOLATION CHECK_VIOLATION EXCLUSION_VIOLATION INVALID_CURSOR_STATE '
            + 'INVALID_TRANSACTION_STATE ACTIVE_SQL_TRANSACTION BRANCH_TRANSACTION_ALREADY_ACTIVE '
            + 'HELD_CURSOR_REQUIRES_SAME_ISOLATION_LEVEL INAPPROPRIATE_ACCESS_MODE_FOR_BRANCH_TRANSACTION '
            + 'INAPPROPRIATE_ISOLATION_LEVEL_FOR_BRANCH_TRANSACTION '
            + 'NO_ACTIVE_SQL_TRANSACTION_FOR_BRANCH_TRANSACTION READ_ONLY_SQL_TRANSACTION '
            + 'SCHEMA_AND_DATA_STATEMENT_MIXING_NOT_SUPPORTED NO_ACTIVE_SQL_TRANSACTION '
            + 'IN_FAILED_SQL_TRANSACTION IDLE_IN_TRANSACTION_SESSION_TIMEOUT INVALID_SQL_STATEMENT_NAME '
            + 'TRIGGERED_DATA_CHANGE_VIOLATION INVALID_AUTHORIZATION_SPECIFICATION INVALID_PASSWORD '
            + 'DEPENDENT_PRIVILEGE_DESCRIPTORS_STILL_EXIST DEPENDENT_OBJECTS_STILL_EXIST '
            + 'INVALID_TRANSACTION_TERMINATION SQL_ROUTINE_EXCEPTION FUNCTION_EXECUTED_NO_RETURN_STATEMENT '
            + 'MODIFYING_SQL_DATA_NOT_PERMITTED PROHIBITED_SQL_STATEMENT_ATTEMPTED '
            + 'READING_SQL_DATA_NOT_PERMITTED INVALID_CURSOR_NAME EXTERNAL_ROUTINE_EXCEPTION '
            + 'CONTAINING_SQL_NOT_PERMITTED MODIFYING_SQL_DATA_NOT_PERMITTED '
            + 'PROHIBITED_SQL_STATEMENT_ATTEMPTED READING_SQL_DATA_NOT_PERMITTED '
            + 'EXTERNAL_ROUTINE_INVOCATION_EXCEPTION INVALID_SQLSTATE_RETURNED NULL_VALUE_NOT_ALLOWED '
            + 'TRIGGER_PROTOCOL_VIOLATED SRF_PROTOCOL_VIOLATED EVENT_TRIGGER_PROTOCOL_VIOLATED '
            + 'SAVEPOINT_EXCEPTION INVALID_SAVEPOINT_SPECIFICATION INVALID_CATALOG_NAME '
            + 'INVALID_SCHEMA_NAME TRANSACTION_ROLLBACK TRANSACTION_INTEGRITY_CONSTRAINT_VIOLATION '
            + 'SERIALIZATION_FAILURE STATEMENT_COMPLETION_UNKNOWN DEADLOCK_DETECTED '
            + 'SYNTAX_ERROR_OR_ACCESS_RULE_VIOLATION SYNTAX_ERROR INSUFFICIENT_PRIVILEGE CANNOT_COERCE '
            + 'GROUPING_ERROR WINDOWING_ERROR INVALID_RECURSION INVALID_FOREIGN_KEY INVALID_NAME '
            + 'NAME_TOO_LONG RESERVED_NAME DATATYPE_MISMATCH INDETERMINATE_DATATYPE COLLATION_MISMATCH '
            + 'INDETERMINATE_COLLATION WRONG_OBJECT_TYPE GENERATED_ALWAYS UNDEFINED_COLUMN '
            + 'UNDEFINED_FUNCTION UNDEFINED_TABLE UNDEFINED_PARAMETER UNDEFINED_OBJECT '
            + 'DUPLICATE_COLUMN DUPLICATE_CURSOR DUPLICATE_DATABASE DUPLICATE_FUNCTION '
            + 'DUPLICATE_PREPARED_STATEMENT DUPLICATE_SCHEMA DUPLICATE_TABLE DUPLICATE_ALIAS '
            + 'DUPLICATE_OBJECT AMBIGUOUS_COLUMN AMBIGUOUS_FUNCTION AMBIGUOUS_PARAMETER AMBIGUOUS_ALIAS '
            + 'INVALID_COLUMN_REFERENCE INVALID_COLUMN_DEFINITION INVALID_CURSOR_DEFINITION '
            + 'INVALID_DATABASE_DEFINITION INVALID_FUNCTION_DEFINITION '
            + 'INVALID_PREPARED_STATEMENT_DEFINITION INVALID_SCHEMA_DEFINITION INVALID_TABLE_DEFINITION '
            + 'INVALID_OBJECT_DEFINITION WITH_CHECK_OPTION_VIOLATION INSUFFICIENT_RESOURCES DISK_FULL '
            + 'OUT_OF_MEMORY TOO_MANY_CONNECTIONS CONFIGURATION_LIMIT_EXCEEDED PROGRAM_LIMIT_EXCEEDED '
            + 'STATEMENT_TOO_COMPLEX TOO_MANY_COLUMNS TOO_MANY_ARGUMENTS OBJECT_NOT_IN_PREREQUISITE_STATE '
            + 'OBJECT_IN_USE CANT_CHANGE_RUNTIME_PARAM LOCK_NOT_AVAILABLE OPERATOR_INTERVENTION '
            + 'QUERY_CANCELED ADMIN_SHUTDOWN CRASH_SHUTDOWN CANNOT_CONNECT_NOW DATABASE_DROPPED '
            + 'SYSTEM_ERROR IO_ERROR UNDEFINED_FILE DUPLICATE_FILE SNAPSHOT_TOO_OLD CONFIG_FILE_ERROR '
            + 'LOCK_FILE_EXISTS FDW_ERROR FDW_COLUMN_NAME_NOT_FOUND FDW_DYNAMIC_PARAMETER_VALUE_NEEDED '
            + 'FDW_FUNCTION_SEQUENCE_ERROR FDW_INCONSISTENT_DESCRIPTOR_INFORMATION '
            + 'FDW_INVALID_ATTRIBUTE_VALUE FDW_INVALID_COLUMN_NAME FDW_INVALID_COLUMN_NUMBER '
            + 'FDW_INVALID_DATA_TYPE FDW_INVALID_DATA_TYPE_DESCRIPTORS '
            + 'FDW_INVALID_DESCRIPTOR_FIELD_IDENTIFIER FDW_INVALID_HANDLE FDW_INVALID_OPTION_INDEX '
            + 'FDW_INVALID_OPTION_NAME FDW_INVALID_STRING_LENGTH_OR_BUFFER_LENGTH '
            + 'FDW_INVALID_STRING_FORMAT FDW_INVALID_USE_OF_NULL_POINTER FDW_TOO_MANY_HANDLES '
            + 'FDW_OUT_OF_MEMORY FDW_NO_SCHEMAS FDW_OPTION_NAME_NOT_FOUND FDW_REPLY_HANDLE '
            + 'FDW_SCHEMA_NOT_FOUND FDW_TABLE_NOT_FOUND FDW_UNABLE_TO_CREATE_EXECUTION '
            + 'FDW_UNABLE_TO_CREATE_REPLY FDW_UNABLE_TO_ESTABLISH_CONNECTION PLPGSQL_ERROR '
            + 'RAISE_EXCEPTION NO_DATA_FOUND TOO_MANY_ROWS ASSERT_FAILURE INTERNAL_ERROR DATA_CORRUPTED '
            + 'INDEX_CORRUPTED ';
 
          const FUNCTIONS =
            // https://www.postgresql.org/docs/11/static/functions-aggregate.html
            'ARRAY_AGG AVG BIT_AND BIT_OR BOOL_AND BOOL_OR COUNT EVERY JSON_AGG JSONB_AGG JSON_OBJECT_AGG '
            + 'JSONB_OBJECT_AGG MAX MIN MODE STRING_AGG SUM XMLAGG '
            + 'CORR COVAR_POP COVAR_SAMP REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE '
            + 'REGR_SXX REGR_SXY REGR_SYY STDDEV STDDEV_POP STDDEV_SAMP VARIANCE VAR_POP VAR_SAMP '
            + 'PERCENTILE_CONT PERCENTILE_DISC '
            // https://www.postgresql.org/docs/11/static/functions-window.html
            + 'ROW_NUMBER RANK DENSE_RANK PERCENT_RANK CUME_DIST NTILE LAG LEAD FIRST_VALUE LAST_VALUE NTH_VALUE '
            // https://www.postgresql.org/docs/11/static/functions-comparison.html
            + 'NUM_NONNULLS NUM_NULLS '
            // https://www.postgresql.org/docs/11/static/functions-math.html
            + 'ABS CBRT CEIL CEILING DEGREES DIV EXP FLOOR LN LOG MOD PI POWER RADIANS ROUND SCALE SIGN SQRT '
            + 'TRUNC WIDTH_BUCKET '
            + 'RANDOM SETSEED '
            + 'ACOS ACOSD ASIN ASIND ATAN ATAND ATAN2 ATAN2D COS COSD COT COTD SIN SIND TAN TAND '
            // https://www.postgresql.org/docs/11/static/functions-string.html
            + 'BIT_LENGTH CHAR_LENGTH CHARACTER_LENGTH LOWER OCTET_LENGTH OVERLAY POSITION SUBSTRING TREAT TRIM UPPER '
            + 'ASCII BTRIM CHR CONCAT CONCAT_WS CONVERT CONVERT_FROM CONVERT_TO DECODE ENCODE INITCAP '
            + 'LEFT LENGTH LPAD LTRIM MD5 PARSE_IDENT PG_CLIENT_ENCODING QUOTE_IDENT|10 QUOTE_LITERAL|10 '
            + 'QUOTE_NULLABLE|10 REGEXP_MATCH REGEXP_MATCHES REGEXP_REPLACE REGEXP_SPLIT_TO_ARRAY '
            + 'REGEXP_SPLIT_TO_TABLE REPEAT REPLACE REVERSE RIGHT RPAD RTRIM SPLIT_PART STRPOS SUBSTR '
            + 'TO_ASCII TO_HEX TRANSLATE '
            // https://www.postgresql.org/docs/11/static/functions-binarystring.html
            + 'OCTET_LENGTH GET_BIT GET_BYTE SET_BIT SET_BYTE '
            // https://www.postgresql.org/docs/11/static/functions-formatting.html
            + 'TO_CHAR TO_DATE TO_NUMBER TO_TIMESTAMP '
            // https://www.postgresql.org/docs/11/static/functions-datetime.html
            + 'AGE CLOCK_TIMESTAMP|10 DATE_PART DATE_TRUNC ISFINITE JUSTIFY_DAYS JUSTIFY_HOURS JUSTIFY_INTERVAL '
            + 'MAKE_DATE MAKE_INTERVAL|10 MAKE_TIME MAKE_TIMESTAMP|10 MAKE_TIMESTAMPTZ|10 NOW STATEMENT_TIMESTAMP|10 '
            + 'TIMEOFDAY TRANSACTION_TIMESTAMP|10 '
            // https://www.postgresql.org/docs/11/static/functions-enum.html
            + 'ENUM_FIRST ENUM_LAST ENUM_RANGE '
            // https://www.postgresql.org/docs/11/static/functions-geometry.html
            + 'AREA CENTER DIAMETER HEIGHT ISCLOSED ISOPEN NPOINTS PCLOSE POPEN RADIUS WIDTH '
            + 'BOX BOUND_BOX CIRCLE LINE LSEG PATH POLYGON '
            // https://www.postgresql.org/docs/11/static/functions-net.html
            + 'ABBREV BROADCAST HOST HOSTMASK MASKLEN NETMASK NETWORK SET_MASKLEN TEXT INET_SAME_FAMILY '
            + 'INET_MERGE MACADDR8_SET7BIT '
            // https://www.postgresql.org/docs/11/static/functions-textsearch.html
            + 'ARRAY_TO_TSVECTOR GET_CURRENT_TS_CONFIG NUMNODE PLAINTO_TSQUERY PHRASETO_TSQUERY WEBSEARCH_TO_TSQUERY '
            + 'QUERYTREE SETWEIGHT STRIP TO_TSQUERY TO_TSVECTOR JSON_TO_TSVECTOR JSONB_TO_TSVECTOR TS_DELETE '
            + 'TS_FILTER TS_HEADLINE TS_RANK TS_RANK_CD TS_REWRITE TSQUERY_PHRASE TSVECTOR_TO_ARRAY '
            + 'TSVECTOR_UPDATE_TRIGGER TSVECTOR_UPDATE_TRIGGER_COLUMN '
            // https://www.postgresql.org/docs/11/static/functions-xml.html
            + 'XMLCOMMENT XMLCONCAT XMLELEMENT XMLFOREST XMLPI XMLROOT '
            + 'XMLEXISTS XML_IS_WELL_FORMED XML_IS_WELL_FORMED_DOCUMENT XML_IS_WELL_FORMED_CONTENT '
            + 'XPATH XPATH_EXISTS XMLTABLE XMLNAMESPACES '
            + 'TABLE_TO_XML TABLE_TO_XMLSCHEMA TABLE_TO_XML_AND_XMLSCHEMA '
            + 'QUERY_TO_XML QUERY_TO_XMLSCHEMA QUERY_TO_XML_AND_XMLSCHEMA '
            + 'CURSOR_TO_XML CURSOR_TO_XMLSCHEMA '
            + 'SCHEMA_TO_XML SCHEMA_TO_XMLSCHEMA SCHEMA_TO_XML_AND_XMLSCHEMA '
            + 'DATABASE_TO_XML DATABASE_TO_XMLSCHEMA DATABASE_TO_XML_AND_XMLSCHEMA '
            + 'XMLATTRIBUTES '
            // https://www.postgresql.org/docs/11/static/functions-json.html
            + 'TO_JSON TO_JSONB ARRAY_TO_JSON ROW_TO_JSON JSON_BUILD_ARRAY JSONB_BUILD_ARRAY JSON_BUILD_OBJECT '
            + 'JSONB_BUILD_OBJECT JSON_OBJECT JSONB_OBJECT JSON_ARRAY_LENGTH JSONB_ARRAY_LENGTH JSON_EACH '
            + 'JSONB_EACH JSON_EACH_TEXT JSONB_EACH_TEXT JSON_EXTRACT_PATH JSONB_EXTRACT_PATH '
            + 'JSON_OBJECT_KEYS JSONB_OBJECT_KEYS JSON_POPULATE_RECORD JSONB_POPULATE_RECORD JSON_POPULATE_RECORDSET '
            + 'JSONB_POPULATE_RECORDSET JSON_ARRAY_ELEMENTS JSONB_ARRAY_ELEMENTS JSON_ARRAY_ELEMENTS_TEXT '
            + 'JSONB_ARRAY_ELEMENTS_TEXT JSON_TYPEOF JSONB_TYPEOF JSON_TO_RECORD JSONB_TO_RECORD JSON_TO_RECORDSET '
            + 'JSONB_TO_RECORDSET JSON_STRIP_NULLS JSONB_STRIP_NULLS JSONB_SET JSONB_INSERT JSONB_PRETTY '
            // https://www.postgresql.org/docs/11/static/functions-sequence.html
            + 'CURRVAL LASTVAL NEXTVAL SETVAL '
            // https://www.postgresql.org/docs/11/static/functions-conditional.html
            + 'COALESCE NULLIF GREATEST LEAST '
            // https://www.postgresql.org/docs/11/static/functions-array.html
            + 'ARRAY_APPEND ARRAY_CAT ARRAY_NDIMS ARRAY_DIMS ARRAY_FILL ARRAY_LENGTH ARRAY_LOWER ARRAY_POSITION '
            + 'ARRAY_POSITIONS ARRAY_PREPEND ARRAY_REMOVE ARRAY_REPLACE ARRAY_TO_STRING ARRAY_UPPER CARDINALITY '
            + 'STRING_TO_ARRAY UNNEST '
            // https://www.postgresql.org/docs/11/static/functions-range.html
            + 'ISEMPTY LOWER_INC UPPER_INC LOWER_INF UPPER_INF RANGE_MERGE '
            // https://www.postgresql.org/docs/11/static/functions-srf.html
            + 'GENERATE_SERIES GENERATE_SUBSCRIPTS '
            // https://www.postgresql.org/docs/11/static/functions-info.html
            + 'CURRENT_DATABASE CURRENT_QUERY CURRENT_SCHEMA|10 CURRENT_SCHEMAS|10 INET_CLIENT_ADDR INET_CLIENT_PORT '
            + 'INET_SERVER_ADDR INET_SERVER_PORT ROW_SECURITY_ACTIVE FORMAT_TYPE '
            + 'TO_REGCLASS TO_REGPROC TO_REGPROCEDURE TO_REGOPER TO_REGOPERATOR TO_REGTYPE TO_REGNAMESPACE TO_REGROLE '
            + 'COL_DESCRIPTION OBJ_DESCRIPTION SHOBJ_DESCRIPTION '
            + 'TXID_CURRENT TXID_CURRENT_IF_ASSIGNED TXID_CURRENT_SNAPSHOT TXID_SNAPSHOT_XIP TXID_SNAPSHOT_XMAX '
            + 'TXID_SNAPSHOT_XMIN TXID_VISIBLE_IN_SNAPSHOT TXID_STATUS '
            // https://www.postgresql.org/docs/11/static/functions-admin.html
            + 'CURRENT_SETTING SET_CONFIG BRIN_SUMMARIZE_NEW_VALUES BRIN_SUMMARIZE_RANGE BRIN_DESUMMARIZE_RANGE '
            + 'GIN_CLEAN_PENDING_LIST '
            // https://www.postgresql.org/docs/11/static/functions-trigger.html
            + 'SUPPRESS_REDUNDANT_UPDATES_TRIGGER '
            // ihttps://www.postgresql.org/docs/devel/static/lo-funcs.html
            + 'LO_FROM_BYTEA LO_PUT LO_GET LO_CREAT LO_CREATE LO_UNLINK LO_IMPORT LO_EXPORT LOREAD LOWRITE '
            //
            + 'GROUPING CAST ';
 
          const FUNCTIONS_RE =
              FUNCTIONS.trim()
                .split(' ')
                .map(function(val) { return val.split('|')[0]; })
                .join('|');
 
          return {
            name: 'PostgreSQL',
            aliases: [
              'postgres',
              'postgresql'
            ],
            supersetOf: "sql",
            case_insensitive: true,
            keywords: {
              keyword:
                    SQL_KW + PLPGSQL_KW + ROLE_ATTRS,
              built_in:
                    SQL_BI + PLPGSQL_BI + PLPGSQL_EXCEPTIONS
            },
            // Forbid some cunstructs from other languages to improve autodetect. In fact
            // "[a-z]:" is legal (as part of array slice), but improbabal.
            illegal: /:==|\W\s*\(\*|(^|\s)\$[a-z]|\{\{|[a-z]:\s*$|\.\.\.|TO:|DO:/,
            contains: [
              // special handling of some words, which are reserved only in some contexts
              {
                className: 'keyword',
                variants: [
                  { begin: /\bTEXT\s*SEARCH\b/ },
                  { begin: /\b(PRIMARY|FOREIGN|FOR(\s+NO)?)\s+KEY\b/ },
                  { begin: /\bPARALLEL\s+(UNSAFE|RESTRICTED|SAFE)\b/ },
                  { begin: /\bSTORAGE\s+(PLAIN|EXTERNAL|EXTENDED|MAIN)\b/ },
                  { begin: /\bMATCH\s+(FULL|PARTIAL|SIMPLE)\b/ },
                  { begin: /\bNULLS\s+(FIRST|LAST)\b/ },
                  { begin: /\bEVENT\s+TRIGGER\b/ },
                  { begin: /\b(MAPPING|OR)\s+REPLACE\b/ },
                  { begin: /\b(FROM|TO)\s+(PROGRAM|STDIN|STDOUT)\b/ },
                  { begin: /\b(SHARE|EXCLUSIVE)\s+MODE\b/ },
                  { begin: /\b(LEFT|RIGHT)\s+(OUTER\s+)?JOIN\b/ },
                  { begin: /\b(FETCH|MOVE)\s+(NEXT|PRIOR|FIRST|LAST|ABSOLUTE|RELATIVE|FORWARD|BACKWARD)\b/ },
                  { begin: /\bPRESERVE\s+ROWS\b/ },
                  { begin: /\bDISCARD\s+PLANS\b/ },
                  { begin: /\bREFERENCING\s+(OLD|NEW)\b/ },
                  { begin: /\bSKIP\s+LOCKED\b/ },
                  { begin: /\bGROUPING\s+SETS\b/ },
                  { begin: /\b(BINARY|INSENSITIVE|SCROLL|NO\s+SCROLL)\s+(CURSOR|FOR)\b/ },
                  { begin: /\b(WITH|WITHOUT)\s+HOLD\b/ },
                  { begin: /\bWITH\s+(CASCADED|LOCAL)\s+CHECK\s+OPTION\b/ },
                  { begin: /\bEXCLUDE\s+(TIES|NO\s+OTHERS)\b/ },
                  { begin: /\bFORMAT\s+(TEXT|XML|JSON|YAML)\b/ },
                  { begin: /\bSET\s+((SESSION|LOCAL)\s+)?NAMES\b/ },
                  { begin: /\bIS\s+(NOT\s+)?UNKNOWN\b/ },
                  { begin: /\bSECURITY\s+LABEL\b/ },
                  { begin: /\bSTANDALONE\s+(YES|NO|NO\s+VALUE)\b/ },
                  { begin: /\bWITH\s+(NO\s+)?DATA\b/ },
                  { begin: /\b(FOREIGN|SET)\s+DATA\b/ },
                  { begin: /\bSET\s+(CATALOG|CONSTRAINTS)\b/ },
                  { begin: /\b(WITH|FOR)\s+ORDINALITY\b/ },
                  { begin: /\bIS\s+(NOT\s+)?DOCUMENT\b/ },
                  { begin: /\bXML\s+OPTION\s+(DOCUMENT|CONTENT)\b/ },
                  { begin: /\b(STRIP|PRESERVE)\s+WHITESPACE\b/ },
                  { begin: /\bNO\s+(ACTION|MAXVALUE|MINVALUE)\b/ },
                  { begin: /\bPARTITION\s+BY\s+(RANGE|LIST|HASH)\b/ },
                  { begin: /\bAT\s+TIME\s+ZONE\b/ },
                  { begin: /\bGRANTED\s+BY\b/ },
                  { begin: /\bRETURN\s+(QUERY|NEXT)\b/ },
                  { begin: /\b(ATTACH|DETACH)\s+PARTITION\b/ },
                  { begin: /\bFORCE\s+ROW\s+LEVEL\s+SECURITY\b/ },
                  { begin: /\b(INCLUDING|EXCLUDING)\s+(COMMENTS|CONSTRAINTS|DEFAULTS|IDENTITY|INDEXES|STATISTICS|STORAGE|ALL)\b/ },
                  { begin: /\bAS\s+(ASSIGNMENT|IMPLICIT|PERMISSIVE|RESTRICTIVE|ENUM|RANGE)\b/ }
                ]
              },
              // functions named as keywords, followed by '('
              { begin: /\b(FORMAT|FAMILY|VERSION)\s*\(/
                // keywords: { built_in: 'FORMAT FAMILY VERSION' }
              },
              // INCLUDE ( ... ) in index_parameters in CREATE TABLE
              {
                begin: /\bINCLUDE\s*\(/,
                keywords: 'INCLUDE'
              },
              // not highlight RANGE if not in frame_clause (not 100% correct, but seems satisfactory)
              { begin: /\bRANGE(?!\s*(BETWEEN|UNBOUNDED|CURRENT|[-0-9]+))/ },
              // disable highlighting in commands CREATE AGGREGATE/COLLATION/DATABASE/OPERTOR/TEXT SEARCH .../TYPE
              // and in PL/pgSQL RAISE ... USING
              { begin: /\b(VERSION|OWNER|TEMPLATE|TABLESPACE|CONNECTION\s+LIMIT|PROCEDURE|RESTRICT|JOIN|PARSER|COPY|START|END|COLLATION|INPUT|ANALYZE|STORAGE|LIKE|DEFAULT|DELIMITER|ENCODING|COLUMN|CONSTRAINT|TABLE|SCHEMA)\s*=/ },
              // PG_smth; HAS_some_PRIVILEGE
              {
                // className: 'built_in',
                begin: /\b(PG_\w+?|HAS_[A-Z_]+_PRIVILEGE)\b/,
                relevance: 10
              },
              // extract
              {
                begin: /\bEXTRACT\s*\(/,
                end: /\bFROM\b/,
                returnEnd: true,
                keywords: {
                  // built_in: 'EXTRACT',
                  type: 'CENTURY DAY DECADE DOW DOY EPOCH HOUR ISODOW ISOYEAR MICROSECONDS '
                                + 'MILLENNIUM MILLISECONDS MINUTE MONTH QUARTER SECOND TIMEZONE TIMEZONE_HOUR '
                                + 'TIMEZONE_MINUTE WEEK YEAR' }
              },
              // xmlelement, xmlpi - special NAME
              {
                begin: /\b(XMLELEMENT|XMLPI)\s*\(\s*NAME/,
                keywords: {
                  // built_in: 'XMLELEMENT XMLPI',
                  keyword: 'NAME' }
              },
              // xmlparse, xmlserialize
              {
                begin: /\b(XMLPARSE|XMLSERIALIZE)\s*\(\s*(DOCUMENT|CONTENT)/,
                keywords: {
                  // built_in: 'XMLPARSE XMLSERIALIZE',
                  keyword: 'DOCUMENT CONTENT' }
              },
              // Sequences. We actually skip everything between CACHE|INCREMENT|MAXVALUE|MINVALUE and
              // nearest following numeric constant. Without with trick we find a lot of "keywords"
              // in 'avrasm' autodetection test...
              {
                beginKeywords: 'CACHE INCREMENT MAXVALUE MINVALUE',
                end: hljs.C_NUMBER_RE,
                returnEnd: true,
                keywords: 'BY CACHE INCREMENT MAXVALUE MINVALUE'
              },
              // WITH|WITHOUT TIME ZONE as part of datatype
              {
                className: 'type',
                begin: /\b(WITH|WITHOUT)\s+TIME\s+ZONE\b/
              },
              // INTERVAL optional fields
              {
                className: 'type',
                begin: /\bINTERVAL\s+(YEAR|MONTH|DAY|HOUR|MINUTE|SECOND)(\s+TO\s+(MONTH|HOUR|MINUTE|SECOND))?\b/
              },
              // Pseudo-types which allowed only as return type
              {
                begin: /\bRETURNS\s+(LANGUAGE_HANDLER|TRIGGER|EVENT_TRIGGER|FDW_HANDLER|INDEX_AM_HANDLER|TSM_HANDLER)\b/,
                keywords: {
                  keyword: 'RETURNS',
                  type: 'LANGUAGE_HANDLER TRIGGER EVENT_TRIGGER FDW_HANDLER INDEX_AM_HANDLER TSM_HANDLER'
                }
              },
              // Known functions - only when followed by '('
              { begin: '\\b(' + FUNCTIONS_RE + ')\\s*\\('
                // keywords: { built_in: FUNCTIONS }
              },
              // Types
              { begin: '\\.(' + TYPES_RE + ')\\b' // prevent highlight as type, say, 'oid' in 'pgclass.oid'
              },
              {
                begin: '\\b(' + TYPES_RE + ')\\s+PATH\\b', // in XMLTABLE
                keywords: {
                  keyword: 'PATH', // hopefully no one would use PATH type in XMLTABLE...
                  type: TYPES.replace('PATH ', '')
                }
              },
              {
                className: 'type',
                begin: '\\b(' + TYPES_RE + ')\\b'
              },
              // Strings, see https://www.postgresql.org/docs/11/static/sql-syntax-lexical.html#SQL-SYNTAX-CONSTANTS
              {
                className: 'string',
                begin: '\'',
                end: '\'',
                contains: [ { begin: '\'\'' } ]
              },
              {
                className: 'string',
                begin: '(e|E|u&|U&)\'',
                end: '\'',
                contains: [ { begin: '\\\\.' } ],
                relevance: 10
              },
              hljs.END_SAME_AS_BEGIN({
                begin: DOLLAR_STRING,
                end: DOLLAR_STRING,
                contains: [
                  {
                    // actually we want them all except SQL; listed are those with known implementations
                    // and XML + JSON just in case
                    subLanguage: [
                      'pgsql',
                      'perl',
                      'python',
                      'tcl',
                      'r',
                      'lua',
                      'java',
                      'php',
                      'ruby',
                      'bash',
                      'scheme',
                      'xml',
                      'json'
                    ],
                    endsWithParent: true
                  }
                ]
              }),
              // identifiers in quotes
              {
                begin: '"',
                end: '"',
                contains: [ { begin: '""' } ]
              },
              // numbers
              hljs.C_NUMBER_MODE,
              // comments
              hljs.C_BLOCK_COMMENT_MODE,
              COMMENT_MODE,
              // PL/pgSQL staff
              // %ROWTYPE, %TYPE, $n
              {
                className: 'meta',
                variants: [
                  { // %TYPE, %ROWTYPE
                    begin: '%(ROW)?TYPE',
                    relevance: 10
                  },
                  { // $n
                    begin: '\\$\\d+' },
                  { // #compiler option
                    begin: '^#\\w',
                    end: '$'
                  }
                ]
              },
              // <<labeles>>
              {
                className: 'symbol',
                begin: LABEL,
                relevance: 10
              }
            ]
          };
        }
 
        pgsql_1 = pgsql;
        return pgsql_1;
    }
 
    /*
    Language: PHP
    Author: Victor Karamzin <Victor.Karamzin@enterra-inc.com>
    Contributors: Evgeny Stepanischev <imbolk@gmail.com>, Ivan Sagalaev <maniac@softwaremaniacs.org>
    Website: https://www.php.net
    Category: common
    */
 
    var php_1;
    var hasRequiredPhp;
 
    function requirePhp () {
        if (hasRequiredPhp) return php_1;
        hasRequiredPhp = 1;
        /**
         * @param {HLJSApi} hljs
         * @returns {LanguageDetail}
         * */
        function php(hljs) {
          const regex = hljs.regex;
          // negative look-ahead tries to avoid matching patterns that are not
          // Perl at all like $ident$, @ident@, etc.
          const NOT_PERL_ETC = /(?![A-Za-z0-9])(?![$])/;
          const IDENT_RE = regex.concat(
            /[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/,
            NOT_PERL_ETC);
          // Will not detect camelCase classes
          const PASCAL_CASE_CLASS_NAME_RE = regex.concat(
            /(\\?[A-Z][a-z0-9_\x7f-\xff]+|\\?[A-Z]+(?=[A-Z][a-z0-9_\x7f-\xff])){1,}/,
            NOT_PERL_ETC);
          const VARIABLE = {
            scope: 'variable',
            match: '\\$+' + IDENT_RE,
          };
          const PREPROCESSOR = {
            scope: 'meta',
            variants: [
              { begin: /<\?php/, relevance: 10 }, // boost for obvious PHP
              { begin: /<\?=/ },
              // less relevant per PSR-1 which says not to use short-tags
              { begin: /<\?/, relevance: 0.1 },
              { begin: /\?>/ } // end php tag
            ]
          };
          const SUBST = {
            scope: 'subst',
            variants: [
              { begin: /\$\w+/ },
              {
                begin: /\{\$/,
                end: /\}/
              }
            ]
          };
          const SINGLE_QUOTED = hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null, });
          const DOUBLE_QUOTED = hljs.inherit(hljs.QUOTE_STRING_MODE, {
            illegal: null,
            contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
          });
 
          const HEREDOC = {
            begin: /<<<[ \t]*(?:(\w+)|"(\w+)")\n/,
            end: /[ \t]*(\w+)\b/,
            contains: hljs.QUOTE_STRING_MODE.contains.concat(SUBST),
            'on:begin': (m, resp) => { resp.data._beginMatch = m[1] || m[2]; },
            'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); },
          };
 
          const NOWDOC = hljs.END_SAME_AS_BEGIN({
            begin: /<<<[ \t]*'(\w+)'\n/,
            end: /[ \t]*(\w+)\b/,
          });
          // list of valid whitespaces because non-breaking space might be part of a IDENT_RE
          const WHITESPACE = '[ \t\n]';
          const STRING = {
            scope: 'string',
            variants: [
              DOUBLE_QUOTED,
              SINGLE_QUOTED,
              HEREDOC,
              NOWDOC
            ]
          };
          const NUMBER = {
            scope: 'number',
            variants: [
              { begin: `\\b0[bB][01]+(?:_[01]+)*\\b` }, // Binary w/ underscore support
              { begin: `\\b0[oO][0-7]+(?:_[0-7]+)*\\b` }, // Octals w/ underscore support
              { begin: `\\b0[xX][\\da-fA-F]+(?:_[\\da-fA-F]+)*\\b` }, // Hex w/ underscore support
              // Decimals w/ underscore support, with optional fragments and scientific exponent (e) suffix.
              { begin: `(?:\\b\\d+(?:_\\d+)*(\\.(?:\\d+(?:_\\d+)*))?|\\B\\.\\d+)(?:[eE][+-]?\\d+)?` }
            ],
            relevance: 0
          };
          const LITERALS = [
            "false",
            "null",
            "true"
          ];
          const KWS = [
            // Magic constants:
            // <https://www.php.net/manual/en/language.constants.predefined.php>
            "__CLASS__",
            "__DIR__",
            "__FILE__",
            "__FUNCTION__",
            "__COMPILER_HALT_OFFSET__",
            "__LINE__",
            "__METHOD__",
            "__NAMESPACE__",
            "__TRAIT__",
            // Function that look like language construct or language construct that look like function:
            // List of keywords that may not require parenthesis
            "die",
            "echo",
            "exit",
            "include",
            "include_once",
            "print",
            "require",
            "require_once",
            // These are not language construct (function) but operate on the currently-executing function and can access the current symbol table
            // 'compact extract func_get_arg func_get_args func_num_args get_called_class get_parent_class ' +
            // Other keywords:
            // <https://www.php.net/manual/en/reserved.php>
            // <https://www.php.net/manual/en/language.types.type-juggling.php>
            "array",
            "abstract",
            "and",
            "as",
            "binary",
            "bool",
            "boolean",
            "break",
            "callable",
            "case",
            "catch",
            "class",
            "clone",
            "const",
            "continue",
            "declare",
            "default",
            "do",
            "double",
            "else",
            "elseif",
            "empty",
            "enddeclare",
            "endfor",
            "endforeach",
            "endif",
            "endswitch",
            "endwhile",
            "enum",
            "eval",
            "extends",
            "final",
            "finally",
            "float",
            "for",
            "foreach",
            "from",
            "global",
            "goto",
            "if",
            "implements",
            "instanceof",
            "insteadof",
            "int",
            "integer",
            "interface",
            "isset",
            "iterable",
            "list",
            "match|0",
            "mixed",
            "new",
            "never",
            "object",
            "or",
            "private",
            "protected",
            "public",
            "readonly",
            "real",
            "return",
            "string",
            "switch",
            "throw",
            "trait",
            "try",
            "unset",
            "use",
            "var",
            "void",
            "while",
            "xor",
            "yield"
          ];
 
          const BUILT_INS = [
            // Standard PHP library:
            // <https://www.php.net/manual/en/book.spl.php>
            "Error|0",
            "AppendIterator",
            "ArgumentCountError",
            "ArithmeticError",
            "ArrayIterator",
            "ArrayObject",
            "AssertionError",
            "BadFunctionCallException",
            "BadMethodCallException",
            "CachingIterator",
            "CallbackFilterIterator",
            "CompileError",
            "Countable",
            "DirectoryIterator",
            "DivisionByZeroError",
            "DomainException",
            "EmptyIterator",
            "ErrorException",
            "Exception",
            "FilesystemIterator",
            "FilterIterator",
            "GlobIterator",
            "InfiniteIterator",
            "InvalidArgumentException",
            "IteratorIterator",
            "LengthException",
            "LimitIterator",
            "LogicException",
            "MultipleIterator",
            "NoRewindIterator",
            "OutOfBoundsException",
            "OutOfRangeException",
            "OuterIterator",
            "OverflowException",
            "ParentIterator",
            "ParseError",
            "RangeException",
            "RecursiveArrayIterator",
            "RecursiveCachingIterator",
            "RecursiveCallbackFilterIterator",
            "RecursiveDirectoryIterator",
            "RecursiveFilterIterator",
            "RecursiveIterator",
            "RecursiveIteratorIterator",
            "RecursiveRegexIterator",
            "RecursiveTreeIterator",
            "RegexIterator",
            "RuntimeException",
            "SeekableIterator",
            "SplDoublyLinkedList",
            "SplFileInfo",
            "SplFileObject",
            "SplFixedArray",
            "SplHeap",
            "SplMaxHeap",
            "SplMinHeap",
            "SplObjectStorage",
            "SplObserver",
            "SplPriorityQueue",
            "SplQueue",
            "SplStack",
            "SplSubject",
            "SplTempFileObject",
            "TypeError",
            "UnderflowException",
            "UnexpectedValueException",
            "UnhandledMatchError",
            // Reserved interfaces:
            // <https://www.php.net/manual/en/reserved.interfaces.php>
            "ArrayAccess",
            "BackedEnum",
            "Closure",
            "Fiber",
            "Generator",
            "Iterator",
            "IteratorAggregate",
            "Serializable",
            "Stringable",
            "Throwable",
            "Traversable",
            "UnitEnum",
            "WeakReference",
            "WeakMap",
            // Reserved classes:
            // <https://www.php.net/manual/en/reserved.classes.php>
            "Directory",
            "__PHP_Incomplete_Class",
            "parent",
            "php_user_filter",
            "self",
            "static",
            "stdClass"
          ];
 
          /** Dual-case keywords
           *
           * ["then","FILE"] =>
           *     ["then", "THEN", "FILE", "file"]
           *
           * @param {string[]} items */
          const dualCase = (items) => {
            /** @type string[] */
            const result = [];
            items.forEach(item => {
              result.push(item);
              if (item.toLowerCase() === item) {
                result.push(item.toUpperCase());
              } else {
                result.push(item.toLowerCase());
              }
            });
            return result;
          };
 
          const KEYWORDS = {
            keyword: KWS,
            literal: dualCase(LITERALS),
            built_in: BUILT_INS,
          };
 
          /**
           * @param {string[]} items */
          const normalizeKeywords = (items) => {
            return items.map(item => {
              return item.replace(/\|\d+$/, "");
            });
          };
 
          const CONSTRUCTOR_CALL = { variants: [
            {
              match: [
                /new/,
                regex.concat(WHITESPACE, "+"),
                // to prevent built ins from being confused as the class constructor call
                regex.concat("(?!", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
                PASCAL_CASE_CLASS_NAME_RE,
              ],
              scope: {
                1: "keyword",
                4: "title.class",
              },
            }
          ] };
 
          const CONSTANT_REFERENCE = regex.concat(IDENT_RE, "\\b(?!\\()");
 
          const LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON = { variants: [
            {
              match: [
                regex.concat(
                  /::/,
                  regex.lookahead(/(?!class\b)/)
                ),
                CONSTANT_REFERENCE,
              ],
              scope: { 2: "variable.constant", },
            },
            {
              match: [
                /::/,
                /class/,
              ],
              scope: { 2: "variable.language", },
            },
            {
              match: [
                PASCAL_CASE_CLASS_NAME_RE,
                regex.concat(
                  /::/,
                  regex.lookahead(/(?!class\b)/)
                ),
                CONSTANT_REFERENCE,
              ],
              scope: {
                1: "title.class",
                3: "variable.constant",
              },
            },
            {
              match: [
                PASCAL_CASE_CLASS_NAME_RE,
                regex.concat(
                  "::",
                  regex.lookahead(/(?!class\b)/)
                ),
              ],
              scope: { 1: "title.class", },
            },
            {
              match: [
                PASCAL_CASE_CLASS_NAME_RE,
                /::/,
                /class/,
              ],
              scope: {
                1: "title.class",
                3: "variable.language",
              },
            }
          ] };
 
          const NAMED_ARGUMENT = {
            scope: 'attr',
            match: regex.concat(IDENT_RE, regex.lookahead(':'), regex.lookahead(/(?!::)/)),
          };
          const PARAMS_MODE = {
            relevance: 0,
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS,
            contains: [
              NAMED_ARGUMENT,
              VARIABLE,
              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
              hljs.C_BLOCK_COMMENT_MODE,
              STRING,
              NUMBER,
              CONSTRUCTOR_CALL,
            ],
          };
          const FUNCTION_INVOKE = {
            relevance: 0,
            match: [
              /\b/,
              // to prevent keywords from being confused as the function title
              regex.concat("(?!fn\\b|function\\b|", normalizeKeywords(KWS).join("\\b|"), "|", normalizeKeywords(BUILT_INS).join("\\b|"), "\\b)"),
              IDENT_RE,
              regex.concat(WHITESPACE, "*"),
              regex.lookahead(/(?=\()/)
            ],
            scope: { 3: "title.function.invoke", },
            contains: [ PARAMS_MODE ]
          };
          PARAMS_MODE.contains.push(FUNCTION_INVOKE);
 
          const ATTRIBUTE_CONTAINS = [
            NAMED_ARGUMENT,
            LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
            hljs.C_BLOCK_COMMENT_MODE,
            STRING,
            NUMBER,
            CONSTRUCTOR_CALL,
          ];
 
          const ATTRIBUTES = {
            begin: regex.concat(/#\[\s*/, PASCAL_CASE_CLASS_NAME_RE),
            beginScope: "meta",
            end: /]/,
            endScope: "meta",
            keywords: {
              literal: LITERALS,
              keyword: [
                'new',
                'array',
              ]
            },
            contains: [
              {
                begin: /\[/,
                end: /]/,
                keywords: {
                  literal: LITERALS,
                  keyword: [
                    'new',
                    'array',
                  ]
                },
                contains: [
                  'self',
                  ...ATTRIBUTE_CONTAINS,
                ]
              },
              ...ATTRIBUTE_CONTAINS,
              {
                scope: 'meta',
                match: PASCAL_CASE_CLASS_NAME_RE
              }
            ]
          };
 
          return {
            case_insensitive: false,
            keywords: KEYWORDS,
            contains: [
              ATTRIBUTES,
              hljs.HASH_COMMENT_MODE,
              hljs.COMMENT('//', '$'),
              hljs.COMMENT(
                '/\\*',
                '\\*/',
                { contains: [
                  {
                    scope: 'doctag',
                    match: '@[A-Za-z]+'
                  }
                ] }
              ),
              {
                match: /__halt_compiler\(\);/,
                keywords: '__halt_compiler',
                starts: {
                  scope: "comment",
                  end: hljs.MATCH_NOTHING_RE,
                  contains: [
                    {
                      match: /\?>/,
                      scope: "meta",
                      endsParent: true
                    }
                  ]
                }
              },
              PREPROCESSOR,
              {
                scope: 'variable.language',
                match: /\$this\b/
              },
              VARIABLE,
              FUNCTION_INVOKE,
              LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
              {
                match: [
                  /const/,
                  /\s/,
                  IDENT_RE,
                ],
                scope: {
                  1: "keyword",
                  3: "variable.constant",
                },
              },
              CONSTRUCTOR_CALL,
              {
                scope: 'function',
                relevance: 0,
                beginKeywords: 'fn function',
                end: /[;{]/,
                excludeEnd: true,
                illegal: '[$%\\[]',
                contains: [
                  { beginKeywords: 'use', },
                  hljs.UNDERSCORE_TITLE_MODE,
                  {
                    begin: '=>', // No markup, just a relevance booster
                    endsParent: true
                  },
                  {
                    scope: 'params',
                    begin: '\\(',
                    end: '\\)',
                    excludeBegin: true,
                    excludeEnd: true,
                    keywords: KEYWORDS,
                    contains: [
                      'self',
                      VARIABLE,
                      LEFT_AND_RIGHT_SIDE_OF_DOUBLE_COLON,
                      hljs.C_BLOCK_COMMENT_MODE,
                      STRING,
                      NUMBER
                    ]
                  },
                ]
              },
              {
                scope: 'class',
                variants: [
                  {
                    beginKeywords: "enum",
                    illegal: /[($"]/
                  },
                  {
                    beginKeywords: "class interface trait",
                    illegal: /[:($"]/
                  }
                ],
                relevance: 0,
                end: /\{/,
                excludeEnd: true,
                contains: [
                  { beginKeywords: 'extends implements' },
                  hljs.UNDERSCORE_TITLE_MODE
                ]
              },
              // both use and namespace still use "old style" rules (vs multi-match)
              // because the namespace name can include `\` and we still want each
              // element to be treated as its own *individual* title
              {
                beginKeywords: 'namespace',
                relevance: 0,
                end: ';',
                illegal: /[.']/,
                contains: [ hljs.inherit(hljs.UNDERSCORE_TITLE_MODE, { scope: "title.class" }) ]
              },
              {
                beginKeywords: 'use',
                relevance: 0,
                end: ';',
                contains: [
                  // TODO: title.function vs title.class
                  {
                    match: /\b(as|const|function)\b/,
                    scope: "keyword"
                  },
                  // TODO: could be title.class or title.function
                  hljs.UNDERSCORE_TITLE_MODE
                ]
              },
              STRING,
              NUMBER,
            ]
          };
        }
 
        php_1 = php;
        return php_1;
    }
 
    /*
    Language: PHP Template
    Requires: xml.js, php.js
    Author: Josh Goebel <hello@joshgoebel.com>
    Website: https://www.php.net
    Category: common
    */
 
    var phpTemplate_1;
    var hasRequiredPhpTemplate;
 
    function requirePhpTemplate () {
        if (hasRequiredPhpTemplate) return phpTemplate_1;
        hasRequiredPhpTemplate = 1;
        function phpTemplate(hljs) {
          return {
            name: "PHP template",
            subLanguage: 'xml',
            contains: [
              {
                begin: /<\?(php|=)?/,
                end: /\?>/,
                subLanguage: 'php',
                contains: [
                  // We don't want the php closing tag ?> to close the PHP block when
                  // inside any of the following blocks:
                  {
                    begin: '/\\*',
                    end: '\\*/',
                    skip: true
                  },
                  {
                    begin: 'b"',
                    end: '"',
                    skip: true
                  },
                  {
                    begin: 'b\'',
                    end: '\'',
                    skip: true
                  },
                  hljs.inherit(hljs.APOS_STRING_MODE, {
                    illegal: null,
                    className: null,
                    contains: null,
                    skip: true
                  }),
                  hljs.inherit(hljs.QUOTE_STRING_MODE, {
                    illegal: null,
                    className: null,
                    contains: null,
                    skip: true
                  })
                ]
              }
            ]
          };
        }
 
        phpTemplate_1 = phpTemplate;
        return phpTemplate_1;
    }
 
    /*
    Language: Plain text
    Author: Egor Rogov (e.rogov@postgrespro.ru)
    Description: Plain text without any highlighting.
    Category: common
    */
 
    var plaintext_1;
    var hasRequiredPlaintext;
 
    function requirePlaintext () {
        if (hasRequiredPlaintext) return plaintext_1;
        hasRequiredPlaintext = 1;
        function plaintext(hljs) {
          return {
            name: 'Plain text',
            aliases: [
              'text',
              'txt'
            ],
            disableAutodetect: true
          };
        }
 
        plaintext_1 = plaintext;
        return plaintext_1;
    }
 
    /*
    Language: Pony
    Author: Joe Eli McIlvain <joe.eli.mac@gmail.com>
    Description: Pony is an open-source, object-oriented, actor-model,
                 capabilities-secure, high performance programming language.
    Website: https://www.ponylang.io
    */
 
    var pony_1;
    var hasRequiredPony;
 
    function requirePony () {
        if (hasRequiredPony) return pony_1;
        hasRequiredPony = 1;
        function pony(hljs) {
          const KEYWORDS = {
            keyword:
              'actor addressof and as be break class compile_error compile_intrinsic '
              + 'consume continue delegate digestof do else elseif embed end error '
              + 'for fun if ifdef in interface is isnt lambda let match new not object '
              + 'or primitive recover repeat return struct then trait try type until '
              + 'use var where while with xor',
            meta:
              'iso val tag trn box ref',
            literal:
              'this false true'
          };
 
          const TRIPLE_QUOTE_STRING_MODE = {
            className: 'string',
            begin: '"""',
            end: '"""',
            relevance: 10
          };
 
          const QUOTE_STRING_MODE = {
            className: 'string',
            begin: '"',
            end: '"',
            contains: [ hljs.BACKSLASH_ESCAPE ]
          };
 
          const SINGLE_QUOTE_CHAR_MODE = {
            className: 'string',
            begin: '\'',
            end: '\'',
            contains: [ hljs.BACKSLASH_ESCAPE ],
            relevance: 0
          };
 
          const TYPE_NAME = {
            className: 'type',
            begin: '\\b_?[A-Z][\\w]*',
            relevance: 0
          };
 
          const PRIMED_NAME = {
            begin: hljs.IDENT_RE + '\'',
            relevance: 0
          };
 
          const NUMBER_MODE = {
            className: 'number',
            begin: '(-?)(\\b0[xX][a-fA-F0-9]+|\\b0[bB][01]+|(\\b\\d+(_\\d+)?(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?)',
            relevance: 0
          };
 
          /**
           * The `FUNCTION` and `CLASS` modes were intentionally removed to simplify
           * highlighting and fix cases like
           * ```
           * interface Iterator[A: A]
           *   fun has_next(): Bool
           *   fun next(): A?
           * ```
           * where it is valid to have a function head without a body
           */
 
          return {
            name: 'Pony',
            keywords: KEYWORDS,
            contains: [
              TYPE_NAME,
              TRIPLE_QUOTE_STRING_MODE,
              QUOTE_STRING_MODE,
              SINGLE_QUOTE_CHAR_MODE,
              PRIMED_NAME,
              NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
        }
 
        pony_1 = pony;
        return pony_1;
    }
 
    /*
    Language: PowerShell
    Description: PowerShell is a task-based command-line shell and scripting language built on .NET.
    Author: David Mohundro <david@mohundro.com>
    Contributors: Nicholas Blumhardt <nblumhardt@nblumhardt.com>, Victor Zhou <OiCMudkips@users.noreply.github.com>, Nicolas Le Gall <contact@nlegall.fr>
    Website: https://docs.microsoft.com/en-us/powershell/
    */
 
    var powershell_1;
    var hasRequiredPowershell;
 
    function requirePowershell () {
        if (hasRequiredPowershell) return powershell_1;
        hasRequiredPowershell = 1;
        function powershell(hljs) {
          const TYPES = [
            "string",
            "char",
            "byte",
            "int",
            "long",
            "bool",
            "decimal",
            "single",
            "double",
            "DateTime",
            "xml",
            "array",
            "hashtable",
            "void"
          ];
 
          // https://docs.microsoft.com/en-us/powershell/scripting/developer/cmdlet/approved-verbs-for-windows-powershell-commands
          const VALID_VERBS =
            'Add|Clear|Close|Copy|Enter|Exit|Find|Format|Get|Hide|Join|Lock|'
            + 'Move|New|Open|Optimize|Pop|Push|Redo|Remove|Rename|Reset|Resize|'
            + 'Search|Select|Set|Show|Skip|Split|Step|Switch|Undo|Unlock|'
            + 'Watch|Backup|Checkpoint|Compare|Compress|Convert|ConvertFrom|'
            + 'ConvertTo|Dismount|Edit|Expand|Export|Group|Import|Initialize|'
            + 'Limit|Merge|Mount|Out|Publish|Restore|Save|Sync|Unpublish|Update|'
            + 'Approve|Assert|Build|Complete|Confirm|Deny|Deploy|Disable|Enable|Install|Invoke|'
            + 'Register|Request|Restart|Resume|Start|Stop|Submit|Suspend|Uninstall|'
            + 'Unregister|Wait|Debug|Measure|Ping|Repair|Resolve|Test|Trace|Connect|'
            + 'Disconnect|Read|Receive|Send|Write|Block|Grant|Protect|Revoke|Unblock|'
            + 'Unprotect|Use|ForEach|Sort|Tee|Where';
 
          const COMPARISON_OPERATORS =
            '-and|-as|-band|-bnot|-bor|-bxor|-casesensitive|-ccontains|-ceq|-cge|-cgt|'
            + '-cle|-clike|-clt|-cmatch|-cne|-cnotcontains|-cnotlike|-cnotmatch|-contains|'
            + '-creplace|-csplit|-eq|-exact|-f|-file|-ge|-gt|-icontains|-ieq|-ige|-igt|'
            + '-ile|-ilike|-ilt|-imatch|-in|-ine|-inotcontains|-inotlike|-inotmatch|'
            + '-ireplace|-is|-isnot|-isplit|-join|-le|-like|-lt|-match|-ne|-not|'
            + '-notcontains|-notin|-notlike|-notmatch|-or|-regex|-replace|-shl|-shr|'
            + '-split|-wildcard|-xor';
 
          const KEYWORDS = {
            $pattern: /-?[A-z\.\-]+\b/,
            keyword:
              'if else foreach return do while until elseif begin for trap data dynamicparam '
              + 'end break throw param continue finally in switch exit filter try process catch '
              + 'hidden static parameter',
            // "echo" relevance has been set to 0 to avoid auto-detect conflicts with shell transcripts
            built_in:
              'ac asnp cat cd CFS chdir clc clear clhy cli clp cls clv cnsn compare copy cp '
              + 'cpi cpp curl cvpa dbp del diff dir dnsn ebp echo|0 epal epcsv epsn erase etsn exsn fc fhx '
              + 'fl ft fw gal gbp gc gcb gci gcm gcs gdr gerr ghy gi gin gjb gl gm gmo gp gps gpv group '
              + 'gsn gsnp gsv gtz gu gv gwmi h history icm iex ihy ii ipal ipcsv ipmo ipsn irm ise iwmi '
              + 'iwr kill lp ls man md measure mi mount move mp mv nal ndr ni nmo npssc nsn nv ogv oh '
              + 'popd ps pushd pwd r rbp rcjb rcsn rd rdr ren ri rjb rm rmdir rmo rni rnp rp rsn rsnp '
              + 'rujb rv rvpa rwmi sajb sal saps sasv sbp sc scb select set shcm si sl sleep sls sort sp '
              + 'spjb spps spsv start stz sujb sv swmi tee trcm type wget where wjb write'
            // TODO: 'validate[A-Z]+' can't work in keywords
          };
 
          const TITLE_NAME_RE = /\w[\w\d]*((-)[\w\d]+)*/;
 
          const BACKTICK_ESCAPE = {
            begin: '`[\\s\\S]',
            relevance: 0
          };
 
          const VAR = {
            className: 'variable',
            variants: [
              { begin: /\$\B/ },
              {
                className: 'keyword',
                begin: /\$this/
              },
              { begin: /\$[\w\d][\w\d_:]*/ }
            ]
          };
 
          const LITERAL = {
            className: 'literal',
            begin: /\$(null|true|false)\b/
          };
 
          const QUOTE_STRING = {
            className: "string",
            variants: [
              {
                begin: /"/,
                end: /"/
              },
              {
                begin: /@"/,
                end: /^"@/
              }
            ],
            contains: [
              BACKTICK_ESCAPE,
              VAR,
              {
                className: 'variable',
                begin: /\$[A-z]/,
                end: /[^A-z]/
              }
            ]
          };
 
          const APOS_STRING = {
            className: 'string',
            variants: [
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /@'/,
                end: /^'@/
              }
            ]
          };
 
          const PS_HELPTAGS = {
            className: "doctag",
            variants: [
              /* no paramater help tags */
              { begin: /\.(synopsis|description|example|inputs|outputs|notes|link|component|role|functionality)/ },
              /* one parameter help tags */
              { begin: /\.(parameter|forwardhelptargetname|forwardhelpcategory|remotehelprunspace|externalhelp)\s+\S+/ }
            ]
          };
 
          const PS_COMMENT = hljs.inherit(
            hljs.COMMENT(null, null),
            {
              variants: [
                /* single-line comment */
                {
                  begin: /#/,
                  end: /$/
                },
                /* multi-line comment */
                {
                  begin: /<#/,
                  end: /#>/
                }
              ],
              contains: [ PS_HELPTAGS ]
            }
          );
 
          const CMDLETS = {
            className: 'built_in',
            variants: [ { begin: '('.concat(VALID_VERBS, ')+(-)[\\w\\d]+') } ]
          };
 
          const PS_CLASS = {
            className: 'class',
            beginKeywords: 'class enum',
            end: /\s*[{]/,
            excludeEnd: true,
            relevance: 0,
            contains: [ hljs.TITLE_MODE ]
          };
 
          const PS_FUNCTION = {
            className: 'function',
            begin: /function\s+/,
            end: /\s*\{|$/,
            excludeEnd: true,
            returnBegin: true,
            relevance: 0,
            contains: [
              {
                begin: "function",
                relevance: 0,
                className: "keyword"
              },
              {
                className: "title",
                begin: TITLE_NAME_RE,
                relevance: 0
              },
              {
                begin: /\(/,
                end: /\)/,
                className: "params",
                relevance: 0,
                contains: [ VAR ]
              }
              // CMDLETS
            ]
          };
 
          // Using statment, plus type, plus assembly name.
          const PS_USING = {
            begin: /using\s/,
            end: /$/,
            returnBegin: true,
            contains: [
              QUOTE_STRING,
              APOS_STRING,
              {
                className: 'keyword',
                begin: /(using|assembly|command|module|namespace|type)/
              }
            ]
          };
 
          // Comperison operators & function named parameters.
          const PS_ARGUMENTS = { variants: [
            // PS literals are pretty verbose so it's a good idea to accent them a bit.
            {
              className: 'operator',
              begin: '('.concat(COMPARISON_OPERATORS, ')\\b')
            },
            {
              className: 'literal',
              begin: /(-){1,2}[\w\d-]+/,
              relevance: 0
            }
          ] };
 
          const HASH_SIGNS = {
            className: 'selector-tag',
            begin: /@\B/,
            relevance: 0
          };
 
          // It's a very general rule so I'll narrow it a bit with some strict boundaries
          // to avoid any possible false-positive collisions!
          const PS_METHODS = {
            className: 'function',
            begin: /\[.*\]\s*[\w]+[ ]??\(/,
            end: /$/,
            returnBegin: true,
            relevance: 0,
            contains: [
              {
                className: 'keyword',
                begin: '('.concat(
                  KEYWORDS.keyword.toString().replace(/\s/g, '|'
                  ), ')\\b'),
                endsParent: true,
                relevance: 0
              },
              hljs.inherit(hljs.TITLE_MODE, { endsParent: true })
            ]
          };
 
          const GENTLEMANS_SET = [
            // STATIC_MEMBER,
            PS_METHODS,
            PS_COMMENT,
            BACKTICK_ESCAPE,
            hljs.NUMBER_MODE,
            QUOTE_STRING,
            APOS_STRING,
            // PS_NEW_OBJECT_TYPE,
            CMDLETS,
            VAR,
            LITERAL,
            HASH_SIGNS
          ];
 
          const PS_TYPE = {
            begin: /\[/,
            end: /\]/,
            excludeBegin: true,
            excludeEnd: true,
            relevance: 0,
            contains: [].concat(
              'self',
              GENTLEMANS_SET,
              {
                begin: "(" + TYPES.join("|") + ")",
                className: "built_in",
                relevance: 0
              },
              {
                className: 'type',
                begin: /[\.\w\d]+/,
                relevance: 0
              }
            )
          };
 
          PS_METHODS.contains.unshift(PS_TYPE);
 
          return {
            name: 'PowerShell',
            aliases: [
              "pwsh",
              "ps",
              "ps1"
            ],
            case_insensitive: true,
            keywords: KEYWORDS,
            contains: GENTLEMANS_SET.concat(
              PS_CLASS,
              PS_FUNCTION,
              PS_USING,
              PS_ARGUMENTS,
              PS_TYPE
            )
          };
        }
 
        powershell_1 = powershell;
        return powershell_1;
    }
 
    /*
    Language: Processing
    Description: Processing is a flexible software sketchbook and a language for learning how to code within the context of the visual arts.
    Author: Erik Paluka <erik.paluka@gmail.com>
    Website: https://processing.org
    Category: graphics
    */
 
    var processing_1;
    var hasRequiredProcessing;
 
    function requireProcessing () {
        if (hasRequiredProcessing) return processing_1;
        hasRequiredProcessing = 1;
        function processing(hljs) {
          const regex = hljs.regex;
          const BUILT_INS = [
            "displayHeight",
            "displayWidth",
            "mouseY",
            "mouseX",
            "mousePressed",
            "pmouseX",
            "pmouseY",
            "key",
            "keyCode",
            "pixels",
            "focused",
            "frameCount",
            "frameRate",
            "height",
            "width",
            "size",
            "createGraphics",
            "beginDraw",
            "createShape",
            "loadShape",
            "PShape",
            "arc",
            "ellipse",
            "line",
            "point",
            "quad",
            "rect",
            "triangle",
            "bezier",
            "bezierDetail",
            "bezierPoint",
            "bezierTangent",
            "curve",
            "curveDetail",
            "curvePoint",
            "curveTangent",
            "curveTightness",
            "shape",
            "shapeMode",
            "beginContour",
            "beginShape",
            "bezierVertex",
            "curveVertex",
            "endContour",
            "endShape",
            "quadraticVertex",
            "vertex",
            "ellipseMode",
            "noSmooth",
            "rectMode",
            "smooth",
            "strokeCap",
            "strokeJoin",
            "strokeWeight",
            "mouseClicked",
            "mouseDragged",
            "mouseMoved",
            "mousePressed",
            "mouseReleased",
            "mouseWheel",
            "keyPressed",
            "keyPressedkeyReleased",
            "keyTyped",
            "print",
            "println",
            "save",
            "saveFrame",
            "day",
            "hour",
            "millis",
            "minute",
            "month",
            "second",
            "year",
            "background",
            "clear",
            "colorMode",
            "fill",
            "noFill",
            "noStroke",
            "stroke",
            "alpha",
            "blue",
            "brightness",
            "color",
            "green",
            "hue",
            "lerpColor",
            "red",
            "saturation",
            "modelX",
            "modelY",
            "modelZ",
            "screenX",
            "screenY",
            "screenZ",
            "ambient",
            "emissive",
            "shininess",
            "specular",
            "add",
            "createImage",
            "beginCamera",
            "camera",
            "endCamera",
            "frustum",
            "ortho",
            "perspective",
            "printCamera",
            "printProjection",
            "cursor",
            "frameRate",
            "noCursor",
            "exit",
            "loop",
            "noLoop",
            "popStyle",
            "pushStyle",
            "redraw",
            "binary",
            "boolean",
            "byte",
            "char",
            "float",
            "hex",
            "int",
            "str",
            "unbinary",
            "unhex",
            "join",
            "match",
            "matchAll",
            "nf",
            "nfc",
            "nfp",
            "nfs",
            "split",
            "splitTokens",
            "trim",
            "append",
            "arrayCopy",
            "concat",
            "expand",
            "reverse",
            "shorten",
            "sort",
            "splice",
            "subset",
            "box",
            "sphere",
            "sphereDetail",
            "createInput",
            "createReader",
            "loadBytes",
            "loadJSONArray",
            "loadJSONObject",
            "loadStrings",
            "loadTable",
            "loadXML",
            "open",
            "parseXML",
            "saveTable",
            "selectFolder",
            "selectInput",
            "beginRaw",
            "beginRecord",
            "createOutput",
            "createWriter",
            "endRaw",
            "endRecord",
            "PrintWritersaveBytes",
            "saveJSONArray",
            "saveJSONObject",
            "saveStream",
            "saveStrings",
            "saveXML",
            "selectOutput",
            "popMatrix",
            "printMatrix",
            "pushMatrix",
            "resetMatrix",
            "rotate",
            "rotateX",
            "rotateY",
            "rotateZ",
            "scale",
            "shearX",
            "shearY",
            "translate",
            "ambientLight",
            "directionalLight",
            "lightFalloff",
            "lights",
            "lightSpecular",
            "noLights",
            "normal",
            "pointLight",
            "spotLight",
            "image",
            "imageMode",
            "loadImage",
            "noTint",
            "requestImage",
            "tint",
            "texture",
            "textureMode",
            "textureWrap",
            "blend",
            "copy",
            "filter",
            "get",
            "loadPixels",
            "set",
            "updatePixels",
            "blendMode",
            "loadShader",
            "PShaderresetShader",
            "shader",
            "createFont",
            "loadFont",
            "text",
            "textFont",
            "textAlign",
            "textLeading",
            "textMode",
            "textSize",
            "textWidth",
            "textAscent",
            "textDescent",
            "abs",
            "ceil",
            "constrain",
            "dist",
            "exp",
            "floor",
            "lerp",
            "log",
            "mag",
            "map",
            "max",
            "min",
            "norm",
            "pow",
            "round",
            "sq",
            "sqrt",
            "acos",
            "asin",
            "atan",
            "atan2",
            "cos",
            "degrees",
            "radians",
            "sin",
            "tan",
            "noise",
            "noiseDetail",
            "noiseSeed",
            "random",
            "randomGaussian",
            "randomSeed"
          ];
          const IDENT = hljs.IDENT_RE;
          const FUNC_NAME = { variants: [
            {
              match: regex.concat(regex.either(...BUILT_INS), regex.lookahead(/\s*\(/)),
              className: "built_in"
            },
            {
              relevance: 0,
              match: regex.concat(
                /\b(?!for|if|while)/,
                IDENT, regex.lookahead(/\s*\(/)),
              className: "title.function"
            }
          ] };
          const NEW_CLASS = {
            match: [
              /new\s+/,
              IDENT
            ],
            className: {
              1: "keyword",
              2: "class.title"
            }
          };
          const PROPERTY = {
            relevance: 0,
            match: [
              /\./,
              IDENT
            ],
            className: { 2: "property" }
          };
          const CLASS = {
            variants: [
              { match: [
                /class/,
                /\s+/,
                IDENT,
                /\s+/,
                /extends/,
                /\s+/,
                IDENT
              ] },
              { match: [
                /class/,
                /\s+/,
                IDENT
              ] }
            ],
            className: {
              1: "keyword",
              3: "title.class",
              5: "keyword",
              7: "title.class.inherited"
            }
          };
 
          const TYPES = [
            "boolean",
            "byte",
            "char",
            "color",
            "double",
            "float",
            "int",
            "long",
            "short",
          ];
          const CLASSES = [
            "BufferedReader",
            "PVector",
            "PFont",
            "PImage",
            "PGraphics",
            "HashMap",
            "String",
            "Array",
            "FloatDict",
            "ArrayList",
            "FloatList",
            "IntDict",
            "IntList",
            "JSONArray",
            "JSONObject",
            "Object",
            "StringDict",
            "StringList",
            "Table",
            "TableRow",
            "XML"
          ];
          const JAVA_KEYWORDS = [
            "abstract",
            "assert",
            "break",
            "case",
            "catch",
            "const",
            "continue",
            "default",
            "else",
            "enum",
            "final",
            "finally",
            "for",
            "if",
            "import",
            "instanceof",
            "long",
            "native",
            "new",
            "package",
            "private",
            "private",
            "protected",
            "protected",
            "public",
            "public",
            "return",
            "static",
            "strictfp",
            "switch",
            "synchronized",
            "throw",
            "throws",
            "transient",
            "try",
            "void",
            "volatile",
            "while"
          ];
 
          return {
            name: 'Processing',
            aliases: [ 'pde' ],
            keywords: {
              keyword: [ ...JAVA_KEYWORDS ],
              literal: 'P2D P3D HALF_PI PI QUARTER_PI TAU TWO_PI null true false',
              title: 'setup draw',
              variable: "super this",
              built_in: [
                ...BUILT_INS,
                ...CLASSES
              ],
              type: TYPES
            },
            contains: [
              CLASS,
              NEW_CLASS,
              FUNC_NAME,
              PROPERTY,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        processing_1 = processing;
        return processing_1;
    }
 
    /*
    Language: Python profiler
    Description: Python profiler results
    Author: Brian Beck <exogen@gmail.com>
    */
 
    var profile_1;
    var hasRequiredProfile;
 
    function requireProfile () {
        if (hasRequiredProfile) return profile_1;
        hasRequiredProfile = 1;
        function profile(hljs) {
          return {
            name: 'Python profiler',
            contains: [
              hljs.C_NUMBER_MODE,
              {
                begin: '[a-zA-Z_][\\da-zA-Z_]+\\.[\\da-zA-Z_]{1,3}',
                end: ':',
                excludeEnd: true
              },
              {
                begin: '(ncalls|tottime|cumtime)',
                end: '$',
                keywords: 'ncalls tottime|10 cumtime|10 filename',
                relevance: 10
              },
              {
                begin: 'function calls',
                end: '$',
                contains: [ hljs.C_NUMBER_MODE ],
                relevance: 10
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: '\\(',
                end: '\\)$',
                excludeBegin: true,
                excludeEnd: true,
                relevance: 0
              }
            ]
          };
        }
 
        profile_1 = profile;
        return profile_1;
    }
 
    /*
    Language: Prolog
    Description: Prolog is a general purpose logic programming language associated with artificial intelligence and computational linguistics.
    Author: Raivo Laanemets <raivo@infdot.com>
    Website: https://en.wikipedia.org/wiki/Prolog
    */
 
    var prolog_1;
    var hasRequiredProlog;
 
    function requireProlog () {
        if (hasRequiredProlog) return prolog_1;
        hasRequiredProlog = 1;
        function prolog(hljs) {
          const ATOM = {
 
            begin: /[a-z][A-Za-z0-9_]*/,
            relevance: 0
          };
 
          const VAR = {
 
            className: 'symbol',
            variants: [
              { begin: /[A-Z][a-zA-Z0-9_]*/ },
              { begin: /_[A-Za-z0-9_]*/ }
            ],
            relevance: 0
          };
 
          const PARENTED = {
 
            begin: /\(/,
            end: /\)/,
            relevance: 0
          };
 
          const LIST = {
 
            begin: /\[/,
            end: /\]/
          };
 
          const LINE_COMMENT = {
 
            className: 'comment',
            begin: /%/,
            end: /$/,
            contains: [ hljs.PHRASAL_WORDS_MODE ]
          };
 
          const BACKTICK_STRING = {
 
            className: 'string',
            begin: /`/,
            end: /`/,
            contains: [ hljs.BACKSLASH_ESCAPE ]
          };
 
          const CHAR_CODE = {
            className: 'string', // 0'a etc.
            begin: /0'(\\'|.)/
          };
 
          const SPACE_CODE = {
            className: 'string',
            begin: /0'\\s/ // 0'\s
          };
 
          const PRED_OP = { // relevance booster
            begin: /:-/ };
 
          const inner = [
 
            ATOM,
            VAR,
            PARENTED,
            PRED_OP,
            LIST,
            LINE_COMMENT,
            hljs.C_BLOCK_COMMENT_MODE,
            hljs.QUOTE_STRING_MODE,
            hljs.APOS_STRING_MODE,
            BACKTICK_STRING,
            CHAR_CODE,
            SPACE_CODE,
            hljs.C_NUMBER_MODE
          ];
 
          PARENTED.contains = inner;
          LIST.contains = inner;
 
          return {
            name: 'Prolog',
            contains: inner.concat([
              { // relevance booster
                begin: /\.$/ }
            ])
          };
        }
 
        prolog_1 = prolog;
        return prolog_1;
    }
 
    /*
    Language: .properties
    Contributors: Valentin Aitken <valentin@nalisbg.com>, Egor Rogov <e.rogov@postgrespro.ru>
    Website: https://en.wikipedia.org/wiki/.properties
    Category: config
    */
 
    var properties_1;
    var hasRequiredProperties;
 
    function requireProperties () {
        if (hasRequiredProperties) return properties_1;
        hasRequiredProperties = 1;
        /** @type LanguageFn */
        function properties(hljs) {
          // whitespaces: space, tab, formfeed
          const WS0 = '[ \\t\\f]*';
          const WS1 = '[ \\t\\f]+';
          // delimiter
          const EQUAL_DELIM = WS0 + '[:=]' + WS0;
          const WS_DELIM = WS1;
          const DELIM = '(' + EQUAL_DELIM + '|' + WS_DELIM + ')';
          const KEY = '([^\\\\:= \\t\\f\\n]|\\\\.)+';
 
          const DELIM_AND_VALUE = {
            // skip DELIM
            end: DELIM,
            relevance: 0,
            starts: {
              // value: everything until end of line (again, taking into account backslashes)
              className: 'string',
              end: /$/,
              relevance: 0,
              contains: [
                { begin: '\\\\\\\\' },
                { begin: '\\\\\\n' }
              ]
            }
          };
 
          return {
            name: '.properties',
            disableAutodetect: true,
            case_insensitive: true,
            illegal: /\S/,
            contains: [
              hljs.COMMENT('^\\s*[!#]', '$'),
              // key: everything until whitespace or = or : (taking into account backslashes)
              // case of a key-value pair
              {
                returnBegin: true,
                variants: [
                  { begin: KEY + EQUAL_DELIM },
                  { begin: KEY + WS_DELIM }
                ],
                contains: [
                  {
                    className: 'attr',
                    begin: KEY,
                    endsParent: true
                  }
                ],
                starts: DELIM_AND_VALUE
              },
              // case of an empty key
              {
                className: 'attr',
                begin: KEY + WS0 + '$'
              }
            ]
          };
        }
 
        properties_1 = properties;
        return properties_1;
    }
 
    /*
    Language: Protocol Buffers
    Author: Dan Tao <daniel.tao@gmail.com>
    Description: Protocol buffer message definition format
    Website: https://developers.google.com/protocol-buffers/docs/proto3
    Category: protocols
    */
 
    var protobuf_1;
    var hasRequiredProtobuf;
 
    function requireProtobuf () {
        if (hasRequiredProtobuf) return protobuf_1;
        hasRequiredProtobuf = 1;
        function protobuf(hljs) {
          const KEYWORDS = [
            "package",
            "import",
            "option",
            "optional",
            "required",
            "repeated",
            "group",
            "oneof"
          ];
          const TYPES = [
            "double",
            "float",
            "int32",
            "int64",
            "uint32",
            "uint64",
            "sint32",
            "sint64",
            "fixed32",
            "fixed64",
            "sfixed32",
            "sfixed64",
            "bool",
            "string",
            "bytes"
          ];
          const CLASS_DEFINITION = {
            match: [
              /(message|enum|service)\s+/,
              hljs.IDENT_RE
            ],
            scope: {
              1: "keyword",
              2: "title.class"
            }
          };
 
          return {
            name: 'Protocol Buffers',
            aliases: ['proto'],
            keywords: {
              keyword: KEYWORDS,
              type: TYPES,
              literal: [
                'true',
                'false'
              ]
            },
            contains: [
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              CLASS_DEFINITION,
              {
                className: 'function',
                beginKeywords: 'rpc',
                end: /[{;]/,
                excludeEnd: true,
                keywords: 'rpc returns'
              },
              { // match enum items (relevance)
                // BLAH = ...;
                begin: /^\s*[A-Z_]+(?=\s*=[^\n]+;$)/ }
            ]
          };
        }
 
        protobuf_1 = protobuf;
        return protobuf_1;
    }
 
    /*
    Language: Puppet
    Author: Jose Molina Colmenero <gaudy41@gmail.com>
    Website: https://puppet.com/docs
    Category: config
    */
 
    var puppet_1;
    var hasRequiredPuppet;
 
    function requirePuppet () {
        if (hasRequiredPuppet) return puppet_1;
        hasRequiredPuppet = 1;
        function puppet(hljs) {
          const PUPPET_KEYWORDS = {
            keyword:
            /* language keywords */
              'and case default else elsif false if in import enherits node or true undef unless main settings $string ',
            literal:
            /* metaparameters */
              'alias audit before loglevel noop require subscribe tag '
              /* normal attributes */
              + 'owner ensure group mode name|0 changes context force incl lens load_path onlyif provider returns root show_diff type_check '
              + 'en_address ip_address realname command environment hour monute month monthday special target weekday '
              + 'creates cwd ogoutput refresh refreshonly tries try_sleep umask backup checksum content ctime force ignore '
              + 'links mtime purge recurse recurselimit replace selinux_ignore_defaults selrange selrole seltype seluser source '
              + 'souirce_permissions sourceselect validate_cmd validate_replacement allowdupe attribute_membership auth_membership forcelocal gid '
              + 'ia_load_module members system host_aliases ip allowed_trunk_vlans description device_url duplex encapsulation etherchannel '
              + 'native_vlan speed principals allow_root auth_class auth_type authenticate_user k_of_n mechanisms rule session_owner shared options '
              + 'device fstype enable hasrestart directory present absent link atboot blockdevice device dump pass remounts poller_tag use '
              + 'message withpath adminfile allow_virtual allowcdrom category configfiles flavor install_options instance package_settings platform '
              + 'responsefile status uninstall_options vendor unless_system_user unless_uid binary control flags hasstatus manifest pattern restart running '
              + 'start stop allowdupe auths expiry gid groups home iterations key_membership keys managehome membership password password_max_age '
              + 'password_min_age profile_membership profiles project purge_ssh_keys role_membership roles salt shell uid baseurl cost descr enabled '
              + 'enablegroups exclude failovermethod gpgcheck gpgkey http_caching include includepkgs keepalive metadata_expire metalink mirrorlist '
              + 'priority protect proxy proxy_password proxy_username repo_gpgcheck s3_enabled skip_if_unavailable sslcacert sslclientcert sslclientkey '
              + 'sslverify mounted',
            built_in:
            /* core facts */
              'architecture augeasversion blockdevices boardmanufacturer boardproductname boardserialnumber cfkey dhcp_servers '
              + 'domain ec2_ ec2_userdata facterversion filesystems ldom fqdn gid hardwareisa hardwaremodel hostname id|0 interfaces '
              + 'ipaddress ipaddress_ ipaddress6 ipaddress6_ iphostnumber is_virtual kernel kernelmajversion kernelrelease kernelversion '
              + 'kernelrelease kernelversion lsbdistcodename lsbdistdescription lsbdistid lsbdistrelease lsbmajdistrelease lsbminordistrelease '
              + 'lsbrelease macaddress macaddress_ macosx_buildversion macosx_productname macosx_productversion macosx_productverson_major '
              + 'macosx_productversion_minor manufacturer memoryfree memorysize netmask metmask_ network_ operatingsystem operatingsystemmajrelease '
              + 'operatingsystemrelease osfamily partitions path physicalprocessorcount processor processorcount productname ps puppetversion '
              + 'rubysitedir rubyversion selinux selinux_config_mode selinux_config_policy selinux_current_mode selinux_current_mode selinux_enforced '
              + 'selinux_policyversion serialnumber sp_ sshdsakey sshecdsakey sshrsakey swapencrypted swapfree swapsize timezone type uniqueid uptime '
              + 'uptime_days uptime_hours uptime_seconds uuid virtual vlans xendomains zfs_version zonenae zones zpool_version'
          };
 
          const COMMENT = hljs.COMMENT('#', '$');
 
          const IDENT_RE = '([A-Za-z_]|::)(\\w|::)*';
 
          const TITLE = hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE });
 
          const VARIABLE = {
            className: 'variable',
            begin: '\\$' + IDENT_RE
          };
 
          const STRING = {
            className: 'string',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              VARIABLE
            ],
            variants: [
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /"/,
                end: /"/
              }
            ]
          };
 
          return {
            name: 'Puppet',
            aliases: [ 'pp' ],
            contains: [
              COMMENT,
              VARIABLE,
              STRING,
              {
                beginKeywords: 'class',
                end: '\\{|;',
                illegal: /=/,
                contains: [
                  TITLE,
                  COMMENT
                ]
              },
              {
                beginKeywords: 'define',
                end: /\{/,
                contains: [
                  {
                    className: 'section',
                    begin: hljs.IDENT_RE,
                    endsParent: true
                  }
                ]
              },
              {
                begin: hljs.IDENT_RE + '\\s+\\{',
                returnBegin: true,
                end: /\S/,
                contains: [
                  {
                    className: 'keyword',
                    begin: hljs.IDENT_RE,
                    relevance: 0.2
                  },
                  {
                    begin: /\{/,
                    end: /\}/,
                    keywords: PUPPET_KEYWORDS,
                    relevance: 0,
                    contains: [
                      STRING,
                      COMMENT,
                      {
                        begin: '[a-zA-Z_]+\\s*=>',
                        returnBegin: true,
                        end: '=>',
                        contains: [
                          {
                            className: 'attr',
                            begin: hljs.IDENT_RE
                          }
                        ]
                      },
                      {
                        className: 'number',
                        begin: '(\\b0[0-7_]+)|(\\b0x[0-9a-fA-F_]+)|(\\b[1-9][0-9_]*(\\.[0-9_]+)?)|[0_]\\b',
                        relevance: 0
                      },
                      VARIABLE
                    ]
                  }
                ],
                relevance: 0
              }
            ]
          };
        }
 
        puppet_1 = puppet;
        return puppet_1;
    }
 
    /*
    Language: PureBASIC
    Author: Tristano Ajmone <tajmone@gmail.com>
    Description: Syntax highlighting for PureBASIC (v.5.00-5.60). No inline ASM highlighting. (v.1.2, May 2017)
    Credits: I've taken inspiration from the PureBasic language file for GeSHi, created by Gustavo Julio Fiorenza (GuShH).
    Website: https://www.purebasic.com
    */
 
    var purebasic_1;
    var hasRequiredPurebasic;
 
    function requirePurebasic () {
        if (hasRequiredPurebasic) return purebasic_1;
        hasRequiredPurebasic = 1;
        // Base deafult colors in PB IDE: background: #FFFFDF; foreground: #000000;
 
        function purebasic(hljs) {
          const STRINGS = { // PB IDE color: #0080FF (Azure Radiance)
            className: 'string',
            begin: '(~)?"',
            end: '"',
            illegal: '\\n'
          };
          const CONSTANTS = { // PB IDE color: #924B72 (Cannon Pink)
            //  "#" + a letter or underscore + letters, digits or underscores + (optional) "$"
            className: 'symbol',
            begin: '#[a-zA-Z_]\\w*\\$?'
          };
 
          return {
            name: 'PureBASIC',
            aliases: [
              'pb',
              'pbi'
            ],
            keywords: // PB IDE color: #006666 (Blue Stone) + Bold
              // Keywords from all version of PureBASIC 5.00 upward ...
              'Align And Array As Break CallDebugger Case CompilerCase CompilerDefault '
              + 'CompilerElse CompilerElseIf CompilerEndIf CompilerEndSelect CompilerError '
              + 'CompilerIf CompilerSelect CompilerWarning Continue Data DataSection Debug '
              + 'DebugLevel Declare DeclareC DeclareCDLL DeclareDLL DeclareModule Default '
              + 'Define Dim DisableASM DisableDebugger DisableExplicit Else ElseIf EnableASM '
              + 'EnableDebugger EnableExplicit End EndDataSection EndDeclareModule EndEnumeration '
              + 'EndIf EndImport EndInterface EndMacro EndModule EndProcedure EndSelect '
              + 'EndStructure EndStructureUnion EndWith Enumeration EnumerationBinary Extends '
              + 'FakeReturn For ForEach ForEver Global Gosub Goto If Import ImportC '
              + 'IncludeBinary IncludeFile IncludePath Interface List Macro MacroExpandedCount '
              + 'Map Module NewList NewMap Next Not Or Procedure ProcedureC '
              + 'ProcedureCDLL ProcedureDLL ProcedureReturn Protected Prototype PrototypeC ReDim '
              + 'Read Repeat Restore Return Runtime Select Shared Static Step Structure '
              + 'StructureUnion Swap Threaded To UndefineMacro Until Until  UnuseModule '
              + 'UseModule Wend While With XIncludeFile XOr',
            contains: [
              // COMMENTS | PB IDE color: #00AAAA (Persian Green)
              hljs.COMMENT(';', '$', { relevance: 0 }),
 
              { // PROCEDURES DEFINITIONS
                className: 'function',
                begin: '\\b(Procedure|Declare)(C|CDLL|DLL)?\\b',
                end: '\\(',
                excludeEnd: true,
                returnBegin: true,
                contains: [
                  { // PROCEDURE KEYWORDS | PB IDE color: #006666 (Blue Stone) + Bold
                    className: 'keyword',
                    begin: '(Procedure|Declare)(C|CDLL|DLL)?',
                    excludeEnd: true
                  },
                  { // PROCEDURE RETURN TYPE SETTING | PB IDE color: #000000 (Black)
                    className: 'type',
                    begin: '\\.\\w*'
                    // end: ' ',
                  },
                  hljs.UNDERSCORE_TITLE_MODE // PROCEDURE NAME | PB IDE color: #006666 (Blue Stone)
                ]
              },
              STRINGS,
              CONSTANTS
            ]
          };
        }
 
        /*  ==============================================================================
                                              CHANGELOG
            ==============================================================================
            - v.1.2 (2017-05-12)
                -- BUG-FIX: Some keywords were accidentally joyned together. Now fixed.
            - v.1.1 (2017-04-30)
                -- Updated to PureBASIC 5.60.
                -- Keywords list now built by extracting them from the PureBASIC SDK's
                   "SyntaxHilighting.dll" (from each PureBASIC version). Tokens from each
                   version are added to the list, and renamed or removed tokens are kept
                   for the sake of covering all versions of the language from PureBASIC
                   v5.00 upward. (NOTE: currently, there are no renamed or deprecated
                   tokens in the keywords list). For more info, see:
                   -- http://www.purebasic.fr/english/viewtopic.php?&p=506269
                   -- https://github.com/tajmone/purebasic-archives/tree/master/syntax-highlighting/guidelines
            - v.1.0 (April 2016)
                -- First release
                -- Keywords list taken and adapted from GuShH's (Gustavo Julio Fiorenza)
                   PureBasic language file for GeSHi:
                   -- https://github.com/easybook/geshi/blob/master/geshi/purebasic.php
        */
 
        purebasic_1 = purebasic;
        return purebasic_1;
    }
 
    /*
    Language: Python
    Description: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
    Website: https://www.python.org
    Category: common
    */
 
    var python_1;
    var hasRequiredPython;
 
    function requirePython () {
        if (hasRequiredPython) return python_1;
        hasRequiredPython = 1;
        function python(hljs) {
          const regex = hljs.regex;
          const IDENT_RE = /[\p{XID_Start}_]\p{XID_Continue}*/u;
          const RESERVED_WORDS = [
            'and',
            'as',
            'assert',
            'async',
            'await',
            'break',
            'case',
            'class',
            'continue',
            'def',
            'del',
            'elif',
            'else',
            'except',
            'finally',
            'for',
            'from',
            'global',
            'if',
            'import',
            'in',
            'is',
            'lambda',
            'match',
            'nonlocal|10',
            'not',
            'or',
            'pass',
            'raise',
            'return',
            'try',
            'while',
            'with',
            'yield'
          ];
 
          const BUILT_INS = [
            '__import__',
            'abs',
            'all',
            'any',
            'ascii',
            'bin',
            'bool',
            'breakpoint',
            'bytearray',
            'bytes',
            'callable',
            'chr',
            'classmethod',
            'compile',
            'complex',
            'delattr',
            'dict',
            'dir',
            'divmod',
            'enumerate',
            'eval',
            'exec',
            'filter',
            'float',
            'format',
            'frozenset',
            'getattr',
            'globals',
            'hasattr',
            'hash',
            'help',
            'hex',
            'id',
            'input',
            'int',
            'isinstance',
            'issubclass',
            'iter',
            'len',
            'list',
            'locals',
            'map',
            'max',
            'memoryview',
            'min',
            'next',
            'object',
            'oct',
            'open',
            'ord',
            'pow',
            'print',
            'property',
            'range',
            'repr',
            'reversed',
            'round',
            'set',
            'setattr',
            'slice',
            'sorted',
            'staticmethod',
            'str',
            'sum',
            'super',
            'tuple',
            'type',
            'vars',
            'zip'
          ];
 
          const LITERALS = [
            '__debug__',
            'Ellipsis',
            'False',
            'None',
            'NotImplemented',
            'True'
          ];
 
          // https://docs.python.org/3/library/typing.html
          // TODO: Could these be supplemented by a CamelCase matcher in certain
          // contexts, leaving these remaining only for relevance hinting?
          const TYPES = [
            "Any",
            "Callable",
            "Coroutine",
            "Dict",
            "List",
            "Literal",
            "Generic",
            "Optional",
            "Sequence",
            "Set",
            "Tuple",
            "Type",
            "Union"
          ];
 
          const KEYWORDS = {
            $pattern: /[A-Za-z]\w+|__\w+__/,
            keyword: RESERVED_WORDS,
            built_in: BUILT_INS,
            literal: LITERALS,
            type: TYPES
          };
 
          const PROMPT = {
            className: 'meta',
            begin: /^(>>>|\.\.\.) /
          };
 
          const SUBST = {
            className: 'subst',
            begin: /\{/,
            end: /\}/,
            keywords: KEYWORDS,
            illegal: /#/
          };
 
          const LITERAL_BRACKET = {
            begin: /\{\{/,
            relevance: 0
          };
 
          const STRING = {
            className: 'string',
            contains: [ hljs.BACKSLASH_ESCAPE ],
            variants: [
              {
                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,
                end: /'''/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  PROMPT
                ],
                relevance: 10
              },
              {
                begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?"""/,
                end: /"""/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  PROMPT
                ],
                relevance: 10
              },
              {
                begin: /([fF][rR]|[rR][fF]|[fF])'''/,
                end: /'''/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  PROMPT,
                  LITERAL_BRACKET,
                  SUBST
                ]
              },
              {
                begin: /([fF][rR]|[rR][fF]|[fF])"""/,
                end: /"""/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  PROMPT,
                  LITERAL_BRACKET,
                  SUBST
                ]
              },
              {
                begin: /([uU]|[rR])'/,
                end: /'/,
                relevance: 10
              },
              {
                begin: /([uU]|[rR])"/,
                end: /"/,
                relevance: 10
              },
              {
                begin: /([bB]|[bB][rR]|[rR][bB])'/,
                end: /'/
              },
              {
                begin: /([bB]|[bB][rR]|[rR][bB])"/,
                end: /"/
              },
              {
                begin: /([fF][rR]|[rR][fF]|[fF])'/,
                end: /'/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  LITERAL_BRACKET,
                  SUBST
                ]
              },
              {
                begin: /([fF][rR]|[rR][fF]|[fF])"/,
                end: /"/,
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  LITERAL_BRACKET,
                  SUBST
                ]
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE
            ]
          };
 
          // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals
          const digitpart = '[0-9](_?[0-9])*';
          const pointfloat = `(\\b(${digitpart}))?\\.(${digitpart})|\\b(${digitpart})\\.`;
          // Whitespace after a number (or any lexical token) is needed only if its absence
          // would change the tokenization
          // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens
          // We deviate slightly, requiring a word boundary or a keyword
          // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)
          const lookahead = `\\b|${RESERVED_WORDS.join('|')}`;
          const NUMBER = {
            className: 'number',
            relevance: 0,
            variants: [
              // exponentfloat, pointfloat
              // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals
              // optionally imaginary
              // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
              // Note: no leading \b because floats can start with a decimal point
              // and we don't want to mishandle e.g. `fn(.5)`,
              // no trailing \b for pointfloat because it can end with a decimal point
              // and we don't want to mishandle e.g. `0..hex()`; this should be safe
              // because both MUST contain a decimal point and so cannot be confused with
              // the interior part of an identifier
              {
                begin: `(\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`
              },
              {
                begin: `(${pointfloat})[jJ]?`
              },
 
              // decinteger, bininteger, octinteger, hexinteger
              // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals
              // optionally "long" in Python 2
              // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals
              // decinteger is optionally imaginary
              // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
              {
                begin: `\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`
              },
              {
                begin: `\\b0[bB](_?[01])+[lL]?(?=${lookahead})`
              },
              {
                begin: `\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`
              },
              {
                begin: `\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`
              },
 
              // imagnumber (digitpart-based)
              // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals
              {
                begin: `\\b(${digitpart})[jJ](?=${lookahead})`
              }
            ]
          };
          const COMMENT_TYPE = {
            className: "comment",
            begin: regex.lookahead(/# type:/),
            end: /$/,
            keywords: KEYWORDS,
            contains: [
              { // prevent keywords from coloring `type`
                begin: /# type:/
              },
              // comment within a datatype comment includes no keywords
              {
                begin: /#/,
                end: /\b\B/,
                endsWithParent: true
              }
            ]
          };
          const PARAMS = {
            className: 'params',
            variants: [
              // Exclude params in functions without params
              {
                className: "",
                begin: /\(\s*\)/,
                skip: true
              },
              {
                begin: /\(/,
                end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                keywords: KEYWORDS,
                contains: [
                  'self',
                  PROMPT,
                  NUMBER,
                  STRING,
                  hljs.HASH_COMMENT_MODE
                ]
              }
            ]
          };
          SUBST.contains = [
            STRING,
            NUMBER,
            PROMPT
          ];
 
          return {
            name: 'Python',
            aliases: [
              'py',
              'gyp',
              'ipython'
            ],
            unicodeRegex: true,
            keywords: KEYWORDS,
            illegal: /(<\/|\?)|=>/,
            contains: [
              PROMPT,
              NUMBER,
              {
                // very common convention
                begin: /\bself\b/
              },
              {
                // eat "if" prior to string so that it won't accidentally be
                // labeled as an f-string
                beginKeywords: "if",
                relevance: 0
              },
              STRING,
              COMMENT_TYPE,
              hljs.HASH_COMMENT_MODE,
              {
                match: [
                  /\bdef/, /\s+/,
                  IDENT_RE,
                ],
                scope: {
                  1: "keyword",
                  3: "title.function"
                },
                contains: [ PARAMS ]
              },
              {
                variants: [
                  {
                    match: [
                      /\bclass/, /\s+/,
                      IDENT_RE, /\s*/,
                      /\(\s*/, IDENT_RE,/\s*\)/
                    ],
                  },
                  {
                    match: [
                      /\bclass/, /\s+/,
                      IDENT_RE
                    ],
                  }
                ],
                scope: {
                  1: "keyword",
                  3: "title.class",
                  6: "title.class.inherited",
                }
              },
              {
                className: 'meta',
                begin: /^[\t ]*@/,
                end: /(?=#)|$/,
                contains: [
                  NUMBER,
                  PARAMS,
                  STRING
                ]
              }
            ]
          };
        }
 
        python_1 = python;
        return python_1;
    }
 
    /*
    Language: Python REPL
    Requires: python.js
    Author: Josh Goebel <hello@joshgoebel.com>
    Category: common
    */
 
    var pythonRepl_1;
    var hasRequiredPythonRepl;
 
    function requirePythonRepl () {
        if (hasRequiredPythonRepl) return pythonRepl_1;
        hasRequiredPythonRepl = 1;
        function pythonRepl(hljs) {
          return {
            aliases: [ 'pycon' ],
            contains: [
              {
                className: 'meta.prompt',
                starts: {
                  // a space separates the REPL prefix from the actual code
                  // this is purely for cleaner HTML output
                  end: / |$/,
                  starts: {
                    end: '$',
                    subLanguage: 'python'
                  }
                },
                variants: [
                  { begin: /^>>>(?=[ ]|$)/ },
                  { begin: /^\.\.\.(?=[ ]|$)/ }
                ]
              }
            ]
          };
        }
 
        pythonRepl_1 = pythonRepl;
        return pythonRepl_1;
    }
 
    /*
    Language: Q
    Description: Q is a vector-based functional paradigm programming language built into the kdb+ database.
                 (K/Q/Kdb+ from Kx Systems)
    Author: Sergey Vidyuk <svidyuk@gmail.com>
    Website: https://kx.com/connect-with-us/developers/
    */
 
    var q_1;
    var hasRequiredQ;
 
    function requireQ () {
        if (hasRequiredQ) return q_1;
        hasRequiredQ = 1;
        function q(hljs) {
          const KEYWORDS = {
            $pattern: /(`?)[A-Za-z0-9_]+\b/,
            keyword:
              'do while select delete by update from',
            literal:
              '0b 1b',
            built_in:
              'neg not null string reciprocal floor ceiling signum mod xbar xlog and or each scan over prior mmu lsq inv md5 ltime gtime count first var dev med cov cor all any rand sums prds mins maxs fills deltas ratios avgs differ prev next rank reverse iasc idesc asc desc msum mcount mavg mdev xrank mmin mmax xprev rotate distinct group where flip type key til get value attr cut set upsert raze union inter except cross sv vs sublist enlist read0 read1 hopen hclose hdel hsym hcount peach system ltrim rtrim trim lower upper ssr view tables views cols xcols keys xkey xcol xasc xdesc fkeys meta lj aj aj0 ij pj asof uj ww wj wj1 fby xgroup ungroup ej save load rsave rload show csv parse eval min max avg wavg wsum sin cos tan sum',
            type:
              '`float `double int `timestamp `timespan `datetime `time `boolean `symbol `char `byte `short `long `real `month `date `minute `second `guid'
          };
 
          return {
            name: 'Q',
            aliases: [
              'k',
              'kdb'
            ],
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        q_1 = q;
        return q_1;
    }
 
    /*
    Language: QML
    Requires: javascript.js, xml.js
    Author: John Foster <jfoster@esri.com>
    Description: Syntax highlighting for the Qt Quick QML scripting language, based mostly off
                 the JavaScript parser.
    Website: https://doc.qt.io/qt-5/qmlapplications.html
    Category: scripting
    */
 
    var qml_1;
    var hasRequiredQml;
 
    function requireQml () {
        if (hasRequiredQml) return qml_1;
        hasRequiredQml = 1;
        function qml(hljs) {
          const regex = hljs.regex;
          const KEYWORDS = {
            keyword:
              'in of on if for while finally var new function do return void else break catch '
              + 'instanceof with throw case default try this switch continue typeof delete '
              + 'let yield const export super debugger as async await import',
            literal:
              'true false null undefined NaN Infinity',
            built_in:
              'eval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent '
              + 'encodeURI encodeURIComponent escape unescape Object Function Boolean Error '
              + 'EvalError InternalError RangeError ReferenceError StopIteration SyntaxError '
              + 'TypeError URIError Number Math Date String RegExp Array Float32Array '
              + 'Float64Array Int16Array Int32Array Int8Array Uint16Array Uint32Array '
              + 'Uint8Array Uint8ClampedArray ArrayBuffer DataView JSON Intl arguments require '
              + 'module console window document Symbol Set Map WeakSet WeakMap Proxy Reflect '
              + 'Behavior bool color coordinate date double enumeration font geocircle georectangle '
              + 'geoshape int list matrix4x4 parent point quaternion real rect '
              + 'size string url variant vector2d vector3d vector4d '
              + 'Promise'
          };
 
          const QML_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9\\._]*';
 
          // Isolate property statements. Ends at a :, =, ;, ,, a comment or end of line.
          // Use property class.
          const PROPERTY = {
            className: 'keyword',
            begin: '\\bproperty\\b',
            starts: {
              className: 'string',
              end: '(:|=|;|,|//|/\\*|$)',
              returnEnd: true
            }
          };
 
          // Isolate signal statements. Ends at a ) a comment or end of line.
          // Use property class.
          const SIGNAL = {
            className: 'keyword',
            begin: '\\bsignal\\b',
            starts: {
              className: 'string',
              end: '(\\(|:|=|;|,|//|/\\*|$)',
              returnEnd: true
            }
          };
 
          // id: is special in QML. When we see id: we want to mark the id: as attribute and
          // emphasize the token following.
          const ID_ID = {
            className: 'attribute',
            begin: '\\bid\\s*:',
            starts: {
              className: 'string',
              end: QML_IDENT_RE,
              returnEnd: false
            }
          };
 
          // Find QML object attribute. An attribute is a QML identifier followed by :.
          // Unfortunately it's hard to know where it ends, as it may contain scalars,
          // objects, object definitions, or javascript. The true end is either when the parent
          // ends or the next attribute is detected.
          const QML_ATTRIBUTE = {
            begin: QML_IDENT_RE + '\\s*:',
            returnBegin: true,
            contains: [
              {
                className: 'attribute',
                begin: QML_IDENT_RE,
                end: '\\s*:',
                excludeEnd: true,
                relevance: 0
              }
            ],
            relevance: 0
          };
 
          // Find QML object. A QML object is a QML identifier followed by { and ends at the matching }.
          // All we really care about is finding IDENT followed by { and just mark up the IDENT and ignore the {.
          const QML_OBJECT = {
            begin: regex.concat(QML_IDENT_RE, /\s*\{/),
            end: /\{/,
            returnBegin: true,
            relevance: 0,
            contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: QML_IDENT_RE }) ]
          };
 
          return {
            name: 'QML',
            aliases: [ 'qt' ],
            case_insensitive: false,
            keywords: KEYWORDS,
            contains: [
              {
                className: 'meta',
                begin: /^\s*['"]use (strict|asm)['"]/
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              { // template string
                className: 'string',
                begin: '`',
                end: '`',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  {
                    className: 'subst',
                    begin: '\\$\\{',
                    end: '\\}'
                  }
                ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'number',
                variants: [
                  { begin: '\\b(0[bB][01]+)' },
                  { begin: '\\b(0[oO][0-7]+)' },
                  { begin: hljs.C_NUMBER_RE }
                ],
                relevance: 0
              },
              { // "value" container
                begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
                keywords: 'return throw case',
                contains: [
                  hljs.C_LINE_COMMENT_MODE,
                  hljs.C_BLOCK_COMMENT_MODE,
                  hljs.REGEXP_MODE,
                  { // E4X / JSX
                    begin: /</,
                    end: />\s*[);\]]/,
                    relevance: 0,
                    subLanguage: 'xml'
                  }
                ],
                relevance: 0
              },
              SIGNAL,
              PROPERTY,
              {
                className: 'function',
                beginKeywords: 'function',
                end: /\{/,
                excludeEnd: true,
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, { begin: /[A-Za-z$_][0-9A-Za-z$_]*/ }),
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    excludeBegin: true,
                    excludeEnd: true,
                    contains: [
                      hljs.C_LINE_COMMENT_MODE,
                      hljs.C_BLOCK_COMMENT_MODE
                    ]
                  }
                ],
                illegal: /\[|%/
              },
              {
                // hack: prevents detection of keywords after dots
                begin: '\\.' + hljs.IDENT_RE,
                relevance: 0
              },
              ID_ID,
              QML_ATTRIBUTE,
              QML_OBJECT
            ],
            illegal: /#/
          };
        }
 
        qml_1 = qml;
        return qml_1;
    }
 
    /*
    Language: R
    Description: R is a free software environment for statistical computing and graphics.
    Author: Joe Cheng <joe@rstudio.org>
    Contributors: Konrad Rudolph <konrad.rudolph@gmail.com>
    Website: https://www.r-project.org
    Category: common,scientific
    */
 
    var r_1;
    var hasRequiredR;
 
    function requireR () {
        if (hasRequiredR) return r_1;
        hasRequiredR = 1;
        /** @type LanguageFn */
        function r(hljs) {
          const regex = hljs.regex;
          // Identifiers in R cannot start with `_`, but they can start with `.` if it
          // is not immediately followed by a digit.
          // R also supports quoted identifiers, which are near-arbitrary sequences
          // delimited by backticks (`…`), which may contain escape sequences. These are
          // handled in a separate mode. See `test/markup/r/names.txt` for examples.
          // FIXME: Support Unicode identifiers.
          const IDENT_RE = /(?:(?:[a-zA-Z]|\.[._a-zA-Z])[._a-zA-Z0-9]*)|\.(?!\d)/;
          const NUMBER_TYPES_RE = regex.either(
            // Special case: only hexadecimal binary powers can contain fractions
            /0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/,
            // Hexadecimal numbers without fraction and optional binary power
            /0[xX][0-9a-fA-F]+(?:[pP][+-]?\d+)?[Li]?/,
            // Decimal numbers
            /(?:\d+(?:\.\d*)?|\.\d+)(?:[eE][+-]?\d+)?[Li]?/
          );
          const OPERATORS_RE = /[=!<>:]=|\|\||&&|:::?|<-|<<-|->>|->|\|>|[-+*\/?!$&|:<=>@^~]|\*\*/;
          const PUNCTUATION_RE = regex.either(
            /[()]/,
            /[{}]/,
            /\[\[/,
            /[[\]]/,
            /\\/,
            /,/
          );
 
          return {
            name: 'R',
 
            keywords: {
              $pattern: IDENT_RE,
              keyword:
                'function if in break next repeat else for while',
              literal:
                'NULL NA TRUE FALSE Inf NaN NA_integer_|10 NA_real_|10 '
                + 'NA_character_|10 NA_complex_|10',
              built_in:
                // Builtin constants
                'LETTERS letters month.abb month.name pi T F '
                // Primitive functions
                // These are all the functions in `base` that are implemented as a
                // `.Primitive`, minus those functions that are also keywords.
                + 'abs acos acosh all any anyNA Arg as.call as.character '
                + 'as.complex as.double as.environment as.integer as.logical '
                + 'as.null.default as.numeric as.raw asin asinh atan atanh attr '
                + 'attributes baseenv browser c call ceiling class Conj cos cosh '
                + 'cospi cummax cummin cumprod cumsum digamma dim dimnames '
                + 'emptyenv exp expression floor forceAndCall gamma gc.time '
                + 'globalenv Im interactive invisible is.array is.atomic is.call '
                + 'is.character is.complex is.double is.environment is.expression '
                + 'is.finite is.function is.infinite is.integer is.language '
                + 'is.list is.logical is.matrix is.na is.name is.nan is.null '
                + 'is.numeric is.object is.pairlist is.raw is.recursive is.single '
                + 'is.symbol lazyLoadDBfetch length lgamma list log max min '
                + 'missing Mod names nargs nzchar oldClass on.exit pos.to.env '
                + 'proc.time prod quote range Re rep retracemem return round '
                + 'seq_along seq_len seq.int sign signif sin sinh sinpi sqrt '
                + 'standardGeneric substitute sum switch tan tanh tanpi tracemem '
                + 'trigamma trunc unclass untracemem UseMethod xtfrm',
            },
 
            contains: [
              // Roxygen comments
              hljs.COMMENT(
                /#'/,
                /$/,
                { contains: [
                  {
                    // Handle `@examples` separately to cause all subsequent code
                    // until the next `@`-tag on its own line to be kept as-is,
                    // preventing highlighting. This code is example R code, so nested
                    // doctags shouldn’t be treated as such. See
                    // `test/markup/r/roxygen.txt` for an example.
                    scope: 'doctag',
                    match: /@examples/,
                    starts: {
                      end: regex.lookahead(regex.either(
                        // end if another doc comment
                        /\n^#'\s*(?=@[a-zA-Z]+)/,
                        // or a line with no comment
                        /\n^(?!#')/
                      )),
                      endsParent: true
                    }
                  },
                  {
                    // Handle `@param` to highlight the parameter name following
                    // after.
                    scope: 'doctag',
                    begin: '@param',
                    end: /$/,
                    contains: [
                      {
                        scope: 'variable',
                        variants: [
                          { match: IDENT_RE },
                          { match: /`(?:\\.|[^`\\])+`/ }
                        ],
                        endsParent: true
                      }
                    ]
                  },
                  {
                    scope: 'doctag',
                    match: /@[a-zA-Z]+/
                  },
                  {
                    scope: 'keyword',
                    match: /\\[a-zA-Z]+/
                  }
                ] }
              ),
 
              hljs.HASH_COMMENT_MODE,
 
              {
                scope: 'string',
                contains: [ hljs.BACKSLASH_ESCAPE ],
                variants: [
                  hljs.END_SAME_AS_BEGIN({
                    begin: /[rR]"(-*)\(/,
                    end: /\)(-*)"/
                  }),
                  hljs.END_SAME_AS_BEGIN({
                    begin: /[rR]"(-*)\{/,
                    end: /\}(-*)"/
                  }),
                  hljs.END_SAME_AS_BEGIN({
                    begin: /[rR]"(-*)\[/,
                    end: /\](-*)"/
                  }),
                  hljs.END_SAME_AS_BEGIN({
                    begin: /[rR]'(-*)\(/,
                    end: /\)(-*)'/
                  }),
                  hljs.END_SAME_AS_BEGIN({
                    begin: /[rR]'(-*)\{/,
                    end: /\}(-*)'/
                  }),
                  hljs.END_SAME_AS_BEGIN({
                    begin: /[rR]'(-*)\[/,
                    end: /\](-*)'/
                  }),
                  {
                    begin: '"',
                    end: '"',
                    relevance: 0
                  },
                  {
                    begin: "'",
                    end: "'",
                    relevance: 0
                  }
                ],
              },
 
              // Matching numbers immediately following punctuation and operators is
              // tricky since we need to look at the character ahead of a number to
              // ensure the number is not part of an identifier, and we cannot use
              // negative look-behind assertions. So instead we explicitly handle all
              // possible combinations of (operator|punctuation), number.
              // TODO: replace with negative look-behind when available
              // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+\.[0-9a-fA-F]*[pP][+-]?\d+i?/ },
              // { begin: /(?<![a-zA-Z0-9._])0[xX][0-9a-fA-F]+([pP][+-]?\d+)?[Li]?/ },
              // { begin: /(?<![a-zA-Z0-9._])(\d+(\.\d*)?|\.\d+)([eE][+-]?\d+)?[Li]?/ }
              {
                relevance: 0,
                variants: [
                  {
                    scope: {
                      1: 'operator',
                      2: 'number'
                    },
                    match: [
                      OPERATORS_RE,
                      NUMBER_TYPES_RE
                    ]
                  },
                  {
                    scope: {
                      1: 'operator',
                      2: 'number'
                    },
                    match: [
                      /%[^%]*%/,
                      NUMBER_TYPES_RE
                    ]
                  },
                  {
                    scope: {
                      1: 'punctuation',
                      2: 'number'
                    },
                    match: [
                      PUNCTUATION_RE,
                      NUMBER_TYPES_RE
                    ]
                  },
                  {
                    scope: { 2: 'number' },
                    match: [
                      /[^a-zA-Z0-9._]|^/, // not part of an identifier, or start of document
                      NUMBER_TYPES_RE
                    ]
                  }
                ]
              },
 
              // Operators/punctuation when they're not directly followed by numbers
              {
                // Relevance boost for the most common assignment form.
                scope: { 3: 'operator' },
                match: [
                  IDENT_RE,
                  /\s+/,
                  /<-/,
                  /\s+/
                ]
              },
 
              {
                scope: 'operator',
                relevance: 0,
                variants: [
                  { match: OPERATORS_RE },
                  { match: /%[^%]*%/ }
                ]
              },
 
              {
                scope: 'punctuation',
                relevance: 0,
                match: PUNCTUATION_RE
              },
 
              {
                // Escaped identifier
                begin: '`',
                end: '`',
                contains: [ { begin: /\\./ } ]
              }
            ]
          };
        }
 
        r_1 = r;
        return r_1;
    }
 
    /*
    Language: ReasonML
    Description: Reason lets you write simple, fast and quality type safe code while leveraging both the JavaScript & OCaml ecosystems.
    Website: https://reasonml.github.io
    Author: Gidi Meir Morris <oss@gidi.io>
    Category: functional
    */
 
    var reasonml_1;
    var hasRequiredReasonml;
 
    function requireReasonml () {
        if (hasRequiredReasonml) return reasonml_1;
        hasRequiredReasonml = 1;
        function reasonml(hljs) {
          function orReValues(ops) {
            return ops
              .map(function(op) {
                return op
                  .split('')
                  .map(function(char) {
                    return '\\' + char;
                  })
                  .join('');
              })
              .join('|');
          }
 
          const RE_IDENT = '~?[a-z$_][0-9a-zA-Z$_]*';
          const RE_MODULE_IDENT = '`?[A-Z$_][0-9a-zA-Z$_]*';
 
          const RE_PARAM_TYPEPARAM = '\'?[a-z$_][0-9a-z$_]*';
          const RE_PARAM_TYPE = '\\s*:\\s*[a-z$_][0-9a-z$_]*(\\(\\s*(' + RE_PARAM_TYPEPARAM + '\\s*(,' + RE_PARAM_TYPEPARAM + '\\s*)*)?\\))?';
          const RE_PARAM = RE_IDENT + '(' + RE_PARAM_TYPE + '){0,2}';
          const RE_OPERATOR = "(" + orReValues([
            '||',
            '++',
            '**',
            '+.',
            '*',
            '/',
            '*.',
            '/.',
            '...'
          ]) + "|\\|>|&&|==|===)";
          const RE_OPERATOR_SPACED = "\\s+" + RE_OPERATOR + "\\s+";
 
          const KEYWORDS = {
            keyword:
              'and as asr assert begin class constraint do done downto else end exception external '
              + 'for fun function functor if in include inherit initializer '
              + 'land lazy let lor lsl lsr lxor match method mod module mutable new nonrec '
              + 'object of open or private rec sig struct then to try type val virtual when while with',
            built_in:
              'array bool bytes char exn|5 float int int32 int64 list lazy_t|5 nativeint|5 ref string unit ',
            literal:
              'true false'
          };
 
          const RE_NUMBER = '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
            + '0[oO][0-7_]+[Lln]?|'
            + '0[bB][01_]+[Lln]?|'
            + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)';
 
          const NUMBER_MODE = {
            className: 'number',
            relevance: 0,
            variants: [
              { begin: RE_NUMBER },
              { begin: '\\(-' + RE_NUMBER + '\\)' }
            ]
          };
 
          const OPERATOR_MODE = {
            className: 'operator',
            relevance: 0,
            begin: RE_OPERATOR
          };
          const LIST_CONTENTS_MODES = [
            {
              className: 'identifier',
              relevance: 0,
              begin: RE_IDENT
            },
            OPERATOR_MODE,
            NUMBER_MODE
          ];
 
          const MODULE_ACCESS_CONTENTS = [
            hljs.QUOTE_STRING_MODE,
            OPERATOR_MODE,
            {
              className: 'module',
              begin: "\\b" + RE_MODULE_IDENT,
              returnBegin: true,
              relevance: 0,
              end: "\.",
              contains: [
                {
                  className: 'identifier',
                  begin: RE_MODULE_IDENT,
                  relevance: 0
                }
              ]
            }
          ];
 
          const PARAMS_CONTENTS = [
            {
              className: 'module',
              begin: "\\b" + RE_MODULE_IDENT,
              returnBegin: true,
              end: "\.",
              relevance: 0,
              contains: [
                {
                  className: 'identifier',
                  begin: RE_MODULE_IDENT,
                  relevance: 0
                }
              ]
            }
          ];
 
          const PARAMS_MODE = {
            begin: RE_IDENT,
            end: '(,|\\n|\\))',
            relevance: 0,
            contains: [
              OPERATOR_MODE,
              {
                className: 'typing',
                begin: ':',
                end: '(,|\\n)',
                returnBegin: true,
                relevance: 0,
                contains: PARAMS_CONTENTS
              }
            ]
          };
 
          const FUNCTION_BLOCK_MODE = {
            className: 'function',
            relevance: 0,
            keywords: KEYWORDS,
            variants: [
              {
                begin: '\\s(\\(\\.?.*?\\)|' + RE_IDENT + ')\\s*=>',
                end: '\\s*=>',
                returnBegin: true,
                relevance: 0,
                contains: [
                  {
                    className: 'params',
                    variants: [
                      { begin: RE_IDENT },
                      { begin: RE_PARAM },
                      { begin: /\(\s*\)/ }
                    ]
                  }
                ]
              },
              {
                begin: '\\s\\(\\.?[^;\\|]*\\)\\s*=>',
                end: '\\s=>',
                returnBegin: true,
                relevance: 0,
                contains: [
                  {
                    className: 'params',
                    relevance: 0,
                    variants: [ PARAMS_MODE ]
                  }
                ]
              },
              { begin: '\\(\\.\\s' + RE_IDENT + '\\)\\s*=>' }
            ]
          };
          MODULE_ACCESS_CONTENTS.push(FUNCTION_BLOCK_MODE);
 
          const CONSTRUCTOR_MODE = {
            className: 'constructor',
            begin: RE_MODULE_IDENT + '\\(',
            end: '\\)',
            illegal: '\\n',
            keywords: KEYWORDS,
            contains: [
              hljs.QUOTE_STRING_MODE,
              OPERATOR_MODE,
              {
                className: 'params',
                begin: '\\b' + RE_IDENT
              }
            ]
          };
 
          const PATTERN_MATCH_BLOCK_MODE = {
            className: 'pattern-match',
            begin: '\\|',
            returnBegin: true,
            keywords: KEYWORDS,
            end: '=>',
            relevance: 0,
            contains: [
              CONSTRUCTOR_MODE,
              OPERATOR_MODE,
              {
                relevance: 0,
                className: 'constructor',
                begin: RE_MODULE_IDENT
              }
            ]
          };
 
          const MODULE_ACCESS_MODE = {
            className: 'module-access',
            keywords: KEYWORDS,
            returnBegin: true,
            variants: [
              { begin: "\\b(" + RE_MODULE_IDENT + "\\.)+" + RE_IDENT },
              {
                begin: "\\b(" + RE_MODULE_IDENT + "\\.)+\\(",
                end: "\\)",
                returnBegin: true,
                contains: [
                  FUNCTION_BLOCK_MODE,
                  {
                    begin: '\\(',
                    end: '\\)',
                    relevance: 0,
                    skip: true
                  }
                ].concat(MODULE_ACCESS_CONTENTS)
              },
              {
                begin: "\\b(" + RE_MODULE_IDENT + "\\.)+\\{",
                end: /\}/
              }
            ],
            contains: MODULE_ACCESS_CONTENTS
          };
 
          PARAMS_CONTENTS.push(MODULE_ACCESS_MODE);
 
          return {
            name: 'ReasonML',
            aliases: [ 're' ],
            keywords: KEYWORDS,
            illegal: '(:-|:=|\\$\\{|\\+=)',
            contains: [
              hljs.COMMENT('/\\*', '\\*/', { illegal: '^(#,\\/\\/)' }),
              {
                className: 'character',
                begin: '\'(\\\\[^\']+|[^\'])\'',
                illegal: '\\n',
                relevance: 0
              },
              hljs.QUOTE_STRING_MODE,
              {
                className: 'literal',
                begin: '\\(\\)',
                relevance: 0
              },
              {
                className: 'literal',
                begin: '\\[\\|',
                end: '\\|\\]',
                relevance: 0,
                contains: LIST_CONTENTS_MODES
              },
              {
                className: 'literal',
                begin: '\\[',
                end: '\\]',
                relevance: 0,
                contains: LIST_CONTENTS_MODES
              },
              CONSTRUCTOR_MODE,
              {
                className: 'operator',
                begin: RE_OPERATOR_SPACED,
                illegal: '-->',
                relevance: 0
              },
              NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              PATTERN_MATCH_BLOCK_MODE,
              FUNCTION_BLOCK_MODE,
              {
                className: 'module-def',
                begin: "\\bmodule\\s+" + RE_IDENT + "\\s+" + RE_MODULE_IDENT + "\\s+=\\s+\\{",
                end: /\}/,
                returnBegin: true,
                keywords: KEYWORDS,
                relevance: 0,
                contains: [
                  {
                    className: 'module',
                    relevance: 0,
                    begin: RE_MODULE_IDENT
                  },
                  {
                    begin: /\{/,
                    end: /\}/,
                    relevance: 0,
                    skip: true
                  }
                ].concat(MODULE_ACCESS_CONTENTS)
              },
              MODULE_ACCESS_MODE
            ]
          };
        }
 
        reasonml_1 = reasonml;
        return reasonml_1;
    }
 
    /*
    Language: RenderMan RIB
    Author: Konstantin Evdokimenko <qewerty@gmail.com>
    Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
    Website: https://renderman.pixar.com/resources/RenderMan_20/ribBinding.html
    Category: graphics
    */
 
    var rib_1;
    var hasRequiredRib;
 
    function requireRib () {
        if (hasRequiredRib) return rib_1;
        hasRequiredRib = 1;
        function rib(hljs) {
          return {
            name: 'RenderMan RIB',
            keywords:
              'ArchiveRecord AreaLightSource Atmosphere Attribute AttributeBegin AttributeEnd Basis '
              + 'Begin Blobby Bound Clipping ClippingPlane Color ColorSamples ConcatTransform Cone '
              + 'CoordinateSystem CoordSysTransform CropWindow Curves Cylinder DepthOfField Detail '
              + 'DetailRange Disk Displacement Display End ErrorHandler Exposure Exterior Format '
              + 'FrameAspectRatio FrameBegin FrameEnd GeneralPolygon GeometricApproximation Geometry '
              + 'Hider Hyperboloid Identity Illuminate Imager Interior LightSource '
              + 'MakeCubeFaceEnvironment MakeLatLongEnvironment MakeShadow MakeTexture Matte '
              + 'MotionBegin MotionEnd NuPatch ObjectBegin ObjectEnd ObjectInstance Opacity Option '
              + 'Orientation Paraboloid Patch PatchMesh Perspective PixelFilter PixelSamples '
              + 'PixelVariance Points PointsGeneralPolygons PointsPolygons Polygon Procedural Projection '
              + 'Quantize ReadArchive RelativeDetail ReverseOrientation Rotate Scale ScreenWindow '
              + 'ShadingInterpolation ShadingRate Shutter Sides Skew SolidBegin SolidEnd Sphere '
              + 'SubdivisionMesh Surface TextureCoordinates Torus Transform TransformBegin TransformEnd '
              + 'TransformPoints Translate TrimCurve WorldBegin WorldEnd',
            illegal: '</',
            contains: [
              hljs.HASH_COMMENT_MODE,
              hljs.C_NUMBER_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE
            ]
          };
        }
 
        rib_1 = rib;
        return rib_1;
    }
 
    /*
    Language: Roboconf
    Author: Vincent Zurczak <vzurczak@linagora.com>
    Description: Syntax highlighting for Roboconf's DSL
    Website: http://roboconf.net
    Category: config
    */
 
    var roboconf_1;
    var hasRequiredRoboconf;
 
    function requireRoboconf () {
        if (hasRequiredRoboconf) return roboconf_1;
        hasRequiredRoboconf = 1;
        function roboconf(hljs) {
          const IDENTIFIER = '[a-zA-Z-_][^\\n{]+\\{';
 
          const PROPERTY = {
            className: 'attribute',
            begin: /[a-zA-Z-_]+/,
            end: /\s*:/,
            excludeEnd: true,
            starts: {
              end: ';',
              relevance: 0,
              contains: [
                {
                  className: 'variable',
                  begin: /\.[a-zA-Z-_]+/
                },
                {
                  className: 'keyword',
                  begin: /\(optional\)/
                }
              ]
            }
          };
 
          return {
            name: 'Roboconf',
            aliases: [
              'graph',
              'instances'
            ],
            case_insensitive: true,
            keywords: 'import',
            contains: [
              // Facet sections
              {
                begin: '^facet ' + IDENTIFIER,
                end: /\}/,
                keywords: 'facet',
                contains: [
                  PROPERTY,
                  hljs.HASH_COMMENT_MODE
                ]
              },
 
              // Instance sections
              {
                begin: '^\\s*instance of ' + IDENTIFIER,
                end: /\}/,
                keywords: 'name count channels instance-data instance-state instance of',
                illegal: /\S/,
                contains: [
                  'self',
                  PROPERTY,
                  hljs.HASH_COMMENT_MODE
                ]
              },
 
              // Component sections
              {
                begin: '^' + IDENTIFIER,
                end: /\}/,
                contains: [
                  PROPERTY,
                  hljs.HASH_COMMENT_MODE
                ]
              },
 
              // Comments
              hljs.HASH_COMMENT_MODE
            ]
          };
        }
 
        roboconf_1 = roboconf;
        return roboconf_1;
    }
 
    /*
    Language: MikroTik RouterOS script
    Author: Ivan Dementev <ivan_div@mail.ru>
    Description: Scripting host provides a way to automate some router maintenance tasks by means of executing user-defined scripts bounded to some event occurrence
    Website: https://wiki.mikrotik.com/wiki/Manual:Scripting
    */
 
    var routeros_1;
    var hasRequiredRouteros;
 
    function requireRouteros () {
        if (hasRequiredRouteros) return routeros_1;
        hasRequiredRouteros = 1;
        // Colors from RouterOS terminal:
        //   green        - #0E9A00
        //   teal         - #0C9A9A
        //   purple       - #99069A
        //   light-brown  - #9A9900
 
        function routeros(hljs) {
          const STATEMENTS = 'foreach do while for if from to step else on-error and or not in';
 
          // Global commands: Every global command should start with ":" token, otherwise it will be treated as variable.
          const GLOBAL_COMMANDS = 'global local beep delay put len typeof pick log time set find environment terminal error execute parse resolve toarray tobool toid toip toip6 tonum tostr totime';
 
          // Common commands: Following commands available from most sub-menus:
          const COMMON_COMMANDS = 'add remove enable disable set get print export edit find run debug error info warning';
 
          const LITERALS = 'true false yes no nothing nil null';
 
          const OBJECTS = 'traffic-flow traffic-generator firewall scheduler aaa accounting address-list address align area bandwidth-server bfd bgp bridge client clock community config connection console customer default dhcp-client dhcp-server discovery dns e-mail ethernet filter firmware gps graphing group hardware health hotspot identity igmp-proxy incoming instance interface ip ipsec ipv6 irq l2tp-server lcd ldp logging mac-server mac-winbox mangle manual mirror mme mpls nat nd neighbor network note ntp ospf ospf-v3 ovpn-server page peer pim ping policy pool port ppp pppoe-client pptp-server prefix profile proposal proxy queue radius resource rip ripng route routing screen script security-profiles server service service-port settings shares smb sms sniffer snmp snooper socks sstp-server system tool tracking type upgrade upnp user-manager users user vlan secret vrrp watchdog web-access wireless pptp pppoe lan wan layer7-protocol lease simple raw';
 
          const VAR = {
            className: 'variable',
            variants: [
              { begin: /\$[\w\d#@][\w\d_]*/ },
              { begin: /\$\{(.*?)\}/ }
            ]
          };
 
          const QUOTE_STRING = {
            className: 'string',
            begin: /"/,
            end: /"/,
            contains: [
              hljs.BACKSLASH_ESCAPE,
              VAR,
              {
                className: 'variable',
                begin: /\$\(/,
                end: /\)/,
                contains: [ hljs.BACKSLASH_ESCAPE ]
              }
            ]
          };
 
          const APOS_STRING = {
            className: 'string',
            begin: /'/,
            end: /'/
          };
 
          return {
            name: 'MikroTik RouterOS script',
            aliases: [ 'mikrotik' ],
            case_insensitive: true,
            keywords: {
              $pattern: /:?[\w-]+/,
              literal: LITERALS,
              keyword: STATEMENTS + ' :' + STATEMENTS.split(' ').join(' :') + ' :' + GLOBAL_COMMANDS.split(' ').join(' :')
            },
            contains: [
              { // illegal syntax
                variants: [
                  { // -- comment
                    begin: /\/\*/,
                    end: /\*\//
                  },
                  { // Stan comment
                    begin: /\/\//,
                    end: /$/
                  },
                  { // HTML tags
                    begin: /<\//,
                    end: />/
                  }
                ],
                illegal: /./
              },
              hljs.COMMENT('^#', '$'),
              QUOTE_STRING,
              APOS_STRING,
              VAR,
              // attribute=value
              {
                // > is to avoid matches with => in other grammars
                begin: /[\w-]+=([^\s{}[\]()>]+)/,
                relevance: 0,
                returnBegin: true,
                contains: [
                  {
                    className: 'attribute',
                    begin: /[^=]+/
                  },
                  {
                    begin: /=/,
                    endsWithParent: true,
                    relevance: 0,
                    contains: [
                      QUOTE_STRING,
                      APOS_STRING,
                      VAR,
                      {
                        className: 'literal',
                        begin: '\\b(' + LITERALS.split(' ').join('|') + ')\\b'
                      },
                      {
                        // Do not format unclassified values. Needed to exclude highlighting of values as built_in.
                        begin: /("[^"]*"|[^\s{}[\]]+)/ }
                      /*
                      {
                        // IPv4 addresses and subnets
                        className: 'number',
                        variants: [
                          {begin: IPADDR_wBITMASK+'(,'+IPADDR_wBITMASK+')*'}, //192.168.0.0/24,1.2.3.0/24
                          {begin: IPADDR+'-'+IPADDR},       // 192.168.0.1-192.168.0.3
                          {begin: IPADDR+'(,'+IPADDR+')*'}, // 192.168.0.1,192.168.0.34,192.168.24.1,192.168.0.1
                        ]
                      },
                      {
                        // MAC addresses and DHCP Client IDs
                        className: 'number',
                        begin: /\b(1:)?([0-9A-Fa-f]{1,2}[:-]){5}([0-9A-Fa-f]){1,2}\b/,
                      },
                      */
                    ]
                  }
                ]
              },
              {
                // HEX values
                className: 'number',
                begin: /\*[0-9a-fA-F]+/
              },
              {
                begin: '\\b(' + COMMON_COMMANDS.split(' ').join('|') + ')([\\s[(\\]|])',
                returnBegin: true,
                contains: [
                  {
                    className: 'built_in', // 'function',
                    begin: /\w+/
                  }
                ]
              },
              {
                className: 'built_in',
                variants: [
                  { begin: '(\\.\\./|/|\\s)((' + OBJECTS.split(' ').join('|') + ');?\\s)+' },
                  {
                    begin: /\.\./,
                    relevance: 0
                  }
                ]
              }
            ]
          };
        }
 
        routeros_1 = routeros;
        return routeros_1;
    }
 
    /*
    Language: RenderMan RSL
    Author: Konstantin Evdokimenko <qewerty@gmail.com>
    Contributors: Shuen-Huei Guan <drake.guan@gmail.com>
    Website: https://renderman.pixar.com/resources/RenderMan_20/shadingLanguage.html
    Category: graphics
    */
 
    var rsl_1;
    var hasRequiredRsl;
 
    function requireRsl () {
        if (hasRequiredRsl) return rsl_1;
        hasRequiredRsl = 1;
        function rsl(hljs) {
          const BUILT_INS = [
            "abs",
            "acos",
            "ambient",
            "area",
            "asin",
            "atan",
            "atmosphere",
            "attribute",
            "calculatenormal",
            "ceil",
            "cellnoise",
            "clamp",
            "comp",
            "concat",
            "cos",
            "degrees",
            "depth",
            "Deriv",
            "diffuse",
            "distance",
            "Du",
            "Dv",
            "environment",
            "exp",
            "faceforward",
            "filterstep",
            "floor",
            "format",
            "fresnel",
            "incident",
            "length",
            "lightsource",
            "log",
            "match",
            "max",
            "min",
            "mod",
            "noise",
            "normalize",
            "ntransform",
            "opposite",
            "option",
            "phong",
            "pnoise",
            "pow",
            "printf",
            "ptlined",
            "radians",
            "random",
            "reflect",
            "refract",
            "renderinfo",
            "round",
            "setcomp",
            "setxcomp",
            "setycomp",
            "setzcomp",
            "shadow",
            "sign",
            "sin",
            "smoothstep",
            "specular",
            "specularbrdf",
            "spline",
            "sqrt",
            "step",
            "tan",
            "texture",
            "textureinfo",
            "trace",
            "transform",
            "vtransform",
            "xcomp",
            "ycomp",
            "zcomp"
          ];
 
          const TYPES = [
            "matrix",
            "float",
            "color",
            "point",
            "normal",
            "vector"
          ];
 
          const KEYWORDS = [
            "while",
            "for",
            "if",
            "do",
            "return",
            "else",
            "break",
            "extern",
            "continue"
          ];
 
          const CLASS_DEFINITION = {
            match: [
              /(surface|displacement|light|volume|imager)/,
              /\s+/,
              hljs.IDENT_RE,
            ],
            scope: {
              1: "keyword",
              3: "title.class",
            }
          };
 
          return {
            name: 'RenderMan RSL',
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_INS,
              type: TYPES
            },
            illegal: '</',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'meta',
                begin: '#',
                end: '$'
              },
              CLASS_DEFINITION,
              {
                beginKeywords: 'illuminate illuminance gather',
                end: '\\('
              }
            ]
          };
        }
 
        rsl_1 = rsl;
        return rsl_1;
    }
 
    /*
    Language: Oracle Rules Language
    Author: Jason Jacobson <jason.a.jacobson@gmail.com>
    Description: The Oracle Utilities Rules Language is used to program the Oracle Utilities Applications acquired from LODESTAR Corporation.  The products include Billing Component, LPSS, Pricing Component etc. through version 1.6.1.
    Website: https://docs.oracle.com/cd/E17904_01/dev.1111/e10227/rlref.htm
    Category: enterprise
    */
 
    var ruleslanguage_1;
    var hasRequiredRuleslanguage;
 
    function requireRuleslanguage () {
        if (hasRequiredRuleslanguage) return ruleslanguage_1;
        hasRequiredRuleslanguage = 1;
        function ruleslanguage(hljs) {
          return {
            name: 'Oracle Rules Language',
            keywords: {
              keyword:
                'BILL_PERIOD BILL_START BILL_STOP RS_EFFECTIVE_START RS_EFFECTIVE_STOP RS_JURIS_CODE RS_OPCO_CODE '
                + 'INTDADDATTRIBUTE|5 INTDADDVMSG|5 INTDBLOCKOP|5 INTDBLOCKOPNA|5 INTDCLOSE|5 INTDCOUNT|5 '
                + 'INTDCOUNTSTATUSCODE|5 INTDCREATEMASK|5 INTDCREATEDAYMASK|5 INTDCREATEFACTORMASK|5 '
                + 'INTDCREATEHANDLE|5 INTDCREATEOVERRIDEDAYMASK|5 INTDCREATEOVERRIDEMASK|5 '
                + 'INTDCREATESTATUSCODEMASK|5 INTDCREATETOUPERIOD|5 INTDDELETE|5 INTDDIPTEST|5 INTDEXPORT|5 '
                + 'INTDGETERRORCODE|5 INTDGETERRORMESSAGE|5 INTDISEQUAL|5 INTDJOIN|5 INTDLOAD|5 INTDLOADACTUALCUT|5 '
                + 'INTDLOADDATES|5 INTDLOADHIST|5 INTDLOADLIST|5 INTDLOADLISTDATES|5 INTDLOADLISTENERGY|5 '
                + 'INTDLOADLISTHIST|5 INTDLOADRELATEDCHANNEL|5 INTDLOADSP|5 INTDLOADSTAGING|5 INTDLOADUOM|5 '
                + 'INTDLOADUOMDATES|5 INTDLOADUOMHIST|5 INTDLOADVERSION|5 INTDOPEN|5 INTDREADFIRST|5 INTDREADNEXT|5 '
                + 'INTDRECCOUNT|5 INTDRELEASE|5 INTDREPLACE|5 INTDROLLAVG|5 INTDROLLPEAK|5 INTDSCALAROP|5 INTDSCALE|5 '
                + 'INTDSETATTRIBUTE|5 INTDSETDSTPARTICIPANT|5 INTDSETSTRING|5 INTDSETVALUE|5 INTDSETVALUESTATUS|5 '
                + 'INTDSHIFTSTARTTIME|5 INTDSMOOTH|5 INTDSORT|5 INTDSPIKETEST|5 INTDSUBSET|5 INTDTOU|5 '
                + 'INTDTOURELEASE|5 INTDTOUVALUE|5 INTDUPDATESTATS|5 INTDVALUE|5 STDEV INTDDELETEEX|5 '
                + 'INTDLOADEXACTUAL|5 INTDLOADEXCUT|5 INTDLOADEXDATES|5 INTDLOADEX|5 INTDLOADEXRELATEDCHANNEL|5 '
                + 'INTDSAVEEX|5 MVLOAD|5 MVLOADACCT|5 MVLOADACCTDATES|5 MVLOADACCTHIST|5 MVLOADDATES|5 MVLOADHIST|5 '
                + 'MVLOADLIST|5 MVLOADLISTDATES|5 MVLOADLISTHIST|5 IF FOR NEXT DONE SELECT END CALL ABORT CLEAR CHANNEL FACTOR LIST NUMBER '
                + 'OVERRIDE SET WEEK DISTRIBUTIONNODE ELSE WHEN THEN OTHERWISE IENUM CSV INCLUDE LEAVE RIDER SAVE DELETE '
                + 'NOVALUE SECTION WARN SAVE_UPDATE DETERMINANT LABEL REPORT REVENUE EACH '
                + 'IN FROM TOTAL CHARGE BLOCK AND OR CSV_FILE RATE_CODE AUXILIARY_DEMAND '
                + 'UIDACCOUNT RS BILL_PERIOD_SELECT HOURS_PER_MONTH INTD_ERROR_STOP SEASON_SCHEDULE_NAME '
                + 'ACCOUNTFACTOR ARRAYUPPERBOUND CALLSTOREDPROC GETADOCONNECTION GETCONNECT GETDATASOURCE '
                + 'GETQUALIFIER GETUSERID HASVALUE LISTCOUNT LISTOP LISTUPDATE LISTVALUE PRORATEFACTOR RSPRORATE '
                + 'SETBINPATH SETDBMONITOR WQ_OPEN BILLINGHOURS DATE DATEFROMFLOAT DATETIMEFROMSTRING '
                + 'DATETIMETOSTRING DATETOFLOAT DAY DAYDIFF DAYNAME DBDATETIME HOUR MINUTE MONTH MONTHDIFF '
                + 'MONTHHOURS MONTHNAME ROUNDDATE SAMEWEEKDAYLASTYEAR SECOND WEEKDAY WEEKDIFF YEAR YEARDAY '
                + 'YEARSTR COMPSUM HISTCOUNT HISTMAX HISTMIN HISTMINNZ HISTVALUE MAXNRANGE MAXRANGE MINRANGE '
                + 'COMPIKVA COMPKVA COMPKVARFROMKQKW COMPLF IDATTR FLAG LF2KW LF2KWH MAXKW POWERFACTOR '
                + 'READING2USAGE AVGSEASON MAXSEASON MONTHLYMERGE SEASONVALUE SUMSEASON ACCTREADDATES '
                + 'ACCTTABLELOAD CONFIGADD CONFIGGET CREATEOBJECT CREATEREPORT EMAILCLIENT EXPBLKMDMUSAGE '
                + 'EXPMDMUSAGE EXPORT_USAGE FACTORINEFFECT GETUSERSPECIFIEDSTOP INEFFECT ISHOLIDAY RUNRATE '
                + 'SAVE_PROFILE SETREPORTTITLE USEREXIT WATFORRUNRATE TO TABLE ACOS ASIN ATAN ATAN2 BITAND CEIL '
                + 'COS COSECANT COSH COTANGENT DIVQUOT DIVREM EXP FABS FLOOR FMOD FREPM FREXPN LOG LOG10 MAX MAXN '
                + 'MIN MINNZ MODF POW ROUND ROUND2VALUE ROUNDINT SECANT SIN SINH SQROOT TAN TANH FLOAT2STRING '
                + 'FLOAT2STRINGNC INSTR LEFT LEN LTRIM MID RIGHT RTRIM STRING STRINGNC TOLOWER TOUPPER TRIM '
                + 'NUMDAYS READ_DATE STAGING',
              built_in:
                'IDENTIFIER OPTIONS XML_ELEMENT XML_OP XML_ELEMENT_OF DOMDOCCREATE DOMDOCLOADFILE DOMDOCLOADXML '
                + 'DOMDOCSAVEFILE DOMDOCGETROOT DOMDOCADDPI DOMNODEGETNAME DOMNODEGETTYPE DOMNODEGETVALUE DOMNODEGETCHILDCT '
                + 'DOMNODEGETFIRSTCHILD DOMNODEGETSIBLING DOMNODECREATECHILDELEMENT DOMNODESETATTRIBUTE '
                + 'DOMNODEGETCHILDELEMENTCT DOMNODEGETFIRSTCHILDELEMENT DOMNODEGETSIBLINGELEMENT DOMNODEGETATTRIBUTECT '
                + 'DOMNODEGETATTRIBUTEI DOMNODEGETATTRIBUTEBYNAME DOMNODEGETBYNAME'
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'literal',
                variants: [
                  { // looks like #-comment
                    begin: '#\\s+',
                    relevance: 0
                  },
                  { begin: '#[a-zA-Z .]+' }
                ]
              }
            ]
          };
        }
 
        ruleslanguage_1 = ruleslanguage;
        return ruleslanguage_1;
    }
 
    /*
    Language: Rust
    Author: Andrey Vlasovskikh <andrey.vlasovskikh@gmail.com>
    Contributors: Roman Shmatov <romanshmatov@gmail.com>, Kasper Andersen <kma_untrusted@protonmail.com>
    Website: https://www.rust-lang.org
    Category: common, system
    */
 
    var rust_1;
    var hasRequiredRust;
 
    function requireRust () {
        if (hasRequiredRust) return rust_1;
        hasRequiredRust = 1;
        /** @type LanguageFn */
        function rust(hljs) {
          const regex = hljs.regex;
          const FUNCTION_INVOKE = {
            className: "title.function.invoke",
            relevance: 0,
            begin: regex.concat(
              /\b/,
              /(?!let\b)/,
              hljs.IDENT_RE,
              regex.lookahead(/\s*\(/))
          };
          const NUMBER_SUFFIX = '([ui](8|16|32|64|128|size)|f(32|64))\?';
          const KEYWORDS = [
            "abstract",
            "as",
            "async",
            "await",
            "become",
            "box",
            "break",
            "const",
            "continue",
            "crate",
            "do",
            "dyn",
            "else",
            "enum",
            "extern",
            "false",
            "final",
            "fn",
            "for",
            "if",
            "impl",
            "in",
            "let",
            "loop",
            "macro",
            "match",
            "mod",
            "move",
            "mut",
            "override",
            "priv",
            "pub",
            "ref",
            "return",
            "self",
            "Self",
            "static",
            "struct",
            "super",
            "trait",
            "true",
            "try",
            "type",
            "typeof",
            "unsafe",
            "unsized",
            "use",
            "virtual",
            "where",
            "while",
            "yield"
          ];
          const LITERALS = [
            "true",
            "false",
            "Some",
            "None",
            "Ok",
            "Err"
          ];
          const BUILTINS = [
            // functions
            'drop ',
            // traits
            "Copy",
            "Send",
            "Sized",
            "Sync",
            "Drop",
            "Fn",
            "FnMut",
            "FnOnce",
            "ToOwned",
            "Clone",
            "Debug",
            "PartialEq",
            "PartialOrd",
            "Eq",
            "Ord",
            "AsRef",
            "AsMut",
            "Into",
            "From",
            "Default",
            "Iterator",
            "Extend",
            "IntoIterator",
            "DoubleEndedIterator",
            "ExactSizeIterator",
            "SliceConcatExt",
            "ToString",
            // macros
            "assert!",
            "assert_eq!",
            "bitflags!",
            "bytes!",
            "cfg!",
            "col!",
            "concat!",
            "concat_idents!",
            "debug_assert!",
            "debug_assert_eq!",
            "env!",
            "panic!",
            "file!",
            "format!",
            "format_args!",
            "include_bytes!",
            "include_str!",
            "line!",
            "local_data_key!",
            "module_path!",
            "option_env!",
            "print!",
            "println!",
            "select!",
            "stringify!",
            "try!",
            "unimplemented!",
            "unreachable!",
            "vec!",
            "write!",
            "writeln!",
            "macro_rules!",
            "assert_ne!",
            "debug_assert_ne!"
          ];
          const TYPES = [
            "i8",
            "i16",
            "i32",
            "i64",
            "i128",
            "isize",
            "u8",
            "u16",
            "u32",
            "u64",
            "u128",
            "usize",
            "f32",
            "f64",
            "str",
            "char",
            "bool",
            "Box",
            "Option",
            "Result",
            "String",
            "Vec"
          ];
          return {
            name: 'Rust',
            aliases: [ 'rs' ],
            keywords: {
              $pattern: hljs.IDENT_RE + '!?',
              type: TYPES,
              keyword: KEYWORDS,
              literal: LITERALS,
              built_in: BUILTINS
            },
            illegal: '</',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.COMMENT('/\\*', '\\*/', { contains: [ 'self' ] }),
              hljs.inherit(hljs.QUOTE_STRING_MODE, {
                begin: /b?"/,
                illegal: null
              }),
              {
                className: 'string',
                variants: [
                  { begin: /b?r(#*)"(.|\n)*?"\1(?!#)/ },
                  { begin: /b?'\\?(x\w{2}|u\w{4}|U\w{8}|.)'/ }
                ]
              },
              {
                className: 'symbol',
                begin: /'[a-zA-Z_][a-zA-Z0-9_]*/
              },
              {
                className: 'number',
                variants: [
                  { begin: '\\b0b([01_]+)' + NUMBER_SUFFIX },
                  { begin: '\\b0o([0-7_]+)' + NUMBER_SUFFIX },
                  { begin: '\\b0x([A-Fa-f0-9_]+)' + NUMBER_SUFFIX },
                  { begin: '\\b(\\d[\\d_]*(\\.[0-9_]+)?([eE][+-]?[0-9_]+)?)'
                           + NUMBER_SUFFIX }
                ],
                relevance: 0
              },
              {
                begin: [
                  /fn/,
                  /\s+/,
                  hljs.UNDERSCORE_IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.function"
                }
              },
              {
                className: 'meta',
                begin: '#!?\\[',
                end: '\\]',
                contains: [
                  {
                    className: 'string',
                    begin: /"/,
                    end: /"/
                  }
                ]
              },
              {
                begin: [
                  /let/,
                  /\s+/,
                  /(?:mut\s+)?/,
                  hljs.UNDERSCORE_IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "keyword",
                  4: "variable"
                }
              },
              // must come before impl/for rule later
              {
                begin: [
                  /for/,
                  /\s+/,
                  hljs.UNDERSCORE_IDENT_RE,
                  /\s+/,
                  /in/
                ],
                className: {
                  1: "keyword",
                  3: "variable",
                  5: "keyword"
                }
              },
              {
                begin: [
                  /type/,
                  /\s+/,
                  hljs.UNDERSCORE_IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                }
              },
              {
                begin: [
                  /(?:trait|enum|struct|union|impl|for)/,
                  /\s+/,
                  hljs.UNDERSCORE_IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title.class"
                }
              },
              {
                begin: hljs.IDENT_RE + '::',
                keywords: {
                  keyword: "Self",
                  built_in: BUILTINS,
                  type: TYPES
                }
              },
              {
                className: "punctuation",
                begin: '->'
              },
              FUNCTION_INVOKE
            ]
          };
        }
 
        rust_1 = rust;
        return rust_1;
    }
 
    /*
    Language: SAS
    Author: Mauricio Caceres <mauricio.caceres.bravo@gmail.com>
    Description: Syntax Highlighting for SAS
    */
 
    var sas_1;
    var hasRequiredSas;
 
    function requireSas () {
        if (hasRequiredSas) return sas_1;
        hasRequiredSas = 1;
        /** @type LanguageFn */
        function sas(hljs) {
          const regex = hljs.regex;
          // Data step and PROC SQL statements
          const SAS_KEYWORDS = [
            "do",
            "if",
            "then",
            "else",
            "end",
            "until",
            "while",
            "abort",
            "array",
            "attrib",
            "by",
            "call",
            "cards",
            "cards4",
            "catname",
            "continue",
            "datalines",
            "datalines4",
            "delete",
            "delim",
            "delimiter",
            "display",
            "dm",
            "drop",
            "endsas",
            "error",
            "file",
            "filename",
            "footnote",
            "format",
            "goto",
            "in",
            "infile",
            "informat",
            "input",
            "keep",
            "label",
            "leave",
            "length",
            "libname",
            "link",
            "list",
            "lostcard",
            "merge",
            "missing",
            "modify",
            "options",
            "output",
            "out",
            "page",
            "put",
            "redirect",
            "remove",
            "rename",
            "replace",
            "retain",
            "return",
            "select",
            "set",
            "skip",
            "startsas",
            "stop",
            "title",
            "update",
            "waitsas",
            "where",
            "window",
            "x|0",
            "systask",
            "add",
            "and",
            "alter",
            "as",
            "cascade",
            "check",
            "create",
            "delete",
            "describe",
            "distinct",
            "drop",
            "foreign",
            "from",
            "group",
            "having",
            "index",
            "insert",
            "into",
            "in",
            "key",
            "like",
            "message",
            "modify",
            "msgtype",
            "not",
            "null",
            "on",
            "or",
            "order",
            "primary",
            "references",
            "reset",
            "restrict",
            "select",
            "set",
            "table",
            "unique",
            "update",
            "validate",
            "view",
            "where"
          ];
 
          // Built-in SAS functions
          const FUNCTIONS = [
            "abs",
            "addr",
            "airy",
            "arcos",
            "arsin",
            "atan",
            "attrc",
            "attrn",
            "band",
            "betainv",
            "blshift",
            "bnot",
            "bor",
            "brshift",
            "bxor",
            "byte",
            "cdf",
            "ceil",
            "cexist",
            "cinv",
            "close",
            "cnonct",
            "collate",
            "compbl",
            "compound",
            "compress",
            "cos",
            "cosh",
            "css",
            "curobs",
            "cv",
            "daccdb",
            "daccdbsl",
            "daccsl",
            "daccsyd",
            "dacctab",
            "dairy",
            "date",
            "datejul",
            "datepart",
            "datetime",
            "day",
            "dclose",
            "depdb",
            "depdbsl",
            "depdbsl",
            "depsl",
            "depsl",
            "depsyd",
            "depsyd",
            "deptab",
            "deptab",
            "dequote",
            "dhms",
            "dif",
            "digamma",
            "dim",
            "dinfo",
            "dnum",
            "dopen",
            "doptname",
            "doptnum",
            "dread",
            "dropnote",
            "dsname",
            "erf",
            "erfc",
            "exist",
            "exp",
            "fappend",
            "fclose",
            "fcol",
            "fdelete",
            "fetch",
            "fetchobs",
            "fexist",
            "fget",
            "fileexist",
            "filename",
            "fileref",
            "finfo",
            "finv",
            "fipname",
            "fipnamel",
            "fipstate",
            "floor",
            "fnonct",
            "fnote",
            "fopen",
            "foptname",
            "foptnum",
            "fpoint",
            "fpos",
            "fput",
            "fread",
            "frewind",
            "frlen",
            "fsep",
            "fuzz",
            "fwrite",
            "gaminv",
            "gamma",
            "getoption",
            "getvarc",
            "getvarn",
            "hbound",
            "hms",
            "hosthelp",
            "hour",
            "ibessel",
            "index",
            "indexc",
            "indexw",
            "input",
            "inputc",
            "inputn",
            "int",
            "intck",
            "intnx",
            "intrr",
            "irr",
            "jbessel",
            "juldate",
            "kurtosis",
            "lag",
            "lbound",
            "left",
            "length",
            "lgamma",
            "libname",
            "libref",
            "log",
            "log10",
            "log2",
            "logpdf",
            "logpmf",
            "logsdf",
            "lowcase",
            "max",
            "mdy",
            "mean",
            "min",
            "minute",
            "mod",
            "month",
            "mopen",
            "mort",
            "n",
            "netpv",
            "nmiss",
            "normal",
            "note",
            "npv",
            "open",
            "ordinal",
            "pathname",
            "pdf",
            "peek",
            "peekc",
            "pmf",
            "point",
            "poisson",
            "poke",
            "probbeta",
            "probbnml",
            "probchi",
            "probf",
            "probgam",
            "probhypr",
            "probit",
            "probnegb",
            "probnorm",
            "probt",
            "put",
            "putc",
            "putn",
            "qtr",
            "quote",
            "ranbin",
            "rancau",
            "ranexp",
            "rangam",
            "range",
            "rank",
            "rannor",
            "ranpoi",
            "rantbl",
            "rantri",
            "ranuni",
            "repeat",
            "resolve",
            "reverse",
            "rewind",
            "right",
            "round",
            "saving",
            "scan",
            "sdf",
            "second",
            "sign",
            "sin",
            "sinh",
            "skewness",
            "soundex",
            "spedis",
            "sqrt",
            "std",
            "stderr",
            "stfips",
            "stname",
            "stnamel",
            "substr",
            "sum",
            "symget",
            "sysget",
            "sysmsg",
            "sysprod",
            "sysrc",
            "system",
            "tan",
            "tanh",
            "time",
            "timepart",
            "tinv",
            "tnonct",
            "today",
            "translate",
            "tranwrd",
            "trigamma",
            "trim",
            "trimn",
            "trunc",
            "uniform",
            "upcase",
            "uss",
            "var",
            "varfmt",
            "varinfmt",
            "varlabel",
            "varlen",
            "varname",
            "varnum",
            "varray",
            "varrayx",
            "vartype",
            "verify",
            "vformat",
            "vformatd",
            "vformatdx",
            "vformatn",
            "vformatnx",
            "vformatw",
            "vformatwx",
            "vformatx",
            "vinarray",
            "vinarrayx",
            "vinformat",
            "vinformatd",
            "vinformatdx",
            "vinformatn",
            "vinformatnx",
            "vinformatw",
            "vinformatwx",
            "vinformatx",
            "vlabel",
            "vlabelx",
            "vlength",
            "vlengthx",
            "vname",
            "vnamex",
            "vtype",
            "vtypex",
            "weekday",
            "year",
            "yyq",
            "zipfips",
            "zipname",
            "zipnamel",
            "zipstate"
          ];
 
          // Built-in macro functions
          const MACRO_FUNCTIONS = [
            "bquote",
            "nrbquote",
            "cmpres",
            "qcmpres",
            "compstor",
            "datatyp",
            "display",
            "do",
            "else",
            "end",
            "eval",
            "global",
            "goto",
            "if",
            "index",
            "input",
            "keydef",
            "label",
            "left",
            "length",
            "let",
            "local",
            "lowcase",
            "macro",
            "mend",
            "nrbquote",
            "nrquote",
            "nrstr",
            "put",
            "qcmpres",
            "qleft",
            "qlowcase",
            "qscan",
            "qsubstr",
            "qsysfunc",
            "qtrim",
            "quote",
            "qupcase",
            "scan",
            "str",
            "substr",
            "superq",
            "syscall",
            "sysevalf",
            "sysexec",
            "sysfunc",
            "sysget",
            "syslput",
            "sysprod",
            "sysrc",
            "sysrput",
            "then",
            "to",
            "trim",
            "unquote",
            "until",
            "upcase",
            "verify",
            "while",
            "window"
          ];
 
          const LITERALS = [
            "null",
            "missing",
            "_all_",
            "_automatic_",
            "_character_",
            "_infile_",
            "_n_",
            "_name_",
            "_null_",
            "_numeric_",
            "_user_",
            "_webout_"
          ];
 
          return {
            name: 'SAS',
            case_insensitive: true,
            keywords: {
              literal: LITERALS,
              keyword: SAS_KEYWORDS
            },
            contains: [
              {
                // Distinct highlight for proc <proc>, data, run, quit
                className: 'keyword',
                begin: /^\s*(proc [\w\d_]+|data|run|quit)[\s;]/
              },
              {
                // Macro variables
                className: 'variable',
                begin: /&[a-zA-Z_&][a-zA-Z0-9_]*\.?/
              },
              {
                begin: [
                  /^\s*/,
                  /datalines;|cards;/,
                  /(?:.*\n)+/,
                  /^\s*;\s*$/
                ],
                className: {
                  2: "keyword",
                  3: "string"
                }
              },
              {
                begin: [
                  /%mend|%macro/,
                  /\s+/,
                  /[a-zA-Z_&][a-zA-Z0-9_]*/
                ],
                className: {
                  1: "built_in",
                  3: "title.function"
                }
              },
              { // Built-in macro variables
                className: 'built_in',
                begin: '%' + regex.either(...MACRO_FUNCTIONS)
              },
              {
                // User-defined macro functions
                className: 'title.function',
                begin: /%[a-zA-Z_][a-zA-Z_0-9]*/
              },
              {
                // TODO: this is most likely an incorrect classification
                // built_in may need more nuance
                // https://github.com/highlightjs/highlight.js/issues/2521
                className: 'meta',
                begin: regex.either(...FUNCTIONS) + '(?=\\()'
              },
              {
                className: 'string',
                variants: [
                  hljs.APOS_STRING_MODE,
                  hljs.QUOTE_STRING_MODE
                ]
              },
              hljs.COMMENT('\\*', ';'),
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
        }
 
        sas_1 = sas;
        return sas_1;
    }
 
    /*
    Language: Scala
    Category: functional
    Author: Jan Berkel <jan.berkel@gmail.com>
    Contributors: Erik Osheim <d_m@plastic-idolatry.com>
    Website: https://www.scala-lang.org
    */
 
    var scala_1;
    var hasRequiredScala;
 
    function requireScala () {
        if (hasRequiredScala) return scala_1;
        hasRequiredScala = 1;
        function scala(hljs) {
          const regex = hljs.regex;
          const ANNOTATION = {
            className: 'meta',
            begin: '@[A-Za-z]+'
          };
 
          // used in strings for escaping/interpolation/substitution
          const SUBST = {
            className: 'subst',
            variants: [
              { begin: '\\$[A-Za-z0-9_]+' },
              {
                begin: /\$\{/,
                end: /\}/
              }
            ]
          };
 
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: '"""',
                end: '"""'
              },
              {
                begin: '"',
                end: '"',
                illegal: '\\n',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                begin: '[a-z]+"',
                end: '"',
                illegal: '\\n',
                contains: [
                  hljs.BACKSLASH_ESCAPE,
                  SUBST
                ]
              },
              {
                className: 'string',
                begin: '[a-z]+"""',
                end: '"""',
                contains: [ SUBST ],
                relevance: 10
              }
            ]
 
          };
 
          const TYPE = {
            className: 'type',
            begin: '\\b[A-Z][A-Za-z0-9_]*',
            relevance: 0
          };
 
          const NAME = {
            className: 'title',
            begin: /[^0-9\n\t "'(),.`{}\[\]:;][^\n\t "'(),.`{}\[\]:;]+|[^0-9\n\t "'(),.`{}\[\]:;=]/,
            relevance: 0
          };
 
          const CLASS = {
            className: 'class',
            beginKeywords: 'class object trait type',
            end: /[:={\[\n;]/,
            excludeEnd: true,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                beginKeywords: 'extends with',
                relevance: 10
              },
              {
                begin: /\[/,
                end: /\]/,
                excludeBegin: true,
                excludeEnd: true,
                relevance: 0,
                contains: [ TYPE ]
              },
              {
                className: 'params',
                begin: /\(/,
                end: /\)/,
                excludeBegin: true,
                excludeEnd: true,
                relevance: 0,
                contains: [ TYPE ]
              },
              NAME
            ]
          };
 
          const METHOD = {
            className: 'function',
            beginKeywords: 'def',
            end: regex.lookahead(/[:={\[(\n;]/),
            contains: [ NAME ]
          };
 
          const EXTENSION = {
            begin: [
              /^\s*/, // Is first token on the line
              'extension',
              /\s+(?=[[(])/, // followed by at least one space and `[` or `(`
            ],
            beginScope: { 2: "keyword", }
          };
 
          const END = {
            begin: [
              /^\s*/, // Is first token on the line
              /end/,
              /\s+/,
              /(extension\b)?/, // `extension` is the only marker that follows an `end` that cannot be captured by another rule.
            ],
            beginScope: {
              2: "keyword",
              4: "keyword",
            }
          };
 
          // TODO: use negative look-behind in future
          //       /(?<!\.)\binline(?=\s)/
          const INLINE_MODES = [
            { match: /\.inline\b/ },
            {
              begin: /\binline(?=\s)/,
              keywords: 'inline'
            }
          ];
 
          const USING_PARAM_CLAUSE = {
            begin: [
              /\(\s*/, // Opening `(` of a parameter or argument list
              /using/,
              /\s+(?!\))/, // Spaces not followed by `)`
            ],
            beginScope: { 2: "keyword", }
          };
 
          return {
            name: 'Scala',
            keywords: {
              literal: 'true false null',
              keyword: 'type yield lazy override def with val var sealed abstract private trait object if then forSome for while do throw finally protected extends import final return else break new catch super class case package default try this match continue throws implicit export enum given transparent'
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              STRING,
              TYPE,
              METHOD,
              CLASS,
              hljs.C_NUMBER_MODE,
              EXTENSION,
              END,
              ...INLINE_MODES,
              USING_PARAM_CLAUSE,
              ANNOTATION
            ]
          };
        }
 
        scala_1 = scala;
        return scala_1;
    }
 
    /*
    Language: Scheme
    Description: Scheme is a programming language in the Lisp family.
                 (keywords based on http://community.schemewiki.org/?scheme-keywords)
    Author: JP Verkamp <me@jverkamp.com>
    Contributors: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Origin: clojure.js
    Website: http://community.schemewiki.org/?what-is-scheme
    Category: lisp
    */
 
    var scheme_1;
    var hasRequiredScheme;
 
    function requireScheme () {
        if (hasRequiredScheme) return scheme_1;
        hasRequiredScheme = 1;
        function scheme(hljs) {
          const SCHEME_IDENT_RE = '[^\\(\\)\\[\\]\\{\\}",\'`;#|\\\\\\s]+';
          const SCHEME_SIMPLE_NUMBER_RE = '(-|\\+)?\\d+([./]\\d+)?';
          const SCHEME_COMPLEX_NUMBER_RE = SCHEME_SIMPLE_NUMBER_RE + '[+\\-]' + SCHEME_SIMPLE_NUMBER_RE + 'i';
          const KEYWORDS = {
            $pattern: SCHEME_IDENT_RE,
            built_in:
              'case-lambda call/cc class define-class exit-handler field import '
              + 'inherit init-field interface let*-values let-values let/ec mixin '
              + 'opt-lambda override protect provide public rename require '
              + 'require-for-syntax syntax syntax-case syntax-error unit/sig unless '
              + 'when with-syntax and begin call-with-current-continuation '
              + 'call-with-input-file call-with-output-file case cond define '
              + 'define-syntax delay do dynamic-wind else for-each if lambda let let* '
              + 'let-syntax letrec letrec-syntax map or syntax-rules \' * + , ,@ - ... / '
              + '; < <= = => > >= ` abs acos angle append apply asin assoc assq assv atan '
              + 'boolean? caar cadr call-with-input-file call-with-output-file '
              + 'call-with-values car cdddar cddddr cdr ceiling char->integer '
              + 'char-alphabetic? char-ci<=? char-ci<? char-ci=? char-ci>=? char-ci>? '
              + 'char-downcase char-lower-case? char-numeric? char-ready? char-upcase '
              + 'char-upper-case? char-whitespace? char<=? char<? char=? char>=? char>? '
              + 'char? close-input-port close-output-port complex? cons cos '
              + 'current-input-port current-output-port denominator display eof-object? '
              + 'eq? equal? eqv? eval even? exact->inexact exact? exp expt floor '
              + 'force gcd imag-part inexact->exact inexact? input-port? integer->char '
              + 'integer? interaction-environment lcm length list list->string '
              + 'list->vector list-ref list-tail list? load log magnitude make-polar '
              + 'make-rectangular make-string make-vector max member memq memv min '
              + 'modulo negative? newline not null-environment null? number->string '
              + 'number? numerator odd? open-input-file open-output-file output-port? '
              + 'pair? peek-char port? positive? procedure? quasiquote quote quotient '
              + 'rational? rationalize read read-char real-part real? remainder reverse '
              + 'round scheme-report-environment set! set-car! set-cdr! sin sqrt string '
              + 'string->list string->number string->symbol string-append string-ci<=? '
              + 'string-ci<? string-ci=? string-ci>=? string-ci>? string-copy '
              + 'string-fill! string-length string-ref string-set! string<=? string<? '
              + 'string=? string>=? string>? string? substring symbol->string symbol? '
              + 'tan transcript-off transcript-on truncate values vector '
              + 'vector->list vector-fill! vector-length vector-ref vector-set! '
              + 'with-input-from-file with-output-to-file write write-char zero?'
          };
 
          const LITERAL = {
            className: 'literal',
            begin: '(#t|#f|#\\\\' + SCHEME_IDENT_RE + '|#\\\\.)'
          };
 
          const NUMBER = {
            className: 'number',
            variants: [
              {
                begin: SCHEME_SIMPLE_NUMBER_RE,
                relevance: 0
              },
              {
                begin: SCHEME_COMPLEX_NUMBER_RE,
                relevance: 0
              },
              { begin: '#b[0-1]+(/[0-1]+)?' },
              { begin: '#o[0-7]+(/[0-7]+)?' },
              { begin: '#x[0-9a-f]+(/[0-9a-f]+)?' }
            ]
          };
 
          const STRING = hljs.QUOTE_STRING_MODE;
 
          const COMMENT_MODES = [
            hljs.COMMENT(
              ';',
              '$',
              { relevance: 0 }
            ),
            hljs.COMMENT('#\\|', '\\|#')
          ];
 
          const IDENT = {
            begin: SCHEME_IDENT_RE,
            relevance: 0
          };
 
          const QUOTED_IDENT = {
            className: 'symbol',
            begin: '\'' + SCHEME_IDENT_RE
          };
 
          const BODY = {
            endsWithParent: true,
            relevance: 0
          };
 
          const QUOTED_LIST = {
            variants: [
              { begin: /'/ },
              { begin: '`' }
            ],
            contains: [
              {
                begin: '\\(',
                end: '\\)',
                contains: [
                  'self',
                  LITERAL,
                  STRING,
                  NUMBER,
                  IDENT,
                  QUOTED_IDENT
                ]
              }
            ]
          };
 
          const NAME = {
            className: 'name',
            relevance: 0,
            begin: SCHEME_IDENT_RE,
            keywords: KEYWORDS
          };
 
          const LAMBDA = {
            begin: /lambda/,
            endsWithParent: true,
            returnBegin: true,
            contains: [
              NAME,
              {
                endsParent: true,
                variants: [
                  {
                    begin: /\(/,
                    end: /\)/
                  },
                  {
                    begin: /\[/,
                    end: /\]/
                  }
                ],
                contains: [ IDENT ]
              }
            ]
          };
 
          const LIST = {
            variants: [
              {
                begin: '\\(',
                end: '\\)'
              },
              {
                begin: '\\[',
                end: '\\]'
              }
            ],
            contains: [
              LAMBDA,
              NAME,
              BODY
            ]
          };
 
          BODY.contains = [
            LITERAL,
            NUMBER,
            STRING,
            IDENT,
            QUOTED_IDENT,
            QUOTED_LIST,
            LIST
          ].concat(COMMENT_MODES);
 
          return {
            name: 'Scheme',
            aliases: ['scm'],
            illegal: /\S/,
            contains: [
              hljs.SHEBANG(),
              NUMBER,
              STRING,
              QUOTED_IDENT,
              QUOTED_LIST,
              LIST
            ].concat(COMMENT_MODES)
          };
        }
 
        scheme_1 = scheme;
        return scheme_1;
    }
 
    /*
    Language: Scilab
    Author: Sylvestre Ledru <sylvestre.ledru@scilab-enterprises.com>
    Origin: matlab.js
    Description: Scilab is a port from Matlab
    Website: https://www.scilab.org
    Category: scientific
    */
 
    var scilab_1;
    var hasRequiredScilab;
 
    function requireScilab () {
        if (hasRequiredScilab) return scilab_1;
        hasRequiredScilab = 1;
        function scilab(hljs) {
          const COMMON_CONTAINS = [
            hljs.C_NUMBER_MODE,
            {
              className: 'string',
              begin: '\'|\"',
              end: '\'|\"',
              contains: [
                hljs.BACKSLASH_ESCAPE,
                { begin: '\'\'' }
              ]
            }
          ];
 
          return {
            name: 'Scilab',
            aliases: [ 'sci' ],
            keywords: {
              $pattern: /%?\w+/,
              keyword: 'abort break case clear catch continue do elseif else endfunction end for function '
                + 'global if pause return resume select try then while',
              literal:
                '%f %F %t %T %pi %eps %inf %nan %e %i %z %s',
              built_in: // Scilab has more than 2000 functions. Just list the most commons
               'abs and acos asin atan ceil cd chdir clearglobal cosh cos cumprod deff disp error '
               + 'exec execstr exists exp eye gettext floor fprintf fread fsolve imag isdef isempty '
               + 'isinfisnan isvector lasterror length load linspace list listfiles log10 log2 log '
               + 'max min msprintf mclose mopen ones or pathconvert poly printf prod pwd rand real '
               + 'round sinh sin size gsort sprintf sqrt strcat strcmps tring sum system tanh tan '
               + 'type typename warning zeros matrix'
            },
            illegal: '("|#|/\\*|\\s+/\\w+)',
            contains: [
              {
                className: 'function',
                beginKeywords: 'function',
                end: '$',
                contains: [
                  hljs.UNDERSCORE_TITLE_MODE,
                  {
                    className: 'params',
                    begin: '\\(',
                    end: '\\)'
                  }
                ]
              },
              // seems to be a guard against [ident]' or [ident].
              // perhaps to prevent attributes from flagging as keywords?
              {
                begin: '[a-zA-Z_][a-zA-Z_0-9]*[\\.\']+',
                relevance: 0
              },
              {
                begin: '\\[',
                end: '\\][\\.\']*',
                relevance: 0,
                contains: COMMON_CONTAINS
              },
              hljs.COMMENT('//', '$')
            ].concat(COMMON_CONTAINS)
          };
        }
 
        scilab_1 = scilab;
        return scilab_1;
    }
 
    var scss_1;
    var hasRequiredScss;
 
    function requireScss () {
        if (hasRequiredScss) return scss_1;
        hasRequiredScss = 1;
        const MODES = (hljs) => {
          return {
            IMPORTANT: {
              scope: 'meta',
              begin: '!important'
            },
            BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
            HEXCOLOR: {
              scope: 'number',
              begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
            },
            FUNCTION_DISPATCH: {
              className: "built_in",
              begin: /[\w-]+(?=\()/
            },
            ATTRIBUTE_SELECTOR_MODE: {
              scope: 'selector-attr',
              begin: /\[/,
              end: /\]/,
              illegal: '$',
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            },
            CSS_NUMBER_MODE: {
              scope: 'number',
              begin: hljs.NUMBER_RE + '(' +
                '%|em|ex|ch|rem' +
                '|vw|vh|vmin|vmax' +
                '|cm|mm|in|pt|pc|px' +
                '|deg|grad|rad|turn' +
                '|s|ms' +
                '|Hz|kHz' +
                '|dpi|dpcm|dppx' +
                ')?',
              relevance: 0
            },
            CSS_VARIABLE: {
              className: "attr",
              begin: /--[A-Za-z][A-Za-z0-9_-]*/
            }
          };
        };
 
        const TAGS = [
          'a',
          'abbr',
          'address',
          'article',
          'aside',
          'audio',
          'b',
          'blockquote',
          'body',
          'button',
          'canvas',
          'caption',
          'cite',
          'code',
          'dd',
          'del',
          'details',
          'dfn',
          'div',
          'dl',
          'dt',
          'em',
          'fieldset',
          'figcaption',
          'figure',
          'footer',
          'form',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'header',
          'hgroup',
          'html',
          'i',
          'iframe',
          'img',
          'input',
          'ins',
          'kbd',
          'label',
          'legend',
          'li',
          'main',
          'mark',
          'menu',
          'nav',
          'object',
          'ol',
          'p',
          'q',
          'quote',
          'samp',
          'section',
          'span',
          'strong',
          'summary',
          'sup',
          'table',
          'tbody',
          'td',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'time',
          'tr',
          'ul',
          'var',
          'video'
        ];
 
        const MEDIA_FEATURES = [
          'any-hover',
          'any-pointer',
          'aspect-ratio',
          'color',
          'color-gamut',
          'color-index',
          'device-aspect-ratio',
          'device-height',
          'device-width',
          'display-mode',
          'forced-colors',
          'grid',
          'height',
          'hover',
          'inverted-colors',
          'monochrome',
          'orientation',
          'overflow-block',
          'overflow-inline',
          'pointer',
          'prefers-color-scheme',
          'prefers-contrast',
          'prefers-reduced-motion',
          'prefers-reduced-transparency',
          'resolution',
          'scan',
          'scripting',
          'update',
          'width',
          // TODO: find a better solution?
          'min-width',
          'max-width',
          'min-height',
          'max-height'
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
        const PSEUDO_CLASSES = [
          'active',
          'any-link',
          'blank',
          'checked',
          'current',
          'default',
          'defined',
          'dir', // dir()
          'disabled',
          'drop',
          'empty',
          'enabled',
          'first',
          'first-child',
          'first-of-type',
          'fullscreen',
          'future',
          'focus',
          'focus-visible',
          'focus-within',
          'has', // has()
          'host', // host or host()
          'host-context', // host-context()
          'hover',
          'indeterminate',
          'in-range',
          'invalid',
          'is', // is()
          'lang', // lang()
          'last-child',
          'last-of-type',
          'left',
          'link',
          'local-link',
          'not', // not()
          'nth-child', // nth-child()
          'nth-col', // nth-col()
          'nth-last-child', // nth-last-child()
          'nth-last-col', // nth-last-col()
          'nth-last-of-type', //nth-last-of-type()
          'nth-of-type', //nth-of-type()
          'only-child',
          'only-of-type',
          'optional',
          'out-of-range',
          'past',
          'placeholder-shown',
          'read-only',
          'read-write',
          'required',
          'right',
          'root',
          'scope',
          'target',
          'target-within',
          'user-invalid',
          'valid',
          'visited',
          'where' // where()
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
        const PSEUDO_ELEMENTS = [
          'after',
          'backdrop',
          'before',
          'cue',
          'cue-region',
          'first-letter',
          'first-line',
          'grammar-error',
          'marker',
          'part',
          'placeholder',
          'selection',
          'slotted',
          'spelling-error'
        ];
 
        const ATTRIBUTES = [
          'align-content',
          'align-items',
          'align-self',
          'all',
          'animation',
          'animation-delay',
          'animation-direction',
          'animation-duration',
          'animation-fill-mode',
          'animation-iteration-count',
          'animation-name',
          'animation-play-state',
          'animation-timing-function',
          'backface-visibility',
          'background',
          'background-attachment',
          'background-blend-mode',
          'background-clip',
          'background-color',
          'background-image',
          'background-origin',
          'background-position',
          'background-repeat',
          'background-size',
          'block-size',
          'border',
          'border-block',
          'border-block-color',
          'border-block-end',
          'border-block-end-color',
          'border-block-end-style',
          'border-block-end-width',
          'border-block-start',
          'border-block-start-color',
          'border-block-start-style',
          'border-block-start-width',
          'border-block-style',
          'border-block-width',
          'border-bottom',
          'border-bottom-color',
          'border-bottom-left-radius',
          'border-bottom-right-radius',
          'border-bottom-style',
          'border-bottom-width',
          'border-collapse',
          'border-color',
          'border-image',
          'border-image-outset',
          'border-image-repeat',
          'border-image-slice',
          'border-image-source',
          'border-image-width',
          'border-inline',
          'border-inline-color',
          'border-inline-end',
          'border-inline-end-color',
          'border-inline-end-style',
          'border-inline-end-width',
          'border-inline-start',
          'border-inline-start-color',
          'border-inline-start-style',
          'border-inline-start-width',
          'border-inline-style',
          'border-inline-width',
          'border-left',
          'border-left-color',
          'border-left-style',
          'border-left-width',
          'border-radius',
          'border-right',
          'border-right-color',
          'border-right-style',
          'border-right-width',
          'border-spacing',
          'border-style',
          'border-top',
          'border-top-color',
          'border-top-left-radius',
          'border-top-right-radius',
          'border-top-style',
          'border-top-width',
          'border-width',
          'bottom',
          'box-decoration-break',
          'box-shadow',
          'box-sizing',
          'break-after',
          'break-before',
          'break-inside',
          'caption-side',
          'caret-color',
          'clear',
          'clip',
          'clip-path',
          'clip-rule',
          'color',
          'column-count',
          'column-fill',
          'column-gap',
          'column-rule',
          'column-rule-color',
          'column-rule-style',
          'column-rule-width',
          'column-span',
          'column-width',
          'columns',
          'contain',
          'content',
          'content-visibility',
          'counter-increment',
          'counter-reset',
          'cue',
          'cue-after',
          'cue-before',
          'cursor',
          'direction',
          'display',
          'empty-cells',
          'filter',
          'flex',
          'flex-basis',
          'flex-direction',
          'flex-flow',
          'flex-grow',
          'flex-shrink',
          'flex-wrap',
          'float',
          'flow',
          'font',
          'font-display',
          'font-family',
          'font-feature-settings',
          'font-kerning',
          'font-language-override',
          'font-size',
          'font-size-adjust',
          'font-smoothing',
          'font-stretch',
          'font-style',
          'font-synthesis',
          'font-variant',
          'font-variant-caps',
          'font-variant-east-asian',
          'font-variant-ligatures',
          'font-variant-numeric',
          'font-variant-position',
          'font-variation-settings',
          'font-weight',
          'gap',
          'glyph-orientation-vertical',
          'grid',
          'grid-area',
          'grid-auto-columns',
          'grid-auto-flow',
          'grid-auto-rows',
          'grid-column',
          'grid-column-end',
          'grid-column-start',
          'grid-gap',
          'grid-row',
          'grid-row-end',
          'grid-row-start',
          'grid-template',
          'grid-template-areas',
          'grid-template-columns',
          'grid-template-rows',
          'hanging-punctuation',
          'height',
          'hyphens',
          'icon',
          'image-orientation',
          'image-rendering',
          'image-resolution',
          'ime-mode',
          'inline-size',
          'isolation',
          'justify-content',
          'left',
          'letter-spacing',
          'line-break',
          'line-height',
          'list-style',
          'list-style-image',
          'list-style-position',
          'list-style-type',
          'margin',
          'margin-block',
          'margin-block-end',
          'margin-block-start',
          'margin-bottom',
          'margin-inline',
          'margin-inline-end',
          'margin-inline-start',
          'margin-left',
          'margin-right',
          'margin-top',
          'marks',
          'mask',
          'mask-border',
          'mask-border-mode',
          'mask-border-outset',
          'mask-border-repeat',
          'mask-border-slice',
          'mask-border-source',
          'mask-border-width',
          'mask-clip',
          'mask-composite',
          'mask-image',
          'mask-mode',
          'mask-origin',
          'mask-position',
          'mask-repeat',
          'mask-size',
          'mask-type',
          'max-block-size',
          'max-height',
          'max-inline-size',
          'max-width',
          'min-block-size',
          'min-height',
          'min-inline-size',
          'min-width',
          'mix-blend-mode',
          'nav-down',
          'nav-index',
          'nav-left',
          'nav-right',
          'nav-up',
          'none',
          'normal',
          'object-fit',
          'object-position',
          'opacity',
          'order',
          'orphans',
          'outline',
          'outline-color',
          'outline-offset',
          'outline-style',
          'outline-width',
          'overflow',
          'overflow-wrap',
          'overflow-x',
          'overflow-y',
          'padding',
          'padding-block',
          'padding-block-end',
          'padding-block-start',
          'padding-bottom',
          'padding-inline',
          'padding-inline-end',
          'padding-inline-start',
          'padding-left',
          'padding-right',
          'padding-top',
          'page-break-after',
          'page-break-before',
          'page-break-inside',
          'pause',
          'pause-after',
          'pause-before',
          'perspective',
          'perspective-origin',
          'pointer-events',
          'position',
          'quotes',
          'resize',
          'rest',
          'rest-after',
          'rest-before',
          'right',
          'row-gap',
          'scroll-margin',
          'scroll-margin-block',
          'scroll-margin-block-end',
          'scroll-margin-block-start',
          'scroll-margin-bottom',
          'scroll-margin-inline',
          'scroll-margin-inline-end',
          'scroll-margin-inline-start',
          'scroll-margin-left',
          'scroll-margin-right',
          'scroll-margin-top',
          'scroll-padding',
          'scroll-padding-block',
          'scroll-padding-block-end',
          'scroll-padding-block-start',
          'scroll-padding-bottom',
          'scroll-padding-inline',
          'scroll-padding-inline-end',
          'scroll-padding-inline-start',
          'scroll-padding-left',
          'scroll-padding-right',
          'scroll-padding-top',
          'scroll-snap-align',
          'scroll-snap-stop',
          'scroll-snap-type',
          'scrollbar-color',
          'scrollbar-gutter',
          'scrollbar-width',
          'shape-image-threshold',
          'shape-margin',
          'shape-outside',
          'speak',
          'speak-as',
          'src', // @font-face
          'tab-size',
          'table-layout',
          'text-align',
          'text-align-all',
          'text-align-last',
          'text-combine-upright',
          'text-decoration',
          'text-decoration-color',
          'text-decoration-line',
          'text-decoration-style',
          'text-emphasis',
          'text-emphasis-color',
          'text-emphasis-position',
          'text-emphasis-style',
          'text-indent',
          'text-justify',
          'text-orientation',
          'text-overflow',
          'text-rendering',
          'text-shadow',
          'text-transform',
          'text-underline-position',
          'top',
          'transform',
          'transform-box',
          'transform-origin',
          'transform-style',
          'transition',
          'transition-delay',
          'transition-duration',
          'transition-property',
          'transition-timing-function',
          'unicode-bidi',
          'vertical-align',
          'visibility',
          'voice-balance',
          'voice-duration',
          'voice-family',
          'voice-pitch',
          'voice-range',
          'voice-rate',
          'voice-stress',
          'voice-volume',
          'white-space',
          'widows',
          'width',
          'will-change',
          'word-break',
          'word-spacing',
          'word-wrap',
          'writing-mode',
          'z-index'
          // reverse makes sure longer attributes `font-weight` are matched fully
          // instead of getting false positives on say `font`
        ].reverse();
 
        /*
        Language: SCSS
        Description: Scss is an extension of the syntax of CSS.
        Author: Kurt Emch <kurt@kurtemch.com>
        Website: https://sass-lang.com
        Category: common, css, web
        */
 
        /** @type LanguageFn */
        function scss(hljs) {
          const modes = MODES(hljs);
          const PSEUDO_ELEMENTS$1 = PSEUDO_ELEMENTS;
          const PSEUDO_CLASSES$1 = PSEUDO_CLASSES;
 
          const AT_IDENTIFIER = '@[a-z-]+'; // @font-face
          const AT_MODIFIERS = "and or not only";
          const IDENT_RE = '[a-zA-Z-][a-zA-Z0-9_-]*';
          const VARIABLE = {
            className: 'variable',
            begin: '(\\$' + IDENT_RE + ')\\b',
            relevance: 0
          };
 
          return {
            name: 'SCSS',
            case_insensitive: true,
            illegal: '[=/|\']',
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              // to recognize keyframe 40% etc which are outside the scope of our
              // attribute value mode
              modes.CSS_NUMBER_MODE,
              {
                className: 'selector-id',
                begin: '#[A-Za-z0-9_-]+',
                relevance: 0
              },
              {
                className: 'selector-class',
                begin: '\\.[A-Za-z0-9_-]+',
                relevance: 0
              },
              modes.ATTRIBUTE_SELECTOR_MODE,
              {
                className: 'selector-tag',
                begin: '\\b(' + TAGS.join('|') + ')\\b',
                // was there, before, but why?
                relevance: 0
              },
              {
                className: 'selector-pseudo',
                begin: ':(' + PSEUDO_CLASSES$1.join('|') + ')'
              },
              {
                className: 'selector-pseudo',
                begin: ':(:)?(' + PSEUDO_ELEMENTS$1.join('|') + ')'
              },
              VARIABLE,
              { // pseudo-selector params
                begin: /\(/,
                end: /\)/,
                contains: [ modes.CSS_NUMBER_MODE ]
              },
              modes.CSS_VARIABLE,
              {
                className: 'attribute',
                begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b'
              },
              { begin: '\\b(whitespace|wait|w-resize|visible|vertical-text|vertical-ideographic|uppercase|upper-roman|upper-alpha|underline|transparent|top|thin|thick|text|text-top|text-bottom|tb-rl|table-header-group|table-footer-group|sw-resize|super|strict|static|square|solid|small-caps|separate|se-resize|scroll|s-resize|rtl|row-resize|ridge|right|repeat|repeat-y|repeat-x|relative|progress|pointer|overline|outside|outset|oblique|nowrap|not-allowed|normal|none|nw-resize|no-repeat|no-drop|newspaper|ne-resize|n-resize|move|middle|medium|ltr|lr-tb|lowercase|lower-roman|lower-alpha|loose|list-item|line|line-through|line-edge|lighter|left|keep-all|justify|italic|inter-word|inter-ideograph|inside|inset|inline|inline-block|inherit|inactive|ideograph-space|ideograph-parenthesis|ideograph-numeric|ideograph-alpha|horizontal|hidden|help|hand|groove|fixed|ellipsis|e-resize|double|dotted|distribute|distribute-space|distribute-letter|distribute-all-lines|disc|disabled|default|decimal|dashed|crosshair|collapse|col-resize|circle|char|center|capitalize|break-word|break-all|bottom|both|bolder|bold|block|bidi-override|below|baseline|auto|always|all-scroll|absolute|table|table-cell)\\b' },
              {
                begin: /:/,
                end: /[;}{]/,
                relevance: 0,
                contains: [
                  modes.BLOCK_COMMENT,
                  VARIABLE,
                  modes.HEXCOLOR,
                  modes.CSS_NUMBER_MODE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.APOS_STRING_MODE,
                  modes.IMPORTANT,
                  modes.FUNCTION_DISPATCH
                ]
              },
              // matching these here allows us to treat them more like regular CSS
              // rules so everything between the {} gets regular rule highlighting,
              // which is what we want for page and font-face
              {
                begin: '@(page|font-face)',
                keywords: {
                  $pattern: AT_IDENTIFIER,
                  keyword: '@page @font-face'
                }
              },
              {
                begin: '@',
                end: '[{;]',
                returnBegin: true,
                keywords: {
                  $pattern: /[a-z-]+/,
                  keyword: AT_MODIFIERS,
                  attribute: MEDIA_FEATURES.join(" ")
                },
                contains: [
                  {
                    begin: AT_IDENTIFIER,
                    className: "keyword"
                  },
                  {
                    begin: /[a-z-]+(?=:)/,
                    className: "attribute"
                  },
                  VARIABLE,
                  hljs.QUOTE_STRING_MODE,
                  hljs.APOS_STRING_MODE,
                  modes.HEXCOLOR,
                  modes.CSS_NUMBER_MODE
                ]
              },
              modes.FUNCTION_DISPATCH
            ]
          };
        }
 
        scss_1 = scss;
        return scss_1;
    }
 
    /*
    Language: Shell Session
    Requires: bash.js
    Author: TSUYUSATO Kitsune <make.just.on@gmail.com>
    Category: common
    Audit: 2020
    */
 
    var shell_1;
    var hasRequiredShell;
 
    function requireShell () {
        if (hasRequiredShell) return shell_1;
        hasRequiredShell = 1;
        /** @type LanguageFn */
        function shell(hljs) {
          return {
            name: 'Shell Session',
            aliases: [
              'console',
              'shellsession'
            ],
            contains: [
              {
                className: 'meta.prompt',
                // We cannot add \s (spaces) in the regular expression otherwise it will be too broad and produce unexpected result.
                // For instance, in the following example, it would match "echo /path/to/home >" as a prompt:
                // echo /path/to/home > t.exe
                begin: /^\s{0,3}[/~\w\d[\]()@-]*[>%$#][ ]?/,
                starts: {
                  end: /[^\\](?=\s*$)/,
                  subLanguage: 'bash'
                }
              }
            ]
          };
        }
 
        shell_1 = shell;
        return shell_1;
    }
 
    /*
    Language: Smali
    Author: Dennis Titze <dennis.titze@gmail.com>
    Description: Basic Smali highlighting
    Website: https://github.com/JesusFreke/smali
    */
 
    var smali_1;
    var hasRequiredSmali;
 
    function requireSmali () {
        if (hasRequiredSmali) return smali_1;
        hasRequiredSmali = 1;
        function smali(hljs) {
          const smali_instr_low_prio = [
            'add',
            'and',
            'cmp',
            'cmpg',
            'cmpl',
            'const',
            'div',
            'double',
            'float',
            'goto',
            'if',
            'int',
            'long',
            'move',
            'mul',
            'neg',
            'new',
            'nop',
            'not',
            'or',
            'rem',
            'return',
            'shl',
            'shr',
            'sput',
            'sub',
            'throw',
            'ushr',
            'xor'
          ];
          const smali_instr_high_prio = [
            'aget',
            'aput',
            'array',
            'check',
            'execute',
            'fill',
            'filled',
            'goto/16',
            'goto/32',
            'iget',
            'instance',
            'invoke',
            'iput',
            'monitor',
            'packed',
            'sget',
            'sparse'
          ];
          const smali_keywords = [
            'transient',
            'constructor',
            'abstract',
            'final',
            'synthetic',
            'public',
            'private',
            'protected',
            'static',
            'bridge',
            'system'
          ];
          return {
            name: 'Smali',
            contains: [
              {
                className: 'string',
                begin: '"',
                end: '"',
                relevance: 0
              },
              hljs.COMMENT(
                '#',
                '$',
                { relevance: 0 }
              ),
              {
                className: 'keyword',
                variants: [
                  { begin: '\\s*\\.end\\s[a-zA-Z0-9]*' },
                  {
                    begin: '^[ ]*\\.[a-zA-Z]*',
                    relevance: 0
                  },
                  {
                    begin: '\\s:[a-zA-Z_0-9]*',
                    relevance: 0
                  },
                  { begin: '\\s(' + smali_keywords.join('|') + ')' }
                ]
              },
              {
                className: 'built_in',
                variants: [
                  { begin: '\\s(' + smali_instr_low_prio.join('|') + ')\\s' },
                  {
                    begin: '\\s(' + smali_instr_low_prio.join('|') + ')((-|/)[a-zA-Z0-9]+)+\\s',
                    relevance: 10
                  },
                  {
                    begin: '\\s(' + smali_instr_high_prio.join('|') + ')((-|/)[a-zA-Z0-9]+)*\\s',
                    relevance: 10
                  }
                ]
              },
              {
                className: 'class',
                begin: 'L[^\(;:\n]*;',
                relevance: 0
              },
              { begin: '[vp][0-9]+' }
            ]
          };
        }
 
        smali_1 = smali;
        return smali_1;
    }
 
    /*
    Language: Smalltalk
    Description: Smalltalk is an object-oriented, dynamically typed reflective programming language.
    Author: Vladimir Gubarkov <xonixx@gmail.com>
    Website: https://en.wikipedia.org/wiki/Smalltalk
    */
 
    var smalltalk_1;
    var hasRequiredSmalltalk;
 
    function requireSmalltalk () {
        if (hasRequiredSmalltalk) return smalltalk_1;
        hasRequiredSmalltalk = 1;
        function smalltalk(hljs) {
          const VAR_IDENT_RE = '[a-z][a-zA-Z0-9_]*';
          const CHAR = {
            className: 'string',
            begin: '\\$.{1}'
          };
          const SYMBOL = {
            className: 'symbol',
            begin: '#' + hljs.UNDERSCORE_IDENT_RE
          };
          return {
            name: 'Smalltalk',
            aliases: [ 'st' ],
            keywords: [
              "self",
              "super",
              "nil",
              "true",
              "false",
              "thisContext"
            ],
            contains: [
              hljs.COMMENT('"', '"'),
              hljs.APOS_STRING_MODE,
              {
                className: 'type',
                begin: '\\b[A-Z][A-Za-z0-9_]*',
                relevance: 0
              },
              {
                begin: VAR_IDENT_RE + ':',
                relevance: 0
              },
              hljs.C_NUMBER_MODE,
              SYMBOL,
              CHAR,
              {
                // This looks more complicated than needed to avoid combinatorial
                // explosion under V8. It effectively means `| var1 var2 ... |` with
                // whitespace adjacent to `|` being optional.
                begin: '\\|[ ]*' + VAR_IDENT_RE + '([ ]+' + VAR_IDENT_RE + ')*[ ]*\\|',
                returnBegin: true,
                end: /\|/,
                illegal: /\S/,
                contains: [ { begin: '(\\|[ ]*)?' + VAR_IDENT_RE } ]
              },
              {
                begin: '#\\(',
                end: '\\)',
                contains: [
                  hljs.APOS_STRING_MODE,
                  CHAR,
                  hljs.C_NUMBER_MODE,
                  SYMBOL
                ]
              }
            ]
          };
        }
 
        smalltalk_1 = smalltalk;
        return smalltalk_1;
    }
 
    /*
    Language: SML (Standard ML)
    Author: Edwin Dalorzo <edwin@dalorzo.org>
    Description: SML language definition.
    Website: https://www.smlnj.org
    Origin: ocaml.js
    Category: functional
    */
 
    var sml_1;
    var hasRequiredSml;
 
    function requireSml () {
        if (hasRequiredSml) return sml_1;
        hasRequiredSml = 1;
        function sml(hljs) {
          return {
            name: 'SML (Standard ML)',
            aliases: [ 'ml' ],
            keywords: {
              $pattern: '[a-z_]\\w*!?',
              keyword:
                /* according to Definition of Standard ML 97  */
                'abstype and andalso as case datatype do else end eqtype '
                + 'exception fn fun functor handle if in include infix infixr '
                + 'let local nonfix of op open orelse raise rec sharing sig '
                + 'signature struct structure then type val with withtype where while',
              built_in:
                /* built-in types according to basis library */
                'array bool char exn int list option order real ref string substring vector unit word',
              literal:
                'true false NONE SOME LESS EQUAL GREATER nil'
            },
            illegal: /\/\/|>>/,
            contains: [
              {
                className: 'literal',
                begin: /\[(\|\|)?\]|\(\)/,
                relevance: 0
              },
              hljs.COMMENT(
                '\\(\\*',
                '\\*\\)',
                { contains: [ 'self' ] }
              ),
              { /* type variable */
                className: 'symbol',
                begin: '\'[A-Za-z_](?!\')[\\w\']*'
                /* the grammar is ambiguous on how 'a'b should be interpreted but not the compiler */
              },
              { /* polymorphic variant */
                className: 'type',
                begin: '`[A-Z][\\w\']*'
              },
              { /* module or constructor */
                className: 'type',
                begin: '\\b[A-Z][\\w\']*',
                relevance: 0
              },
              { /* don't color identifiers, but safely catch all identifiers with ' */
                begin: '[a-z_]\\w*\'[\\w\']*' },
              hljs.inherit(hljs.APOS_STRING_MODE, {
                className: 'string',
                relevance: 0
              }),
              hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
              {
                className: 'number',
                begin:
                  '\\b(0[xX][a-fA-F0-9_]+[Lln]?|'
                  + '0[oO][0-7_]+[Lln]?|'
                  + '0[bB][01_]+[Lln]?|'
                  + '[0-9][0-9_]*([Lln]|(\\.[0-9_]*)?([eE][-+]?[0-9_]+)?)?)',
                relevance: 0
              },
              { begin: /[-=]>/ // relevance booster
              }
            ]
          };
        }
 
        sml_1 = sml;
        return sml_1;
    }
 
    /*
    Language: SQF
    Author: Søren Enevoldsen <senevoldsen90@gmail.com>
    Contributors: Marvin Saignat <contact@zgmrvn.com>, Dedmen Miller <dedmen@dedmen.de>, Leopard20
    Description: Scripting language for the Arma game series
    Website: https://community.bistudio.com/wiki/SQF_syntax
    Category: scripting
    Last update: 07.01.2023, Arma 3 v2.11
    */
 
    var sqf_1;
    var hasRequiredSqf;
 
    function requireSqf () {
        if (hasRequiredSqf) return sqf_1;
        hasRequiredSqf = 1;
        /*
        ////////////////////////////////////////////////////////////////////////////////////////////
          * Author: Leopard20
          
          * Description:
          This script can be used to dump all commands to the clipboard.
          Make sure you're using the Diag EXE to dump all of the commands.
          
          * How to use:
          Simply replace the _KEYWORDS and _LITERAL arrays with the one from this sqf.js file.
          Execute the script from the debug console.
          All commands will be copied to the clipboard.
        ////////////////////////////////////////////////////////////////////////////////////////////
        _KEYWORDS = ['if'];                                                //Array of all KEYWORDS
        _LITERALS = ['west'];                                              //Array of all LITERALS
        _allCommands = createHashMap;
        {
          _type = _x select [0,1];
          if (_type != "t") then {
            _command_lowercase = ((_x select [2]) splitString " ")#(((["n", "u", "b"] find _type) - 1) max 0);
            _command_uppercase = supportInfo ("i:" + _command_lowercase) # 0 # 2;
            _allCommands set [_command_lowercase, _command_uppercase];
          };
        } forEach supportInfo "";
        _allCommands = _allCommands toArray false;
        _allCommands sort true;                                            //sort by lowercase
        _allCommands = ((_allCommands apply {_x#1}) -_KEYWORDS)-_LITERALS; //remove KEYWORDS and LITERALS
        copyToClipboard (str (_allCommands select {_x regexMatch "\w+"}) regexReplace ["""", "'"] regexReplace [",", ",\n"]);
        */
 
        function sqf(hljs) {
          // In SQF, a local variable starts with _
          const VARIABLE = {
            className: 'variable',
            begin: /\b_+[a-zA-Z]\w*/
          };
 
          // In SQF, a function should fit myTag_fnc_myFunction pattern
          // https://community.bistudio.com/wiki/Functions_Library_(Arma_3)#Adding_a_Function
          const FUNCTION = {
            className: 'title',
            begin: /[a-zA-Z][a-zA-Z_0-9]*_fnc_[a-zA-Z_0-9]+/
          };
 
          // In SQF strings, quotes matching the start are escaped by adding a consecutive.
          // Example of single escaped quotes: " "" " and  ' '' '.
          const STRINGS = {
            className: 'string',
            variants: [
              {
                begin: '"',
                end: '"',
                contains: [
                  {
                    begin: '""',
                    relevance: 0
                  }
                ]
              },
              {
                begin: '\'',
                end: '\'',
                contains: [
                  {
                    begin: '\'\'',
                    relevance: 0
                  }
                ]
              }
            ]
          };
 
          const KEYWORDS = [
            'break',
            'breakWith',
            'breakOut',
            'breakTo',
            'case',
            'catch',
            'continue',
            'continueWith',
            'default',
            'do',
            'else',
            'exit',
            'exitWith',
            'for',
            'forEach',
            'from',
            'if',
            'local',
            'private',
            'switch',
            'step',
            'then',
            'throw',
            'to',
            'try',
            'waitUntil',
            'while',
            'with'
          ];
 
          const LITERAL = [
            'blufor',
            'civilian',
            'configNull',
            'controlNull',
            'displayNull',
            'diaryRecordNull',
            'east',
            'endl',
            'false',
            'grpNull',
            'independent',
            'lineBreak',
            'locationNull',
            'nil',
            'objNull',
            'opfor',
            'pi',
            'resistance',
            'scriptNull',
            'sideAmbientLife',
            'sideEmpty',
            'sideEnemy',
            'sideFriendly',
            'sideLogic',
            'sideUnknown',
            'taskNull',
            'teamMemberNull',
            'true',
            'west'
          ];
 
          const BUILT_IN = [
            'abs',
            'accTime',
            'acos',
            'action',
            'actionIDs',
            'actionKeys',
            'actionKeysEx',
            'actionKeysImages',
            'actionKeysNames',
            'actionKeysNamesArray',
            'actionName',
            'actionParams',
            'activateAddons',
            'activatedAddons',
            'activateKey',
            'activeTitleEffectParams',
            'add3DENConnection',
            'add3DENEventHandler',
            'add3DENLayer',
            'addAction',
            'addBackpack',
            'addBackpackCargo',
            'addBackpackCargoGlobal',
            'addBackpackGlobal',
            'addBinocularItem',
            'addCamShake',
            'addCuratorAddons',
            'addCuratorCameraArea',
            'addCuratorEditableObjects',
            'addCuratorEditingArea',
            'addCuratorPoints',
            'addEditorObject',
            'addEventHandler',
            'addForce',
            'addForceGeneratorRTD',
            'addGoggles',
            'addGroupIcon',
            'addHandgunItem',
            'addHeadgear',
            'addItem',
            'addItemCargo',
            'addItemCargoGlobal',
            'addItemPool',
            'addItemToBackpack',
            'addItemToUniform',
            'addItemToVest',
            'addLiveStats',
            'addMagazine',
            'addMagazineAmmoCargo',
            'addMagazineCargo',
            'addMagazineCargoGlobal',
            'addMagazineGlobal',
            'addMagazinePool',
            'addMagazines',
            'addMagazineTurret',
            'addMenu',
            'addMenuItem',
            'addMissionEventHandler',
            'addMPEventHandler',
            'addMusicEventHandler',
            'addonFiles',
            'addOwnedMine',
            'addPlayerScores',
            'addPrimaryWeaponItem',
            'addPublicVariableEventHandler',
            'addRating',
            'addResources',
            'addScore',
            'addScoreSide',
            'addSecondaryWeaponItem',
            'addSwitchableUnit',
            'addTeamMember',
            'addToRemainsCollector',
            'addTorque',
            'addUniform',
            'addUserActionEventHandler',
            'addVehicle',
            'addVest',
            'addWaypoint',
            'addWeapon',
            'addWeaponCargo',
            'addWeaponCargoGlobal',
            'addWeaponGlobal',
            'addWeaponItem',
            'addWeaponPool',
            'addWeaponTurret',
            'addWeaponWithAttachmentsCargo',
            'addWeaponWithAttachmentsCargoGlobal',
            'admin',
            'agent',
            'agents',
            'AGLToASL',
            'aimedAtTarget',
            'aimPos',
            'airDensityCurveRTD',
            'airDensityRTD',
            'airplaneThrottle',
            'airportSide',
            'AISFinishHeal',
            'alive',
            'all3DENEntities',
            'allActiveTitleEffects',
            'allAddonsInfo',
            'allAirports',
            'allControls',
            'allCurators',
            'allCutLayers',
            'allDead',
            'allDeadMen',
            'allDiaryRecords',
            'allDiarySubjects',
            'allDisplays',
            'allEnv3DSoundSources',
            'allGroups',
            'allLODs',
            'allMapMarkers',
            'allMines',
            'allMissionObjects',
            'allObjects',
            'allow3DMode',
            'allowCrewInImmobile',
            'allowCuratorLogicIgnoreAreas',
            'allowDamage',
            'allowDammage',
            'allowedService',
            'allowFileOperations',
            'allowFleeing',
            'allowGetIn',
            'allowService',
            'allowSprint',
            'allPlayers',
            'allSimpleObjects',
            'allSites',
            'allTurrets',
            'allUnits',
            'allUnitsUAV',
            'allUsers',
            'allVariables',
            'ambientTemperature',
            'ammo',
            'ammoOnPylon',
            'and',
            'animate',
            'animateBay',
            'animateDoor',
            'animatePylon',
            'animateSource',
            'animationNames',
            'animationPhase',
            'animationSourcePhase',
            'animationState',
            'apertureParams',
            'append',
            'apply',
            'armoryPoints',
            'arrayIntersect',
            'asin',
            'ASLToAGL',
            'ASLToATL',
            'assert',
            'assignAsCargo',
            'assignAsCargoIndex',
            'assignAsCommander',
            'assignAsDriver',
            'assignAsGunner',
            'assignAsTurret',
            'assignCurator',
            'assignedCargo',
            'assignedCommander',
            'assignedDriver',
            'assignedGroup',
            'assignedGunner',
            'assignedItems',
            'assignedTarget',
            'assignedTeam',
            'assignedVehicle',
            'assignedVehicleRole',
            'assignedVehicles',
            'assignItem',
            'assignTeam',
            'assignToAirport',
            'atan',
            'atan2',
            'atg',
            'ATLToASL',
            'attachedObject',
            'attachedObjects',
            'attachedTo',
            'attachObject',
            'attachTo',
            'attackEnabled',
            'awake',
            'backpack',
            'backpackCargo',
            'backpackContainer',
            'backpackItems',
            'backpackMagazines',
            'backpackSpaceFor',
            'behaviour',
            'benchmark',
            'bezierInterpolation',
            'binocular',
            'binocularItems',
            'binocularMagazine',
            'boundingBox',
            'boundingBoxReal',
            'boundingCenter',
            'brakesDisabled',
            'briefingName',
            'buildingExit',
            'buildingPos',
            'buldozer_EnableRoadDiag',
            'buldozer_IsEnabledRoadDiag',
            'buldozer_LoadNewRoads',
            'buldozer_reloadOperMap',
            'buttonAction',
            'buttonSetAction',
            'cadetMode',
            'calculatePath',
            'calculatePlayerVisibilityByFriendly',
            'call',
            'callExtension',
            'camCommand',
            'camCommit',
            'camCommitPrepared',
            'camCommitted',
            'camConstuctionSetParams',
            'camCreate',
            'camDestroy',
            'cameraEffect',
            'cameraEffectEnableHUD',
            'cameraInterest',
            'cameraOn',
            'cameraView',
            'campaignConfigFile',
            'camPreload',
            'camPreloaded',
            'camPrepareBank',
            'camPrepareDir',
            'camPrepareDive',
            'camPrepareFocus',
            'camPrepareFov',
            'camPrepareFovRange',
            'camPreparePos',
            'camPrepareRelPos',
            'camPrepareTarget',
            'camSetBank',
            'camSetDir',
            'camSetDive',
            'camSetFocus',
            'camSetFov',
            'camSetFovRange',
            'camSetPos',
            'camSetRelPos',
            'camSetTarget',
            'camTarget',
            'camUseNVG',
            'canAdd',
            'canAddItemToBackpack',
            'canAddItemToUniform',
            'canAddItemToVest',
            'cancelSimpleTaskDestination',
            'canDeployWeapon',
            'canFire',
            'canMove',
            'canSlingLoad',
            'canStand',
            'canSuspend',
            'canTriggerDynamicSimulation',
            'canUnloadInCombat',
            'canVehicleCargo',
            'captive',
            'captiveNum',
            'cbChecked',
            'cbSetChecked',
            'ceil',
            'channelEnabled',
            'cheatsEnabled',
            'checkAIFeature',
            'checkVisibility',
            'className',
            'clear3DENAttribute',
            'clear3DENInventory',
            'clearAllItemsFromBackpack',
            'clearBackpackCargo',
            'clearBackpackCargoGlobal',
            'clearForcesRTD',
            'clearGroupIcons',
            'clearItemCargo',
            'clearItemCargoGlobal',
            'clearItemPool',
            'clearMagazineCargo',
            'clearMagazineCargoGlobal',
            'clearMagazinePool',
            'clearOverlay',
            'clearRadio',
            'clearWeaponCargo',
            'clearWeaponCargoGlobal',
            'clearWeaponPool',
            'clientOwner',
            'closeDialog',
            'closeDisplay',
            'closeOverlay',
            'collapseObjectTree',
            'collect3DENHistory',
            'collectiveRTD',
            'collisionDisabledWith',
            'combatBehaviour',
            'combatMode',
            'commandArtilleryFire',
            'commandChat',
            'commander',
            'commandFire',
            'commandFollow',
            'commandFSM',
            'commandGetOut',
            'commandingMenu',
            'commandMove',
            'commandRadio',
            'commandStop',
            'commandSuppressiveFire',
            'commandTarget',
            'commandWatch',
            'comment',
            'commitOverlay',
            'compatibleItems',
            'compatibleMagazines',
            'compile',
            'compileFinal',
            'compileScript',
            'completedFSM',
            'composeText',
            'configClasses',
            'configFile',
            'configHierarchy',
            'configName',
            'configOf',
            'configProperties',
            'configSourceAddonList',
            'configSourceMod',
            'configSourceModList',
            'confirmSensorTarget',
            'connectTerminalToUAV',
            'connectToServer',
            'controlsGroupCtrl',
            'conversationDisabled',
            'copyFromClipboard',
            'copyToClipboard',
            'copyWaypoints',
            'cos',
            'count',
            'countEnemy',
            'countFriendly',
            'countSide',
            'countType',
            'countUnknown',
            'create3DENComposition',
            'create3DENEntity',
            'createAgent',
            'createCenter',
            'createDialog',
            'createDiaryLink',
            'createDiaryRecord',
            'createDiarySubject',
            'createDisplay',
            'createGearDialog',
            'createGroup',
            'createGuardedPoint',
            'createHashMap',
            'createHashMapFromArray',
            'createLocation',
            'createMarker',
            'createMarkerLocal',
            'createMenu',
            'createMine',
            'createMissionDisplay',
            'createMPCampaignDisplay',
            'createSimpleObject',
            'createSimpleTask',
            'createSite',
            'createSoundSource',
            'createTask',
            'createTeam',
            'createTrigger',
            'createUnit',
            'createVehicle',
            'createVehicleCrew',
            'createVehicleLocal',
            'crew',
            'ctAddHeader',
            'ctAddRow',
            'ctClear',
            'ctCurSel',
            'ctData',
            'ctFindHeaderRows',
            'ctFindRowHeader',
            'ctHeaderControls',
            'ctHeaderCount',
            'ctRemoveHeaders',
            'ctRemoveRows',
            'ctrlActivate',
            'ctrlAddEventHandler',
            'ctrlAngle',
            'ctrlAnimateModel',
            'ctrlAnimationPhaseModel',
            'ctrlAt',
            'ctrlAutoScrollDelay',
            'ctrlAutoScrollRewind',
            'ctrlAutoScrollSpeed',
            'ctrlBackgroundColor',
            'ctrlChecked',
            'ctrlClassName',
            'ctrlCommit',
            'ctrlCommitted',
            'ctrlCreate',
            'ctrlDelete',
            'ctrlEnable',
            'ctrlEnabled',
            'ctrlFade',
            'ctrlFontHeight',
            'ctrlForegroundColor',
            'ctrlHTMLLoaded',
            'ctrlIDC',
            'ctrlIDD',
            'ctrlMapAnimAdd',
            'ctrlMapAnimClear',
            'ctrlMapAnimCommit',
            'ctrlMapAnimDone',
            'ctrlMapCursor',
            'ctrlMapMouseOver',
            'ctrlMapPosition',
            'ctrlMapScale',
            'ctrlMapScreenToWorld',
            'ctrlMapSetPosition',
            'ctrlMapWorldToScreen',
            'ctrlModel',
            'ctrlModelDirAndUp',
            'ctrlModelScale',
            'ctrlMousePosition',
            'ctrlParent',
            'ctrlParentControlsGroup',
            'ctrlPosition',
            'ctrlRemoveAllEventHandlers',
            'ctrlRemoveEventHandler',
            'ctrlScale',
            'ctrlScrollValues',
            'ctrlSetActiveColor',
            'ctrlSetAngle',
            'ctrlSetAutoScrollDelay',
            'ctrlSetAutoScrollRewind',
            'ctrlSetAutoScrollSpeed',
            'ctrlSetBackgroundColor',
            'ctrlSetChecked',
            'ctrlSetDisabledColor',
            'ctrlSetEventHandler',
            'ctrlSetFade',
            'ctrlSetFocus',
            'ctrlSetFont',
            'ctrlSetFontH1',
            'ctrlSetFontH1B',
            'ctrlSetFontH2',
            'ctrlSetFontH2B',
            'ctrlSetFontH3',
            'ctrlSetFontH3B',
            'ctrlSetFontH4',
            'ctrlSetFontH4B',
            'ctrlSetFontH5',
            'ctrlSetFontH5B',
            'ctrlSetFontH6',
            'ctrlSetFontH6B',
            'ctrlSetFontHeight',
            'ctrlSetFontHeightH1',
            'ctrlSetFontHeightH2',
            'ctrlSetFontHeightH3',
            'ctrlSetFontHeightH4',
            'ctrlSetFontHeightH5',
            'ctrlSetFontHeightH6',
            'ctrlSetFontHeightSecondary',
            'ctrlSetFontP',
            'ctrlSetFontPB',
            'ctrlSetFontSecondary',
            'ctrlSetForegroundColor',
            'ctrlSetModel',
            'ctrlSetModelDirAndUp',
            'ctrlSetModelScale',
            'ctrlSetMousePosition',
            'ctrlSetPixelPrecision',
            'ctrlSetPosition',
            'ctrlSetPositionH',
            'ctrlSetPositionW',
            'ctrlSetPositionX',
            'ctrlSetPositionY',
            'ctrlSetScale',
            'ctrlSetScrollValues',
            'ctrlSetShadow',
            'ctrlSetStructuredText',
            'ctrlSetText',
            'ctrlSetTextColor',
            'ctrlSetTextColorSecondary',
            'ctrlSetTextSecondary',
            'ctrlSetTextSelection',
            'ctrlSetTooltip',
            'ctrlSetTooltipColorBox',
            'ctrlSetTooltipColorShade',
            'ctrlSetTooltipColorText',
            'ctrlSetTooltipMaxWidth',
            'ctrlSetURL',
            'ctrlSetURLOverlayMode',
            'ctrlShadow',
            'ctrlShow',
            'ctrlShown',
            'ctrlStyle',
            'ctrlText',
            'ctrlTextColor',
            'ctrlTextHeight',
            'ctrlTextSecondary',
            'ctrlTextSelection',
            'ctrlTextWidth',
            'ctrlTooltip',
            'ctrlType',
            'ctrlURL',
            'ctrlURLOverlayMode',
            'ctrlVisible',
            'ctRowControls',
            'ctRowCount',
            'ctSetCurSel',
            'ctSetData',
            'ctSetHeaderTemplate',
            'ctSetRowTemplate',
            'ctSetValue',
            'ctValue',
            'curatorAddons',
            'curatorCamera',
            'curatorCameraArea',
            'curatorCameraAreaCeiling',
            'curatorCoef',
            'curatorEditableObjects',
            'curatorEditingArea',
            'curatorEditingAreaType',
            'curatorMouseOver',
            'curatorPoints',
            'curatorRegisteredObjects',
            'curatorSelected',
            'curatorWaypointCost',
            'current3DENOperation',
            'currentChannel',
            'currentCommand',
            'currentMagazine',
            'currentMagazineDetail',
            'currentMagazineDetailTurret',
            'currentMagazineTurret',
            'currentMuzzle',
            'currentNamespace',
            'currentPilot',
            'currentTask',
            'currentTasks',
            'currentThrowable',
            'currentVisionMode',
            'currentWaypoint',
            'currentWeapon',
            'currentWeaponMode',
            'currentWeaponTurret',
            'currentZeroing',
            'cursorObject',
            'cursorTarget',
            'customChat',
            'customRadio',
            'customWaypointPosition',
            'cutFadeOut',
            'cutObj',
            'cutRsc',
            'cutText',
            'damage',
            'date',
            'dateToNumber',
            'dayTime',
            'deActivateKey',
            'debriefingText',
            'debugFSM',
            'debugLog',
            'decayGraphValues',
            'deg',
            'delete3DENEntities',
            'deleteAt',
            'deleteCenter',
            'deleteCollection',
            'deleteEditorObject',
            'deleteGroup',
            'deleteGroupWhenEmpty',
            'deleteIdentity',
            'deleteLocation',
            'deleteMarker',
            'deleteMarkerLocal',
            'deleteRange',
            'deleteResources',
            'deleteSite',
            'deleteStatus',
            'deleteTeam',
            'deleteVehicle',
            'deleteVehicleCrew',
            'deleteWaypoint',
            'detach',
            'detectedMines',
            'diag_activeMissionFSMs',
            'diag_activeScripts',
            'diag_activeSQFScripts',
            'diag_activeSQSScripts',
            'diag_allMissionEventHandlers',
            'diag_captureFrame',
            'diag_captureFrameToFile',
            'diag_captureSlowFrame',
            'diag_codePerformance',
            'diag_deltaTime',
            'diag_drawmode',
            'diag_dumpCalltraceToLog',
            'diag_dumpScriptAssembly',
            'diag_dumpTerrainSynth',
            'diag_dynamicSimulationEnd',
            'diag_enable',
            'diag_enabled',
            'diag_exportConfig',
            'diag_exportTerrainSVG',
            'diag_fps',
            'diag_fpsmin',
            'diag_frameno',
            'diag_getTerrainSegmentOffset',
            'diag_lightNewLoad',
            'diag_list',
            'diag_localized',
            'diag_log',
            'diag_logSlowFrame',
            'diag_mergeConfigFile',
            'diag_recordTurretLimits',
            'diag_resetFSM',
            'diag_resetshapes',
            'diag_scope',
            'diag_setLightNew',
            'diag_stacktrace',
            'diag_tickTime',
            'diag_toggle',
            'dialog',
            'diarySubjectExists',
            'didJIP',
            'didJIPOwner',
            'difficulty',
            'difficultyEnabled',
            'difficultyEnabledRTD',
            'difficultyOption',
            'direction',
            'directionStabilizationEnabled',
            'directSay',
            'disableAI',
            'disableBrakes',
            'disableCollisionWith',
            'disableConversation',
            'disableDebriefingStats',
            'disableMapIndicators',
            'disableNVGEquipment',
            'disableRemoteSensors',
            'disableSerialization',
            'disableTIEquipment',
            'disableUAVConnectability',
            'disableUserInput',
            'displayAddEventHandler',
            'displayChild',
            'displayCtrl',
            'displayParent',
            'displayRemoveAllEventHandlers',
            'displayRemoveEventHandler',
            'displaySetEventHandler',
            'displayUniqueName',
            'displayUpdate',
            'dissolveTeam',
            'distance',
            'distance2D',
            'distanceSqr',
            'distributionRegion',
            'do3DENAction',
            'doArtilleryFire',
            'doFire',
            'doFollow',
            'doFSM',
            'doGetOut',
            'doMove',
            'doorPhase',
            'doStop',
            'doSuppressiveFire',
            'doTarget',
            'doWatch',
            'drawArrow',
            'drawEllipse',
            'drawIcon',
            'drawIcon3D',
            'drawLaser',
            'drawLine',
            'drawLine3D',
            'drawLink',
            'drawLocation',
            'drawPolygon',
            'drawRectangle',
            'drawTriangle',
            'driver',
            'drop',
            'dynamicSimulationDistance',
            'dynamicSimulationDistanceCoef',
            'dynamicSimulationEnabled',
            'dynamicSimulationSystemEnabled',
            'echo',
            'edit3DENMissionAttributes',
            'editObject',
            'editorSetEventHandler',
            'effectiveCommander',
            'elevatePeriscope',
            'emptyPositions',
            'enableAI',
            'enableAIFeature',
            'enableAimPrecision',
            'enableAttack',
            'enableAudioFeature',
            'enableAutoStartUpRTD',
            'enableAutoTrimRTD',
            'enableCamShake',
            'enableCaustics',
            'enableChannel',
            'enableCollisionWith',
            'enableCopilot',
            'enableDebriefingStats',
            'enableDiagLegend',
            'enableDirectionStabilization',
            'enableDynamicSimulation',
            'enableDynamicSimulationSystem',
            'enableEndDialog',
            'enableEngineArtillery',
            'enableEnvironment',
            'enableFatigue',
            'enableGunLights',
            'enableInfoPanelComponent',
            'enableIRLasers',
            'enableMimics',
            'enablePersonTurret',
            'enableRadio',
            'enableReload',
            'enableRopeAttach',
            'enableSatNormalOnDetail',
            'enableSaving',
            'enableSentences',
            'enableSimulation',
            'enableSimulationGlobal',
            'enableStamina',
            'enableStressDamage',
            'enableTeamSwitch',
            'enableTraffic',
            'enableUAVConnectability',
            'enableUAVWaypoints',
            'enableVehicleCargo',
            'enableVehicleSensor',
            'enableWeaponDisassembly',
            'endLoadingScreen',
            'endMission',
            'engineOn',
            'enginesIsOnRTD',
            'enginesPowerRTD',
            'enginesRpmRTD',
            'enginesTorqueRTD',
            'entities',
            'environmentEnabled',
            'environmentVolume',
            'equipmentDisabled',
            'estimatedEndServerTime',
            'estimatedTimeLeft',
            'evalObjectArgument',
            'everyBackpack',
            'everyContainer',
            'exec',
            'execEditorScript',
            'execFSM',
            'execVM',
            'exp',
            'expectedDestination',
            'exportJIPMessages',
            'eyeDirection',
            'eyePos',
            'face',
            'faction',
            'fadeEnvironment',
            'fadeMusic',
            'fadeRadio',
            'fadeSound',
            'fadeSpeech',
            'failMission',
            'fileExists',
            'fillWeaponsFromPool',
            'find',
            'findAny',
            'findCover',
            'findDisplay',
            'findEditorObject',
            'findEmptyPosition',
            'findEmptyPositionReady',
            'findIf',
            'findNearestEnemy',
            'finishMissionInit',
            'finite',
            'fire',
            'fireAtTarget',
            'firstBackpack',
            'flag',
            'flagAnimationPhase',
            'flagOwner',
            'flagSide',
            'flagTexture',
            'flatten',
            'fleeing',
            'floor',
            'flyInHeight',
            'flyInHeightASL',
            'focusedCtrl',
            'fog',
            'fogForecast',
            'fogParams',
            'forceAddUniform',
            'forceAtPositionRTD',
            'forceCadetDifficulty',
            'forcedMap',
            'forceEnd',
            'forceFlagTexture',
            'forceFollowRoad',
            'forceGeneratorRTD',
            'forceMap',
            'forceRespawn',
            'forceSpeed',
            'forceUnicode',
            'forceWalk',
            'forceWeaponFire',
            'forceWeatherChange',
            'forEachMember',
            'forEachMemberAgent',
            'forEachMemberTeam',
            'forgetTarget',
            'format',
            'formation',
            'formationDirection',
            'formationLeader',
            'formationMembers',
            'formationPosition',
            'formationTask',
            'formatText',
            'formLeader',
            'freeExtension',
            'freeLook',
            'fromEditor',
            'fuel',
            'fullCrew',
            'gearIDCAmmoCount',
            'gearSlotAmmoCount',
            'gearSlotData',
            'gestureState',
            'get',
            'get3DENActionState',
            'get3DENAttribute',
            'get3DENCamera',
            'get3DENConnections',
            'get3DENEntity',
            'get3DENEntityID',
            'get3DENGrid',
            'get3DENIconsVisible',
            'get3DENLayerEntities',
            'get3DENLinesVisible',
            'get3DENMissionAttribute',
            'get3DENMouseOver',
            'get3DENSelected',
            'getAimingCoef',
            'getAllEnv3DSoundControllers',
            'getAllEnvSoundControllers',
            'getAllHitPointsDamage',
            'getAllOwnedMines',
            'getAllPylonsInfo',
            'getAllSoundControllers',
            'getAllUnitTraits',
            'getAmmoCargo',
            'getAnimAimPrecision',
            'getAnimSpeedCoef',
            'getArray',
            'getArtilleryAmmo',
            'getArtilleryComputerSettings',
            'getArtilleryETA',
            'getAssetDLCInfo',
            'getAssignedCuratorLogic',
            'getAssignedCuratorUnit',
            'getAttackTarget',
            'getAudioOptionVolumes',
            'getBackpackCargo',
            'getBleedingRemaining',
            'getBurningValue',
            'getCalculatePlayerVisibilityByFriendly',
            'getCameraViewDirection',
            'getCargoIndex',
            'getCenterOfMass',
            'getClientState',
            'getClientStateNumber',
            'getCompatiblePylonMagazines',
            'getConnectedUAV',
            'getConnectedUAVUnit',
            'getContainerMaxLoad',
            'getCorpse',
            'getCruiseControl',
            'getCursorObjectParams',
            'getCustomAimCoef',
            'getCustomSoundController',
            'getCustomSoundControllerCount',
            'getDammage',
            'getDebriefingText',
            'getDescription',
            'getDir',
            'getDirVisual',
            'getDiverState',
            'getDLCAssetsUsage',
            'getDLCAssetsUsageByName',
            'getDLCs',
            'getDLCUsageTime',
            'getEditorCamera',
            'getEditorMode',
            'getEditorObjectScope',
            'getElevationOffset',
            'getEngineTargetRPMRTD',
            'getEnv3DSoundController',
            'getEnvSoundController',
            'getEventHandlerInfo',
            'getFatigue',
            'getFieldManualStartPage',
            'getForcedFlagTexture',
            'getForcedSpeed',
            'getFriend',
            'getFSMVariable',
            'getFuelCargo',
            'getGraphValues',
            'getGroupIcon',
            'getGroupIconParams',
            'getGroupIcons',
            'getHideFrom',
            'getHit',
            'getHitIndex',
            'getHitPointDamage',
            'getItemCargo',
            'getLighting',
            'getLightingAt',
            'getLoadedModsInfo',
            'getMagazineCargo',
            'getMarkerColor',
            'getMarkerPos',
            'getMarkerSize',
            'getMarkerType',
            'getMass',
            'getMissionConfig',
            'getMissionConfigValue',
            'getMissionDLCs',
            'getMissionLayerEntities',
            'getMissionLayers',
            'getMissionPath',
            'getModelInfo',
            'getMousePosition',
            'getMusicPlayedTime',
            'getNumber',
            'getObjectArgument',
            'getObjectChildren',
            'getObjectDLC',
            'getObjectFOV',
            'getObjectID',
            'getObjectMaterials',
            'getObjectProxy',
            'getObjectScale',
            'getObjectTextures',
            'getObjectType',
            'getObjectViewDistance',
            'getOpticsMode',
            'getOrDefault',
            'getOrDefaultCall',
            'getOxygenRemaining',
            'getPersonUsedDLCs',
            'getPilotCameraDirection',
            'getPilotCameraPosition',
            'getPilotCameraRotation',
            'getPilotCameraTarget',
            'getPiPViewDistance',
            'getPlateNumber',
            'getPlayerChannel',
            'getPlayerID',
            'getPlayerScores',
            'getPlayerUID',
            'getPlayerVoNVolume',
            'getPos',
            'getPosASL',
            'getPosASLVisual',
            'getPosASLW',
            'getPosATL',
            'getPosATLVisual',
            'getPosVisual',
            'getPosWorld',
            'getPosWorldVisual',
            'getPylonMagazines',
            'getRelDir',
            'getRelPos',
            'getRemoteSensorsDisabled',
            'getRepairCargo',
            'getResolution',
            'getRoadInfo',
            'getRotorBrakeRTD',
            'getSensorTargets',
            'getSensorThreats',
            'getShadowDistance',
            'getShotParents',
            'getSlingLoad',
            'getSoundController',
            'getSoundControllerResult',
            'getSpeed',
            'getStamina',
            'getStatValue',
            'getSteamFriendsServers',
            'getSubtitleOptions',
            'getSuppression',
            'getTerrainGrid',
            'getTerrainHeight',
            'getTerrainHeightASL',
            'getTerrainInfo',
            'getText',
            'getTextRaw',
            'getTextureInfo',
            'getTextWidth',
            'getTiParameters',
            'getTotalDLCUsageTime',
            'getTrimOffsetRTD',
            'getTurretLimits',
            'getTurretOpticsMode',
            'getUnitFreefallInfo',
            'getUnitLoadout',
            'getUnitTrait',
            'getUnloadInCombat',
            'getUserInfo',
            'getUserMFDText',
            'getUserMFDValue',
            'getVariable',
            'getVehicleCargo',
            'getVehicleTiPars',
            'getWeaponCargo',
            'getWeaponSway',
            'getWingsOrientationRTD',
            'getWingsPositionRTD',
            'getWPPos',
            'glanceAt',
            'globalChat',
            'globalRadio',
            'goggles',
            'goto',
            'group',
            'groupChat',
            'groupFromNetId',
            'groupIconSelectable',
            'groupIconsVisible',
            'groupID',
            'groupOwner',
            'groupRadio',
            'groups',
            'groupSelectedUnits',
            'groupSelectUnit',
            'gunner',
            'gusts',
            'halt',
            'handgunItems',
            'handgunMagazine',
            'handgunWeapon',
            'handsHit',
            'hashValue',
            'hasInterface',
            'hasPilotCamera',
            'hasWeapon',
            'hcAllGroups',
            'hcGroupParams',
            'hcLeader',
            'hcRemoveAllGroups',
            'hcRemoveGroup',
            'hcSelected',
            'hcSelectGroup',
            'hcSetGroup',
            'hcShowBar',
            'hcShownBar',
            'headgear',
            'hideBody',
            'hideObject',
            'hideObjectGlobal',
            'hideSelection',
            'hint',
            'hintC',
            'hintCadet',
            'hintSilent',
            'hmd',
            'hostMission',
            'htmlLoad',
            'HUDMovementLevels',
            'humidity',
            'image',
            'importAllGroups',
            'importance',
            'in',
            'inArea',
            'inAreaArray',
            'incapacitatedState',
            'inflame',
            'inflamed',
            'infoPanel',
            'infoPanelComponentEnabled',
            'infoPanelComponents',
            'infoPanels',
            'inGameUISetEventHandler',
            'inheritsFrom',
            'initAmbientLife',
            'inPolygon',
            'inputAction',
            'inputController',
            'inputMouse',
            'inRangeOfArtillery',
            'insert',
            'insertEditorObject',
            'intersect',
            'is3DEN',
            'is3DENMultiplayer',
            'is3DENPreview',
            'isAbleToBreathe',
            'isActionMenuVisible',
            'isAgent',
            'isAimPrecisionEnabled',
            'isAllowedCrewInImmobile',
            'isArray',
            'isAutoHoverOn',
            'isAutonomous',
            'isAutoStartUpEnabledRTD',
            'isAutotest',
            'isAutoTrimOnRTD',
            'isAwake',
            'isBleeding',
            'isBurning',
            'isClass',
            'isCollisionLightOn',
            'isCopilotEnabled',
            'isDamageAllowed',
            'isDedicated',
            'isDLCAvailable',
            'isEngineOn',
            'isEqualRef',
            'isEqualTo',
            'isEqualType',
            'isEqualTypeAll',
            'isEqualTypeAny',
            'isEqualTypeArray',
            'isEqualTypeParams',
            'isFilePatchingEnabled',
            'isFinal',
            'isFlashlightOn',
            'isFlatEmpty',
            'isForcedWalk',
            'isFormationLeader',
            'isGameFocused',
            'isGamePaused',
            'isGroupDeletedWhenEmpty',
            'isHidden',
            'isInRemainsCollector',
            'isInstructorFigureEnabled',
            'isIRLaserOn',
            'isKeyActive',
            'isKindOf',
            'isLaserOn',
            'isLightOn',
            'isLocalized',
            'isManualFire',
            'isMarkedForCollection',
            'isMissionProfileNamespaceLoaded',
            'isMultiplayer',
            'isMultiplayerSolo',
            'isNil',
            'isNotEqualRef',
            'isNotEqualTo',
            'isNull',
            'isNumber',
            'isObjectHidden',
            'isObjectRTD',
            'isOnRoad',
            'isPiPEnabled',
            'isPlayer',
            'isRealTime',
            'isRemoteExecuted',
            'isRemoteExecutedJIP',
            'isSaving',
            'isSensorTargetConfirmed',
            'isServer',
            'isShowing3DIcons',
            'isSimpleObject',
            'isSprintAllowed',
            'isStaminaEnabled',
            'isSteamMission',
            'isSteamOverlayEnabled',
            'isStreamFriendlyUIEnabled',
            'isStressDamageEnabled',
            'isText',
            'isTouchingGround',
            'isTurnedOut',
            'isTutHintsEnabled',
            'isUAVConnectable',
            'isUAVConnected',
            'isUIContext',
            'isUniformAllowed',
            'isVehicleCargo',
            'isVehicleRadarOn',
            'isVehicleSensorEnabled',
            'isWalking',
            'isWeaponDeployed',
            'isWeaponRested',
            'itemCargo',
            'items',
            'itemsWithMagazines',
            'join',
            'joinAs',
            'joinAsSilent',
            'joinSilent',
            'joinString',
            'kbAddDatabase',
            'kbAddDatabaseTargets',
            'kbAddTopic',
            'kbHasTopic',
            'kbReact',
            'kbRemoveTopic',
            'kbTell',
            'kbWasSaid',
            'keyImage',
            'keyName',
            'keys',
            'knowsAbout',
            'land',
            'landAt',
            'landResult',
            'language',
            'laserTarget',
            'lbAdd',
            'lbClear',
            'lbColor',
            'lbColorRight',
            'lbCurSel',
            'lbData',
            'lbDelete',
            'lbIsSelected',
            'lbPicture',
            'lbPictureRight',
            'lbSelection',
            'lbSetColor',
            'lbSetColorRight',
            'lbSetCurSel',
            'lbSetData',
            'lbSetPicture',
            'lbSetPictureColor',
            'lbSetPictureColorDisabled',
            'lbSetPictureColorSelected',
            'lbSetPictureRight',
            'lbSetPictureRightColor',
            'lbSetPictureRightColorDisabled',
            'lbSetPictureRightColorSelected',
            'lbSetSelectColor',
            'lbSetSelectColorRight',
            'lbSetSelected',
            'lbSetText',
            'lbSetTextRight',
            'lbSetTooltip',
            'lbSetValue',
            'lbSize',
            'lbSort',
            'lbSortBy',
            'lbSortByValue',
            'lbText',
            'lbTextRight',
            'lbTooltip',
            'lbValue',
            'leader',
            'leaderboardDeInit',
            'leaderboardGetRows',
            'leaderboardInit',
            'leaderboardRequestRowsFriends',
            'leaderboardRequestRowsGlobal',
            'leaderboardRequestRowsGlobalAroundUser',
            'leaderboardsRequestUploadScore',
            'leaderboardsRequestUploadScoreKeepBest',
            'leaderboardState',
            'leaveVehicle',
            'libraryCredits',
            'libraryDisclaimers',
            'lifeState',
            'lightAttachObject',
            'lightDetachObject',
            'lightIsOn',
            'lightnings',
            'limitSpeed',
            'linearConversion',
            'lineIntersects',
            'lineIntersectsObjs',
            'lineIntersectsSurfaces',
            'lineIntersectsWith',
            'linkItem',
            'list',
            'listObjects',
            'listRemoteTargets',
            'listVehicleSensors',
            'ln',
            'lnbAddArray',
            'lnbAddColumn',
            'lnbAddRow',
            'lnbClear',
            'lnbColor',
            'lnbColorRight',
            'lnbCurSelRow',
            'lnbData',
            'lnbDeleteColumn',
            'lnbDeleteRow',
            'lnbGetColumnsPosition',
            'lnbPicture',
            'lnbPictureRight',
            'lnbSetColor',
            'lnbSetColorRight',
            'lnbSetColumnsPos',
            'lnbSetCurSelRow',
            'lnbSetData',
            'lnbSetPicture',
            'lnbSetPictureColor',
            'lnbSetPictureColorRight',
            'lnbSetPictureColorSelected',
            'lnbSetPictureColorSelectedRight',
            'lnbSetPictureRight',
            'lnbSetText',
            'lnbSetTextRight',
            'lnbSetTooltip',
            'lnbSetValue',
            'lnbSize',
            'lnbSort',
            'lnbSortBy',
            'lnbSortByValue',
            'lnbText',
            'lnbTextRight',
            'lnbValue',
            'load',
            'loadAbs',
            'loadBackpack',
            'loadConfig',
            'loadFile',
            'loadGame',
            'loadIdentity',
            'loadMagazine',
            'loadOverlay',
            'loadStatus',
            'loadUniform',
            'loadVest',
            'localize',
            'localNamespace',
            'locationPosition',
            'lock',
            'lockCameraTo',
            'lockCargo',
            'lockDriver',
            'locked',
            'lockedCameraTo',
            'lockedCargo',
            'lockedDriver',
            'lockedInventory',
            'lockedTurret',
            'lockIdentity',
            'lockInventory',
            'lockTurret',
            'lockWp',
            'log',
            'logEntities',
            'logNetwork',
            'logNetworkTerminate',
            'lookAt',
            'lookAtPos',
            'magazineCargo',
            'magazines',
            'magazinesAllTurrets',
            'magazinesAmmo',
            'magazinesAmmoCargo',
            'magazinesAmmoFull',
            'magazinesDetail',
            'magazinesDetailBackpack',
            'magazinesDetailUniform',
            'magazinesDetailVest',
            'magazinesTurret',
            'magazineTurretAmmo',
            'mapAnimAdd',
            'mapAnimClear',
            'mapAnimCommit',
            'mapAnimDone',
            'mapCenterOnCamera',
            'mapGridPosition',
            'markAsFinishedOnSteam',
            'markerAlpha',
            'markerBrush',
            'markerChannel',
            'markerColor',
            'markerDir',
            'markerPolyline',
            'markerPos',
            'markerShadow',
            'markerShape',
            'markerSize',
            'markerText',
            'markerType',
            'matrixMultiply',
            'matrixTranspose',
            'max',
            'maxLoad',
            'members',
            'menuAction',
            'menuAdd',
            'menuChecked',
            'menuClear',
            'menuCollapse',
            'menuData',
            'menuDelete',
            'menuEnable',
            'menuEnabled',
            'menuExpand',
            'menuHover',
            'menuPicture',
            'menuSetAction',
            'menuSetCheck',
            'menuSetData',
            'menuSetPicture',
            'menuSetShortcut',
            'menuSetText',
            'menuSetURL',
            'menuSetValue',
            'menuShortcut',
            'menuShortcutText',
            'menuSize',
            'menuSort',
            'menuText',
            'menuURL',
            'menuValue',
            'merge',
            'min',
            'mineActive',
            'mineDetectedBy',
            'missileTarget',
            'missileTargetPos',
            'missionConfigFile',
            'missionDifficulty',
            'missionEnd',
            'missionName',
            'missionNameSource',
            'missionNamespace',
            'missionProfileNamespace',
            'missionStart',
            'missionVersion',
            'mod',
            'modelToWorld',
            'modelToWorldVisual',
            'modelToWorldVisualWorld',
            'modelToWorldWorld',
            'modParams',
            'moonIntensity',
            'moonPhase',
            'morale',
            'move',
            'move3DENCamera',
            'moveInAny',
            'moveInCargo',
            'moveInCommander',
            'moveInDriver',
            'moveInGunner',
            'moveInTurret',
            'moveObjectToEnd',
            'moveOut',
            'moveTime',
            'moveTo',
            'moveToCompleted',
            'moveToFailed',
            'musicVolume',
            'name',
            'namedProperties',
            'nameSound',
            'nearEntities',
            'nearestBuilding',
            'nearestLocation',
            'nearestLocations',
            'nearestLocationWithDubbing',
            'nearestMines',
            'nearestObject',
            'nearestObjects',
            'nearestTerrainObjects',
            'nearObjects',
            'nearObjectsReady',
            'nearRoads',
            'nearSupplies',
            'nearTargets',
            'needReload',
            'needService',
            'netId',
            'netObjNull',
            'newOverlay',
            'nextMenuItemIndex',
            'nextWeatherChange',
            'nMenuItems',
            'not',
            'numberOfEnginesRTD',
            'numberToDate',
            'objectCurators',
            'objectFromNetId',
            'objectParent',
            'objStatus',
            'onBriefingGroup',
            'onBriefingNotes',
            'onBriefingPlan',
            'onBriefingTeamSwitch',
            'onCommandModeChanged',
            'onDoubleClick',
            'onEachFrame',
            'onGroupIconClick',
            'onGroupIconOverEnter',
            'onGroupIconOverLeave',
            'onHCGroupSelectionChanged',
            'onMapSingleClick',
            'onPlayerConnected',
            'onPlayerDisconnected',
            'onPreloadFinished',
            'onPreloadStarted',
            'onShowNewObject',
            'onTeamSwitch',
            'openCuratorInterface',
            'openDLCPage',
            'openGPS',
            'openMap',
            'openSteamApp',
            'openYoutubeVideo',
            'or',
            'orderGetIn',
            'overcast',
            'overcastForecast',
            'owner',
            'param',
            'params',
            'parseNumber',
            'parseSimpleArray',
            'parseText',
            'parsingNamespace',
            'particlesQuality',
            'periscopeElevation',
            'pickWeaponPool',
            'pitch',
            'pixelGrid',
            'pixelGridBase',
            'pixelGridNoUIScale',
            'pixelH',
            'pixelW',
            'playableSlotsNumber',
            'playableUnits',
            'playAction',
            'playActionNow',
            'player',
            'playerRespawnTime',
            'playerSide',
            'playersNumber',
            'playGesture',
            'playMission',
            'playMove',
            'playMoveNow',
            'playMusic',
            'playScriptedMission',
            'playSound',
            'playSound3D',
            'playSoundUI',
            'pose',
            'position',
            'positionCameraToWorld',
            'posScreenToWorld',
            'posWorldToScreen',
            'ppEffectAdjust',
            'ppEffectCommit',
            'ppEffectCommitted',
            'ppEffectCreate',
            'ppEffectDestroy',
            'ppEffectEnable',
            'ppEffectEnabled',
            'ppEffectForceInNVG',
            'precision',
            'preloadCamera',
            'preloadObject',
            'preloadSound',
            'preloadTitleObj',
            'preloadTitleRsc',
            'preprocessFile',
            'preprocessFileLineNumbers',
            'primaryWeapon',
            'primaryWeaponItems',
            'primaryWeaponMagazine',
            'priority',
            'processDiaryLink',
            'productVersion',
            'profileName',
            'profileNamespace',
            'profileNameSteam',
            'progressLoadingScreen',
            'progressPosition',
            'progressSetPosition',
            'publicVariable',
            'publicVariableClient',
            'publicVariableServer',
            'pushBack',
            'pushBackUnique',
            'putWeaponPool',
            'queryItemsPool',
            'queryMagazinePool',
            'queryWeaponPool',
            'rad',
            'radioChannelAdd',
            'radioChannelCreate',
            'radioChannelInfo',
            'radioChannelRemove',
            'radioChannelSetCallSign',
            'radioChannelSetLabel',
            'radioEnabled',
            'radioVolume',
            'rain',
            'rainbow',
            'rainParams',
            'random',
            'rank',
            'rankId',
            'rating',
            'rectangular',
            'regexFind',
            'regexMatch',
            'regexReplace',
            'registeredTasks',
            'registerTask',
            'reload',
            'reloadEnabled',
            'remoteControl',
            'remoteExec',
            'remoteExecCall',
            'remoteExecutedOwner',
            'remove3DENConnection',
            'remove3DENEventHandler',
            'remove3DENLayer',
            'removeAction',
            'removeAll3DENEventHandlers',
            'removeAllActions',
            'removeAllAssignedItems',
            'removeAllBinocularItems',
            'removeAllContainers',
            'removeAllCuratorAddons',
            'removeAllCuratorCameraAreas',
            'removeAllCuratorEditingAreas',
            'removeAllEventHandlers',
            'removeAllHandgunItems',
            'removeAllItems',
            'removeAllItemsWithMagazines',
            'removeAllMissionEventHandlers',
            'removeAllMPEventHandlers',
            'removeAllMusicEventHandlers',
            'removeAllOwnedMines',
            'removeAllPrimaryWeaponItems',
            'removeAllSecondaryWeaponItems',
            'removeAllUserActionEventHandlers',
            'removeAllWeapons',
            'removeBackpack',
            'removeBackpackGlobal',
            'removeBinocularItem',
            'removeCuratorAddons',
            'removeCuratorCameraArea',
            'removeCuratorEditableObjects',
            'removeCuratorEditingArea',
            'removeDiaryRecord',
            'removeDiarySubject',
            'removeDrawIcon',
            'removeDrawLinks',
            'removeEventHandler',
            'removeFromRemainsCollector',
            'removeGoggles',
            'removeGroupIcon',
            'removeHandgunItem',
            'removeHeadgear',
            'removeItem',
            'removeItemFromBackpack',
            'removeItemFromUniform',
            'removeItemFromVest',
            'removeItems',
            'removeMagazine',
            'removeMagazineGlobal',
            'removeMagazines',
            'removeMagazinesTurret',
            'removeMagazineTurret',
            'removeMenuItem',
            'removeMissionEventHandler',
            'removeMPEventHandler',
            'removeMusicEventHandler',
            'removeOwnedMine',
            'removePrimaryWeaponItem',
            'removeSecondaryWeaponItem',
            'removeSimpleTask',
            'removeSwitchableUnit',
            'removeTeamMember',
            'removeUniform',
            'removeUserActionEventHandler',
            'removeVest',
            'removeWeapon',
            'removeWeaponAttachmentCargo',
            'removeWeaponCargo',
            'removeWeaponGlobal',
            'removeWeaponTurret',
            'reportRemoteTarget',
            'requiredVersion',
            'resetCamShake',
            'resetSubgroupDirection',
            'resize',
            'resources',
            'respawnVehicle',
            'restartEditorCamera',
            'reveal',
            'revealMine',
            'reverse',
            'reversedMouseY',
            'roadAt',
            'roadsConnectedTo',
            'roleDescription',
            'ropeAttachedObjects',
            'ropeAttachedTo',
            'ropeAttachEnabled',
            'ropeAttachTo',
            'ropeCreate',
            'ropeCut',
            'ropeDestroy',
            'ropeDetach',
            'ropeEndPosition',
            'ropeLength',
            'ropes',
            'ropesAttachedTo',
            'ropeSegments',
            'ropeUnwind',
            'ropeUnwound',
            'rotorsForcesRTD',
            'rotorsRpmRTD',
            'round',
            'runInitScript',
            'safeZoneH',
            'safeZoneW',
            'safeZoneWAbs',
            'safeZoneX',
            'safeZoneXAbs',
            'safeZoneY',
            'save3DENInventory',
            'saveGame',
            'saveIdentity',
            'saveJoysticks',
            'saveMissionProfileNamespace',
            'saveOverlay',
            'saveProfileNamespace',
            'saveStatus',
            'saveVar',
            'savingEnabled',
            'say',
            'say2D',
            'say3D',
            'scopeName',
            'score',
            'scoreSide',
            'screenshot',
            'screenToWorld',
            'scriptDone',
            'scriptName',
            'scudState',
            'secondaryWeapon',
            'secondaryWeaponItems',
            'secondaryWeaponMagazine',
            'select',
            'selectBestPlaces',
            'selectDiarySubject',
            'selectedEditorObjects',
            'selectEditorObject',
            'selectionNames',
            'selectionPosition',
            'selectionVectorDirAndUp',
            'selectLeader',
            'selectMax',
            'selectMin',
            'selectNoPlayer',
            'selectPlayer',
            'selectRandom',
            'selectRandomWeighted',
            'selectWeapon',
            'selectWeaponTurret',
            'sendAUMessage',
            'sendSimpleCommand',
            'sendTask',
            'sendTaskResult',
            'sendUDPMessage',
            'sentencesEnabled',
            'serverCommand',
            'serverCommandAvailable',
            'serverCommandExecutable',
            'serverName',
            'serverNamespace',
            'serverTime',
            'set',
            'set3DENAttribute',
            'set3DENAttributes',
            'set3DENGrid',
            'set3DENIconsVisible',
            'set3DENLayer',
            'set3DENLinesVisible',
            'set3DENLogicType',
            'set3DENMissionAttribute',
            'set3DENMissionAttributes',
            'set3DENModelsVisible',
            'set3DENObjectType',
            'set3DENSelected',
            'setAccTime',
            'setActualCollectiveRTD',
            'setAirplaneThrottle',
            'setAirportSide',
            'setAmmo',
            'setAmmoCargo',
            'setAmmoOnPylon',
            'setAnimSpeedCoef',
            'setAperture',
            'setApertureNew',
            'setArmoryPoints',
            'setAttributes',
            'setAutonomous',
            'setBehaviour',
            'setBehaviourStrong',
            'setBleedingRemaining',
            'setBrakesRTD',
            'setCameraInterest',
            'setCamShakeDefParams',
            'setCamShakeParams',
            'setCamUseTi',
            'setCaptive',
            'setCenterOfMass',
            'setCollisionLight',
            'setCombatBehaviour',
            'setCombatMode',
            'setCompassOscillation',
            'setConvoySeparation',
            'setCruiseControl',
            'setCuratorCameraAreaCeiling',
            'setCuratorCoef',
            'setCuratorEditingAreaType',
            'setCuratorWaypointCost',
            'setCurrentChannel',
            'setCurrentTask',
            'setCurrentWaypoint',
            'setCustomAimCoef',
            'SetCustomMissionData',
            'setCustomSoundController',
            'setCustomWeightRTD',
            'setDamage',
            'setDammage',
            'setDate',
            'setDebriefingText',
            'setDefaultCamera',
            'setDestination',
            'setDetailMapBlendPars',
            'setDiaryRecordText',
            'setDiarySubjectPicture',
            'setDir',
            'setDirection',
            'setDrawIcon',
            'setDriveOnPath',
            'setDropInterval',
            'setDynamicSimulationDistance',
            'setDynamicSimulationDistanceCoef',
            'setEditorMode',
            'setEditorObjectScope',
            'setEffectCondition',
            'setEffectiveCommander',
            'setEngineRpmRTD',
            'setFace',
            'setFaceanimation',
            'setFatigue',
            'setFeatureType',
            'setFlagAnimationPhase',
            'setFlagOwner',
            'setFlagSide',
            'setFlagTexture',
            'setFog',
            'setForceGeneratorRTD',
            'setFormation',
            'setFormationTask',
            'setFormDir',
            'setFriend',
            'setFromEditor',
            'setFSMVariable',
            'setFuel',
            'setFuelCargo',
            'setGroupIcon',
            'setGroupIconParams',
            'setGroupIconsSelectable',
            'setGroupIconsVisible',
            'setGroupid',
            'setGroupIdGlobal',
            'setGroupOwner',
            'setGusts',
            'setHideBehind',
            'setHit',
            'setHitIndex',
            'setHitPointDamage',
            'setHorizonParallaxCoef',
            'setHUDMovementLevels',
            'setHumidity',
            'setIdentity',
            'setImportance',
            'setInfoPanel',
            'setLeader',
            'setLightAmbient',
            'setLightAttenuation',
            'setLightBrightness',
            'setLightColor',
            'setLightConePars',
            'setLightDayLight',
            'setLightFlareMaxDistance',
            'setLightFlareSize',
            'setLightIntensity',
            'setLightIR',
            'setLightnings',
            'setLightUseFlare',
            'setLightVolumeShape',
            'setLocalWindParams',
            'setMagazineTurretAmmo',
            'setMarkerAlpha',
            'setMarkerAlphaLocal',
            'setMarkerBrush',
            'setMarkerBrushLocal',
            'setMarkerColor',
            'setMarkerColorLocal',
            'setMarkerDir',
            'setMarkerDirLocal',
            'setMarkerPolyline',
            'setMarkerPolylineLocal',
            'setMarkerPos',
            'setMarkerPosLocal',
            'setMarkerShadow',
            'setMarkerShadowLocal',
            'setMarkerShape',
            'setMarkerShapeLocal',
            'setMarkerSize',
            'setMarkerSizeLocal',
            'setMarkerText',
            'setMarkerTextLocal',
            'setMarkerType',
            'setMarkerTypeLocal',
            'setMass',
            'setMaxLoad',
            'setMimic',
            'setMissileTarget',
            'setMissileTargetPos',
            'setMousePosition',
            'setMusicEffect',
            'setMusicEventHandler',
            'setName',
            'setNameSound',
            'setObjectArguments',
            'setObjectMaterial',
            'setObjectMaterialGlobal',
            'setObjectProxy',
            'setObjectScale',
            'setObjectTexture',
            'setObjectTextureGlobal',
            'setObjectViewDistance',
            'setOpticsMode',
            'setOvercast',
            'setOwner',
            'setOxygenRemaining',
            'setParticleCircle',
            'setParticleClass',
            'setParticleFire',
            'setParticleParams',
            'setParticleRandom',
            'setPilotCameraDirection',
            'setPilotCameraRotation',
            'setPilotCameraTarget',
            'setPilotLight',
            'setPiPEffect',
            'setPiPViewDistance',
            'setPitch',
            'setPlateNumber',
            'setPlayable',
            'setPlayerRespawnTime',
            'setPlayerVoNVolume',
            'setPos',
            'setPosASL',
            'setPosASL2',
            'setPosASLW',
            'setPosATL',
            'setPosition',
            'setPosWorld',
            'setPylonLoadout',
            'setPylonsPriority',
            'setRadioMsg',
            'setRain',
            'setRainbow',
            'setRandomLip',
            'setRank',
            'setRectangular',
            'setRepairCargo',
            'setRotorBrakeRTD',
            'setShadowDistance',
            'setShotParents',
            'setSide',
            'setSimpleTaskAlwaysVisible',
            'setSimpleTaskCustomData',
            'setSimpleTaskDescription',
            'setSimpleTaskDestination',
            'setSimpleTaskTarget',
            'setSimpleTaskType',
            'setSimulWeatherLayers',
            'setSize',
            'setSkill',
            'setSlingLoad',
            'setSoundEffect',
            'setSpeaker',
            'setSpeech',
            'setSpeedMode',
            'setStamina',
            'setStaminaScheme',
            'setStatValue',
            'setSuppression',
            'setSystemOfUnits',
            'setTargetAge',
            'setTaskMarkerOffset',
            'setTaskResult',
            'setTaskState',
            'setTerrainGrid',
            'setTerrainHeight',
            'setText',
            'setTimeMultiplier',
            'setTiParameter',
            'setTitleEffect',
            'setTowParent',
            'setTrafficDensity',
            'setTrafficDistance',
            'setTrafficGap',
            'setTrafficSpeed',
            'setTriggerActivation',
            'setTriggerArea',
            'setTriggerInterval',
            'setTriggerStatements',
            'setTriggerText',
            'setTriggerTimeout',
            'setTriggerType',
            'setTurretLimits',
            'setTurretOpticsMode',
            'setType',
            'setUnconscious',
            'setUnitAbility',
            'setUnitCombatMode',
            'setUnitFreefallHeight',
            'setUnitLoadout',
            'setUnitPos',
            'setUnitPosWeak',
            'setUnitRank',
            'setUnitRecoilCoefficient',
            'setUnitTrait',
            'setUnloadInCombat',
            'setUserActionText',
            'setUserMFDText',
            'setUserMFDValue',
            'setVariable',
            'setVectorDir',
            'setVectorDirAndUp',
            'setVectorUp',
            'setVehicleAmmo',
            'setVehicleAmmoDef',
            'setVehicleArmor',
            'setVehicleCargo',
            'setVehicleId',
            'setVehicleLock',
            'setVehiclePosition',
            'setVehicleRadar',
            'setVehicleReceiveRemoteTargets',
            'setVehicleReportOwnPosition',
            'setVehicleReportRemoteTargets',
            'setVehicleTiPars',
            'setVehicleVarName',
            'setVelocity',
            'setVelocityModelSpace',
            'setVelocityTransformation',
            'setViewDistance',
            'setVisibleIfTreeCollapsed',
            'setWantedRPMRTD',
            'setWaves',
            'setWaypointBehaviour',
            'setWaypointCombatMode',
            'setWaypointCompletionRadius',
            'setWaypointDescription',
            'setWaypointForceBehaviour',
            'setWaypointFormation',
            'setWaypointHousePosition',
            'setWaypointLoiterAltitude',
            'setWaypointLoiterRadius',
            'setWaypointLoiterType',
            'setWaypointName',
            'setWaypointPosition',
            'setWaypointScript',
            'setWaypointSpeed',
            'setWaypointStatements',
            'setWaypointTimeout',
            'setWaypointType',
            'setWaypointVisible',
            'setWeaponReloadingTime',
            'setWeaponZeroing',
            'setWind',
            'setWindDir',
            'setWindForce',
            'setWindStr',
            'setWingForceScaleRTD',
            'setWPPos',
            'show3DIcons',
            'showChat',
            'showCinemaBorder',
            'showCommandingMenu',
            'showCompass',
            'showCuratorCompass',
            'showGps',
            'showHUD',
            'showLegend',
            'showMap',
            'shownArtilleryComputer',
            'shownChat',
            'shownCompass',
            'shownCuratorCompass',
            'showNewEditorObject',
            'shownGps',
            'shownHUD',
            'shownMap',
            'shownPad',
            'shownRadio',
            'shownScoretable',
            'shownSubtitles',
            'shownUAVFeed',
            'shownWarrant',
            'shownWatch',
            'showPad',
            'showRadio',
            'showScoretable',
            'showSubtitles',
            'showUAVFeed',
            'showWarrant',
            'showWatch',
            'showWaypoint',
            'showWaypoints',
            'side',
            'sideChat',
            'sideRadio',
            'simpleTasks',
            'simulationEnabled',
            'simulCloudDensity',
            'simulCloudOcclusion',
            'simulInClouds',
            'simulWeatherSync',
            'sin',
            'size',
            'sizeOf',
            'skill',
            'skillFinal',
            'skipTime',
            'sleep',
            'sliderPosition',
            'sliderRange',
            'sliderSetPosition',
            'sliderSetRange',
            'sliderSetSpeed',
            'sliderSpeed',
            'slingLoadAssistantShown',
            'soldierMagazines',
            'someAmmo',
            'sort',
            'soundVolume',
            'spawn',
            'speaker',
            'speechVolume',
            'speed',
            'speedMode',
            'splitString',
            'sqrt',
            'squadParams',
            'stance',
            'startLoadingScreen',
            'stop',
            'stopEngineRTD',
            'stopped',
            'str',
            'sunOrMoon',
            'supportInfo',
            'suppressFor',
            'surfaceIsWater',
            'surfaceNormal',
            'surfaceTexture',
            'surfaceType',
            'swimInDepth',
            'switchableUnits',
            'switchAction',
            'switchCamera',
            'switchGesture',
            'switchLight',
            'switchMove',
            'synchronizedObjects',
            'synchronizedTriggers',
            'synchronizedWaypoints',
            'synchronizeObjectsAdd',
            'synchronizeObjectsRemove',
            'synchronizeTrigger',
            'synchronizeWaypoint',
            'systemChat',
            'systemOfUnits',
            'systemTime',
            'systemTimeUTC',
            'tan',
            'targetKnowledge',
            'targets',
            'targetsAggregate',
            'targetsQuery',
            'taskAlwaysVisible',
            'taskChildren',
            'taskCompleted',
            'taskCustomData',
            'taskDescription',
            'taskDestination',
            'taskHint',
            'taskMarkerOffset',
            'taskName',
            'taskParent',
            'taskResult',
            'taskState',
            'taskType',
            'teamMember',
            'teamName',
            'teams',
            'teamSwitch',
            'teamSwitchEnabled',
            'teamType',
            'terminate',
            'terrainIntersect',
            'terrainIntersectASL',
            'terrainIntersectAtASL',
            'text',
            'textLog',
            'textLogFormat',
            'tg',
            'time',
            'timeMultiplier',
            'titleCut',
            'titleFadeOut',
            'titleObj',
            'titleRsc',
            'titleText',
            'toArray',
            'toFixed',
            'toLower',
            'toLowerANSI',
            'toString',
            'toUpper',
            'toUpperANSI',
            'triggerActivated',
            'triggerActivation',
            'triggerAmmo',
            'triggerArea',
            'triggerAttachedVehicle',
            'triggerAttachObject',
            'triggerAttachVehicle',
            'triggerDynamicSimulation',
            'triggerInterval',
            'triggerStatements',
            'triggerText',
            'triggerTimeout',
            'triggerTimeoutCurrent',
            'triggerType',
            'trim',
            'turretLocal',
            'turretOwner',
            'turretUnit',
            'tvAdd',
            'tvClear',
            'tvCollapse',
            'tvCollapseAll',
            'tvCount',
            'tvCurSel',
            'tvData',
            'tvDelete',
            'tvExpand',
            'tvExpandAll',
            'tvIsSelected',
            'tvPicture',
            'tvPictureRight',
            'tvSelection',
            'tvSetColor',
            'tvSetCurSel',
            'tvSetData',
            'tvSetPicture',
            'tvSetPictureColor',
            'tvSetPictureColorDisabled',
            'tvSetPictureColorSelected',
            'tvSetPictureRight',
            'tvSetPictureRightColor',
            'tvSetPictureRightColorDisabled',
            'tvSetPictureRightColorSelected',
            'tvSetSelectColor',
            'tvSetSelected',
            'tvSetText',
            'tvSetTooltip',
            'tvSetValue',
            'tvSort',
            'tvSortAll',
            'tvSortByValue',
            'tvSortByValueAll',
            'tvText',
            'tvTooltip',
            'tvValue',
            'type',
            'typeName',
            'typeOf',
            'UAVControl',
            'uiNamespace',
            'uiSleep',
            'unassignCurator',
            'unassignItem',
            'unassignTeam',
            'unassignVehicle',
            'underwater',
            'uniform',
            'uniformContainer',
            'uniformItems',
            'uniformMagazines',
            'uniqueUnitItems',
            'unitAddons',
            'unitAimPosition',
            'unitAimPositionVisual',
            'unitBackpack',
            'unitCombatMode',
            'unitIsUAV',
            'unitPos',
            'unitReady',
            'unitRecoilCoefficient',
            'units',
            'unitsBelowHeight',
            'unitTurret',
            'unlinkItem',
            'unlockAchievement',
            'unregisterTask',
            'updateDrawIcon',
            'updateMenuItem',
            'updateObjectTree',
            'useAIOperMapObstructionTest',
            'useAISteeringComponent',
            'useAudioTimeForMoves',
            'userInputDisabled',
            'values',
            'vectorAdd',
            'vectorCos',
            'vectorCrossProduct',
            'vectorDiff',
            'vectorDir',
            'vectorDirVisual',
            'vectorDistance',
            'vectorDistanceSqr',
            'vectorDotProduct',
            'vectorFromTo',
            'vectorLinearConversion',
            'vectorMagnitude',
            'vectorMagnitudeSqr',
            'vectorModelToWorld',
            'vectorModelToWorldVisual',
            'vectorMultiply',
            'vectorNormalized',
            'vectorUp',
            'vectorUpVisual',
            'vectorWorldToModel',
            'vectorWorldToModelVisual',
            'vehicle',
            'vehicleCargoEnabled',
            'vehicleChat',
            'vehicleMoveInfo',
            'vehicleRadio',
            'vehicleReceiveRemoteTargets',
            'vehicleReportOwnPosition',
            'vehicleReportRemoteTargets',
            'vehicles',
            'vehicleVarName',
            'velocity',
            'velocityModelSpace',
            'verifySignature',
            'vest',
            'vestContainer',
            'vestItems',
            'vestMagazines',
            'viewDistance',
            'visibleCompass',
            'visibleGps',
            'visibleMap',
            'visiblePosition',
            'visiblePositionASL',
            'visibleScoretable',
            'visibleWatch',
            'waves',
            'waypointAttachedObject',
            'waypointAttachedVehicle',
            'waypointAttachObject',
            'waypointAttachVehicle',
            'waypointBehaviour',
            'waypointCombatMode',
            'waypointCompletionRadius',
            'waypointDescription',
            'waypointForceBehaviour',
            'waypointFormation',
            'waypointHousePosition',
            'waypointLoiterAltitude',
            'waypointLoiterRadius',
            'waypointLoiterType',
            'waypointName',
            'waypointPosition',
            'waypoints',
            'waypointScript',
            'waypointsEnabledUAV',
            'waypointShow',
            'waypointSpeed',
            'waypointStatements',
            'waypointTimeout',
            'waypointTimeoutCurrent',
            'waypointType',
            'waypointVisible',
            'weaponAccessories',
            'weaponAccessoriesCargo',
            'weaponCargo',
            'weaponDirection',
            'weaponInertia',
            'weaponLowered',
            'weaponReloadingTime',
            'weapons',
            'weaponsInfo',
            'weaponsItems',
            'weaponsItemsCargo',
            'weaponState',
            'weaponsTurret',
            'weightRTD',
            'WFSideText',
            'wind',
            'windDir',
            'windRTD',
            'windStr',
            'wingsForcesRTD',
            'worldName',
            'worldSize',
            'worldToModel',
            'worldToModelVisual',
            'worldToScreen'
          ];
          
          // list of keywords from:
          // https://community.bistudio.com/wiki/PreProcessor_Commands
          const PREPROCESSOR = {
            className: 'meta',
            begin: /#\s*[a-z]+\b/,
            end: /$/,
            keywords: 'define undef ifdef ifndef else endif include if',
            contains: [
              {
                begin: /\\\n/,
                relevance: 0
              },
              hljs.inherit(STRINGS, { className: 'string' }),
              {
                begin: /<[^\n>]*>/,
                end: /$/,
                illegal: '\\n'
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
          
          return {
            name: 'SQF',
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_IN,
              literal: LITERAL
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.NUMBER_MODE,
              VARIABLE,
              FUNCTION,
              STRINGS,
              PREPROCESSOR
            ],
            illegal: [
              //$ is only valid when used with Hex numbers (e.g. $FF)
              /\$[^a-fA-F0-9]/, 
              /\w\$/,
              /\?/,      //There's no ? in SQF
              /@/,       //There's no @ in SQF
              // Brute-force-fixing the build error. See https://github.com/highlightjs/highlight.js/pull/3193#issuecomment-843088729
              / \| /,
              // . is only used in numbers
              /[a-zA-Z_]\./,
              /\:\=/,
              /\[\:/
            ]
          };
        }
 
        sqf_1 = sqf;
        return sqf_1;
    }
 
    /*
     Language: SQL
     Website: https://en.wikipedia.org/wiki/SQL
     Category: common, database
     */
 
    var sql_1;
    var hasRequiredSql;
 
    function requireSql () {
        if (hasRequiredSql) return sql_1;
        hasRequiredSql = 1;
        /*
 
        Goals:
 
        SQL is intended to highlight basic/common SQL keywords and expressions
 
        - If pretty much every single SQL server includes supports, then it's a canidate.
        - It is NOT intended to include tons of vendor specific keywords (Oracle, MySQL,
          PostgreSQL) although the list of data types is purposely a bit more expansive.
        - For more specific SQL grammars please see:
          - PostgreSQL and PL/pgSQL - core
          - T-SQL - https://github.com/highlightjs/highlightjs-tsql
          - sql_more (core)
 
         */
 
        function sql(hljs) {
          const regex = hljs.regex;
          const COMMENT_MODE = hljs.COMMENT('--', '$');
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: /'/,
                end: /'/,
                contains: [ { begin: /''/ } ]
              }
            ]
          };
          const QUOTED_IDENTIFIER = {
            begin: /"/,
            end: /"/,
            contains: [ { begin: /""/ } ]
          };
 
          const LITERALS = [
            "true",
            "false",
            // Not sure it's correct to call NULL literal, and clauses like IS [NOT] NULL look strange that way.
            // "null",
            "unknown"
          ];
 
          const MULTI_WORD_TYPES = [
            "double precision",
            "large object",
            "with timezone",
            "without timezone"
          ];
 
          const TYPES = [
            'bigint',
            'binary',
            'blob',
            'boolean',
            'char',
            'character',
            'clob',
            'date',
            'dec',
            'decfloat',
            'decimal',
            'float',
            'int',
            'integer',
            'interval',
            'nchar',
            'nclob',
            'national',
            'numeric',
            'real',
            'row',
            'smallint',
            'time',
            'timestamp',
            'varchar',
            'varying', // modifier (character varying)
            'varbinary'
          ];
 
          const NON_RESERVED_WORDS = [
            "add",
            "asc",
            "collation",
            "desc",
            "final",
            "first",
            "last",
            "view"
          ];
 
          // https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#reserved-word
          const RESERVED_WORDS = [
            "abs",
            "acos",
            "all",
            "allocate",
            "alter",
            "and",
            "any",
            "are",
            "array",
            "array_agg",
            "array_max_cardinality",
            "as",
            "asensitive",
            "asin",
            "asymmetric",
            "at",
            "atan",
            "atomic",
            "authorization",
            "avg",
            "begin",
            "begin_frame",
            "begin_partition",
            "between",
            "bigint",
            "binary",
            "blob",
            "boolean",
            "both",
            "by",
            "call",
            "called",
            "cardinality",
            "cascaded",
            "case",
            "cast",
            "ceil",
            "ceiling",
            "char",
            "char_length",
            "character",
            "character_length",
            "check",
            "classifier",
            "clob",
            "close",
            "coalesce",
            "collate",
            "collect",
            "column",
            "commit",
            "condition",
            "connect",
            "constraint",
            "contains",
            "convert",
            "copy",
            "corr",
            "corresponding",
            "cos",
            "cosh",
            "count",
            "covar_pop",
            "covar_samp",
            "create",
            "cross",
            "cube",
            "cume_dist",
            "current",
            "current_catalog",
            "current_date",
            "current_default_transform_group",
            "current_path",
            "current_role",
            "current_row",
            "current_schema",
            "current_time",
            "current_timestamp",
            "current_path",
            "current_role",
            "current_transform_group_for_type",
            "current_user",
            "cursor",
            "cycle",
            "date",
            "day",
            "deallocate",
            "dec",
            "decimal",
            "decfloat",
            "declare",
            "default",
            "define",
            "delete",
            "dense_rank",
            "deref",
            "describe",
            "deterministic",
            "disconnect",
            "distinct",
            "double",
            "drop",
            "dynamic",
            "each",
            "element",
            "else",
            "empty",
            "end",
            "end_frame",
            "end_partition",
            "end-exec",
            "equals",
            "escape",
            "every",
            "except",
            "exec",
            "execute",
            "exists",
            "exp",
            "external",
            "extract",
            "false",
            "fetch",
            "filter",
            "first_value",
            "float",
            "floor",
            "for",
            "foreign",
            "frame_row",
            "free",
            "from",
            "full",
            "function",
            "fusion",
            "get",
            "global",
            "grant",
            "group",
            "grouping",
            "groups",
            "having",
            "hold",
            "hour",
            "identity",
            "in",
            "indicator",
            "initial",
            "inner",
            "inout",
            "insensitive",
            "insert",
            "int",
            "integer",
            "intersect",
            "intersection",
            "interval",
            "into",
            "is",
            "join",
            "json_array",
            "json_arrayagg",
            "json_exists",
            "json_object",
            "json_objectagg",
            "json_query",
            "json_table",
            "json_table_primitive",
            "json_value",
            "lag",
            "language",
            "large",
            "last_value",
            "lateral",
            "lead",
            "leading",
            "left",
            "like",
            "like_regex",
            "listagg",
            "ln",
            "local",
            "localtime",
            "localtimestamp",
            "log",
            "log10",
            "lower",
            "match",
            "match_number",
            "match_recognize",
            "matches",
            "max",
            "member",
            "merge",
            "method",
            "min",
            "minute",
            "mod",
            "modifies",
            "module",
            "month",
            "multiset",
            "national",
            "natural",
            "nchar",
            "nclob",
            "new",
            "no",
            "none",
            "normalize",
            "not",
            "nth_value",
            "ntile",
            "null",
            "nullif",
            "numeric",
            "octet_length",
            "occurrences_regex",
            "of",
            "offset",
            "old",
            "omit",
            "on",
            "one",
            "only",
            "open",
            "or",
            "order",
            "out",
            "outer",
            "over",
            "overlaps",
            "overlay",
            "parameter",
            "partition",
            "pattern",
            "per",
            "percent",
            "percent_rank",
            "percentile_cont",
            "percentile_disc",
            "period",
            "portion",
            "position",
            "position_regex",
            "power",
            "precedes",
            "precision",
            "prepare",
            "primary",
            "procedure",
            "ptf",
            "range",
            "rank",
            "reads",
            "real",
            "recursive",
            "ref",
            "references",
            "referencing",
            "regr_avgx",
            "regr_avgy",
            "regr_count",
            "regr_intercept",
            "regr_r2",
            "regr_slope",
            "regr_sxx",
            "regr_sxy",
            "regr_syy",
            "release",
            "result",
            "return",
            "returns",
            "revoke",
            "right",
            "rollback",
            "rollup",
            "row",
            "row_number",
            "rows",
            "running",
            "savepoint",
            "scope",
            "scroll",
            "search",
            "second",
            "seek",
            "select",
            "sensitive",
            "session_user",
            "set",
            "show",
            "similar",
            "sin",
            "sinh",
            "skip",
            "smallint",
            "some",
            "specific",
            "specifictype",
            "sql",
            "sqlexception",
            "sqlstate",
            "sqlwarning",
            "sqrt",
            "start",
            "static",
            "stddev_pop",
            "stddev_samp",
            "submultiset",
            "subset",
            "substring",
            "substring_regex",
            "succeeds",
            "sum",
            "symmetric",
            "system",
            "system_time",
            "system_user",
            "table",
            "tablesample",
            "tan",
            "tanh",
            "then",
            "time",
            "timestamp",
            "timezone_hour",
            "timezone_minute",
            "to",
            "trailing",
            "translate",
            "translate_regex",
            "translation",
            "treat",
            "trigger",
            "trim",
            "trim_array",
            "true",
            "truncate",
            "uescape",
            "union",
            "unique",
            "unknown",
            "unnest",
            "update",
            "upper",
            "user",
            "using",
            "value",
            "values",
            "value_of",
            "var_pop",
            "var_samp",
            "varbinary",
            "varchar",
            "varying",
            "versioning",
            "when",
            "whenever",
            "where",
            "width_bucket",
            "window",
            "with",
            "within",
            "without",
            "year",
          ];
 
          // these are reserved words we have identified to be functions
          // and should only be highlighted in a dispatch-like context
          // ie, array_agg(...), etc.
          const RESERVED_FUNCTIONS = [
            "abs",
            "acos",
            "array_agg",
            "asin",
            "atan",
            "avg",
            "cast",
            "ceil",
            "ceiling",
            "coalesce",
            "corr",
            "cos",
            "cosh",
            "count",
            "covar_pop",
            "covar_samp",
            "cume_dist",
            "dense_rank",
            "deref",
            "element",
            "exp",
            "extract",
            "first_value",
            "floor",
            "json_array",
            "json_arrayagg",
            "json_exists",
            "json_object",
            "json_objectagg",
            "json_query",
            "json_table",
            "json_table_primitive",
            "json_value",
            "lag",
            "last_value",
            "lead",
            "listagg",
            "ln",
            "log",
            "log10",
            "lower",
            "max",
            "min",
            "mod",
            "nth_value",
            "ntile",
            "nullif",
            "percent_rank",
            "percentile_cont",
            "percentile_disc",
            "position",
            "position_regex",
            "power",
            "rank",
            "regr_avgx",
            "regr_avgy",
            "regr_count",
            "regr_intercept",
            "regr_r2",
            "regr_slope",
            "regr_sxx",
            "regr_sxy",
            "regr_syy",
            "row_number",
            "sin",
            "sinh",
            "sqrt",
            "stddev_pop",
            "stddev_samp",
            "substring",
            "substring_regex",
            "sum",
            "tan",
            "tanh",
            "translate",
            "translate_regex",
            "treat",
            "trim",
            "trim_array",
            "unnest",
            "upper",
            "value_of",
            "var_pop",
            "var_samp",
            "width_bucket",
          ];
 
          // these functions can
          const POSSIBLE_WITHOUT_PARENS = [
            "current_catalog",
            "current_date",
            "current_default_transform_group",
            "current_path",
            "current_role",
            "current_schema",
            "current_transform_group_for_type",
            "current_user",
            "session_user",
            "system_time",
            "system_user",
            "current_time",
            "localtime",
            "current_timestamp",
            "localtimestamp"
          ];
 
          // those exist to boost relevance making these very
          // "SQL like" keyword combos worth +1 extra relevance
          const COMBOS = [
            "create table",
            "insert into",
            "primary key",
            "foreign key",
            "not null",
            "alter table",
            "add constraint",
            "grouping sets",
            "on overflow",
            "character set",
            "respect nulls",
            "ignore nulls",
            "nulls first",
            "nulls last",
            "depth first",
            "breadth first"
          ];
 
          const FUNCTIONS = RESERVED_FUNCTIONS;
 
          const KEYWORDS = [
            ...RESERVED_WORDS,
            ...NON_RESERVED_WORDS
          ].filter((keyword) => {
            return !RESERVED_FUNCTIONS.includes(keyword);
          });
 
          const VARIABLE = {
            className: "variable",
            begin: /@[a-z0-9][a-z0-9_]*/,
          };
 
          const OPERATOR = {
            className: "operator",
            begin: /[-+*/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?/,
            relevance: 0,
          };
 
          const FUNCTION_CALL = {
            begin: regex.concat(/\b/, regex.either(...FUNCTIONS), /\s*\(/),
            relevance: 0,
            keywords: { built_in: FUNCTIONS }
          };
 
          // keywords with less than 3 letters are reduced in relevancy
          function reduceRelevancy(list, {
            exceptions, when
          } = {}) {
            const qualifyFn = when;
            exceptions = exceptions || [];
            return list.map((item) => {
              if (item.match(/\|\d+$/) || exceptions.includes(item)) {
                return item;
              } else if (qualifyFn(item)) {
                return `${item}|0`;
              } else {
                return item;
              }
            });
          }
 
          return {
            name: 'SQL',
            case_insensitive: true,
            // does not include {} or HTML tags `</`
            illegal: /[{}]|<\//,
            keywords: {
              $pattern: /\b[\w\.]+/,
              keyword:
                reduceRelevancy(KEYWORDS, { when: (x) => x.length < 3 }),
              literal: LITERALS,
              type: TYPES,
              built_in: POSSIBLE_WITHOUT_PARENS
            },
            contains: [
              {
                begin: regex.either(...COMBOS),
                relevance: 0,
                keywords: {
                  $pattern: /[\w\.]+/,
                  keyword: KEYWORDS.concat(COMBOS),
                  literal: LITERALS,
                  type: TYPES
                },
              },
              {
                className: "type",
                begin: regex.either(...MULTI_WORD_TYPES)
              },
              FUNCTION_CALL,
              VARIABLE,
              STRING,
              QUOTED_IDENTIFIER,
              hljs.C_NUMBER_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              COMMENT_MODE,
              OPERATOR
            ]
          };
        }
 
        sql_1 = sql;
        return sql_1;
    }
 
    /*
    Language: Stan
    Description: The Stan probabilistic programming language
    Author: Sean Pinkney <sean.pinkney@gmail.com>
    Website: http://mc-stan.org/
    Category: scientific
    */
 
    var stan_1;
    var hasRequiredStan;
 
    function requireStan () {
        if (hasRequiredStan) return stan_1;
        hasRequiredStan = 1;
        function stan(hljs) {
          const regex = hljs.regex;
          // variable names cannot conflict with block identifiers
          const BLOCKS = [
            'functions',
            'model',
            'data',
            'parameters',
            'quantities',
            'transformed',
            'generated'
          ];
 
          const STATEMENTS = [
            'for',
            'in',
            'if',
            'else',
            'while',
            'break',
            'continue',
            'return'
          ];
 
          const TYPES = [
            'array',
            'complex',
            'int',
            'real',
            'vector',
            'ordered',
            'positive_ordered',
            'simplex',
            'unit_vector',
            'row_vector',
            'matrix',
            'cholesky_factor_corr|10',
            'cholesky_factor_cov|10',
            'corr_matrix|10',
            'cov_matrix|10',
            'void'
          ];
 
          // to get the functions list
          // clone the [stan-docs repo](https://github.com/stan-dev/docs)
          // then cd into it and run this bash script https://gist.github.com/joshgoebel/dcd33f82d4059a907c986049893843cf
          //
          // the output files are
          // distributions_quoted.txt
          // functions_quoted.txt
 
          const FUNCTIONS = [
            'Phi',
            'Phi_approx',
            'abs',
            'acos',
            'acosh',
            'add_diag',
            'algebra_solver',
            'algebra_solver_newton',
            'append_array',
            'append_col',
            'append_row',
            'asin',
            'asinh',
            'atan',
            'atan2',
            'atanh',
            'bessel_first_kind',
            'bessel_second_kind',
            'binary_log_loss',
            'binomial_coefficient_log',
            'block',
            'cbrt',
            'ceil',
            'chol2inv',
            'cholesky_decompose',
            'choose',
            'col',
            'cols',
            'columns_dot_product',
            'columns_dot_self',
            'conj',
            'cos',
            'cosh',
            'cov_exp_quad',
            'crossprod',
            'csr_extract_u',
            'csr_extract_v',
            'csr_extract_w',
            'csr_matrix_times_vector',
            'csr_to_dense_matrix',
            'cumulative_sum',
            'determinant',
            'diag_matrix',
            'diag_post_multiply',
            'diag_pre_multiply',
            'diagonal',
            'digamma',
            'dims',
            'distance',
            'dot_product',
            'dot_self',
            'eigenvalues_sym',
            'eigenvectors_sym',
            'erf',
            'erfc',
            'exp',
            'exp2',
            'expm1',
            'fabs',
            'falling_factorial',
            'fdim',
            'floor',
            'fma',
            'fmax',
            'fmin',
            'fmod',
            'gamma_p',
            'gamma_q',
            'generalized_inverse',
            'get_imag',
            'get_lp',
            'get_real',
            'head',
            'hmm_hidden_state_prob',
            'hmm_marginal',
            'hypot',
            'identity_matrix',
            'inc_beta',
            'int_step',
            'integrate_1d',
            'integrate_ode',
            'integrate_ode_adams',
            'integrate_ode_bdf',
            'integrate_ode_rk45',
            'inv',
            'inv_Phi',
            'inv_cloglog',
            'inv_logit',
            'inv_sqrt',
            'inv_square',
            'inverse',
            'inverse_spd',
            'is_inf',
            'is_nan',
            'lambert_w0',
            'lambert_wm1',
            'lbeta',
            'lchoose',
            'ldexp',
            'lgamma',
            'linspaced_array',
            'linspaced_int_array',
            'linspaced_row_vector',
            'linspaced_vector',
            'lmgamma',
            'lmultiply',
            'log',
            'log1m',
            'log1m_exp',
            'log1m_inv_logit',
            'log1p',
            'log1p_exp',
            'log_determinant',
            'log_diff_exp',
            'log_falling_factorial',
            'log_inv_logit',
            'log_inv_logit_diff',
            'log_mix',
            'log_modified_bessel_first_kind',
            'log_rising_factorial',
            'log_softmax',
            'log_sum_exp',
            'logit',
            'machine_precision',
            'map_rect',
            'matrix_exp',
            'matrix_exp_multiply',
            'matrix_power',
            'max',
            'mdivide_left_spd',
            'mdivide_left_tri_low',
            'mdivide_right_spd',
            'mdivide_right_tri_low',
            'mean',
            'min',
            'modified_bessel_first_kind',
            'modified_bessel_second_kind',
            'multiply_log',
            'multiply_lower_tri_self_transpose',
            'negative_infinity',
            'norm',
            'not_a_number',
            'num_elements',
            'ode_adams',
            'ode_adams_tol',
            'ode_adjoint_tol_ctl',
            'ode_bdf',
            'ode_bdf_tol',
            'ode_ckrk',
            'ode_ckrk_tol',
            'ode_rk45',
            'ode_rk45_tol',
            'one_hot_array',
            'one_hot_int_array',
            'one_hot_row_vector',
            'one_hot_vector',
            'ones_array',
            'ones_int_array',
            'ones_row_vector',
            'ones_vector',
            'owens_t',
            'polar',
            'positive_infinity',
            'pow',
            'print',
            'prod',
            'proj',
            'qr_Q',
            'qr_R',
            'qr_thin_Q',
            'qr_thin_R',
            'quad_form',
            'quad_form_diag',
            'quad_form_sym',
            'quantile',
            'rank',
            'reduce_sum',
            'reject',
            'rep_array',
            'rep_matrix',
            'rep_row_vector',
            'rep_vector',
            'reverse',
            'rising_factorial',
            'round',
            'row',
            'rows',
            'rows_dot_product',
            'rows_dot_self',
            'scale_matrix_exp_multiply',
            'sd',
            'segment',
            'sin',
            'singular_values',
            'sinh',
            'size',
            'softmax',
            'sort_asc',
            'sort_desc',
            'sort_indices_asc',
            'sort_indices_desc',
            'sqrt',
            'square',
            'squared_distance',
            'step',
            'sub_col',
            'sub_row',
            'sum',
            'svd_U',
            'svd_V',
            'symmetrize_from_lower_tri',
            'tail',
            'tan',
            'tanh',
            'target',
            'tcrossprod',
            'tgamma',
            'to_array_1d',
            'to_array_2d',
            'to_complex',
            'to_matrix',
            'to_row_vector',
            'to_vector',
            'trace',
            'trace_gen_quad_form',
            'trace_quad_form',
            'trigamma',
            'trunc',
            'uniform_simplex',
            'variance',
            'zeros_array',
            'zeros_int_array',
            'zeros_row_vector'
          ];
 
          const DISTRIBUTIONS = [
            'bernoulli',
            'bernoulli_logit',
            'bernoulli_logit_glm',
            'beta',
            'beta_binomial',
            'beta_proportion',
            'binomial',
            'binomial_logit',
            'categorical',
            'categorical_logit',
            'categorical_logit_glm',
            'cauchy',
            'chi_square',
            'dirichlet',
            'discrete_range',
            'double_exponential',
            'exp_mod_normal',
            'exponential',
            'frechet',
            'gamma',
            'gaussian_dlm_obs',
            'gumbel',
            'hmm_latent',
            'hypergeometric',
            'inv_chi_square',
            'inv_gamma',
            'inv_wishart',
            'lkj_corr',
            'lkj_corr_cholesky',
            'logistic',
            'lognormal',
            'multi_gp',
            'multi_gp_cholesky',
            'multi_normal',
            'multi_normal_cholesky',
            'multi_normal_prec',
            'multi_student_t',
            'multinomial',
            'multinomial_logit',
            'neg_binomial',
            'neg_binomial_2',
            'neg_binomial_2_log',
            'neg_binomial_2_log_glm',
            'normal',
            'normal_id_glm',
            'ordered_logistic',
            'ordered_logistic_glm',
            'ordered_probit',
            'pareto',
            'pareto_type_2',
            'poisson',
            'poisson_log',
            'poisson_log_glm',
            'rayleigh',
            'scaled_inv_chi_square',
            'skew_double_exponential',
            'skew_normal',
            'std_normal',
            'student_t',
            'uniform',
            'von_mises',
            'weibull',
            'wiener',
            'wishart'
          ];
 
          const BLOCK_COMMENT = hljs.COMMENT(
            /\/\*/,
            /\*\//,
            {
              relevance: 0,
              contains: [
                {
                  scope: 'doctag',
                  match: /@(return|param)/
                }
              ]
            }
          );
 
          const INCLUDE = {
            scope: 'meta',
            begin: /#include\b/,
            end: /$/,
            contains: [
              {
                match: /[a-z][a-z-._]+/,
                scope: 'string'
              },
              hljs.C_LINE_COMMENT_MODE
            ]
          };
 
          const RANGE_CONSTRAINTS = [
            "lower",
            "upper",
            "offset",
            "multiplier"
          ];
 
          return {
            name: 'Stan',
            aliases: [ 'stanfuncs' ],
            keywords: {
              $pattern: hljs.IDENT_RE,
              title: BLOCKS,
              type: TYPES,
              keyword: STATEMENTS,
              built_in: FUNCTIONS
            },
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              INCLUDE,
              hljs.HASH_COMMENT_MODE,
              BLOCK_COMMENT,
              {
                scope: 'built_in',
                match: /\s(pi|e|sqrt2|log2|log10)(?=\()/,
                relevance: 0
              },
              {
                match: regex.concat(/[<,]\s*/, regex.either(...RANGE_CONSTRAINTS), /\s*=/),
                keywords: RANGE_CONSTRAINTS
              },
              {
                scope: 'keyword',
                match: /\btarget(?=\s*\+=)/,
              },
              {
                // highlights the 'T' in T[,] for only Stan language distributrions
                match: [
                  /~\s*/,
                  regex.either(...DISTRIBUTIONS),
                  /(?:\(\))/,
                  /\s*T(?=\s*\[)/
                ],
                scope: {
                  2: "built_in",
                  4: "keyword"
                }
              },
              {
                // highlights distributions that end with special endings
                scope: 'built_in',
                keywords: DISTRIBUTIONS,
                begin: regex.concat(/\w*/, regex.either(...DISTRIBUTIONS), /(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/)
              },
              {
                // highlights distributions after ~
                begin: [
                  /~/,
                  /\s*/,
                  regex.concat(regex.either(...DISTRIBUTIONS), /(?=\s*[\(.*\)])/)
                ],
                scope: { 3: "built_in" }
              },
              {
                // highlights user defined distributions after ~
                begin: [
                  /~/,
                  /\s*\w+(?=\s*[\(.*\)])/,
                  '(?!.*/\b(' + regex.either(...DISTRIBUTIONS) + ')\b)'
                ],
                scope: { 2: "title.function" }
              },
              {
                // highlights user defined distributions with special endings
                scope: 'title.function',
                begin: /\w*(_lpdf|_lupdf|_lpmf|_cdf|_lcdf|_lccdf|_qf)(?=\s*[\(.*\)])/
              },
              {
                scope: 'number',
                match: regex.concat(
                  // Comes from @RunDevelopment accessed 11/29/2021 at
                  // https://github.com/PrismJS/prism/blob/c53ad2e65b7193ab4f03a1797506a54bbb33d5a2/components/prism-stan.js#L56
 
                  // start of big noncapture group which
                  // 1. gets numbers that are by themselves
                  // 2. numbers that are separated by _
                  // 3. numbers that are separted by .
                  /(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)/,
                  // grabs scientific notation
                  // grabs complex numbers with i
                  /(?:[eE][+-]?\d+(?:_\d+)*)?i?(?!\w)/
                ),
                relevance: 0
              },
              {
                scope: 'string',
                begin: /"/,
                end: /"/
              }
            ]
          };
        }
 
        stan_1 = stan;
        return stan_1;
    }
 
    /*
    Language: Stata
    Author: Brian Quistorff <bquistorff@gmail.com>
    Contributors: Drew McDonald <drewmcdo@gmail.com>
    Description: Stata is a general-purpose statistical software package created in 1985 by StataCorp.
    Website: https://en.wikipedia.org/wiki/Stata
    Category: scientific
    */
 
    var stata_1;
    var hasRequiredStata;
 
    function requireStata () {
        if (hasRequiredStata) return stata_1;
        hasRequiredStata = 1;
        /*
          This is a fork and modification of Drew McDonald's file (https://github.com/drewmcdonald/stata-highlighting). I have also included a list of builtin commands from https://bugs.kde.org/show_bug.cgi?id=135646.
        */
 
        function stata(hljs) {
          return {
            name: 'Stata',
            aliases: [
              'do',
              'ado'
            ],
            case_insensitive: true,
            keywords: 'if else in foreach for forv forva forval forvalu forvalue forvalues by bys bysort xi quietly qui capture about ac ac_7 acprplot acprplot_7 adjust ado adopath adoupdate alpha ameans an ano anov anova anova_estat anova_terms anovadef aorder ap app appe appen append arch arch_dr arch_estat arch_p archlm areg areg_p args arima arima_dr arima_estat arima_p as asmprobit asmprobit_estat asmprobit_lf asmprobit_mfx__dlg asmprobit_p ass asse asser assert avplot avplot_7 avplots avplots_7 bcskew0 bgodfrey bias binreg bip0_lf biplot bipp_lf bipr_lf bipr_p biprobit bitest bitesti bitowt blogit bmemsize boot bootsamp bootstrap bootstrap_8 boxco_l boxco_p boxcox boxcox_6 boxcox_p bprobit br break brier bro brow brows browse brr brrstat bs bs_7 bsampl_w bsample bsample_7 bsqreg bstat bstat_7 bstat_8 bstrap bstrap_7 bubble bubbleplot ca ca_estat ca_p cabiplot camat canon canon_8 canon_8_p canon_estat canon_p cap caprojection capt captu captur capture cat cc cchart cchart_7 cci cd censobs_table centile cf char chdir checkdlgfiles checkestimationsample checkhlpfiles checksum chelp ci cii cl class classutil clear cli clis clist clo clog clog_lf clog_p clogi clogi_sw clogit clogit_lf clogit_p clogitp clogl_sw cloglog clonevar clslistarray cluster cluster_measures cluster_stop cluster_tree cluster_tree_8 clustermat cmdlog cnr cnre cnreg cnreg_p cnreg_sw cnsreg codebook collaps4 collapse colormult_nb colormult_nw compare compress conf confi confir confirm conren cons const constr constra constrai constrain constraint continue contract copy copyright copysource cor corc corr corr2data corr_anti corr_kmo corr_smc corre correl correla correlat correlate corrgram cou coun count cox cox_p cox_sw coxbase coxhaz coxvar cprplot cprplot_7 crc cret cretu cretur creturn cross cs cscript cscript_log csi ct ct_is ctset ctst_5 ctst_st cttost cumsp cumsp_7 cumul cusum cusum_7 cutil d|0 datasig datasign datasigna datasignat datasignatu datasignatur datasignature datetof db dbeta de dec deco decod decode deff des desc descr descri describ describe destring dfbeta dfgls dfuller di di_g dir dirstats dis discard disp disp_res disp_s displ displa display distinct do doe doed doedi doedit dotplot dotplot_7 dprobit drawnorm drop ds ds_util dstdize duplicates durbina dwstat dydx e|0 ed edi edit egen eivreg emdef en enc enco encod encode eq erase ereg ereg_lf ereg_p ereg_sw ereghet ereghet_glf ereghet_glf_sh ereghet_gp ereghet_ilf ereghet_ilf_sh ereghet_ip eret eretu eretur ereturn err erro error esize est est_cfexist est_cfname est_clickable est_expand est_hold est_table est_unhold est_unholdok estat estat_default estat_summ estat_vce_only esti estimates etodow etof etomdy ex exi exit expand expandcl fac fact facto factor factor_estat factor_p factor_pca_rotated factor_rotate factormat fcast fcast_compute fcast_graph fdades fdadesc fdadescr fdadescri fdadescrib fdadescribe fdasav fdasave fdause fh_st file open file read file close file filefilter fillin find_hlp_file findfile findit findit_7 fit fl fli flis flist for5_0 forest forestplot form forma format fpredict frac_154 frac_adj frac_chk frac_cox frac_ddp frac_dis frac_dv frac_in frac_mun frac_pp frac_pq frac_pv frac_wgt frac_xo fracgen fracplot fracplot_7 fracpoly fracpred fron_ex fron_hn fron_p fron_tn fron_tn2 frontier ftodate ftoe ftomdy ftowdate funnel funnelplot g|0 gamhet_glf gamhet_gp gamhet_ilf gamhet_ip gamma gamma_d2 gamma_p gamma_sw gammahet gdi_hexagon gdi_spokes ge gen gene gener genera generat generate genrank genstd genvmean gettoken gl gladder gladder_7 glim_l01 glim_l02 glim_l03 glim_l04 glim_l05 glim_l06 glim_l07 glim_l08 glim_l09 glim_l10 glim_l11 glim_l12 glim_lf glim_mu glim_nw1 glim_nw2 glim_nw3 glim_p glim_v1 glim_v2 glim_v3 glim_v4 glim_v5 glim_v6 glim_v7 glm glm_6 glm_p glm_sw glmpred glo glob globa global glogit glogit_8 glogit_p gmeans gnbre_lf gnbreg gnbreg_5 gnbreg_p gomp_lf gompe_sw gomper_p gompertz gompertzhet gomphet_glf gomphet_glf_sh gomphet_gp gomphet_ilf gomphet_ilf_sh gomphet_ip gphdot gphpen gphprint gprefs gprobi_p gprobit gprobit_8 gr gr7 gr_copy gr_current gr_db gr_describe gr_dir gr_draw gr_draw_replay gr_drop gr_edit gr_editviewopts gr_example gr_example2 gr_export gr_print gr_qscheme gr_query gr_read gr_rename gr_replay gr_save gr_set gr_setscheme gr_table gr_undo gr_use graph graph7 grebar greigen greigen_7 greigen_8 grmeanby grmeanby_7 gs_fileinfo gs_filetype gs_graphinfo gs_stat gsort gwood h|0 hadimvo hareg hausman haver he heck_d2 heckma_p heckman heckp_lf heckpr_p heckprob hel help hereg hetpr_lf hetpr_p hetprob hettest hexdump hilite hist hist_7 histogram hlogit hlu hmeans hotel hotelling hprobit hreg hsearch icd9 icd9_ff icd9p iis impute imtest inbase include inf infi infil infile infix inp inpu input ins insheet insp inspe inspec inspect integ inten intreg intreg_7 intreg_p intrg2_ll intrg_ll intrg_ll2 ipolate iqreg ir irf irf_create irfm iri is_svy is_svysum isid istdize ivprob_1_lf ivprob_lf ivprobit ivprobit_p ivreg ivreg_footnote ivtob_1_lf ivtob_lf ivtobit ivtobit_p jackknife jacknife jknife jknife_6 jknife_8 jkstat joinby kalarma1 kap kap_3 kapmeier kappa kapwgt kdensity kdensity_7 keep ksm ksmirnov ktau kwallis l|0 la lab labbe labbeplot labe label labelbook ladder levels levelsof leverage lfit lfit_p li lincom line linktest lis list lloghet_glf lloghet_glf_sh lloghet_gp lloghet_ilf lloghet_ilf_sh lloghet_ip llogi_sw llogis_p llogist llogistic llogistichet lnorm_lf lnorm_sw lnorma_p lnormal lnormalhet lnormhet_glf lnormhet_glf_sh lnormhet_gp lnormhet_ilf lnormhet_ilf_sh lnormhet_ip lnskew0 loadingplot loc loca local log logi logis_lf logistic logistic_p logit logit_estat logit_p loglogs logrank loneway lookfor lookup lowess lowess_7 lpredict lrecomp lroc lroc_7 lrtest ls lsens lsens_7 lsens_x lstat ltable ltable_7 ltriang lv lvr2plot lvr2plot_7 m|0 ma mac macr macro makecns man manova manova_estat manova_p manovatest mantel mark markin markout marksample mat mat_capp mat_order mat_put_rr mat_rapp mata mata_clear mata_describe mata_drop mata_matdescribe mata_matsave mata_matuse mata_memory mata_mlib mata_mosave mata_rename mata_which matalabel matcproc matlist matname matr matri matrix matrix_input__dlg matstrik mcc mcci md0_ md1_ md1debug_ md2_ md2debug_ mds mds_estat mds_p mdsconfig mdslong mdsmat mdsshepard mdytoe mdytof me_derd mean means median memory memsize menl meqparse mer merg merge meta mfp mfx mhelp mhodds minbound mixed_ll mixed_ll_reparm mkassert mkdir mkmat mkspline ml ml_5 ml_adjs ml_bhhhs ml_c_d ml_check ml_clear ml_cnt ml_debug ml_defd ml_e0 ml_e0_bfgs ml_e0_cycle ml_e0_dfp ml_e0i ml_e1 ml_e1_bfgs ml_e1_bhhh ml_e1_cycle ml_e1_dfp ml_e2 ml_e2_cycle ml_ebfg0 ml_ebfr0 ml_ebfr1 ml_ebh0q ml_ebhh0 ml_ebhr0 ml_ebr0i ml_ecr0i ml_edfp0 ml_edfr0 ml_edfr1 ml_edr0i ml_eds ml_eer0i ml_egr0i ml_elf ml_elf_bfgs ml_elf_bhhh ml_elf_cycle ml_elf_dfp ml_elfi ml_elfs ml_enr0i ml_enrr0 ml_erdu0 ml_erdu0_bfgs ml_erdu0_bhhh ml_erdu0_bhhhq ml_erdu0_cycle ml_erdu0_dfp ml_erdu0_nrbfgs ml_exde ml_footnote ml_geqnr ml_grad0 ml_graph ml_hbhhh ml_hd0 ml_hold ml_init ml_inv ml_log ml_max ml_mlout ml_mlout_8 ml_model ml_nb0 ml_opt ml_p ml_plot ml_query ml_rdgrd ml_repor ml_s_e ml_score ml_searc ml_technique ml_unhold mleval mlf_ mlmatbysum mlmatsum mlog mlogi mlogit mlogit_footnote mlogit_p mlopts mlsum mlvecsum mnl0_ mor more mov move mprobit mprobit_lf mprobit_p mrdu0_ mrdu1_ mvdecode mvencode mvreg mvreg_estat n|0 nbreg nbreg_al nbreg_lf nbreg_p nbreg_sw nestreg net newey newey_7 newey_p news nl nl_7 nl_9 nl_9_p nl_p nl_p_7 nlcom nlcom_p nlexp2 nlexp2_7 nlexp2a nlexp2a_7 nlexp3 nlexp3_7 nlgom3 nlgom3_7 nlgom4 nlgom4_7 nlinit nllog3 nllog3_7 nllog4 nllog4_7 nlog_rd nlogit nlogit_p nlogitgen nlogittree nlpred no nobreak noi nois noisi noisil noisily note notes notes_dlg nptrend numlabel numlist odbc old_ver olo olog ologi ologi_sw ologit ologit_p ologitp on one onew onewa oneway op_colnm op_comp op_diff op_inv op_str opr opro oprob oprob_sw oprobi oprobi_p oprobit oprobitp opts_exclusive order orthog orthpoly ou out outf outfi outfil outfile outs outsh outshe outshee outsheet ovtest pac pac_7 palette parse parse_dissim pause pca pca_8 pca_display pca_estat pca_p pca_rotate pcamat pchart pchart_7 pchi pchi_7 pcorr pctile pentium pergram pergram_7 permute permute_8 personal peto_st pkcollapse pkcross pkequiv pkexamine pkexamine_7 pkshape pksumm pksumm_7 pl plo plot plugin pnorm pnorm_7 poisgof poiss_lf poiss_sw poisso_p poisson poisson_estat post postclose postfile postutil pperron pr prais prais_e prais_e2 prais_p predict predictnl preserve print pro prob probi probit probit_estat probit_p proc_time procoverlay procrustes procrustes_estat procrustes_p profiler prog progr progra program prop proportion prtest prtesti pwcorr pwd q\\s qby qbys qchi qchi_7 qladder qladder_7 qnorm qnorm_7 qqplot qqplot_7 qreg qreg_c qreg_p qreg_sw qu quadchk quantile quantile_7 que quer query range ranksum ratio rchart rchart_7 rcof recast reclink recode reg reg3 reg3_p regdw regr regre regre_p2 regres regres_p regress regress_estat regriv_p remap ren rena renam rename renpfix repeat replace report reshape restore ret retu retur return rm rmdir robvar roccomp roccomp_7 roccomp_8 rocf_lf rocfit rocfit_8 rocgold rocplot rocplot_7 roctab roctab_7 rolling rologit rologit_p rot rota rotat rotate rotatemat rreg rreg_p ru run runtest rvfplot rvfplot_7 rvpplot rvpplot_7 sa safesum sample sampsi sav save savedresults saveold sc sca scal scala scalar scatter scm_mine sco scob_lf scob_p scobi_sw scobit scor score scoreplot scoreplot_help scree screeplot screeplot_help sdtest sdtesti se search separate seperate serrbar serrbar_7 serset set set_defaults sfrancia sh she shel shell shewhart shewhart_7 signestimationsample signrank signtest simul simul_7 simulate simulate_8 sktest sleep slogit slogit_d2 slogit_p smooth snapspan so sor sort spearman spikeplot spikeplot_7 spikeplt spline_x split sqreg sqreg_p sret sretu sretur sreturn ssc st st_ct st_hc st_hcd st_hcd_sh st_is st_issys st_note st_promo st_set st_show st_smpl st_subid stack statsby statsby_8 stbase stci stci_7 stcox stcox_estat stcox_fr stcox_fr_ll stcox_p stcox_sw stcoxkm stcoxkm_7 stcstat stcurv stcurve stcurve_7 stdes stem stepwise stereg stfill stgen stir stjoin stmc stmh stphplot stphplot_7 stphtest stphtest_7 stptime strate strate_7 streg streg_sw streset sts sts_7 stset stsplit stsum sttocc sttoct stvary stweib su suest suest_8 sum summ summa summar summari summariz summarize sunflower sureg survcurv survsum svar svar_p svmat svy svy_disp svy_dreg svy_est svy_est_7 svy_estat svy_get svy_gnbreg_p svy_head svy_header svy_heckman_p svy_heckprob_p svy_intreg_p svy_ivreg_p svy_logistic_p svy_logit_p svy_mlogit_p svy_nbreg_p svy_ologit_p svy_oprobit_p svy_poisson_p svy_probit_p svy_regress_p svy_sub svy_sub_7 svy_x svy_x_7 svy_x_p svydes svydes_8 svygen svygnbreg svyheckman svyheckprob svyintreg svyintreg_7 svyintrg svyivreg svylc svylog_p svylogit svymarkout svymarkout_8 svymean svymlog svymlogit svynbreg svyolog svyologit svyoprob svyoprobit svyopts svypois svypois_7 svypoisson svyprobit svyprobt svyprop svyprop_7 svyratio svyreg svyreg_p svyregress svyset svyset_7 svyset_8 svytab svytab_7 svytest svytotal sw sw_8 swcnreg swcox swereg swilk swlogis swlogit swologit swoprbt swpois swprobit swqreg swtobit swweib symmetry symmi symplot symplot_7 syntax sysdescribe sysdir sysuse szroeter ta tab tab1 tab2 tab_or tabd tabdi tabdis tabdisp tabi table tabodds tabodds_7 tabstat tabu tabul tabula tabulat tabulate te tempfile tempname tempvar tes test testnl testparm teststd tetrachoric time_it timer tis tob tobi tobit tobit_p tobit_sw token tokeni tokeniz tokenize tostring total translate translator transmap treat_ll treatr_p treatreg trim trimfill trnb_cons trnb_mean trpoiss_d2 trunc_ll truncr_p truncreg tsappend tset tsfill tsline tsline_ex tsreport tsrevar tsrline tsset tssmooth tsunab ttest ttesti tut_chk tut_wait tutorial tw tware_st two twoway twoway__fpfit_serset twoway__function_gen twoway__histogram_gen twoway__ipoint_serset twoway__ipoints_serset twoway__kdensity_gen twoway__lfit_serset twoway__normgen_gen twoway__pci_serset twoway__qfit_serset twoway__scatteri_serset twoway__sunflower_gen twoway_ksm_serset ty typ type typeof u|0 unab unabbrev unabcmd update us use uselabel var var_mkcompanion var_p varbasic varfcast vargranger varirf varirf_add varirf_cgraph varirf_create varirf_ctable varirf_describe varirf_dir varirf_drop varirf_erase varirf_graph varirf_ograph varirf_rename varirf_set varirf_table varlist varlmar varnorm varsoc varstable varstable_w varstable_w2 varwle vce vec vec_fevd vec_mkphi vec_p vec_p_w vecirf_create veclmar veclmar_w vecnorm vecnorm_w vecrank vecstable verinst vers versi versio version view viewsource vif vwls wdatetof webdescribe webseek webuse weib1_lf weib2_lf weib_lf weib_lf0 weibhet_glf weibhet_glf_sh weibhet_glfa weibhet_glfa_sh weibhet_gp weibhet_ilf weibhet_ilf_sh weibhet_ilfa weibhet_ilfa_sh weibhet_ip weibu_sw weibul_p weibull weibull_c weibull_s weibullhet wh whelp whi which whil while wilc_st wilcoxon win wind windo window winexec wntestb wntestb_7 wntestq xchart xchart_7 xcorr xcorr_7 xi xi_6 xmlsav xmlsave xmluse xpose xsh xshe xshel xshell xt_iis xt_tis xtab_p xtabond xtbin_p xtclog xtcloglog xtcloglog_8 xtcloglog_d2 xtcloglog_pa_p xtcloglog_re_p xtcnt_p xtcorr xtdata xtdes xtfront_p xtfrontier xtgee xtgee_elink xtgee_estat xtgee_makeivar xtgee_p xtgee_plink xtgls xtgls_p xthaus xthausman xtht_p xthtaylor xtile xtint_p xtintreg xtintreg_8 xtintreg_d2 xtintreg_p xtivp_1 xtivp_2 xtivreg xtline xtline_ex xtlogit xtlogit_8 xtlogit_d2 xtlogit_fe_p xtlogit_pa_p xtlogit_re_p xtmixed xtmixed_estat xtmixed_p xtnb_fe xtnb_lf xtnbreg xtnbreg_pa_p xtnbreg_refe_p xtpcse xtpcse_p xtpois xtpoisson xtpoisson_d2 xtpoisson_pa_p xtpoisson_refe_p xtpred xtprobit xtprobit_8 xtprobit_d2 xtprobit_re_p xtps_fe xtps_lf xtps_ren xtps_ren_8 xtrar_p xtrc xtrc_p xtrchh xtrefe_p xtreg xtreg_be xtreg_fe xtreg_ml xtreg_pa_p xtreg_re xtregar xtrere_p xtset xtsf_ll xtsf_llti xtsum xttab xttest0 xttobit xttobit_8 xttobit_p xttrans yx yxview__barlike_draw yxview_area_draw yxview_bar_draw yxview_dot_draw yxview_dropline_draw yxview_function_draw yxview_iarrow_draw yxview_ilabels_draw yxview_normal_draw yxview_pcarrow_draw yxview_pcbarrow_draw yxview_pccapsym_draw yxview_pcscatter_draw yxview_pcspike_draw yxview_rarea_draw yxview_rbar_draw yxview_rbarm_draw yxview_rcap_draw yxview_rcapsym_draw yxview_rconnected_draw yxview_rline_draw yxview_rscatter_draw yxview_rspike_draw yxview_spike_draw yxview_sunflower_draw zap_s zinb zinb_llf zinb_plf zip zip_llf zip_p zip_plf zt_ct_5 zt_hc_5 zt_hcd_5 zt_is_5 zt_iss_5 zt_sho_5 zt_smp_5 ztbase_5 ztcox_5 ztdes_5 ztereg_5 ztfill_5 ztgen_5 ztir_5 ztjoin_5 ztnb ztnb_p ztp ztp_p zts_5 ztset_5 ztspli_5 ztsum_5 zttoct_5 ztvary_5 ztweib_5',
            contains: [
              {
                className: 'symbol',
                begin: /`[a-zA-Z0-9_]+'/
              },
              {
                className: 'variable',
                begin: /\$\{?[a-zA-Z0-9_]+\}?/,
                relevance: 0
              },
              {
                className: 'string',
                variants: [
                  { begin: '`"[^\r\n]*?"\'' },
                  { begin: '"[^\r\n"]*"' }
                ]
              },
 
              {
                className: 'built_in',
                variants: [ { begin: '\\b(abs|acos|asin|atan|atan2|atanh|ceil|cloglog|comb|cos|digamma|exp|floor|invcloglog|invlogit|ln|lnfact|lnfactorial|lngamma|log|log10|max|min|mod|reldif|round|sign|sin|sqrt|sum|tan|tanh|trigamma|trunc|betaden|Binomial|binorm|binormal|chi2|chi2tail|dgammapda|dgammapdada|dgammapdadx|dgammapdx|dgammapdxdx|F|Fden|Ftail|gammaden|gammap|ibeta|invbinomial|invchi2|invchi2tail|invF|invFtail|invgammap|invibeta|invnchi2|invnFtail|invnibeta|invnorm|invnormal|invttail|nbetaden|nchi2|nFden|nFtail|nibeta|norm|normal|normalden|normd|npnchi2|tden|ttail|uniform|abbrev|char|index|indexnot|length|lower|ltrim|match|plural|proper|real|regexm|regexr|regexs|reverse|rtrim|string|strlen|strlower|strltrim|strmatch|strofreal|strpos|strproper|strreverse|strrtrim|strtrim|strupper|subinstr|subinword|substr|trim|upper|word|wordcount|_caller|autocode|byteorder|chop|clip|cond|e|epsdouble|epsfloat|group|inlist|inrange|irecode|matrix|maxbyte|maxdouble|maxfloat|maxint|maxlong|mi|minbyte|mindouble|minfloat|minint|minlong|missing|r|recode|replay|return|s|scalar|d|date|day|dow|doy|halfyear|mdy|month|quarter|week|year|d|daily|dofd|dofh|dofm|dofq|dofw|dofy|h|halfyearly|hofd|m|mofd|monthly|q|qofd|quarterly|tin|twithin|w|weekly|wofd|y|yearly|yh|ym|yofd|yq|yw|cholesky|colnumb|colsof|corr|det|diag|diag0cnt|el|get|hadamard|I|inv|invsym|issym|issymmetric|J|matmissing|matuniform|mreldif|nullmat|rownumb|rowsof|sweep|syminv|trace|vec|vecdiag)(?=\\()' } ]
              },
 
              hljs.COMMENT('^[ \t]*\\*.*$', false),
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE
            ]
          };
        }
 
        stata_1 = stata;
        return stata_1;
    }
 
    /*
    Language: STEP Part 21
    Contributors: Adam Joseph Cook <adam.joseph.cook@gmail.com>
    Description: Syntax highlighter for STEP Part 21 files (ISO 10303-21).
    Website: https://en.wikipedia.org/wiki/ISO_10303-21
    */
 
    var step21_1;
    var hasRequiredStep21;
 
    function requireStep21 () {
        if (hasRequiredStep21) return step21_1;
        hasRequiredStep21 = 1;
        function step21(hljs) {
          const STEP21_IDENT_RE = '[A-Z_][A-Z0-9_.]*';
          const STEP21_KEYWORDS = {
            $pattern: STEP21_IDENT_RE,
            keyword: [
              "HEADER",
              "ENDSEC",
              "DATA"
            ]
          };
          const STEP21_START = {
            className: 'meta',
            begin: 'ISO-10303-21;',
            relevance: 10
          };
          const STEP21_CLOSE = {
            className: 'meta',
            begin: 'END-ISO-10303-21;',
            relevance: 10
          };
 
          return {
            name: 'STEP Part 21',
            aliases: [
              'p21',
              'step',
              'stp'
            ],
            case_insensitive: true, // STEP 21 is case insensitive in theory, in practice all non-comments are capitalized.
            keywords: STEP21_KEYWORDS,
            contains: [
              STEP21_START,
              STEP21_CLOSE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.COMMENT('/\\*\\*!', '\\*/'),
              hljs.C_NUMBER_MODE,
              hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
              hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }),
              {
                className: 'string',
                begin: "'",
                end: "'"
              },
              {
                className: 'symbol',
                variants: [
                  {
                    begin: '#',
                    end: '\\d+',
                    illegal: '\\W'
                  }
                ]
              }
            ]
          };
        }
 
        step21_1 = step21;
        return step21_1;
    }
 
    var stylus_1;
    var hasRequiredStylus;
 
    function requireStylus () {
        if (hasRequiredStylus) return stylus_1;
        hasRequiredStylus = 1;
        const MODES = (hljs) => {
          return {
            IMPORTANT: {
              scope: 'meta',
              begin: '!important'
            },
            BLOCK_COMMENT: hljs.C_BLOCK_COMMENT_MODE,
            HEXCOLOR: {
              scope: 'number',
              begin: /#(([0-9a-fA-F]{3,4})|(([0-9a-fA-F]{2}){3,4}))\b/
            },
            FUNCTION_DISPATCH: {
              className: "built_in",
              begin: /[\w-]+(?=\()/
            },
            ATTRIBUTE_SELECTOR_MODE: {
              scope: 'selector-attr',
              begin: /\[/,
              end: /\]/,
              illegal: '$',
              contains: [
                hljs.APOS_STRING_MODE,
                hljs.QUOTE_STRING_MODE
              ]
            },
            CSS_NUMBER_MODE: {
              scope: 'number',
              begin: hljs.NUMBER_RE + '(' +
                '%|em|ex|ch|rem' +
                '|vw|vh|vmin|vmax' +
                '|cm|mm|in|pt|pc|px' +
                '|deg|grad|rad|turn' +
                '|s|ms' +
                '|Hz|kHz' +
                '|dpi|dpcm|dppx' +
                ')?',
              relevance: 0
            },
            CSS_VARIABLE: {
              className: "attr",
              begin: /--[A-Za-z][A-Za-z0-9_-]*/
            }
          };
        };
 
        const TAGS = [
          'a',
          'abbr',
          'address',
          'article',
          'aside',
          'audio',
          'b',
          'blockquote',
          'body',
          'button',
          'canvas',
          'caption',
          'cite',
          'code',
          'dd',
          'del',
          'details',
          'dfn',
          'div',
          'dl',
          'dt',
          'em',
          'fieldset',
          'figcaption',
          'figure',
          'footer',
          'form',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'header',
          'hgroup',
          'html',
          'i',
          'iframe',
          'img',
          'input',
          'ins',
          'kbd',
          'label',
          'legend',
          'li',
          'main',
          'mark',
          'menu',
          'nav',
          'object',
          'ol',
          'p',
          'q',
          'quote',
          'samp',
          'section',
          'span',
          'strong',
          'summary',
          'sup',
          'table',
          'tbody',
          'td',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'time',
          'tr',
          'ul',
          'var',
          'video'
        ];
 
        const MEDIA_FEATURES = [
          'any-hover',
          'any-pointer',
          'aspect-ratio',
          'color',
          'color-gamut',
          'color-index',
          'device-aspect-ratio',
          'device-height',
          'device-width',
          'display-mode',
          'forced-colors',
          'grid',
          'height',
          'hover',
          'inverted-colors',
          'monochrome',
          'orientation',
          'overflow-block',
          'overflow-inline',
          'pointer',
          'prefers-color-scheme',
          'prefers-contrast',
          'prefers-reduced-motion',
          'prefers-reduced-transparency',
          'resolution',
          'scan',
          'scripting',
          'update',
          'width',
          // TODO: find a better solution?
          'min-width',
          'max-width',
          'min-height',
          'max-height'
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes
        const PSEUDO_CLASSES = [
          'active',
          'any-link',
          'blank',
          'checked',
          'current',
          'default',
          'defined',
          'dir', // dir()
          'disabled',
          'drop',
          'empty',
          'enabled',
          'first',
          'first-child',
          'first-of-type',
          'fullscreen',
          'future',
          'focus',
          'focus-visible',
          'focus-within',
          'has', // has()
          'host', // host or host()
          'host-context', // host-context()
          'hover',
          'indeterminate',
          'in-range',
          'invalid',
          'is', // is()
          'lang', // lang()
          'last-child',
          'last-of-type',
          'left',
          'link',
          'local-link',
          'not', // not()
          'nth-child', // nth-child()
          'nth-col', // nth-col()
          'nth-last-child', // nth-last-child()
          'nth-last-col', // nth-last-col()
          'nth-last-of-type', //nth-last-of-type()
          'nth-of-type', //nth-of-type()
          'only-child',
          'only-of-type',
          'optional',
          'out-of-range',
          'past',
          'placeholder-shown',
          'read-only',
          'read-write',
          'required',
          'right',
          'root',
          'scope',
          'target',
          'target-within',
          'user-invalid',
          'valid',
          'visited',
          'where' // where()
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements
        const PSEUDO_ELEMENTS = [
          'after',
          'backdrop',
          'before',
          'cue',
          'cue-region',
          'first-letter',
          'first-line',
          'grammar-error',
          'marker',
          'part',
          'placeholder',
          'selection',
          'slotted',
          'spelling-error'
        ];
 
        const ATTRIBUTES = [
          'align-content',
          'align-items',
          'align-self',
          'all',
          'animation',
          'animation-delay',
          'animation-direction',
          'animation-duration',
          'animation-fill-mode',
          'animation-iteration-count',
          'animation-name',
          'animation-play-state',
          'animation-timing-function',
          'backface-visibility',
          'background',
          'background-attachment',
          'background-blend-mode',
          'background-clip',
          'background-color',
          'background-image',
          'background-origin',
          'background-position',
          'background-repeat',
          'background-size',
          'block-size',
          'border',
          'border-block',
          'border-block-color',
          'border-block-end',
          'border-block-end-color',
          'border-block-end-style',
          'border-block-end-width',
          'border-block-start',
          'border-block-start-color',
          'border-block-start-style',
          'border-block-start-width',
          'border-block-style',
          'border-block-width',
          'border-bottom',
          'border-bottom-color',
          'border-bottom-left-radius',
          'border-bottom-right-radius',
          'border-bottom-style',
          'border-bottom-width',
          'border-collapse',
          'border-color',
          'border-image',
          'border-image-outset',
          'border-image-repeat',
          'border-image-slice',
          'border-image-source',
          'border-image-width',
          'border-inline',
          'border-inline-color',
          'border-inline-end',
          'border-inline-end-color',
          'border-inline-end-style',
          'border-inline-end-width',
          'border-inline-start',
          'border-inline-start-color',
          'border-inline-start-style',
          'border-inline-start-width',
          'border-inline-style',
          'border-inline-width',
          'border-left',
          'border-left-color',
          'border-left-style',
          'border-left-width',
          'border-radius',
          'border-right',
          'border-right-color',
          'border-right-style',
          'border-right-width',
          'border-spacing',
          'border-style',
          'border-top',
          'border-top-color',
          'border-top-left-radius',
          'border-top-right-radius',
          'border-top-style',
          'border-top-width',
          'border-width',
          'bottom',
          'box-decoration-break',
          'box-shadow',
          'box-sizing',
          'break-after',
          'break-before',
          'break-inside',
          'caption-side',
          'caret-color',
          'clear',
          'clip',
          'clip-path',
          'clip-rule',
          'color',
          'column-count',
          'column-fill',
          'column-gap',
          'column-rule',
          'column-rule-color',
          'column-rule-style',
          'column-rule-width',
          'column-span',
          'column-width',
          'columns',
          'contain',
          'content',
          'content-visibility',
          'counter-increment',
          'counter-reset',
          'cue',
          'cue-after',
          'cue-before',
          'cursor',
          'direction',
          'display',
          'empty-cells',
          'filter',
          'flex',
          'flex-basis',
          'flex-direction',
          'flex-flow',
          'flex-grow',
          'flex-shrink',
          'flex-wrap',
          'float',
          'flow',
          'font',
          'font-display',
          'font-family',
          'font-feature-settings',
          'font-kerning',
          'font-language-override',
          'font-size',
          'font-size-adjust',
          'font-smoothing',
          'font-stretch',
          'font-style',
          'font-synthesis',
          'font-variant',
          'font-variant-caps',
          'font-variant-east-asian',
          'font-variant-ligatures',
          'font-variant-numeric',
          'font-variant-position',
          'font-variation-settings',
          'font-weight',
          'gap',
          'glyph-orientation-vertical',
          'grid',
          'grid-area',
          'grid-auto-columns',
          'grid-auto-flow',
          'grid-auto-rows',
          'grid-column',
          'grid-column-end',
          'grid-column-start',
          'grid-gap',
          'grid-row',
          'grid-row-end',
          'grid-row-start',
          'grid-template',
          'grid-template-areas',
          'grid-template-columns',
          'grid-template-rows',
          'hanging-punctuation',
          'height',
          'hyphens',
          'icon',
          'image-orientation',
          'image-rendering',
          'image-resolution',
          'ime-mode',
          'inline-size',
          'isolation',
          'justify-content',
          'left',
          'letter-spacing',
          'line-break',
          'line-height',
          'list-style',
          'list-style-image',
          'list-style-position',
          'list-style-type',
          'margin',
          'margin-block',
          'margin-block-end',
          'margin-block-start',
          'margin-bottom',
          'margin-inline',
          'margin-inline-end',
          'margin-inline-start',
          'margin-left',
          'margin-right',
          'margin-top',
          'marks',
          'mask',
          'mask-border',
          'mask-border-mode',
          'mask-border-outset',
          'mask-border-repeat',
          'mask-border-slice',
          'mask-border-source',
          'mask-border-width',
          'mask-clip',
          'mask-composite',
          'mask-image',
          'mask-mode',
          'mask-origin',
          'mask-position',
          'mask-repeat',
          'mask-size',
          'mask-type',
          'max-block-size',
          'max-height',
          'max-inline-size',
          'max-width',
          'min-block-size',
          'min-height',
          'min-inline-size',
          'min-width',
          'mix-blend-mode',
          'nav-down',
          'nav-index',
          'nav-left',
          'nav-right',
          'nav-up',
          'none',
          'normal',
          'object-fit',
          'object-position',
          'opacity',
          'order',
          'orphans',
          'outline',
          'outline-color',
          'outline-offset',
          'outline-style',
          'outline-width',
          'overflow',
          'overflow-wrap',
          'overflow-x',
          'overflow-y',
          'padding',
          'padding-block',
          'padding-block-end',
          'padding-block-start',
          'padding-bottom',
          'padding-inline',
          'padding-inline-end',
          'padding-inline-start',
          'padding-left',
          'padding-right',
          'padding-top',
          'page-break-after',
          'page-break-before',
          'page-break-inside',
          'pause',
          'pause-after',
          'pause-before',
          'perspective',
          'perspective-origin',
          'pointer-events',
          'position',
          'quotes',
          'resize',
          'rest',
          'rest-after',
          'rest-before',
          'right',
          'row-gap',
          'scroll-margin',
          'scroll-margin-block',
          'scroll-margin-block-end',
          'scroll-margin-block-start',
          'scroll-margin-bottom',
          'scroll-margin-inline',
          'scroll-margin-inline-end',
          'scroll-margin-inline-start',
          'scroll-margin-left',
          'scroll-margin-right',
          'scroll-margin-top',
          'scroll-padding',
          'scroll-padding-block',
          'scroll-padding-block-end',
          'scroll-padding-block-start',
          'scroll-padding-bottom',
          'scroll-padding-inline',
          'scroll-padding-inline-end',
          'scroll-padding-inline-start',
          'scroll-padding-left',
          'scroll-padding-right',
          'scroll-padding-top',
          'scroll-snap-align',
          'scroll-snap-stop',
          'scroll-snap-type',
          'scrollbar-color',
          'scrollbar-gutter',
          'scrollbar-width',
          'shape-image-threshold',
          'shape-margin',
          'shape-outside',
          'speak',
          'speak-as',
          'src', // @font-face
          'tab-size',
          'table-layout',
          'text-align',
          'text-align-all',
          'text-align-last',
          'text-combine-upright',
          'text-decoration',
          'text-decoration-color',
          'text-decoration-line',
          'text-decoration-style',
          'text-emphasis',
          'text-emphasis-color',
          'text-emphasis-position',
          'text-emphasis-style',
          'text-indent',
          'text-justify',
          'text-orientation',
          'text-overflow',
          'text-rendering',
          'text-shadow',
          'text-transform',
          'text-underline-position',
          'top',
          'transform',
          'transform-box',
          'transform-origin',
          'transform-style',
          'transition',
          'transition-delay',
          'transition-duration',
          'transition-property',
          'transition-timing-function',
          'unicode-bidi',
          'vertical-align',
          'visibility',
          'voice-balance',
          'voice-duration',
          'voice-family',
          'voice-pitch',
          'voice-range',
          'voice-rate',
          'voice-stress',
          'voice-volume',
          'white-space',
          'widows',
          'width',
          'will-change',
          'word-break',
          'word-spacing',
          'word-wrap',
          'writing-mode',
          'z-index'
          // reverse makes sure longer attributes `font-weight` are matched fully
          // instead of getting false positives on say `font`
        ].reverse();
 
        /*
        Language: Stylus
        Author: Bryant Williams <b.n.williams@gmail.com>
        Description: Stylus is an expressive, robust, feature-rich CSS language built for nodejs.
        Website: https://github.com/stylus/stylus
        Category: css, web
        */
 
        /** @type LanguageFn */
        function stylus(hljs) {
          const modes = MODES(hljs);
 
          const AT_MODIFIERS = "and or not only";
          const VARIABLE = {
            className: 'variable',
            begin: '\\$' + hljs.IDENT_RE
          };
 
          const AT_KEYWORDS = [
            'charset',
            'css',
            'debug',
            'extend',
            'font-face',
            'for',
            'import',
            'include',
            'keyframes',
            'media',
            'mixin',
            'page',
            'warn',
            'while'
          ];
 
          const LOOKAHEAD_TAG_END = '(?=[.\\s\\n[:,(])';
 
          // illegals
          const ILLEGAL = [
            '\\?',
            '(\\bReturn\\b)', // monkey
            '(\\bEnd\\b)', // monkey
            '(\\bend\\b)', // vbscript
            '(\\bdef\\b)', // gradle
            ';', // a whole lot of languages
            '#\\s', // markdown
            '\\*\\s', // markdown
            '===\\s', // markdown
            '\\|',
            '%' // prolog
          ];
 
          return {
            name: 'Stylus',
            aliases: [ 'styl' ],
            case_insensitive: false,
            keywords: 'if else for in',
            illegal: '(' + ILLEGAL.join('|') + ')',
            contains: [
 
              // strings
              hljs.QUOTE_STRING_MODE,
              hljs.APOS_STRING_MODE,
 
              // comments
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
 
              // hex colors
              modes.HEXCOLOR,
 
              // class tag
              {
                begin: '\\.[a-zA-Z][a-zA-Z0-9_-]*' + LOOKAHEAD_TAG_END,
                className: 'selector-class'
              },
 
              // id tag
              {
                begin: '#[a-zA-Z][a-zA-Z0-9_-]*' + LOOKAHEAD_TAG_END,
                className: 'selector-id'
              },
 
              // tags
              {
                begin: '\\b(' + TAGS.join('|') + ')' + LOOKAHEAD_TAG_END,
                className: 'selector-tag'
              },
 
              // psuedo selectors
              {
                className: 'selector-pseudo',
                begin: '&?:(' + PSEUDO_CLASSES.join('|') + ')' + LOOKAHEAD_TAG_END
              },
              {
                className: 'selector-pseudo',
                begin: '&?:(:)?(' + PSEUDO_ELEMENTS.join('|') + ')' + LOOKAHEAD_TAG_END
              },
 
              modes.ATTRIBUTE_SELECTOR_MODE,
 
              {
                className: "keyword",
                begin: /@media/,
                starts: {
                  end: /[{;}]/,
                  keywords: {
                    $pattern: /[a-z-]+/,
                    keyword: AT_MODIFIERS,
                    attribute: MEDIA_FEATURES.join(" ")
                  },
                  contains: [ modes.CSS_NUMBER_MODE ]
                }
              },
 
              // @ keywords
              {
                className: 'keyword',
                begin: '\@((-(o|moz|ms|webkit)-)?(' + AT_KEYWORDS.join('|') + '))\\b'
              },
 
              // variables
              VARIABLE,
 
              // dimension
              modes.CSS_NUMBER_MODE,
 
              // functions
              //  - only from beginning of line + whitespace
              {
                className: 'function',
                begin: '^[a-zA-Z][a-zA-Z0-9_\-]*\\(.*\\)',
                illegal: '[\\n]',
                returnBegin: true,
                contains: [
                  {
                    className: 'title',
                    begin: '\\b[a-zA-Z][a-zA-Z0-9_\-]*'
                  },
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    contains: [
                      modes.HEXCOLOR,
                      VARIABLE,
                      hljs.APOS_STRING_MODE,
                      modes.CSS_NUMBER_MODE,
                      hljs.QUOTE_STRING_MODE
                    ]
                  }
                ]
              },
 
              // css variables
              modes.CSS_VARIABLE,
 
              // attributes
              //  - only from beginning of line + whitespace
              //  - must have whitespace after it
              {
                className: 'attribute',
                begin: '\\b(' + ATTRIBUTES.join('|') + ')\\b',
                starts: {
                  // value container
                  end: /;|$/,
                  contains: [
                    modes.HEXCOLOR,
                    VARIABLE,
                    hljs.APOS_STRING_MODE,
                    hljs.QUOTE_STRING_MODE,
                    modes.CSS_NUMBER_MODE,
                    hljs.C_BLOCK_COMMENT_MODE,
                    modes.IMPORTANT,
                    modes.FUNCTION_DISPATCH
                  ],
                  illegal: /\./,
                  relevance: 0
                }
              },
              modes.FUNCTION_DISPATCH
            ]
          };
        }
 
        stylus_1 = stylus;
        return stylus_1;
    }
 
    /*
    Language: SubUnit
    Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
    Website: https://pypi.org/project/python-subunit/
    */
 
    var subunit_1;
    var hasRequiredSubunit;
 
    function requireSubunit () {
        if (hasRequiredSubunit) return subunit_1;
        hasRequiredSubunit = 1;
        function subunit(hljs) {
          const DETAILS = {
            className: 'string',
            begin: '\\[\n(multipart)?',
            end: '\\]\n'
          };
          const TIME = {
            className: 'string',
            begin: '\\d{4}-\\d{2}-\\d{2}(\\s+)\\d{2}:\\d{2}:\\d{2}\.\\d+Z'
          };
          const PROGRESSVALUE = {
            className: 'string',
            begin: '(\\+|-)\\d+'
          };
          const KEYWORDS = {
            className: 'keyword',
            relevance: 10,
            variants: [
              { begin: '^(test|testing|success|successful|failure|error|skip|xfail|uxsuccess)(:?)\\s+(test)?' },
              { begin: '^progress(:?)(\\s+)?(pop|push)?' },
              { begin: '^tags:' },
              { begin: '^time:' }
            ]
          };
          return {
            name: 'SubUnit',
            case_insensitive: true,
            contains: [
              DETAILS,
              TIME,
              PROGRESSVALUE,
              KEYWORDS
            ]
          };
        }
 
        subunit_1 = subunit;
        return subunit_1;
    }
 
    /**
     * @param {string} value
     * @returns {RegExp}
     * */
 
    var swift_1;
    var hasRequiredSwift;
 
    function requireSwift () {
        if (hasRequiredSwift) return swift_1;
        hasRequiredSwift = 1;
        /**
         * @param {RegExp | string } re
         * @returns {string}
         */
        function source(re) {
          if (!re) return null;
          if (typeof re === "string") return re;
 
          return re.source;
        }
 
        /**
         * @param {RegExp | string } re
         * @returns {string}
         */
        function lookahead(re) {
          return concat('(?=', re, ')');
        }
 
        /**
         * @param {...(RegExp | string) } args
         * @returns {string}
         */
        function concat(...args) {
          const joined = args.map((x) => source(x)).join("");
          return joined;
        }
 
        /**
         * @param { Array<string | RegExp | Object> } args
         * @returns {object}
         */
        function stripOptionsFromArgs(args) {
          const opts = args[args.length - 1];
 
          if (typeof opts === 'object' && opts.constructor === Object) {
            args.splice(args.length - 1, 1);
            return opts;
          } else {
            return {};
          }
        }
 
        /** @typedef { {capture?: boolean} } RegexEitherOptions */
 
        /**
         * Any of the passed expresssions may match
         *
         * Creates a huge this | this | that | that match
         * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args
         * @returns {string}
         */
        function either(...args) {
          /** @type { object & {capture?: boolean} }  */
          const opts = stripOptionsFromArgs(args);
          const joined = '('
            + (opts.capture ? "" : "?:")
            + args.map((x) => source(x)).join("|") + ")";
          return joined;
        }
 
        const keywordWrapper = keyword => concat(
          /\b/,
          keyword,
          /\w$/.test(keyword) ? /\b/ : /\B/
        );
 
        // Keywords that require a leading dot.
        const dotKeywords = [
          'Protocol', // contextual
          'Type' // contextual
        ].map(keywordWrapper);
 
        // Keywords that may have a leading dot.
        const optionalDotKeywords = [
          'init',
          'self'
        ].map(keywordWrapper);
 
        // should register as keyword, not type
        const keywordTypes = [
          'Any',
          'Self'
        ];
 
        // Regular keywords and literals.
        const keywords = [
          // strings below will be fed into the regular `keywords` engine while regex
          // will result in additional modes being created to scan for those keywords to
          // avoid conflicts with other rules
          'actor',
          'any', // contextual
          'associatedtype',
          'async',
          'await',
          /as\?/, // operator
          /as!/, // operator
          'as', // operator
          'break',
          'case',
          'catch',
          'class',
          'continue',
          'convenience', // contextual
          'default',
          'defer',
          'deinit',
          'didSet', // contextual
          'distributed',
          'do',
          'dynamic', // contextual
          'else',
          'enum',
          'extension',
          'fallthrough',
          /fileprivate\(set\)/,
          'fileprivate',
          'final', // contextual
          'for',
          'func',
          'get', // contextual
          'guard',
          'if',
          'import',
          'indirect', // contextual
          'infix', // contextual
          /init\?/,
          /init!/,
          'inout',
          /internal\(set\)/,
          'internal',
          'in',
          'is', // operator
          'isolated', // contextual
          'nonisolated', // contextual
          'lazy', // contextual
          'let',
          'mutating', // contextual
          'nonmutating', // contextual
          /open\(set\)/, // contextual
          'open', // contextual
          'operator',
          'optional', // contextual
          'override', // contextual
          'postfix', // contextual
          'precedencegroup',
          'prefix', // contextual
          /private\(set\)/,
          'private',
          'protocol',
          /public\(set\)/,
          'public',
          'repeat',
          'required', // contextual
          'rethrows',
          'return',
          'set', // contextual
          'some', // contextual
          'static',
          'struct',
          'subscript',
          'super',
          'switch',
          'throws',
          'throw',
          /try\?/, // operator
          /try!/, // operator
          'try', // operator
          'typealias',
          /unowned\(safe\)/, // contextual
          /unowned\(unsafe\)/, // contextual
          'unowned', // contextual
          'var',
          'weak', // contextual
          'where',
          'while',
          'willSet' // contextual
        ];
 
        // NOTE: Contextual keywords are reserved only in specific contexts.
        // Ideally, these should be matched using modes to avoid false positives.
 
        // Literals.
        const literals = [
          'false',
          'nil',
          'true'
        ];
 
        // Keywords used in precedence groups.
        const precedencegroupKeywords = [
          'assignment',
          'associativity',
          'higherThan',
          'left',
          'lowerThan',
          'none',
          'right'
        ];
 
        // Keywords that start with a number sign (#).
        // #(un)available is handled separately.
        const numberSignKeywords = [
          '#colorLiteral',
          '#column',
          '#dsohandle',
          '#else',
          '#elseif',
          '#endif',
          '#error',
          '#file',
          '#fileID',
          '#fileLiteral',
          '#filePath',
          '#function',
          '#if',
          '#imageLiteral',
          '#keyPath',
          '#line',
          '#selector',
          '#sourceLocation',
          '#warn_unqualified_access',
          '#warning'
        ];
 
        // Global functions in the Standard Library.
        const builtIns = [
          'abs',
          'all',
          'any',
          'assert',
          'assertionFailure',
          'debugPrint',
          'dump',
          'fatalError',
          'getVaList',
          'isKnownUniquelyReferenced',
          'max',
          'min',
          'numericCast',
          'pointwiseMax',
          'pointwiseMin',
          'precondition',
          'preconditionFailure',
          'print',
          'readLine',
          'repeatElement',
          'sequence',
          'stride',
          'swap',
          'swift_unboxFromSwiftValueWithType',
          'transcode',
          'type',
          'unsafeBitCast',
          'unsafeDowncast',
          'withExtendedLifetime',
          'withUnsafeMutablePointer',
          'withUnsafePointer',
          'withVaList',
          'withoutActuallyEscaping',
          'zip'
        ];
 
        // Valid first characters for operators.
        const operatorHead = either(
          /[/=\-+!*%<>&|^~?]/,
          /[\u00A1-\u00A7]/,
          /[\u00A9\u00AB]/,
          /[\u00AC\u00AE]/,
          /[\u00B0\u00B1]/,
          /[\u00B6\u00BB\u00BF\u00D7\u00F7]/,
          /[\u2016-\u2017]/,
          /[\u2020-\u2027]/,
          /[\u2030-\u203E]/,
          /[\u2041-\u2053]/,
          /[\u2055-\u205E]/,
          /[\u2190-\u23FF]/,
          /[\u2500-\u2775]/,
          /[\u2794-\u2BFF]/,
          /[\u2E00-\u2E7F]/,
          /[\u3001-\u3003]/,
          /[\u3008-\u3020]/,
          /[\u3030]/
        );
 
        // Valid characters for operators.
        const operatorCharacter = either(
          operatorHead,
          /[\u0300-\u036F]/,
          /[\u1DC0-\u1DFF]/,
          /[\u20D0-\u20FF]/,
          /[\uFE00-\uFE0F]/,
          /[\uFE20-\uFE2F]/
          // TODO: The following characters are also allowed, but the regex isn't supported yet.
          // /[\u{E0100}-\u{E01EF}]/u
        );
 
        // Valid operator.
        const operator = concat(operatorHead, operatorCharacter, '*');
 
        // Valid first characters for identifiers.
        const identifierHead = either(
          /[a-zA-Z_]/,
          /[\u00A8\u00AA\u00AD\u00AF\u00B2-\u00B5\u00B7-\u00BA]/,
          /[\u00BC-\u00BE\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u00FF]/,
          /[\u0100-\u02FF\u0370-\u167F\u1681-\u180D\u180F-\u1DBF]/,
          /[\u1E00-\u1FFF]/,
          /[\u200B-\u200D\u202A-\u202E\u203F-\u2040\u2054\u2060-\u206F]/,
          /[\u2070-\u20CF\u2100-\u218F\u2460-\u24FF\u2776-\u2793]/,
          /[\u2C00-\u2DFF\u2E80-\u2FFF]/,
          /[\u3004-\u3007\u3021-\u302F\u3031-\u303F\u3040-\uD7FF]/,
          /[\uF900-\uFD3D\uFD40-\uFDCF\uFDF0-\uFE1F\uFE30-\uFE44]/,
          /[\uFE47-\uFEFE\uFF00-\uFFFD]/ // Should be /[\uFE47-\uFFFD]/, but we have to exclude FEFF.
          // The following characters are also allowed, but the regexes aren't supported yet.
          // /[\u{10000}-\u{1FFFD}\u{20000-\u{2FFFD}\u{30000}-\u{3FFFD}\u{40000}-\u{4FFFD}]/u,
          // /[\u{50000}-\u{5FFFD}\u{60000-\u{6FFFD}\u{70000}-\u{7FFFD}\u{80000}-\u{8FFFD}]/u,
          // /[\u{90000}-\u{9FFFD}\u{A0000-\u{AFFFD}\u{B0000}-\u{BFFFD}\u{C0000}-\u{CFFFD}]/u,
          // /[\u{D0000}-\u{DFFFD}\u{E0000-\u{EFFFD}]/u
        );
 
        // Valid characters for identifiers.
        const identifierCharacter = either(
          identifierHead,
          /\d/,
          /[\u0300-\u036F\u1DC0-\u1DFF\u20D0-\u20FF\uFE20-\uFE2F]/
        );
 
        // Valid identifier.
        const identifier = concat(identifierHead, identifierCharacter, '*');
 
        // Valid type identifier.
        const typeIdentifier = concat(/[A-Z]/, identifierCharacter, '*');
 
        // Built-in attributes, which are highlighted as keywords.
        // @available is handled separately.
        const keywordAttributes = [
          'autoclosure',
          concat(/convention\(/, either('swift', 'block', 'c'), /\)/),
          'discardableResult',
          'dynamicCallable',
          'dynamicMemberLookup',
          'escaping',
          'frozen',
          'GKInspectable',
          'IBAction',
          'IBDesignable',
          'IBInspectable',
          'IBOutlet',
          'IBSegueAction',
          'inlinable',
          'main',
          'nonobjc',
          'NSApplicationMain',
          'NSCopying',
          'NSManaged',
          concat(/objc\(/, identifier, /\)/),
          'objc',
          'objcMembers',
          'propertyWrapper',
          'requires_stored_property_inits',
          'resultBuilder',
          'testable',
          'UIApplicationMain',
          'unknown',
          'usableFromInline'
        ];
 
        // Contextual keywords used in @available and #(un)available.
        const availabilityKeywords = [
          'iOS',
          'iOSApplicationExtension',
          'macOS',
          'macOSApplicationExtension',
          'macCatalyst',
          'macCatalystApplicationExtension',
          'watchOS',
          'watchOSApplicationExtension',
          'tvOS',
          'tvOSApplicationExtension',
          'swift'
        ];
 
        /*
        Language: Swift
        Description: Swift is a general-purpose programming language built using a modern approach to safety, performance, and software design patterns.
        Author: Steven Van Impe <steven.vanimpe@icloud.com>
        Contributors: Chris Eidhof <chris@eidhof.nl>, Nate Cook <natecook@gmail.com>, Alexander Lichter <manniL@gmx.net>, Richard Gibson <gibson042@github>
        Website: https://swift.org
        Category: common, system
        */
 
        /** @type LanguageFn */
        function swift(hljs) {
          const WHITESPACE = {
            match: /\s+/,
            relevance: 0
          };
          // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID411
          const BLOCK_COMMENT = hljs.COMMENT(
            '/\\*',
            '\\*/',
            { contains: [ 'self' ] }
          );
          const COMMENTS = [
            hljs.C_LINE_COMMENT_MODE,
            BLOCK_COMMENT
          ];
 
          // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID413
          // https://docs.swift.org/swift-book/ReferenceManual/zzSummaryOfTheGrammar.html
          const DOT_KEYWORD = {
            match: [
              /\./,
              either(...dotKeywords, ...optionalDotKeywords)
            ],
            className: { 2: "keyword" }
          };
          const KEYWORD_GUARD = {
            // Consume .keyword to prevent highlighting properties and methods as keywords.
            match: concat(/\./, either(...keywords)),
            relevance: 0
          };
          const PLAIN_KEYWORDS = keywords
            .filter(kw => typeof kw === 'string')
            .concat([ "_|0" ]); // seems common, so 0 relevance
          const REGEX_KEYWORDS = keywords
            .filter(kw => typeof kw !== 'string') // find regex
            .concat(keywordTypes)
            .map(keywordWrapper);
          const KEYWORD = { variants: [
            {
              className: 'keyword',
              match: either(...REGEX_KEYWORDS, ...optionalDotKeywords)
            }
          ] };
          // find all the regular keywords
          const KEYWORDS = {
            $pattern: either(
              /\b\w+/, // regular keywords
              /#\w+/ // number keywords
            ),
            keyword: PLAIN_KEYWORDS
              .concat(numberSignKeywords),
            literal: literals
          };
          const KEYWORD_MODES = [
            DOT_KEYWORD,
            KEYWORD_GUARD,
            KEYWORD
          ];
 
          // https://github.com/apple/swift/tree/main/stdlib/public/core
          const BUILT_IN_GUARD = {
            // Consume .built_in to prevent highlighting properties and methods.
            match: concat(/\./, either(...builtIns)),
            relevance: 0
          };
          const BUILT_IN = {
            className: 'built_in',
            match: concat(/\b/, either(...builtIns), /(?=\()/)
          };
          const BUILT_INS = [
            BUILT_IN_GUARD,
            BUILT_IN
          ];
 
          // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418
          const OPERATOR_GUARD = {
            // Prevent -> from being highlighting as an operator.
            match: /->/,
            relevance: 0
          };
          const OPERATOR = {
            className: 'operator',
            relevance: 0,
            variants: [
              { match: operator },
              {
                // dot-operator: only operators that start with a dot are allowed to use dots as
                // characters (..., ...<, .*, etc). So there rule here is: a dot followed by one or more
                // characters that may also include dots.
                match: `\\.(\\.|${operatorCharacter})+` }
            ]
          };
          const OPERATORS = [
            OPERATOR_GUARD,
            OPERATOR
          ];
 
          // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_numeric-literal
          // TODO: Update for leading `-` after lookbehind is supported everywhere
          const decimalDigits = '([0-9]_*)+';
          const hexDigits = '([0-9a-fA-F]_*)+';
          const NUMBER = {
            className: 'number',
            relevance: 0,
            variants: [
              // decimal floating-point-literal (subsumes decimal-literal)
              { match: `\\b(${decimalDigits})(\\.(${decimalDigits}))?` + `([eE][+-]?(${decimalDigits}))?\\b` },
              // hexadecimal floating-point-literal (subsumes hexadecimal-literal)
              { match: `\\b0x(${hexDigits})(\\.(${hexDigits}))?` + `([pP][+-]?(${decimalDigits}))?\\b` },
              // octal-literal
              { match: /\b0o([0-7]_*)+\b/ },
              // binary-literal
              { match: /\b0b([01]_*)+\b/ }
            ]
          };
 
          // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#grammar_string-literal
          const ESCAPED_CHARACTER = (rawDelimiter = "") => ({
            className: 'subst',
            variants: [
              { match: concat(/\\/, rawDelimiter, /[0\\tnr"']/) },
              { match: concat(/\\/, rawDelimiter, /u\{[0-9a-fA-F]{1,8}\}/) }
            ]
          });
          const ESCAPED_NEWLINE = (rawDelimiter = "") => ({
            className: 'subst',
            match: concat(/\\/, rawDelimiter, /[\t ]*(?:[\r\n]|\r\n)/)
          });
          const INTERPOLATION = (rawDelimiter = "") => ({
            className: 'subst',
            label: "interpol",
            begin: concat(/\\/, rawDelimiter, /\(/),
            end: /\)/
          });
          const MULTILINE_STRING = (rawDelimiter = "") => ({
            begin: concat(rawDelimiter, /"""/),
            end: concat(/"""/, rawDelimiter),
            contains: [
              ESCAPED_CHARACTER(rawDelimiter),
              ESCAPED_NEWLINE(rawDelimiter),
              INTERPOLATION(rawDelimiter)
            ]
          });
          const SINGLE_LINE_STRING = (rawDelimiter = "") => ({
            begin: concat(rawDelimiter, /"/),
            end: concat(/"/, rawDelimiter),
            contains: [
              ESCAPED_CHARACTER(rawDelimiter),
              INTERPOLATION(rawDelimiter)
            ]
          });
          const STRING = {
            className: 'string',
            variants: [
              MULTILINE_STRING(),
              MULTILINE_STRING("#"),
              MULTILINE_STRING("##"),
              MULTILINE_STRING("###"),
              SINGLE_LINE_STRING(),
              SINGLE_LINE_STRING("#"),
              SINGLE_LINE_STRING("##"),
              SINGLE_LINE_STRING("###")
            ]
          };
 
          // https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID412
          const QUOTED_IDENTIFIER = { match: concat(/`/, identifier, /`/) };
          const IMPLICIT_PARAMETER = {
            className: 'variable',
            match: /\$\d+/
          };
          const PROPERTY_WRAPPER_PROJECTION = {
            className: 'variable',
            match: `\\$${identifierCharacter}+`
          };
          const IDENTIFIERS = [
            QUOTED_IDENTIFIER,
            IMPLICIT_PARAMETER,
            PROPERTY_WRAPPER_PROJECTION
          ];
 
          // https://docs.swift.org/swift-book/ReferenceManual/Attributes.html
          const AVAILABLE_ATTRIBUTE = {
            match: /(@|#(un)?)available/,
            className: "keyword",
            starts: { contains: [
              {
                begin: /\(/,
                end: /\)/,
                keywords: availabilityKeywords,
                contains: [
                  ...OPERATORS,
                  NUMBER,
                  STRING
                ]
              }
            ] }
          };
          const KEYWORD_ATTRIBUTE = {
            className: 'keyword',
            match: concat(/@/, either(...keywordAttributes))
          };
          const USER_DEFINED_ATTRIBUTE = {
            className: 'meta',
            match: concat(/@/, identifier)
          };
          const ATTRIBUTES = [
            AVAILABLE_ATTRIBUTE,
            KEYWORD_ATTRIBUTE,
            USER_DEFINED_ATTRIBUTE
          ];
 
          // https://docs.swift.org/swift-book/ReferenceManual/Types.html
          const TYPE = {
            match: lookahead(/\b[A-Z]/),
            relevance: 0,
            contains: [
              { // Common Apple frameworks, for relevance boost
                className: 'type',
                match: concat(/(AV|CA|CF|CG|CI|CL|CM|CN|CT|MK|MP|MTK|MTL|NS|SCN|SK|UI|WK|XC)/, identifierCharacter, '+')
              },
              { // Type identifier
                className: 'type',
                match: typeIdentifier,
                relevance: 0
              },
              { // Optional type
                match: /[?!]+/,
                relevance: 0
              },
              { // Variadic parameter
                match: /\.\.\./,
                relevance: 0
              },
              { // Protocol composition
                match: concat(/\s+&\s+/, lookahead(typeIdentifier)),
                relevance: 0
              }
            ]
          };
          const GENERIC_ARGUMENTS = {
            begin: /</,
            end: />/,
            keywords: KEYWORDS,
            contains: [
              ...COMMENTS,
              ...KEYWORD_MODES,
              ...ATTRIBUTES,
              OPERATOR_GUARD,
              TYPE
            ]
          };
          TYPE.contains.push(GENERIC_ARGUMENTS);
 
          // https://docs.swift.org/swift-book/ReferenceManual/Expressions.html#ID552
          // Prevents element names from being highlighted as keywords.
          const TUPLE_ELEMENT_NAME = {
            match: concat(identifier, /\s*:/),
            keywords: "_|0",
            relevance: 0
          };
          // Matches tuples as well as the parameter list of a function type.
          const TUPLE = {
            begin: /\(/,
            end: /\)/,
            relevance: 0,
            keywords: KEYWORDS,
            contains: [
              'self',
              TUPLE_ELEMENT_NAME,
              ...COMMENTS,
              ...KEYWORD_MODES,
              ...BUILT_INS,
              ...OPERATORS,
              NUMBER,
              STRING,
              ...IDENTIFIERS,
              ...ATTRIBUTES,
              TYPE
            ]
          };
 
          const GENERIC_PARAMETERS = {
            begin: /</,
            end: />/,
            contains: [
              ...COMMENTS,
              TYPE
            ]
          };
          const FUNCTION_PARAMETER_NAME = {
            begin: either(
              lookahead(concat(identifier, /\s*:/)),
              lookahead(concat(identifier, /\s+/, identifier, /\s*:/))
            ),
            end: /:/,
            relevance: 0,
            contains: [
              {
                className: 'keyword',
                match: /\b_\b/
              },
              {
                className: 'params',
                match: identifier
              }
            ]
          };
          const FUNCTION_PARAMETERS = {
            begin: /\(/,
            end: /\)/,
            keywords: KEYWORDS,
            contains: [
              FUNCTION_PARAMETER_NAME,
              ...COMMENTS,
              ...KEYWORD_MODES,
              ...OPERATORS,
              NUMBER,
              STRING,
              ...ATTRIBUTES,
              TYPE,
              TUPLE
            ],
            endsParent: true,
            illegal: /["']/
          };
          // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID362
          const FUNCTION = {
            match: [
              /func/,
              /\s+/,
              either(QUOTED_IDENTIFIER.match, identifier, operator)
            ],
            className: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              GENERIC_PARAMETERS,
              FUNCTION_PARAMETERS,
              WHITESPACE
            ],
            illegal: [
              /\[/,
              /%/
            ]
          };
 
          // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID375
          // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID379
          const INIT_SUBSCRIPT = {
            match: [
              /\b(?:subscript|init[?!]?)/,
              /\s*(?=[<(])/,
            ],
            className: { 1: "keyword" },
            contains: [
              GENERIC_PARAMETERS,
              FUNCTION_PARAMETERS,
              WHITESPACE
            ],
            illegal: /\[|%/
          };
          // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID380
          const OPERATOR_DECLARATION = {
            match: [
              /operator/,
              /\s+/,
              operator
            ],
            className: {
              1: "keyword",
              3: "title"
            }
          };
 
          // https://docs.swift.org/swift-book/ReferenceManual/Declarations.html#ID550
          const PRECEDENCEGROUP = {
            begin: [
              /precedencegroup/,
              /\s+/,
              typeIdentifier
            ],
            className: {
              1: "keyword",
              3: "title"
            },
            contains: [ TYPE ],
            keywords: [
              ...precedencegroupKeywords,
              ...literals
            ],
            end: /}/
          };
 
          // Add supported submodes to string interpolation.
          for (const variant of STRING.variants) {
            const interpolation = variant.contains.find(mode => mode.label === "interpol");
            // TODO: Interpolation can contain any expression, so there's room for improvement here.
            interpolation.keywords = KEYWORDS;
            const submodes = [
              ...KEYWORD_MODES,
              ...BUILT_INS,
              ...OPERATORS,
              NUMBER,
              STRING,
              ...IDENTIFIERS
            ];
            interpolation.contains = [
              ...submodes,
              {
                begin: /\(/,
                end: /\)/,
                contains: [
                  'self',
                  ...submodes
                ]
              }
            ];
          }
 
          return {
            name: 'Swift',
            keywords: KEYWORDS,
            contains: [
              ...COMMENTS,
              FUNCTION,
              INIT_SUBSCRIPT,
              {
                beginKeywords: 'struct protocol class extension enum actor',
                end: '\\{',
                excludeEnd: true,
                keywords: KEYWORDS,
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, {
                    className: "title.class",
                    begin: /[A-Za-z$_][\u00C0-\u02B80-9A-Za-z$_]*/
                  }),
                  ...KEYWORD_MODES
                ]
              },
              OPERATOR_DECLARATION,
              PRECEDENCEGROUP,
              {
                beginKeywords: 'import',
                end: /$/,
                contains: [ ...COMMENTS ],
                relevance: 0
              },
              ...KEYWORD_MODES,
              ...BUILT_INS,
              ...OPERATORS,
              NUMBER,
              STRING,
              ...IDENTIFIERS,
              ...ATTRIBUTES,
              TYPE,
              TUPLE
            ]
          };
        }
 
        swift_1 = swift;
        return swift_1;
    }
 
    /*
    Language: Tagger Script
    Author: Philipp Wolfer <ph.wolfer@gmail.com>
    Description: Syntax Highlighting for the Tagger Script as used by MusicBrainz Picard.
    Website: https://picard.musicbrainz.org
     */
 
    var taggerscript_1;
    var hasRequiredTaggerscript;
 
    function requireTaggerscript () {
        if (hasRequiredTaggerscript) return taggerscript_1;
        hasRequiredTaggerscript = 1;
        function taggerscript(hljs) {
          const NOOP = {
            className: 'comment',
            begin: /\$noop\(/,
            end: /\)/,
            contains: [
              { begin: /\\[()]/ },
              {
                begin: /\(/,
                end: /\)/,
                contains: [
                  { begin: /\\[()]/ },
                  'self'
                ]
              }
            ],
            relevance: 10
          };
 
          const FUNCTION = {
            className: 'keyword',
            begin: /\$[_a-zA-Z0-9]+(?=\()/
          };
 
          const VARIABLE = {
            className: 'variable',
            begin: /%[_a-zA-Z0-9:]+%/
          };
 
          const ESCAPE_SEQUENCE_UNICODE = {
            className: 'symbol',
            begin: /\\u[a-fA-F0-9]{4}/
          };
 
          const ESCAPE_SEQUENCE = {
            className: 'symbol',
            begin: /\\[\\nt$%,()]/
          };
 
          return {
            name: 'Tagger Script',
            contains: [
              NOOP,
              FUNCTION,
              VARIABLE,
              ESCAPE_SEQUENCE,
              ESCAPE_SEQUENCE_UNICODE
            ]
          };
        }
 
        taggerscript_1 = taggerscript;
        return taggerscript_1;
    }
 
    /*
    Language: YAML
    Description: Yet Another Markdown Language
    Author: Stefan Wienert <stwienert@gmail.com>
    Contributors: Carl Baxter <carl@cbax.tech>
    Requires: ruby.js
    Website: https://yaml.org
    Category: common, config
    */
 
    var yaml_1;
    var hasRequiredYaml;
 
    function requireYaml () {
        if (hasRequiredYaml) return yaml_1;
        hasRequiredYaml = 1;
        function yaml(hljs) {
          const LITERALS = 'true false yes no null';
 
          // YAML spec allows non-reserved URI characters in tags.
          const URI_CHARACTERS = '[\\w#;/?:@&=+$,.~*\'()[\\]]+';
 
          // Define keys as starting with a word character
          // ...containing word chars, spaces, colons, forward-slashes, hyphens and periods
          // ...and ending with a colon followed immediately by a space, tab or newline.
          // The YAML spec allows for much more than this, but this covers most use-cases.
          const KEY = {
            className: 'attr',
            variants: [
              { begin: '\\w[\\w :\\/.-]*:(?=[ \t]|$)' },
              { // double quoted keys
                begin: '"\\w[\\w :\\/.-]*":(?=[ \t]|$)' },
              { // single quoted keys
                begin: '\'\\w[\\w :\\/.-]*\':(?=[ \t]|$)' }
            ]
          };
 
          const TEMPLATE_VARIABLES = {
            className: 'template-variable',
            variants: [
              { // jinja templates Ansible
                begin: /\{\{/,
                end: /\}\}/
              },
              { // Ruby i18n
                begin: /%\{/,
                end: /\}/
              }
            ]
          };
          const STRING = {
            className: 'string',
            relevance: 0,
            variants: [
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /"/,
                end: /"/
              },
              { begin: /\S+/ }
            ],
            contains: [
              hljs.BACKSLASH_ESCAPE,
              TEMPLATE_VARIABLES
            ]
          };
 
          // Strings inside of value containers (objects) can't contain braces,
          // brackets, or commas
          const CONTAINER_STRING = hljs.inherit(STRING, { variants: [
            {
              begin: /'/,
              end: /'/
            },
            {
              begin: /"/,
              end: /"/
            },
            { begin: /[^\s,{}[\]]+/ }
          ] });
 
          const DATE_RE = '[0-9]{4}(-[0-9][0-9]){0,2}';
          const TIME_RE = '([Tt \\t][0-9][0-9]?(:[0-9][0-9]){2})?';
          const FRACTION_RE = '(\\.[0-9]*)?';
          const ZONE_RE = '([ \\t])*(Z|[-+][0-9][0-9]?(:[0-9][0-9])?)?';
          const TIMESTAMP = {
            className: 'number',
            begin: '\\b' + DATE_RE + TIME_RE + FRACTION_RE + ZONE_RE + '\\b'
          };
 
          const VALUE_CONTAINER = {
            end: ',',
            endsWithParent: true,
            excludeEnd: true,
            keywords: LITERALS,
            relevance: 0
          };
          const OBJECT = {
            begin: /\{/,
            end: /\}/,
            contains: [ VALUE_CONTAINER ],
            illegal: '\\n',
            relevance: 0
          };
          const ARRAY = {
            begin: '\\[',
            end: '\\]',
            contains: [ VALUE_CONTAINER ],
            illegal: '\\n',
            relevance: 0
          };
 
          const MODES = [
            KEY,
            {
              className: 'meta',
              begin: '^---\\s*$',
              relevance: 10
            },
            { // multi line string
              // Blocks start with a | or > followed by a newline
              //
              // Indentation of subsequent lines must be the same to
              // be considered part of the block
              className: 'string',
              begin: '[\\|>]([1-9]?[+-])?[ ]*\\n( +)[^ ][^\\n]*\\n(\\2[^\\n]+\\n?)*'
            },
            { // Ruby/Rails erb
              begin: '<%[%=-]?',
              end: '[%-]?%>',
              subLanguage: 'ruby',
              excludeBegin: true,
              excludeEnd: true,
              relevance: 0
            },
            { // named tags
              className: 'type',
              begin: '!\\w+!' + URI_CHARACTERS
            },
            // https://yaml.org/spec/1.2/spec.html#id2784064
            { // verbatim tags
              className: 'type',
              begin: '!<' + URI_CHARACTERS + ">"
            },
            { // primary tags
              className: 'type',
              begin: '!' + URI_CHARACTERS
            },
            { // secondary tags
              className: 'type',
              begin: '!!' + URI_CHARACTERS
            },
            { // fragment id &ref
              className: 'meta',
              begin: '&' + hljs.UNDERSCORE_IDENT_RE + '$'
            },
            { // fragment reference *ref
              className: 'meta',
              begin: '\\*' + hljs.UNDERSCORE_IDENT_RE + '$'
            },
            { // array listing
              className: 'bullet',
              // TODO: remove |$ hack when we have proper look-ahead support
              begin: '-(?=[ ]|$)',
              relevance: 0
            },
            hljs.HASH_COMMENT_MODE,
            {
              beginKeywords: LITERALS,
              keywords: { literal: LITERALS }
            },
            TIMESTAMP,
            // numbers are any valid C-style number that
            // sit isolated from other words
            {
              className: 'number',
              begin: hljs.C_NUMBER_RE + '\\b',
              relevance: 0
            },
            OBJECT,
            ARRAY,
            STRING
          ];
 
          const VALUE_MODES = [ ...MODES ];
          VALUE_MODES.pop();
          VALUE_MODES.push(CONTAINER_STRING);
          VALUE_CONTAINER.contains = VALUE_MODES;
 
          return {
            name: 'YAML',
            case_insensitive: true,
            aliases: [ 'yml' ],
            contains: MODES
          };
        }
 
        yaml_1 = yaml;
        return yaml_1;
    }
 
    /*
    Language: Test Anything Protocol
    Description: TAP, the Test Anything Protocol, is a simple text-based interface between testing modules in a test harness.
    Requires: yaml.js
    Author: Sergey Bronnikov <sergeyb@bronevichok.ru>
    Website: https://testanything.org
    */
 
    var tap_1;
    var hasRequiredTap;
 
    function requireTap () {
        if (hasRequiredTap) return tap_1;
        hasRequiredTap = 1;
        function tap(hljs) {
          return {
            name: 'Test Anything Protocol',
            case_insensitive: true,
            contains: [
              hljs.HASH_COMMENT_MODE,
              // version of format and total amount of testcases
              {
                className: 'meta',
                variants: [
                  { begin: '^TAP version (\\d+)$' },
                  { begin: '^1\\.\\.(\\d+)$' }
                ]
              },
              // YAML block
              {
                begin: /---$/,
                end: '\\.\\.\\.$',
                subLanguage: 'yaml',
                relevance: 0
              },
              // testcase number
              {
                className: 'number',
                begin: ' (\\d+) '
              },
              // testcase status and description
              {
                className: 'symbol',
                variants: [
                  { begin: '^ok' },
                  { begin: '^not ok' }
                ]
              }
            ]
          };
        }
 
        tap_1 = tap;
        return tap_1;
    }
 
    /*
    Language: Tcl
    Description: Tcl is a very simple programming language.
    Author: Radek Liska <radekliska@gmail.com>
    Website: https://www.tcl.tk/about/language.html
    */
 
    var tcl_1;
    var hasRequiredTcl;
 
    function requireTcl () {
        if (hasRequiredTcl) return tcl_1;
        hasRequiredTcl = 1;
        function tcl(hljs) {
          const regex = hljs.regex;
          const TCL_IDENT = /[a-zA-Z_][a-zA-Z0-9_]*/;
 
          const NUMBER = {
            className: 'number',
            variants: [
              hljs.BINARY_NUMBER_MODE,
              hljs.C_NUMBER_MODE
            ]
          };
 
          const KEYWORDS = [
            "after",
            "append",
            "apply",
            "array",
            "auto_execok",
            "auto_import",
            "auto_load",
            "auto_mkindex",
            "auto_mkindex_old",
            "auto_qualify",
            "auto_reset",
            "bgerror",
            "binary",
            "break",
            "catch",
            "cd",
            "chan",
            "clock",
            "close",
            "concat",
            "continue",
            "dde",
            "dict",
            "encoding",
            "eof",
            "error",
            "eval",
            "exec",
            "exit",
            "expr",
            "fblocked",
            "fconfigure",
            "fcopy",
            "file",
            "fileevent",
            "filename",
            "flush",
            "for",
            "foreach",
            "format",
            "gets",
            "glob",
            "global",
            "history",
            "http",
            "if",
            "incr",
            "info",
            "interp",
            "join",
            "lappend|10",
            "lassign|10",
            "lindex|10",
            "linsert|10",
            "list",
            "llength|10",
            "load",
            "lrange|10",
            "lrepeat|10",
            "lreplace|10",
            "lreverse|10",
            "lsearch|10",
            "lset|10",
            "lsort|10",
            "mathfunc",
            "mathop",
            "memory",
            "msgcat",
            "namespace",
            "open",
            "package",
            "parray",
            "pid",
            "pkg::create",
            "pkg_mkIndex",
            "platform",
            "platform::shell",
            "proc",
            "puts",
            "pwd",
            "read",
            "refchan",
            "regexp",
            "registry",
            "regsub|10",
            "rename",
            "return",
            "safe",
            "scan",
            "seek",
            "set",
            "socket",
            "source",
            "split",
            "string",
            "subst",
            "switch",
            "tcl_endOfWord",
            "tcl_findLibrary",
            "tcl_startOfNextWord",
            "tcl_startOfPreviousWord",
            "tcl_wordBreakAfter",
            "tcl_wordBreakBefore",
            "tcltest",
            "tclvars",
            "tell",
            "time",
            "tm",
            "trace",
            "unknown",
            "unload",
            "unset",
            "update",
            "uplevel",
            "upvar",
            "variable",
            "vwait",
            "while"
          ];
 
          return {
            name: 'Tcl',
            aliases: [ 'tk' ],
            keywords: KEYWORDS,
            contains: [
              hljs.COMMENT(';[ \\t]*#', '$'),
              hljs.COMMENT('^[ \\t]*#', '$'),
              {
                beginKeywords: 'proc',
                end: '[\\{]',
                excludeEnd: true,
                contains: [
                  {
                    className: 'title',
                    begin: '[ \\t\\n\\r]+(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
                    end: '[ \\t\\n\\r]',
                    endsWithParent: true,
                    excludeEnd: true
                  }
                ]
              },
              {
                className: "variable",
                variants: [
                  { begin: regex.concat(
                    /\$/,
                    regex.optional(/::/),
                    TCL_IDENT,
                    '(::',
                    TCL_IDENT,
                    ')*'
                  ) },
                  {
                    begin: '\\$\\{(::)?[a-zA-Z_]((::)?[a-zA-Z0-9_])*',
                    end: '\\}',
                    contains: [ NUMBER ]
                  }
                ]
              },
              {
                className: 'string',
                contains: [ hljs.BACKSLASH_ESCAPE ],
                variants: [ hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null }) ]
              },
              NUMBER
            ]
          };
        }
 
        tcl_1 = tcl;
        return tcl_1;
    }
 
    /*
    Language: Thrift
    Author: Oleg Efimov <efimovov@gmail.com>
    Description: Thrift message definition format
    Website: https://thrift.apache.org
    Category: protocols
    */
 
    var thrift_1;
    var hasRequiredThrift;
 
    function requireThrift () {
        if (hasRequiredThrift) return thrift_1;
        hasRequiredThrift = 1;
        function thrift(hljs) {
          const TYPES = [
            "bool",
            "byte",
            "i16",
            "i32",
            "i64",
            "double",
            "string",
            "binary"
          ];
          const KEYWORDS = [
            "namespace",
            "const",
            "typedef",
            "struct",
            "enum",
            "service",
            "exception",
            "void",
            "oneway",
            "set",
            "list",
            "map",
            "required",
            "optional"
          ];
          return {
            name: 'Thrift',
            keywords: {
              keyword: KEYWORDS,
              type: TYPES,
              literal: 'true false'
            },
            contains: [
              hljs.QUOTE_STRING_MODE,
              hljs.NUMBER_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'class',
                beginKeywords: 'struct enum service exception',
                end: /\{/,
                illegal: /\n/,
                contains: [
                  hljs.inherit(hljs.TITLE_MODE, {
                    // hack: eating everything after the first title
                    starts: {
                      endsWithParent: true,
                      excludeEnd: true
                    } })
                ]
              },
              {
                begin: '\\b(set|list|map)\\s*<',
                keywords: { type: [
                  ...TYPES,
                  "set",
                  "list",
                  "map"
                ] },
                end: '>',
                contains: [ 'self' ]
              }
            ]
          };
        }
 
        thrift_1 = thrift;
        return thrift_1;
    }
 
    /*
    Language: TP
    Author: Jay Strybis <jay.strybis@gmail.com>
    Description: FANUC TP programming language (TPP).
    */
 
    var tp_1;
    var hasRequiredTp;
 
    function requireTp () {
        if (hasRequiredTp) return tp_1;
        hasRequiredTp = 1;
        function tp(hljs) {
          const TPID = {
            className: 'number',
            begin: '[1-9][0-9]*', /* no leading zeros */
            relevance: 0
          };
          const TPLABEL = {
            className: 'symbol',
            begin: ':[^\\]]+'
          };
          const TPDATA = {
            className: 'built_in',
            begin: '(AR|P|PAYLOAD|PR|R|SR|RSR|LBL|VR|UALM|MESSAGE|UTOOL|UFRAME|TIMER|'
            + 'TIMER_OVERFLOW|JOINT_MAX_SPEED|RESUME_PROG|DIAG_REC)\\[',
            end: '\\]',
            contains: [
              'self',
              TPID,
              TPLABEL
            ]
          };
          const TPIO = {
            className: 'built_in',
            begin: '(AI|AO|DI|DO|F|RI|RO|UI|UO|GI|GO|SI|SO)\\[',
            end: '\\]',
            contains: [
              'self',
              TPID,
              hljs.QUOTE_STRING_MODE, /* for pos section at bottom */
              TPLABEL
            ]
          };
 
          const KEYWORDS = [
            "ABORT",
            "ACC",
            "ADJUST",
            "AND",
            "AP_LD",
            "BREAK",
            "CALL",
            "CNT",
            "COL",
            "CONDITION",
            "CONFIG",
            "DA",
            "DB",
            "DIV",
            "DETECT",
            "ELSE",
            "END",
            "ENDFOR",
            "ERR_NUM",
            "ERROR_PROG",
            "FINE",
            "FOR",
            "GP",
            "GUARD",
            "INC",
            "IF",
            "JMP",
            "LINEAR_MAX_SPEED",
            "LOCK",
            "MOD",
            "MONITOR",
            "OFFSET",
            "Offset",
            "OR",
            "OVERRIDE",
            "PAUSE",
            "PREG",
            "PTH",
            "RT_LD",
            "RUN",
            "SELECT",
            "SKIP",
            "Skip",
            "TA",
            "TB",
            "TO",
            "TOOL_OFFSET",
            "Tool_Offset",
            "UF",
            "UT",
            "UFRAME_NUM",
            "UTOOL_NUM",
            "UNLOCK",
            "WAIT",
            "X",
            "Y",
            "Z",
            "W",
            "P",
            "R",
            "STRLEN",
            "SUBSTR",
            "FINDSTR",
            "VOFFSET",
            "PROG",
            "ATTR",
            "MN",
            "POS"
          ];
          const LITERALS = [
            "ON",
            "OFF",
            "max_speed",
            "LPOS",
            "JPOS",
            "ENABLE",
            "DISABLE",
            "START",
            "STOP",
            "RESET"
          ];
 
          return {
            name: 'TP',
            keywords: {
              keyword: KEYWORDS,
              literal: LITERALS
            },
            contains: [
              TPDATA,
              TPIO,
              {
                className: 'keyword',
                begin: '/(PROG|ATTR|MN|POS|END)\\b'
              },
              {
                /* this is for cases like ,CALL */
                className: 'keyword',
                begin: '(CALL|RUN|POINT_LOGIC|LBL)\\b'
              },
              {
                /* this is for cases like CNT100 where the default lexemes do not
                 * separate the keyword and the number */
                className: 'keyword',
                begin: '\\b(ACC|CNT|Skip|Offset|PSPD|RT_LD|AP_LD|Tool_Offset)'
              },
              {
                /* to catch numbers that do not have a word boundary on the left */
                className: 'number',
                begin: '\\d+(sec|msec|mm/sec|cm/min|inch/min|deg/sec|mm|in|cm)?\\b',
                relevance: 0
              },
              hljs.COMMENT('//', '[;$]'),
              hljs.COMMENT('!', '[;$]'),
              hljs.COMMENT('--eg:', '$'),
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                begin: '\'',
                end: '\''
              },
              hljs.C_NUMBER_MODE,
              {
                className: 'variable',
                begin: '\\$[A-Za-z0-9_]+'
              }
            ]
          };
        }
 
        tp_1 = tp;
        return tp_1;
    }
 
    /*
    Language: Twig
    Requires: xml.js
    Author: Luke Holder <lukemh@gmail.com>
    Description: Twig is a templating language for PHP
    Website: https://twig.symfony.com
    Category: template
    */
 
    var twig_1;
    var hasRequiredTwig;
 
    function requireTwig () {
        if (hasRequiredTwig) return twig_1;
        hasRequiredTwig = 1;
        function twig(hljs) {
          const regex = hljs.regex;
          const FUNCTION_NAMES = [
            "absolute_url",
            "asset|0",
            "asset_version",
            "attribute",
            "block",
            "constant",
            "controller|0",
            "country_timezones",
            "csrf_token",
            "cycle",
            "date",
            "dump",
            "expression",
            "form|0",
            "form_end",
            "form_errors",
            "form_help",
            "form_label",
            "form_rest",
            "form_row",
            "form_start",
            "form_widget",
            "html_classes",
            "include",
            "is_granted",
            "logout_path",
            "logout_url",
            "max",
            "min",
            "parent",
            "path|0",
            "random",
            "range",
            "relative_path",
            "render",
            "render_esi",
            "source",
            "template_from_string",
            "url|0"
          ];
 
          const FILTERS = [
            "abs",
            "abbr_class",
            "abbr_method",
            "batch",
            "capitalize",
            "column",
            "convert_encoding",
            "country_name",
            "currency_name",
            "currency_symbol",
            "data_uri",
            "date",
            "date_modify",
            "default",
            "escape",
            "file_excerpt",
            "file_link",
            "file_relative",
            "filter",
            "first",
            "format",
            "format_args",
            "format_args_as_text",
            "format_currency",
            "format_date",
            "format_datetime",
            "format_file",
            "format_file_from_text",
            "format_number",
            "format_time",
            "html_to_markdown",
            "humanize",
            "inky_to_html",
            "inline_css",
            "join",
            "json_encode",
            "keys",
            "language_name",
            "last",
            "length",
            "locale_name",
            "lower",
            "map",
            "markdown",
            "markdown_to_html",
            "merge",
            "nl2br",
            "number_format",
            "raw",
            "reduce",
            "replace",
            "reverse",
            "round",
            "slice",
            "slug",
            "sort",
            "spaceless",
            "split",
            "striptags",
            "timezone_name",
            "title",
            "trans",
            "transchoice",
            "trim",
            "u|0",
            "upper",
            "url_encode",
            "yaml_dump",
            "yaml_encode"
          ];
 
          let TAG_NAMES = [
            "apply",
            "autoescape",
            "block",
            "cache",
            "deprecated",
            "do",
            "embed",
            "extends",
            "filter",
            "flush",
            "for",
            "form_theme",
            "from",
            "if",
            "import",
            "include",
            "macro",
            "sandbox",
            "set",
            "stopwatch",
            "trans",
            "trans_default_domain",
            "transchoice",
            "use",
            "verbatim",
            "with"
          ];
 
          TAG_NAMES = TAG_NAMES.concat(TAG_NAMES.map(t => `end${t}`));
 
          const STRING = {
            scope: 'string',
            variants: [
              {
                begin: /'/,
                end: /'/
              },
              {
                begin: /"/,
                end: /"/
              },
            ]
          };
 
          const NUMBER = {
            scope: "number",
            match: /\d+/
          };
 
          const PARAMS = {
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            contains: [
              STRING,
              NUMBER
            ]
          };
 
 
          const FUNCTIONS = {
            beginKeywords: FUNCTION_NAMES.join(" "),
            keywords: { name: FUNCTION_NAMES },
            relevance: 0,
            contains: [ PARAMS ]
          };
 
          const FILTER = {
            match: /\|(?=[A-Za-z_]+:?)/,
            beginScope: "punctuation",
            relevance: 0,
            contains: [
              {
                match: /[A-Za-z_]+:?/,
                keywords: FILTERS
              },
            ]
          };
 
          const tagNamed = (tagnames, { relevance }) => {
            return {
              beginScope: {
                1: 'template-tag',
                3: 'name'
              },
              relevance: relevance || 2,
              endScope: 'template-tag',
              begin: [
                /\{%/,
                /\s*/,
                regex.either(...tagnames)
              ],
              end: /%\}/,
              keywords: "in",
              contains: [
                FILTER,
                FUNCTIONS,
                STRING,
                NUMBER
              ]
            };
          };
 
          const CUSTOM_TAG_RE = /[a-z_]+/;
          const TAG = tagNamed(TAG_NAMES, { relevance: 2 });
          const CUSTOM_TAG = tagNamed([ CUSTOM_TAG_RE ], { relevance: 1 });
 
          return {
            name: 'Twig',
            aliases: [ 'craftcms' ],
            case_insensitive: true,
            subLanguage: 'xml',
            contains: [
              hljs.COMMENT(/\{#/, /#\}/),
              TAG,
              CUSTOM_TAG,
              {
                className: 'template-variable',
                begin: /\{\{/,
                end: /\}\}/,
                contains: [
                  'self',
                  FILTER,
                  FUNCTIONS,
                  STRING,
                  NUMBER
                ]
              }
            ]
          };
        }
 
        twig_1 = twig;
        return twig_1;
    }
 
    var typescript_1;
    var hasRequiredTypescript;
 
    function requireTypescript () {
        if (hasRequiredTypescript) return typescript_1;
        hasRequiredTypescript = 1;
        const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';
        const KEYWORDS = [
          "as", // for exports
          "in",
          "of",
          "if",
          "for",
          "while",
          "finally",
          "var",
          "new",
          "function",
          "do",
          "return",
          "void",
          "else",
          "break",
          "catch",
          "instanceof",
          "with",
          "throw",
          "case",
          "default",
          "try",
          "switch",
          "continue",
          "typeof",
          "delete",
          "let",
          "yield",
          "const",
          "class",
          // JS handles these with a special rule
          // "get",
          // "set",
          "debugger",
          "async",
          "await",
          "static",
          "import",
          "from",
          "export",
          "extends"
        ];
        const LITERALS = [
          "true",
          "false",
          "null",
          "undefined",
          "NaN",
          "Infinity"
        ];
 
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
        const TYPES = [
          // Fundamental objects
          "Object",
          "Function",
          "Boolean",
          "Symbol",
          // numbers and dates
          "Math",
          "Date",
          "Number",
          "BigInt",
          // text
          "String",
          "RegExp",
          // Indexed collections
          "Array",
          "Float32Array",
          "Float64Array",
          "Int8Array",
          "Uint8Array",
          "Uint8ClampedArray",
          "Int16Array",
          "Int32Array",
          "Uint16Array",
          "Uint32Array",
          "BigInt64Array",
          "BigUint64Array",
          // Keyed collections
          "Set",
          "Map",
          "WeakSet",
          "WeakMap",
          // Structured data
          "ArrayBuffer",
          "SharedArrayBuffer",
          "Atomics",
          "DataView",
          "JSON",
          // Control abstraction objects
          "Promise",
          "Generator",
          "GeneratorFunction",
          "AsyncFunction",
          // Reflection
          "Reflect",
          "Proxy",
          // Internationalization
          "Intl",
          // WebAssembly
          "WebAssembly"
        ];
 
        const ERROR_TYPES = [
          "Error",
          "EvalError",
          "InternalError",
          "RangeError",
          "ReferenceError",
          "SyntaxError",
          "TypeError",
          "URIError"
        ];
 
        const BUILT_IN_GLOBALS = [
          "setInterval",
          "setTimeout",
          "clearInterval",
          "clearTimeout",
 
          "require",
          "exports",
 
          "eval",
          "isFinite",
          "isNaN",
          "parseFloat",
          "parseInt",
          "decodeURI",
          "decodeURIComponent",
          "encodeURI",
          "encodeURIComponent",
          "escape",
          "unescape"
        ];
 
        const BUILT_IN_VARIABLES = [
          "arguments",
          "this",
          "super",
          "console",
          "window",
          "document",
          "localStorage",
          "sessionStorage",
          "module",
          "global" // Node.js
        ];
 
        const BUILT_INS = [].concat(
          BUILT_IN_GLOBALS,
          TYPES,
          ERROR_TYPES
        );
 
        /*
        Language: JavaScript
        Description: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.
        Category: common, scripting, web
        Website: https://developer.mozilla.org/en-US/docs/Web/JavaScript
        */
 
        /** @type LanguageFn */
        function javascript(hljs) {
          const regex = hljs.regex;
          /**
           * Takes a string like "<Booger" and checks to see
           * if we can find a matching "</Booger" later in the
           * content.
           * @param {RegExpMatchArray} match
           * @param {{after:number}} param1
           */
          const hasClosingTag = (match, { after }) => {
            const tag = "</" + match[0].slice(1);
            const pos = match.input.indexOf(tag, after);
            return pos !== -1;
          };
 
          const IDENT_RE$1 = IDENT_RE;
          const FRAGMENT = {
            begin: '<>',
            end: '</>'
          };
          // to avoid some special cases inside isTrulyOpeningTag
          const XML_SELF_CLOSING = /<[A-Za-z0-9\\._:-]+\s*\/>/;
          const XML_TAG = {
            begin: /<[A-Za-z0-9\\._:-]+/,
            end: /\/[A-Za-z0-9\\._:-]+>|\/>/,
            /**
             * @param {RegExpMatchArray} match
             * @param {CallbackResponse} response
             */
            isTrulyOpeningTag: (match, response) => {
              const afterMatchIndex = match[0].length + match.index;
              const nextChar = match.input[afterMatchIndex];
              if (
                // HTML should not include another raw `<` inside a tag
                // nested type?
                // `<Array<Array<number>>`, etc.
                nextChar === "<" ||
                // the , gives away that this is not HTML
                // `<T, A extends keyof T, V>`
                nextChar === ","
                ) {
                response.ignoreMatch();
                return;
              }
 
              // `<something>`
              // Quite possibly a tag, lets look for a matching closing tag...
              if (nextChar === ">") {
                // if we cannot find a matching closing tag, then we
                // will ignore it
                if (!hasClosingTag(match, { after: afterMatchIndex })) {
                  response.ignoreMatch();
                }
              }
 
              // `<blah />` (self-closing)
              // handled by simpleSelfClosing rule
 
              let m;
              const afterMatch = match.input.substring(afterMatchIndex);
 
              // some more template typing stuff
              //  <T = any>(key?: string) => Modify<
              if ((m = afterMatch.match(/^\s*=/))) {
                response.ignoreMatch();
                return;
              }
 
              // `<From extends string>`
              // technically this could be HTML, but it smells like a type
              // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276
              if ((m = afterMatch.match(/^\s+extends\s+/))) {
                if (m.index === 0) {
                  response.ignoreMatch();
                  // eslint-disable-next-line no-useless-return
                  return;
                }
              }
            }
          };
          const KEYWORDS$1 = {
            $pattern: IDENT_RE,
            keyword: KEYWORDS,
            literal: LITERALS,
            built_in: BUILT_INS,
            "variable.language": BUILT_IN_VARIABLES
          };
 
          // https://tc39.es/ecma262/#sec-literals-numeric-literals
          const decimalDigits = '[0-9](_?[0-9])*';
          const frac = `\\.(${decimalDigits})`;
          // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral
          // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
          const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;
          const NUMBER = {
            className: 'number',
            variants: [
              // DecimalLiteral
              { begin: `(\\b(${decimalInteger})((${frac})|\\.)?|(${frac}))` +
                `[eE][+-]?(${decimalDigits})\\b` },
              { begin: `\\b(${decimalInteger})\\b((${frac})\\b|\\.)?|(${frac})\\b` },
 
              // DecimalBigIntegerLiteral
              { begin: `\\b(0|[1-9](_?[0-9])*)n\\b` },
 
              // NonDecimalIntegerLiteral
              { begin: "\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\b" },
              { begin: "\\b0[bB][0-1](_?[0-1])*n?\\b" },
              { begin: "\\b0[oO][0-7](_?[0-7])*n?\\b" },
 
              // LegacyOctalIntegerLiteral (does not include underscore separators)
              // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals
              { begin: "\\b0[0-7]+n?\\b" },
            ],
            relevance: 0
          };
 
          const SUBST = {
            className: 'subst',
            begin: '\\$\\{',
            end: '\\}',
            keywords: KEYWORDS$1,
            contains: [] // defined later
          };
          const HTML_TEMPLATE = {
            begin: 'html`',
            end: '',
            starts: {
              end: '`',
              returnEnd: false,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              subLanguage: 'xml'
            }
          };
          const CSS_TEMPLATE = {
            begin: 'css`',
            end: '',
            starts: {
              end: '`',
              returnEnd: false,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              subLanguage: 'css'
            }
          };
          const GRAPHQL_TEMPLATE = {
            begin: 'gql`',
            end: '',
            starts: {
              end: '`',
              returnEnd: false,
              contains: [
                hljs.BACKSLASH_ESCAPE,
                SUBST
              ],
              subLanguage: 'graphql'
            }
          };
          const TEMPLATE_STRING = {
            className: 'string',
            begin: '`',
            end: '`',
            contains: [
              hljs.BACKSLASH_ESCAPE,
              SUBST
            ]
          };
          const JSDOC_COMMENT = hljs.COMMENT(
            /\/\*\*(?!\/)/,
            '\\*/',
            {
              relevance: 0,
              contains: [
                {
                  begin: '(?=@[A-Za-z]+)',
                  relevance: 0,
                  contains: [
                    {
                      className: 'doctag',
                      begin: '@[A-Za-z]+'
                    },
                    {
                      className: 'type',
                      begin: '\\{',
                      end: '\\}',
                      excludeEnd: true,
                      excludeBegin: true,
                      relevance: 0
                    },
                    {
                      className: 'variable',
                      begin: IDENT_RE$1 + '(?=\\s*(-)|$)',
                      endsParent: true,
                      relevance: 0
                    },
                    // eat spaces (not newlines) so we can find
                    // types or variables
                    {
                      begin: /(?=[^\n])\s/,
                      relevance: 0
                    }
                  ]
                }
              ]
            }
          );
          const COMMENT = {
            className: "comment",
            variants: [
              JSDOC_COMMENT,
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_LINE_COMMENT_MODE
            ]
          };
          const SUBST_INTERNALS = [
            hljs.APOS_STRING_MODE,
            hljs.QUOTE_STRING_MODE,
            HTML_TEMPLATE,
            CSS_TEMPLATE,
            GRAPHQL_TEMPLATE,
            TEMPLATE_STRING,
            // Skip numbers when they are part of a variable name
            { match: /\$\d+/ },
            NUMBER,
            // This is intentional:
            // See https://github.com/highlightjs/highlight.js/issues/3288
            // hljs.REGEXP_MODE
          ];
          SUBST.contains = SUBST_INTERNALS
            .concat({
              // we need to pair up {} inside our subst to prevent
              // it from ending too early by matching another }
              begin: /\{/,
              end: /\}/,
              keywords: KEYWORDS$1,
              contains: [
                "self"
              ].concat(SUBST_INTERNALS)
            });
          const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);
          const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([
            // eat recursive parens in sub expressions
            {
              begin: /\(/,
              end: /\)/,
              keywords: KEYWORDS$1,
              contains: ["self"].concat(SUBST_AND_COMMENTS)
            }
          ]);
          const PARAMS = {
            className: 'params',
            begin: /\(/,
            end: /\)/,
            excludeBegin: true,
            excludeEnd: true,
            keywords: KEYWORDS$1,
            contains: PARAMS_CONTAINS
          };
 
          // ES6 classes
          const CLASS_OR_EXTENDS = {
            variants: [
              // class Car extends vehicle
              {
                match: [
                  /class/,
                  /\s+/,
                  IDENT_RE$1,
                  /\s+/,
                  /extends/,
                  /\s+/,
                  regex.concat(IDENT_RE$1, "(", regex.concat(/\./, IDENT_RE$1), ")*")
                ],
                scope: {
                  1: "keyword",
                  3: "title.class",
                  5: "keyword",
                  7: "title.class.inherited"
                }
              },
              // class Car
              {
                match: [
                  /class/,
                  /\s+/,
                  IDENT_RE$1
                ],
                scope: {
                  1: "keyword",
                  3: "title.class"
                }
              },
 
            ]
          };
 
          const CLASS_REFERENCE = {
            relevance: 0,
            match:
            regex.either(
              // Hard coded exceptions
              /\bJSON/,
              // Float32Array, OutT
              /\b[A-Z][a-z]+([A-Z][a-z]*|\d)*/,
              // CSSFactory, CSSFactoryT
              /\b[A-Z]{2,}([A-Z][a-z]+|\d)+([A-Z][a-z]*)*/,
              // FPs, FPsT
              /\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\d)*([A-Z][a-z]*)*/,
              // P
              // single letters are not highlighted
              // BLAH
              // this will be flagged as a UPPER_CASE_CONSTANT instead
            ),
            className: "title.class",
            keywords: {
              _: [
                // se we still get relevance credit for JS library classes
                ...TYPES,
                ...ERROR_TYPES
              ]
            }
          };
 
          const USE_STRICT = {
            label: "use_strict",
            className: 'meta',
            relevance: 10,
            begin: /^\s*['"]use (strict|asm)['"]/
          };
 
          const FUNCTION_DEFINITION = {
            variants: [
              {
                match: [
                  /function/,
                  /\s+/,
                  IDENT_RE$1,
                  /(?=\s*\()/
                ]
              },
              // anonymous function
              {
                match: [
                  /function/,
                  /\s*(?=\()/
                ]
              }
            ],
            className: {
              1: "keyword",
              3: "title.function"
            },
            label: "func.def",
            contains: [ PARAMS ],
            illegal: /%/
          };
 
          const UPPER_CASE_CONSTANT = {
            relevance: 0,
            match: /\b[A-Z][A-Z_0-9]+\b/,
            className: "variable.constant"
          };
 
          function noneOf(list) {
            return regex.concat("(?!", list.join("|"), ")");
          }
 
          const FUNCTION_CALL = {
            match: regex.concat(
              /\b/,
              noneOf([
                ...BUILT_IN_GLOBALS,
                "super",
                "import"
              ]),
              IDENT_RE$1, regex.lookahead(/\(/)),
            className: "title.function",
            relevance: 0
          };
 
          const PROPERTY_ACCESS = {
            begin: regex.concat(/\./, regex.lookahead(
              regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)
            )),
            end: IDENT_RE$1,
            excludeBegin: true,
            keywords: "prototype",
            className: "property",
            relevance: 0
          };
 
          const GETTER_OR_SETTER = {
            match: [
              /get|set/,
              /\s+/,
              IDENT_RE$1,
              /(?=\()/
            ],
            className: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              { // eat to avoid empty params
                begin: /\(\)/
              },
              PARAMS
            ]
          };
 
          const FUNC_LEAD_IN_RE = '(\\(' +
            '[^()]*(\\(' +
            '[^()]*(\\(' +
            '[^()]*' +
            '\\)[^()]*)*' +
            '\\)[^()]*)*' +
            '\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\s*=>';
 
          const FUNCTION_VARIABLE = {
            match: [
              /const|var|let/, /\s+/,
              IDENT_RE$1, /\s*/,
              /=\s*/,
              /(async\s*)?/, // async is optional
              regex.lookahead(FUNC_LEAD_IN_RE)
            ],
            keywords: "async",
            className: {
              1: "keyword",
              3: "title.function"
            },
            contains: [
              PARAMS
            ]
          };
 
          return {
            name: 'JavaScript',
            aliases: ['js', 'jsx', 'mjs', 'cjs'],
            keywords: KEYWORDS$1,
            // this will be extended by TypeScript
            exports: { PARAMS_CONTAINS, CLASS_REFERENCE },
            illegal: /#(?![$_A-z])/,
            contains: [
              hljs.SHEBANG({
                label: "shebang",
                binary: "node",
                relevance: 5
              }),
              USE_STRICT,
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              HTML_TEMPLATE,
              CSS_TEMPLATE,
              GRAPHQL_TEMPLATE,
              TEMPLATE_STRING,
              COMMENT,
              // Skip numbers when they are part of a variable name
              { match: /\$\d+/ },
              NUMBER,
              CLASS_REFERENCE,
              {
                className: 'attr',
                begin: IDENT_RE$1 + regex.lookahead(':'),
                relevance: 0
              },
              FUNCTION_VARIABLE,
              { // "value" container
                begin: '(' + hljs.RE_STARTERS_RE + '|\\b(case|return|throw)\\b)\\s*',
                keywords: 'return throw case',
                relevance: 0,
                contains: [
                  COMMENT,
                  hljs.REGEXP_MODE,
                  {
                    className: 'function',
                    // we have to count the parens to make sure we actually have the
                    // correct bounding ( ) before the =>.  There could be any number of
                    // sub-expressions inside also surrounded by parens.
                    begin: FUNC_LEAD_IN_RE,
                    returnBegin: true,
                    end: '\\s*=>',
                    contains: [
                      {
                        className: 'params',
                        variants: [
                          {
                            begin: hljs.UNDERSCORE_IDENT_RE,
                            relevance: 0
                          },
                          {
                            className: null,
                            begin: /\(\s*\)/,
                            skip: true
                          },
                          {
                            begin: /\(/,
                            end: /\)/,
                            excludeBegin: true,
                            excludeEnd: true,
                            keywords: KEYWORDS$1,
                            contains: PARAMS_CONTAINS
                          }
                        ]
                      }
                    ]
                  },
                  { // could be a comma delimited list of params to a function call
                    begin: /,/,
                    relevance: 0
                  },
                  {
                    match: /\s+/,
                    relevance: 0
                  },
                  { // JSX
                    variants: [
                      { begin: FRAGMENT.begin, end: FRAGMENT.end },
                      { match: XML_SELF_CLOSING },
                      {
                        begin: XML_TAG.begin,
                        // we carefully check the opening tag to see if it truly
                        // is a tag and not a false positive
                        'on:begin': XML_TAG.isTrulyOpeningTag,
                        end: XML_TAG.end
                      }
                    ],
                    subLanguage: 'xml',
                    contains: [
                      {
                        begin: XML_TAG.begin,
                        end: XML_TAG.end,
                        skip: true,
                        contains: ['self']
                      }
                    ]
                  }
                ],
              },
              FUNCTION_DEFINITION,
              {
                // prevent this from getting swallowed up by function
                // since they appear "function like"
                beginKeywords: "while if switch catch for"
              },
              {
                // we have to count the parens to make sure we actually have the correct
                // bounding ( ).  There could be any number of sub-expressions inside
                // also surrounded by parens.
                begin: '\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +
                  '\\(' + // first parens
                  '[^()]*(\\(' +
                    '[^()]*(\\(' +
                      '[^()]*' +
                    '\\)[^()]*)*' +
                  '\\)[^()]*)*' +
                  '\\)\\s*\\{', // end parens
                returnBegin:true,
                label: "func.def",
                contains: [
                  PARAMS,
                  hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: "title.function" })
                ]
              },
              // catch ... so it won't trigger the property rule below
              {
                match: /\.\.\./,
                relevance: 0
              },
              PROPERTY_ACCESS,
              // hack: prevents detection of keywords in some circumstances
              // .keyword()
              // $keyword = x
              {
                match: '\\$' + IDENT_RE$1,
                relevance: 0
              },
              {
                match: [ /\bconstructor(?=\s*\()/ ],
                className: { 1: "title.function" },
                contains: [ PARAMS ]
              },
              FUNCTION_CALL,
              UPPER_CASE_CONSTANT,
              CLASS_OR_EXTENDS,
              GETTER_OR_SETTER,
              {
                match: /\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`
              }
            ]
          };
        }
 
        /*
        Language: TypeScript
        Author: Panu Horsmalahti <panu.horsmalahti@iki.fi>
        Contributors: Ike Ku <dempfi@yahoo.com>
        Description: TypeScript is a strict superset of JavaScript
        Website: https://www.typescriptlang.org
        Category: common, scripting
        */
 
        /** @type LanguageFn */
        function typescript(hljs) {
          const tsLanguage = javascript(hljs);
 
          const IDENT_RE$1 = IDENT_RE;
          const TYPES = [
            "any",
            "void",
            "number",
            "boolean",
            "string",
            "object",
            "never",
            "symbol",
            "bigint",
            "unknown"
          ];
          const NAMESPACE = {
            beginKeywords: 'namespace',
            end: /\{/,
            excludeEnd: true,
            contains: [ tsLanguage.exports.CLASS_REFERENCE ]
          };
          const INTERFACE = {
            beginKeywords: 'interface',
            end: /\{/,
            excludeEnd: true,
            keywords: {
              keyword: 'interface extends',
              built_in: TYPES
            },
            contains: [ tsLanguage.exports.CLASS_REFERENCE ]
          };
          const USE_STRICT = {
            className: 'meta',
            relevance: 10,
            begin: /^\s*['"]use strict['"]/
          };
          const TS_SPECIFIC_KEYWORDS = [
            "type",
            "namespace",
            "interface",
            "public",
            "private",
            "protected",
            "implements",
            "declare",
            "abstract",
            "readonly",
            "enum",
            "override"
          ];
          const KEYWORDS$1 = {
            $pattern: IDENT_RE,
            keyword: KEYWORDS.concat(TS_SPECIFIC_KEYWORDS),
            literal: LITERALS,
            built_in: BUILT_INS.concat(TYPES),
            "variable.language": BUILT_IN_VARIABLES
          };
          const DECORATOR = {
            className: 'meta',
            begin: '@' + IDENT_RE$1,
          };
 
          const swapMode = (mode, label, replacement) => {
            const indx = mode.contains.findIndex(m => m.label === label);
            if (indx === -1) { throw new Error("can not find mode to replace"); }
 
            mode.contains.splice(indx, 1, replacement);
          };
 
 
          // this should update anywhere keywords is used since
          // it will be the same actual JS object
          Object.assign(tsLanguage.keywords, KEYWORDS$1);
 
          tsLanguage.exports.PARAMS_CONTAINS.push(DECORATOR);
          tsLanguage.contains = tsLanguage.contains.concat([
            DECORATOR,
            NAMESPACE,
            INTERFACE,
          ]);
 
          // TS gets a simpler shebang rule than JS
          swapMode(tsLanguage, "shebang", hljs.SHEBANG());
          // JS use strict rule purposely excludes `asm` which makes no sense
          swapMode(tsLanguage, "use_strict", USE_STRICT);
 
          const functionDeclaration = tsLanguage.contains.find(m => m.label === "func.def");
          functionDeclaration.relevance = 0; // () => {} is more typical in TypeScript
 
          Object.assign(tsLanguage, {
            name: 'TypeScript',
            aliases: [
              'ts',
              'tsx',
              'mts',
              'cts'
            ]
          });
 
          return tsLanguage;
        }
 
        typescript_1 = typescript;
        return typescript_1;
    }
 
    /*
    Language: Vala
    Author: Antono Vasiljev <antono.vasiljev@gmail.com>
    Description: Vala is a new programming language that aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI compared to applications and libraries written in C.
    Website: https://wiki.gnome.org/Projects/Vala
    */
 
    var vala_1;
    var hasRequiredVala;
 
    function requireVala () {
        if (hasRequiredVala) return vala_1;
        hasRequiredVala = 1;
        function vala(hljs) {
          return {
            name: 'Vala',
            keywords: {
              keyword:
                // Value types
                'char uchar unichar int uint long ulong short ushort int8 int16 int32 int64 uint8 '
                + 'uint16 uint32 uint64 float double bool struct enum string void '
                // Reference types
                + 'weak unowned owned '
                // Modifiers
                + 'async signal static abstract interface override virtual delegate '
                // Control Structures
                + 'if while do for foreach else switch case break default return try catch '
                // Visibility
                + 'public private protected internal '
                // Other
                + 'using new this get set const stdout stdin stderr var',
              built_in:
                'DBus GLib CCode Gee Object Gtk Posix',
              literal:
                'false true null'
            },
            contains: [
              {
                className: 'class',
                beginKeywords: 'class interface namespace',
                end: /\{/,
                excludeEnd: true,
                illegal: '[^,:\\n\\s\\.]',
                contains: [ hljs.UNDERSCORE_TITLE_MODE ]
              },
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              {
                className: 'string',
                begin: '"""',
                end: '"""',
                relevance: 5
              },
              hljs.APOS_STRING_MODE,
              hljs.QUOTE_STRING_MODE,
              hljs.C_NUMBER_MODE,
              {
                className: 'meta',
                begin: '^#',
                end: '$',
              }
            ]
          };
        }
 
        vala_1 = vala;
        return vala_1;
    }
 
    /*
    Language: Visual Basic .NET
    Description: Visual Basic .NET (VB.NET) is a multi-paradigm, object-oriented programming language, implemented on the .NET Framework.
    Authors: Poren Chiang <ren.chiang@gmail.com>, Jan Pilzer
    Website: https://docs.microsoft.com/dotnet/visual-basic/getting-started
    Category: common
    */
 
    var vbnet_1;
    var hasRequiredVbnet;
 
    function requireVbnet () {
        if (hasRequiredVbnet) return vbnet_1;
        hasRequiredVbnet = 1;
        /** @type LanguageFn */
        function vbnet(hljs) {
          const regex = hljs.regex;
          /**
           * Character Literal
           * Either a single character ("a"C) or an escaped double quote (""""C).
           */
          const CHARACTER = {
            className: 'string',
            begin: /"(""|[^/n])"C\b/
          };
 
          const STRING = {
            className: 'string',
            begin: /"/,
            end: /"/,
            illegal: /\n/,
            contains: [
              {
                // double quote escape
                begin: /""/ }
            ]
          };
 
          /** Date Literals consist of a date, a time, or both separated by whitespace, surrounded by # */
          const MM_DD_YYYY = /\d{1,2}\/\d{1,2}\/\d{4}/;
          const YYYY_MM_DD = /\d{4}-\d{1,2}-\d{1,2}/;
          const TIME_12H = /(\d|1[012])(:\d+){0,2} *(AM|PM)/;
          const TIME_24H = /\d{1,2}(:\d{1,2}){1,2}/;
          const DATE = {
            className: 'literal',
            variants: [
              {
                // #YYYY-MM-DD# (ISO-Date) or #M/D/YYYY# (US-Date)
                begin: regex.concat(/# */, regex.either(YYYY_MM_DD, MM_DD_YYYY), / *#/) },
              {
                // #H:mm[:ss]# (24h Time)
                begin: regex.concat(/# */, TIME_24H, / *#/) },
              {
                // #h[:mm[:ss]] A# (12h Time)
                begin: regex.concat(/# */, TIME_12H, / *#/) },
              {
                // date plus time
                begin: regex.concat(
                  /# */,
                  regex.either(YYYY_MM_DD, MM_DD_YYYY),
                  / +/,
                  regex.either(TIME_12H, TIME_24H),
                  / *#/
                ) }
            ]
          };
 
          const NUMBER = {
            className: 'number',
            relevance: 0,
            variants: [
              {
                // Float
                begin: /\b\d[\d_]*((\.[\d_]+(E[+-]?[\d_]+)?)|(E[+-]?[\d_]+))[RFD@!#]?/ },
              {
                // Integer (base 10)
                begin: /\b\d[\d_]*((U?[SIL])|[%&])?/ },
              {
                // Integer (base 16)
                begin: /&H[\dA-F_]+((U?[SIL])|[%&])?/ },
              {
                // Integer (base 8)
                begin: /&O[0-7_]+((U?[SIL])|[%&])?/ },
              {
                // Integer (base 2)
                begin: /&B[01_]+((U?[SIL])|[%&])?/ }
            ]
          };
 
          const LABEL = {
            className: 'label',
            begin: /^\w+:/
          };
 
          const DOC_COMMENT = hljs.COMMENT(/'''/, /$/, { contains: [
            {
              className: 'doctag',
              begin: /<\/?/,
              end: />/
            }
          ] });
 
          const COMMENT = hljs.COMMENT(null, /$/, { variants: [
            { begin: /'/ },
            {
              // TODO: Use multi-class for leading spaces
              begin: /([\t ]|^)REM(?=\s)/ }
          ] });
 
          const DIRECTIVES = {
            className: 'meta',
            // TODO: Use multi-class for indentation once available
            begin: /[\t ]*#(const|disable|else|elseif|enable|end|externalsource|if|region)\b/,
            end: /$/,
            keywords: { keyword:
                'const disable else elseif enable end externalsource if region then' },
            contains: [ COMMENT ]
          };
 
          return {
            name: 'Visual Basic .NET',
            aliases: [ 'vb' ],
            case_insensitive: true,
            classNameAliases: { label: 'symbol' },
            keywords: {
              keyword:
                'addhandler alias aggregate ansi as async assembly auto binary by byref byval ' /* a-b */
                + 'call case catch class compare const continue custom declare default delegate dim distinct do ' /* c-d */
                + 'each equals else elseif end enum erase error event exit explicit finally for friend from function ' /* e-f */
                + 'get global goto group handles if implements imports in inherits interface into iterator ' /* g-i */
                + 'join key let lib loop me mid module mustinherit mustoverride mybase myclass ' /* j-m */
                + 'namespace narrowing new next notinheritable notoverridable ' /* n */
                + 'of off on operator option optional order overloads overridable overrides ' /* o */
                + 'paramarray partial preserve private property protected public ' /* p */
                + 'raiseevent readonly redim removehandler resume return ' /* r */
                + 'select set shadows shared skip static step stop structure strict sub synclock ' /* s */
                + 'take text then throw to try unicode until using when where while widening with withevents writeonly yield' /* t-y */,
              built_in:
                // Operators https://docs.microsoft.com/dotnet/visual-basic/language-reference/operators
                'addressof and andalso await directcast gettype getxmlnamespace is isfalse isnot istrue like mod nameof new not or orelse trycast typeof xor '
                // Type Conversion Functions https://docs.microsoft.com/dotnet/visual-basic/language-reference/functions/type-conversion-functions
                + 'cbool cbyte cchar cdate cdbl cdec cint clng cobj csbyte cshort csng cstr cuint culng cushort',
              type:
                // Data types https://docs.microsoft.com/dotnet/visual-basic/language-reference/data-types
                'boolean byte char date decimal double integer long object sbyte short single string uinteger ulong ushort',
              literal: 'true false nothing'
            },
            illegal:
              '//|\\{|\\}|endif|gosub|variant|wend|^\\$ ' /* reserved deprecated keywords */,
            contains: [
              CHARACTER,
              STRING,
              DATE,
              NUMBER,
              LABEL,
              DOC_COMMENT,
              COMMENT,
              DIRECTIVES
            ]
          };
        }
 
        vbnet_1 = vbnet;
        return vbnet_1;
    }
 
    /*
    Language: VBScript
    Description: VBScript ("Microsoft Visual Basic Scripting Edition") is an Active Scripting language developed by Microsoft that is modeled on Visual Basic.
    Author: Nikita Ledyaev <lenikita@yandex.ru>
    Contributors: Michal Gabrukiewicz <mgabru@gmail.com>
    Website: https://en.wikipedia.org/wiki/VBScript
    Category: scripting
    */
 
    var vbscript_1;
    var hasRequiredVbscript;
 
    function requireVbscript () {
        if (hasRequiredVbscript) return vbscript_1;
        hasRequiredVbscript = 1;
        /** @type LanguageFn */
        function vbscript(hljs) {
          const regex = hljs.regex;
          const BUILT_IN_FUNCTIONS = [
            "lcase",
            "month",
            "vartype",
            "instrrev",
            "ubound",
            "setlocale",
            "getobject",
            "rgb",
            "getref",
            "string",
            "weekdayname",
            "rnd",
            "dateadd",
            "monthname",
            "now",
            "day",
            "minute",
            "isarray",
            "cbool",
            "round",
            "formatcurrency",
            "conversions",
            "csng",
            "timevalue",
            "second",
            "year",
            "space",
            "abs",
            "clng",
            "timeserial",
            "fixs",
            "len",
            "asc",
            "isempty",
            "maths",
            "dateserial",
            "atn",
            "timer",
            "isobject",
            "filter",
            "weekday",
            "datevalue",
            "ccur",
            "isdate",
            "instr",
            "datediff",
            "formatdatetime",
            "replace",
            "isnull",
            "right",
            "sgn",
            "array",
            "snumeric",
            "log",
            "cdbl",
            "hex",
            "chr",
            "lbound",
            "msgbox",
            "ucase",
            "getlocale",
            "cos",
            "cdate",
            "cbyte",
            "rtrim",
            "join",
            "hour",
            "oct",
            "typename",
            "trim",
            "strcomp",
            "int",
            "createobject",
            "loadpicture",
            "tan",
            "formatnumber",
            "mid",
            "split",
            "cint",
            "sin",
            "datepart",
            "ltrim",
            "sqr",
            "time",
            "derived",
            "eval",
            "date",
            "formatpercent",
            "exp",
            "inputbox",
            "left",
            "ascw",
            "chrw",
            "regexp",
            "cstr",
            "err"
          ];
          const BUILT_IN_OBJECTS = [
            "server",
            "response",
            "request",
            // take no arguments so can be called without ()
            "scriptengine",
            "scriptenginebuildversion",
            "scriptengineminorversion",
            "scriptenginemajorversion"
          ];
 
          const BUILT_IN_CALL = {
            begin: regex.concat(regex.either(...BUILT_IN_FUNCTIONS), "\\s*\\("),
            // relevance 0 because this is acting as a beginKeywords really
            relevance: 0,
            keywords: { built_in: BUILT_IN_FUNCTIONS }
          };
 
          const LITERALS = [
            "true",
            "false",
            "null",
            "nothing",
            "empty"
          ];
 
          const KEYWORDS = [
            "call",
            "class",
            "const",
            "dim",
            "do",
            "loop",
            "erase",
            "execute",
            "executeglobal",
            "exit",
            "for",
            "each",
            "next",
            "function",
            "if",
            "then",
            "else",
            "on",
            "error",
            "option",
            "explicit",
            "new",
            "private",
            "property",
            "let",
            "get",
            "public",
            "randomize",
            "redim",
            "rem",
            "select",
            "case",
            "set",
            "stop",
            "sub",
            "while",
            "wend",
            "with",
            "end",
            "to",
            "elseif",
            "is",
            "or",
            "xor",
            "and",
            "not",
            "class_initialize",
            "class_terminate",
            "default",
            "preserve",
            "in",
            "me",
            "byval",
            "byref",
            "step",
            "resume",
            "goto"
          ];
 
          return {
            name: 'VBScript',
            aliases: [ 'vbs' ],
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_IN_OBJECTS,
              literal: LITERALS
            },
            illegal: '//',
            contains: [
              BUILT_IN_CALL,
              hljs.inherit(hljs.QUOTE_STRING_MODE, { contains: [ { begin: '""' } ] }),
              hljs.COMMENT(
                /'/,
                /$/,
                { relevance: 0 }
              ),
              hljs.C_NUMBER_MODE
            ]
          };
        }
 
        vbscript_1 = vbscript;
        return vbscript_1;
    }
 
    /*
    Language: VBScript in HTML
    Requires: xml.js, vbscript.js
    Author: Ivan Sagalaev <maniac@softwaremaniacs.org>
    Description: "Bridge" language defining fragments of VBScript in HTML within <% .. %>
    Website: https://en.wikipedia.org/wiki/VBScript
    Category: scripting
    */
 
    var vbscriptHtml_1;
    var hasRequiredVbscriptHtml;
 
    function requireVbscriptHtml () {
        if (hasRequiredVbscriptHtml) return vbscriptHtml_1;
        hasRequiredVbscriptHtml = 1;
        function vbscriptHtml(hljs) {
          return {
            name: 'VBScript in HTML',
            subLanguage: 'xml',
            contains: [
              {
                begin: '<%',
                end: '%>',
                subLanguage: 'vbscript'
              }
            ]
          };
        }
 
        vbscriptHtml_1 = vbscriptHtml;
        return vbscriptHtml_1;
    }
 
    /*
    Language: Verilog
    Author: Jon Evans <jon@craftyjon.com>
    Contributors: Boone Severson <boone.severson@gmail.com>
    Description: Verilog is a hardware description language used in electronic design automation to describe digital and mixed-signal systems. This highlighter supports Verilog and SystemVerilog through IEEE 1800-2012.
    Website: http://www.verilog.com
    */
 
    var verilog_1;
    var hasRequiredVerilog;
 
    function requireVerilog () {
        if (hasRequiredVerilog) return verilog_1;
        hasRequiredVerilog = 1;
        function verilog(hljs) {
          const regex = hljs.regex;
          const KEYWORDS = {
            $pattern: /\$?[\w]+(\$[\w]+)*/,
            keyword: [
              "accept_on",
              "alias",
              "always",
              "always_comb",
              "always_ff",
              "always_latch",
              "and",
              "assert",
              "assign",
              "assume",
              "automatic",
              "before",
              "begin",
              "bind",
              "bins",
              "binsof",
              "bit",
              "break",
              "buf|0",
              "bufif0",
              "bufif1",
              "byte",
              "case",
              "casex",
              "casez",
              "cell",
              "chandle",
              "checker",
              "class",
              "clocking",
              "cmos",
              "config",
              "const",
              "constraint",
              "context",
              "continue",
              "cover",
              "covergroup",
              "coverpoint",
              "cross",
              "deassign",
              "default",
              "defparam",
              "design",
              "disable",
              "dist",
              "do",
              "edge",
              "else",
              "end",
              "endcase",
              "endchecker",
              "endclass",
              "endclocking",
              "endconfig",
              "endfunction",
              "endgenerate",
              "endgroup",
              "endinterface",
              "endmodule",
              "endpackage",
              "endprimitive",
              "endprogram",
              "endproperty",
              "endspecify",
              "endsequence",
              "endtable",
              "endtask",
              "enum",
              "event",
              "eventually",
              "expect",
              "export",
              "extends",
              "extern",
              "final",
              "first_match",
              "for",
              "force",
              "foreach",
              "forever",
              "fork",
              "forkjoin",
              "function",
              "generate|5",
              "genvar",
              "global",
              "highz0",
              "highz1",
              "if",
              "iff",
              "ifnone",
              "ignore_bins",
              "illegal_bins",
              "implements",
              "implies",
              "import",
              "incdir",
              "include",
              "initial",
              "inout",
              "input",
              "inside",
              "instance",
              "int",
              "integer",
              "interconnect",
              "interface",
              "intersect",
              "join",
              "join_any",
              "join_none",
              "large",
              "let",
              "liblist",
              "library",
              "local",
              "localparam",
              "logic",
              "longint",
              "macromodule",
              "matches",
              "medium",
              "modport",
              "module",
              "nand",
              "negedge",
              "nettype",
              "new",
              "nexttime",
              "nmos",
              "nor",
              "noshowcancelled",
              "not",
              "notif0",
              "notif1",
              "or",
              "output",
              "package",
              "packed",
              "parameter",
              "pmos",
              "posedge",
              "primitive",
              "priority",
              "program",
              "property",
              "protected",
              "pull0",
              "pull1",
              "pulldown",
              "pullup",
              "pulsestyle_ondetect",
              "pulsestyle_onevent",
              "pure",
              "rand",
              "randc",
              "randcase",
              "randsequence",
              "rcmos",
              "real",
              "realtime",
              "ref",
              "reg",
              "reject_on",
              "release",
              "repeat",
              "restrict",
              "return",
              "rnmos",
              "rpmos",
              "rtran",
              "rtranif0",
              "rtranif1",
              "s_always",
              "s_eventually",
              "s_nexttime",
              "s_until",
              "s_until_with",
              "scalared",
              "sequence",
              "shortint",
              "shortreal",
              "showcancelled",
              "signed",
              "small",
              "soft",
              "solve",
              "specify",
              "specparam",
              "static",
              "string",
              "strong",
              "strong0",
              "strong1",
              "struct",
              "super",
              "supply0",
              "supply1",
              "sync_accept_on",
              "sync_reject_on",
              "table",
              "tagged",
              "task",
              "this",
              "throughout",
              "time",
              "timeprecision",
              "timeunit",
              "tran",
              "tranif0",
              "tranif1",
              "tri",
              "tri0",
              "tri1",
              "triand",
              "trior",
              "trireg",
              "type",
              "typedef",
              "union",
              "unique",
              "unique0",
              "unsigned",
              "until",
              "until_with",
              "untyped",
              "use",
              "uwire",
              "var",
              "vectored",
              "virtual",
              "void",
              "wait",
              "wait_order",
              "wand",
              "weak",
              "weak0",
              "weak1",
              "while",
              "wildcard",
              "wire",
              "with",
              "within",
              "wor",
              "xnor",
              "xor"
            ],
            literal: [ 'null' ],
            built_in: [
              "$finish",
              "$stop",
              "$exit",
              "$fatal",
              "$error",
              "$warning",
              "$info",
              "$realtime",
              "$time",
              "$printtimescale",
              "$bitstoreal",
              "$bitstoshortreal",
              "$itor",
              "$signed",
              "$cast",
              "$bits",
              "$stime",
              "$timeformat",
              "$realtobits",
              "$shortrealtobits",
              "$rtoi",
              "$unsigned",
              "$asserton",
              "$assertkill",
              "$assertpasson",
              "$assertfailon",
              "$assertnonvacuouson",
              "$assertoff",
              "$assertcontrol",
              "$assertpassoff",
              "$assertfailoff",
              "$assertvacuousoff",
              "$isunbounded",
              "$sampled",
              "$fell",
              "$changed",
              "$past_gclk",
              "$fell_gclk",
              "$changed_gclk",
              "$rising_gclk",
              "$steady_gclk",
              "$coverage_control",
              "$coverage_get",
              "$coverage_save",
              "$set_coverage_db_name",
              "$rose",
              "$stable",
              "$past",
              "$rose_gclk",
              "$stable_gclk",
              "$future_gclk",
              "$falling_gclk",
              "$changing_gclk",
              "$display",
              "$coverage_get_max",
              "$coverage_merge",
              "$get_coverage",
              "$load_coverage_db",
              "$typename",
              "$unpacked_dimensions",
              "$left",
              "$low",
              "$increment",
              "$clog2",
              "$ln",
              "$log10",
              "$exp",
              "$sqrt",
              "$pow",
              "$floor",
              "$ceil",
              "$sin",
              "$cos",
              "$tan",
              "$countbits",
              "$onehot",
              "$isunknown",
              "$fatal",
              "$warning",
              "$dimensions",
              "$right",
              "$high",
              "$size",
              "$asin",
              "$acos",
              "$atan",
              "$atan2",
              "$hypot",
              "$sinh",
              "$cosh",
              "$tanh",
              "$asinh",
              "$acosh",
              "$atanh",
              "$countones",
              "$onehot0",
              "$error",
              "$info",
              "$random",
              "$dist_chi_square",
              "$dist_erlang",
              "$dist_exponential",
              "$dist_normal",
              "$dist_poisson",
              "$dist_t",
              "$dist_uniform",
              "$q_initialize",
              "$q_remove",
              "$q_exam",
              "$async$and$array",
              "$async$nand$array",
              "$async$or$array",
              "$async$nor$array",
              "$sync$and$array",
              "$sync$nand$array",
              "$sync$or$array",
              "$sync$nor$array",
              "$q_add",
              "$q_full",
              "$psprintf",
              "$async$and$plane",
              "$async$nand$plane",
              "$async$or$plane",
              "$async$nor$plane",
              "$sync$and$plane",
              "$sync$nand$plane",
              "$sync$or$plane",
              "$sync$nor$plane",
              "$system",
              "$display",
              "$displayb",
              "$displayh",
              "$displayo",
              "$strobe",
              "$strobeb",
              "$strobeh",
              "$strobeo",
              "$write",
              "$readmemb",
              "$readmemh",
              "$writememh",
              "$value$plusargs",
              "$dumpvars",
              "$dumpon",
              "$dumplimit",
              "$dumpports",
              "$dumpportson",
              "$dumpportslimit",
              "$writeb",
              "$writeh",
              "$writeo",
              "$monitor",
              "$monitorb",
              "$monitorh",
              "$monitoro",
              "$writememb",
              "$dumpfile",
              "$dumpoff",
              "$dumpall",
              "$dumpflush",
              "$dumpportsoff",
              "$dumpportsall",
              "$dumpportsflush",
              "$fclose",
              "$fdisplay",
              "$fdisplayb",
              "$fdisplayh",
              "$fdisplayo",
              "$fstrobe",
              "$fstrobeb",
              "$fstrobeh",
              "$fstrobeo",
              "$swrite",
              "$swriteb",
              "$swriteh",
              "$swriteo",
              "$fscanf",
              "$fread",
              "$fseek",
              "$fflush",
              "$feof",
              "$fopen",
              "$fwrite",
              "$fwriteb",
              "$fwriteh",
              "$fwriteo",
              "$fmonitor",
              "$fmonitorb",
              "$fmonitorh",
              "$fmonitoro",
              "$sformat",
              "$sformatf",
              "$fgetc",
              "$ungetc",
              "$fgets",
              "$sscanf",
              "$rewind",
              "$ftell",
              "$ferror"
            ]
          };
          const BUILT_IN_CONSTANTS = [
            "__FILE__",
            "__LINE__"
          ];
          const DIRECTIVES = [
            "begin_keywords",
            "celldefine",
            "default_nettype",
            "default_decay_time",
            "default_trireg_strength",
            "define",
            "delay_mode_distributed",
            "delay_mode_path",
            "delay_mode_unit",
            "delay_mode_zero",
            "else",
            "elsif",
            "end_keywords",
            "endcelldefine",
            "endif",
            "ifdef",
            "ifndef",
            "include",
            "line",
            "nounconnected_drive",
            "pragma",
            "resetall",
            "timescale",
            "unconnected_drive",
            "undef",
            "undefineall"
          ];
 
          return {
            name: 'Verilog',
            aliases: [
              'v',
              'sv',
              'svh'
            ],
            case_insensitive: false,
            keywords: KEYWORDS,
            contains: [
              hljs.C_BLOCK_COMMENT_MODE,
              hljs.C_LINE_COMMENT_MODE,
              hljs.QUOTE_STRING_MODE,
              {
                scope: 'number',
                contains: [ hljs.BACKSLASH_ESCAPE ],
                variants: [
                  { begin: /\b((\d+'([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
                  { begin: /\B(('([bhodBHOD]))[0-9xzXZa-fA-F_]+)/ },
                  { // decimal
                    begin: /\b[0-9][0-9_]*/,
                    relevance: 0
                  }
                ]
              },
              /* parameters to instances */
              {
                scope: 'variable',
                variants: [
                  { begin: '#\\((?!parameter).+\\)' },
                  {
                    begin: '\\.\\w+',
                    relevance: 0
                  }
                ]
              },
              {
                scope: 'variable.constant',
                match: regex.concat(/`/, regex.either(...BUILT_IN_CONSTANTS)),
              },
              {
                scope: 'meta',
                begin: regex.concat(/`/, regex.either(...DIRECTIVES)),
                end: /$|\/\/|\/\*/,
                returnEnd: true,
                keywords: DIRECTIVES
              }
            ]
          };
        }
 
        verilog_1 = verilog;
        return verilog_1;
    }
 
    /*
    Language: VHDL
    Author: Igor Kalnitsky <igor@kalnitsky.org>
    Contributors: Daniel C.K. Kho <daniel.kho@tauhop.com>, Guillaume Savaton <guillaume.savaton@eseo.fr>
    Description: VHDL is a hardware description language used in electronic design automation to describe digital and mixed-signal systems.
    Website: https://en.wikipedia.org/wiki/VHDL
    */
 
    var vhdl_1;
    var hasRequiredVhdl;
 
    function requireVhdl () {
        if (hasRequiredVhdl) return vhdl_1;
        hasRequiredVhdl = 1;
        function vhdl(hljs) {
          // Regular expression for VHDL numeric literals.
 
          // Decimal literal:
          const INTEGER_RE = '\\d(_|\\d)*';
          const EXPONENT_RE = '[eE][-+]?' + INTEGER_RE;
          const DECIMAL_LITERAL_RE = INTEGER_RE + '(\\.' + INTEGER_RE + ')?' + '(' + EXPONENT_RE + ')?';
          // Based literal:
          const BASED_INTEGER_RE = '\\w+';
          const BASED_LITERAL_RE = INTEGER_RE + '#' + BASED_INTEGER_RE + '(\\.' + BASED_INTEGER_RE + ')?' + '#' + '(' + EXPONENT_RE + ')?';
 
          const NUMBER_RE = '\\b(' + BASED_LITERAL_RE + '|' + DECIMAL_LITERAL_RE + ')';
 
          const KEYWORDS = [
            "abs",
            "access",
            "after",
            "alias",
            "all",
            "and",
            "architecture",
            "array",
            "assert",
            "assume",
            "assume_guarantee",
            "attribute",
            "begin",
            "block",
            "body",
            "buffer",
            "bus",
            "case",
            "component",
            "configuration",
            "constant",
            "context",
            "cover",
            "disconnect",
            "downto",
            "default",
            "else",
            "elsif",
            "end",
            "entity",
            "exit",
            "fairness",
            "file",
            "for",
            "force",
            "function",
            "generate",
            "generic",
            "group",
            "guarded",
            "if",
            "impure",
            "in",
            "inertial",
            "inout",
            "is",
            "label",
            "library",
            "linkage",
            "literal",
            "loop",
            "map",
            "mod",
            "nand",
            "new",
            "next",
            "nor",
            "not",
            "null",
            "of",
            "on",
            "open",
            "or",
            "others",
            "out",
            "package",
            "parameter",
            "port",
            "postponed",
            "procedure",
            "process",
            "property",
            "protected",
            "pure",
            "range",
            "record",
            "register",
            "reject",
            "release",
            "rem",
            "report",
            "restrict",
            "restrict_guarantee",
            "return",
            "rol",
            "ror",
            "select",
            "sequence",
            "severity",
            "shared",
            "signal",
            "sla",
            "sll",
            "sra",
            "srl",
            "strong",
            "subtype",
            "then",
            "to",
            "transport",
            "type",
            "unaffected",
            "units",
            "until",
            "use",
            "variable",
            "view",
            "vmode",
            "vprop",
            "vunit",
            "wait",
            "when",
            "while",
            "with",
            "xnor",
            "xor"
          ];
          const BUILT_INS = [
            "boolean",
            "bit",
            "character",
            "integer",
            "time",
            "delay_length",
            "natural",
            "positive",
            "string",
            "bit_vector",
            "file_open_kind",
            "file_open_status",
            "std_logic",
            "std_logic_vector",
            "unsigned",
            "signed",
            "boolean_vector",
            "integer_vector",
            "std_ulogic",
            "std_ulogic_vector",
            "unresolved_unsigned",
            "u_unsigned",
            "unresolved_signed",
            "u_signed",
            "real_vector",
            "time_vector"
          ];
          const LITERALS = [
            // severity_level
            "false",
            "true",
            "note",
            "warning",
            "error",
            "failure",
            // textio
            "line",
            "text",
            "side",
            "width"
          ];
 
          return {
            name: 'VHDL',
            case_insensitive: true,
            keywords: {
              keyword: KEYWORDS,
              built_in: BUILT_INS,
              literal: LITERALS
            },
            illegal: /\{/,
            contains: [
              hljs.C_BLOCK_COMMENT_MODE, // VHDL-2008 block commenting.
              hljs.COMMENT('--', '$'),
              hljs.QUOTE_STRING_MODE,
              {
                className: 'number',
                begin: NUMBER_RE,
                relevance: 0
              },
              {
                className: 'string',
                begin: '\'(U|X|0|1|Z|W|L|H|-)\'',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                className: 'symbol',
                begin: '\'[A-Za-z](_?[A-Za-z0-9])*',
                contains: [ hljs.BACKSLASH_ESCAPE ]
              }
            ]
          };
        }
 
        vhdl_1 = vhdl;
        return vhdl_1;
    }
 
    /*
    Language: Vim Script
    Author: Jun Yang <yangjvn@126.com>
    Description: full keyword and built-in from http://vimdoc.sourceforge.net/htmldoc/
    Website: https://www.vim.org
    Category: scripting
    */
 
    var vim_1;
    var hasRequiredVim;
 
    function requireVim () {
        if (hasRequiredVim) return vim_1;
        hasRequiredVim = 1;
        function vim(hljs) {
          return {
            name: 'Vim Script',
            keywords: {
              $pattern: /[!#@\w]+/,
              keyword:
                // express version except: ! & * < = > !! # @ @@
                'N|0 P|0 X|0 a|0 ab abc abo al am an|0 ar arga argd arge argdo argg argl argu as au aug aun b|0 bN ba bad bd be bel bf bl bm bn bo bp br brea breaka breakd breakl bro bufdo buffers bun bw c|0 cN cNf ca cabc caddb cad caddf cal cat cb cc ccl cd ce cex cf cfir cgetb cgete cg changes chd che checkt cl cla clo cm cmapc cme cn cnew cnf cno cnorea cnoreme co col colo com comc comp con conf cope '
                + 'cp cpf cq cr cs cst cu cuna cunme cw delm deb debugg delc delf dif diffg diffo diffp diffpu diffs diffthis dig di dl dell dj dli do doautoa dp dr ds dsp e|0 ea ec echoe echoh echom echon el elsei em en endfo endf endt endw ene ex exe exi exu f|0 files filet fin fina fini fir fix fo foldc foldd folddoc foldo for fu go gr grepa gu gv ha helpf helpg helpt hi hid his ia iabc if ij il im imapc '
                + 'ime ino inorea inoreme int is isp iu iuna iunme j|0 ju k|0 keepa kee keepj lN lNf l|0 lad laddb laddf la lan lat lb lc lch lcl lcs le lefta let lex lf lfir lgetb lgete lg lgr lgrepa lh ll lla lli lmak lm lmapc lne lnew lnf ln loadk lo loc lockv lol lope lp lpf lr ls lt lu lua luad luaf lv lvimgrepa lw m|0 ma mak map mapc marks mat me menut mes mk mks mksp mkv mkvie mod mz mzf nbc nb nbs new nm nmapc nme nn nnoreme noa no noh norea noreme norm nu nun nunme ol o|0 om omapc ome on ono onoreme opt ou ounme ow p|0 '
                + 'profd prof pro promptr pc ped pe perld po popu pp pre prev ps pt ptN ptf ptj ptl ptn ptp ptr pts pu pw py3 python3 py3d py3f py pyd pyf quita qa rec red redi redr redraws reg res ret retu rew ri rightb rub rubyd rubyf rund ru rv sN san sa sal sav sb sbN sba sbf sbl sbm sbn sbp sbr scrip scripte scs se setf setg setl sf sfir sh sim sig sil sl sla sm smap smapc sme sn sni sno snor snoreme sor '
                + 'so spelld spe spelli spellr spellu spellw sp spr sre st sta startg startr star stopi stj sts sun sunm sunme sus sv sw sy synti sync tN tabN tabc tabdo tabe tabf tabfir tabl tabm tabnew '
                + 'tabn tabo tabp tabr tabs tab ta tags tc tcld tclf te tf th tj tl tm tn to tp tr try ts tu u|0 undoj undol una unh unl unlo unm unme uns up ve verb vert vim vimgrepa vi viu vie vm vmapc vme vne vn vnoreme vs vu vunme windo w|0 wN wa wh wi winc winp wn wp wq wqa ws wu wv x|0 xa xmapc xm xme xn xnoreme xu xunme y|0 z|0 ~ '
                // full version
                + 'Next Print append abbreviate abclear aboveleft all amenu anoremenu args argadd argdelete argedit argglobal arglocal argument ascii autocmd augroup aunmenu buffer bNext ball badd bdelete behave belowright bfirst blast bmodified bnext botright bprevious brewind break breakadd breakdel breaklist browse bunload '
                + 'bwipeout change cNext cNfile cabbrev cabclear caddbuffer caddexpr caddfile call catch cbuffer cclose center cexpr cfile cfirst cgetbuffer cgetexpr cgetfile chdir checkpath checktime clist clast close cmap cmapclear cmenu cnext cnewer cnfile cnoremap cnoreabbrev cnoremenu copy colder colorscheme command comclear compiler continue confirm copen cprevious cpfile cquit crewind cscope cstag cunmap '
                + 'cunabbrev cunmenu cwindow delete delmarks debug debuggreedy delcommand delfunction diffupdate diffget diffoff diffpatch diffput diffsplit digraphs display deletel djump dlist doautocmd doautoall deletep drop dsearch dsplit edit earlier echo echoerr echohl echomsg else elseif emenu endif endfor '
                + 'endfunction endtry endwhile enew execute exit exusage file filetype find finally finish first fixdel fold foldclose folddoopen folddoclosed foldopen function global goto grep grepadd gui gvim hardcopy help helpfind helpgrep helptags highlight hide history insert iabbrev iabclear ijump ilist imap '
                + 'imapclear imenu inoremap inoreabbrev inoremenu intro isearch isplit iunmap iunabbrev iunmenu join jumps keepalt keepmarks keepjumps lNext lNfile list laddexpr laddbuffer laddfile last language later lbuffer lcd lchdir lclose lcscope left leftabove lexpr lfile lfirst lgetbuffer lgetexpr lgetfile lgrep lgrepadd lhelpgrep llast llist lmake lmap lmapclear lnext lnewer lnfile lnoremap loadkeymap loadview '
                + 'lockmarks lockvar lolder lopen lprevious lpfile lrewind ltag lunmap luado luafile lvimgrep lvimgrepadd lwindow move mark make mapclear match menu menutranslate messages mkexrc mksession mkspell mkvimrc mkview mode mzscheme mzfile nbclose nbkey nbsart next nmap nmapclear nmenu nnoremap '
                + 'nnoremenu noautocmd noremap nohlsearch noreabbrev noremenu normal number nunmap nunmenu oldfiles open omap omapclear omenu only onoremap onoremenu options ounmap ounmenu ownsyntax print profdel profile promptfind promptrepl pclose pedit perl perldo pop popup ppop preserve previous psearch ptag ptNext '
                + 'ptfirst ptjump ptlast ptnext ptprevious ptrewind ptselect put pwd py3do py3file python pydo pyfile quit quitall qall read recover redo redir redraw redrawstatus registers resize retab return rewind right rightbelow ruby rubydo rubyfile rundo runtime rviminfo substitute sNext sandbox sargument sall saveas sbuffer sbNext sball sbfirst sblast sbmodified sbnext sbprevious sbrewind scriptnames scriptencoding '
                + 'scscope set setfiletype setglobal setlocal sfind sfirst shell simalt sign silent sleep slast smagic smapclear smenu snext sniff snomagic snoremap snoremenu sort source spelldump spellgood spellinfo spellrepall spellundo spellwrong split sprevious srewind stop stag startgreplace startreplace '
                + 'startinsert stopinsert stjump stselect sunhide sunmap sunmenu suspend sview swapname syntax syntime syncbind tNext tabNext tabclose tabedit tabfind tabfirst tablast tabmove tabnext tabonly tabprevious tabrewind tag tcl tcldo tclfile tearoff tfirst throw tjump tlast tmenu tnext topleft tprevious ' + 'trewind tselect tunmenu undo undojoin undolist unabbreviate unhide unlet unlockvar unmap unmenu unsilent update vglobal version verbose vertical vimgrep vimgrepadd visual viusage view vmap vmapclear vmenu vnew '
                + 'vnoremap vnoremenu vsplit vunmap vunmenu write wNext wall while winsize wincmd winpos wnext wprevious wqall wsverb wundo wviminfo xit xall xmapclear xmap xmenu xnoremap xnoremenu xunmap xunmenu yank',
              built_in: // built in func
                'synIDtrans atan2 range matcharg did_filetype asin feedkeys xor argv '
                + 'complete_check add getwinposx getqflist getwinposy screencol '
                + 'clearmatches empty extend getcmdpos mzeval garbagecollect setreg '
                + 'ceil sqrt diff_hlID inputsecret get getfperm getpid filewritable '
                + 'shiftwidth max sinh isdirectory synID system inputrestore winline '
                + 'atan visualmode inputlist tabpagewinnr round getregtype mapcheck '
                + 'hasmapto histdel argidx findfile sha256 exists toupper getcmdline '
                + 'taglist string getmatches bufnr strftime winwidth bufexists '
                + 'strtrans tabpagebuflist setcmdpos remote_read printf setloclist '
                + 'getpos getline bufwinnr float2nr len getcmdtype diff_filler luaeval '
                + 'resolve libcallnr foldclosedend reverse filter has_key bufname '
                + 'str2float strlen setline getcharmod setbufvar index searchpos '
                + 'shellescape undofile foldclosed setqflist buflisted strchars str2nr '
                + 'virtcol floor remove undotree remote_expr winheight gettabwinvar '
                + 'reltime cursor tabpagenr finddir localtime acos getloclist search '
                + 'tanh matchend rename gettabvar strdisplaywidth type abs py3eval '
                + 'setwinvar tolower wildmenumode log10 spellsuggest bufloaded '
                + 'synconcealed nextnonblank server2client complete settabwinvar '
                + 'executable input wincol setmatches getftype hlID inputsave '
                + 'searchpair or screenrow line settabvar histadd deepcopy strpart '
                + 'remote_peek and eval getftime submatch screenchar winsaveview '
                + 'matchadd mkdir screenattr getfontname libcall reltimestr getfsize '
                + 'winnr invert pow getbufline byte2line soundfold repeat fnameescape '
                + 'tagfiles sin strwidth spellbadword trunc maparg log lispindent '
                + 'hostname setpos globpath remote_foreground getchar synIDattr '
                + 'fnamemodify cscope_connection stridx winbufnr indent min '
                + 'complete_add nr2char searchpairpos inputdialog values matchlist '
                + 'items hlexists strridx browsedir expand fmod pathshorten line2byte '
                + 'argc count getwinvar glob foldtextresult getreg foreground cosh '
                + 'matchdelete has char2nr simplify histget searchdecl iconv '
                + 'winrestcmd pumvisible writefile foldlevel haslocaldir keys cos '
                + 'matchstr foldtext histnr tan tempname getcwd byteidx getbufvar '
                + 'islocked escape eventhandler remote_send serverlist winrestview '
                + 'synstack pyeval prevnonblank readfile cindent filereadable changenr '
                + 'exp'
            },
            illegal: /;/,
            contains: [
              hljs.NUMBER_MODE,
              {
                className: 'string',
                begin: '\'',
                end: '\'',
                illegal: '\\n'
              },
 
              /*
              A double quote can start either a string or a line comment. Strings are
              ended before the end of a line by another double quote and can contain
              escaped double-quotes and post-escaped line breaks.
 
              Also, any double quote at the beginning of a line is a comment but we
              don't handle that properly at the moment: any double quote inside will
              turn them into a string. Handling it properly will require a smarter
              parser.
              */
              {
                className: 'string',
                begin: /"(\\"|\n\\|[^"\n])*"/
              },
              hljs.COMMENT('"', '$'),
 
              {
                className: 'variable',
                begin: /[bwtglsav]:[\w\d_]+/
              },
              {
                begin: [
                  /\b(?:function|function!)/,
                  /\s+/,
                  hljs.IDENT_RE
                ],
                className: {
                  1: "keyword",
                  3: "title"
                },
                end: '$',
                relevance: 0,
                contains: [
                  {
                    className: 'params',
                    begin: '\\(',
                    end: '\\)'
                  }
                ]
              },
              {
                className: 'symbol',
                begin: /<[\w-]+>/
              }
            ]
          };
        }
 
        vim_1 = vim;
        return vim_1;
    }
 
    /*
    Language: WebAssembly
    Website: https://webassembly.org
    Description:  Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.
    Category: web, common
    Audit: 2020
    */
 
    var wasm_1;
    var hasRequiredWasm;
 
    function requireWasm () {
        if (hasRequiredWasm) return wasm_1;
        hasRequiredWasm = 1;
        /** @type LanguageFn */
        function wasm(hljs) {
          hljs.regex;
          const BLOCK_COMMENT = hljs.COMMENT(/\(;/, /;\)/);
          BLOCK_COMMENT.contains.push("self");
          const LINE_COMMENT = hljs.COMMENT(/;;/, /$/);
 
          const KWS = [
            "anyfunc",
            "block",
            "br",
            "br_if",
            "br_table",
            "call",
            "call_indirect",
            "data",
            "drop",
            "elem",
            "else",
            "end",
            "export",
            "func",
            "global.get",
            "global.set",
            "local.get",
            "local.set",
            "local.tee",
            "get_global",
            "get_local",
            "global",
            "if",
            "import",
            "local",
            "loop",
            "memory",
            "memory.grow",
            "memory.size",
            "module",
            "mut",
            "nop",
            "offset",
            "param",
            "result",
            "return",
            "select",
            "set_global",
            "set_local",
            "start",
            "table",
            "tee_local",
            "then",
            "type",
            "unreachable"
          ];
 
          const FUNCTION_REFERENCE = {
            begin: [
              /(?:func|call|call_indirect)/,
              /\s+/,
              /\$[^\s)]+/
            ],
            className: {
              1: "keyword",
              3: "title.function"
            }
          };
 
          const ARGUMENT = {
            className: "variable",
            begin: /\$[\w_]+/
          };
 
          const PARENS = {
            match: /(\((?!;)|\))+/,
            className: "punctuation",
            relevance: 0
          };
 
          const NUMBER = {
            className: "number",
            relevance: 0,
            // borrowed from Prism, TODO: split out into variants
            match: /[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/
          };
 
          const TYPE = {
            // look-ahead prevents us from gobbling up opcodes
            match: /(i32|i64|f32|f64)(?!\.)/,
            className: "type"
          };
 
          const MATH_OPERATIONS = {
            className: "keyword",
            // borrowed from Prism, TODO: split out into variants
            match: /\b(f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|nearest|neg?|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|store(?:8|16|32)?|sqrt|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))\b/
          };
 
          const OFFSET_ALIGN = {
            match: [
              /(?:offset|align)/,
              /\s*/,
              /=/
            ],
            className: {
              1: "keyword",
              3: "operator"
            }
          };
 
          return {
            name: 'WebAssembly',
            keywords: {
              $pattern: /[\w.]+/,
              keyword: KWS
            },
            contains: [
              LINE_COMMENT,
              BLOCK_COMMENT,
              OFFSET_ALIGN,
              ARGUMENT,
              PARENS,
              FUNCTION_REFERENCE,
              hljs.QUOTE_STRING_MODE,
              TYPE,
              MATH_OPERATIONS,
              NUMBER
            ]
          };
        }
 
        wasm_1 = wasm;
        return wasm_1;
    }
 
    /*
    Language: Wren
    Description: Think Smalltalk in a Lua-sized package with a dash of Erlang and wrapped up in a familiar, modern syntax.
    Category: scripting
    Author: @joshgoebel
    Maintainer: @joshgoebel
    Website: https://wren.io/
    */
 
    var wren_1;
    var hasRequiredWren;
 
    function requireWren () {
        if (hasRequiredWren) return wren_1;
        hasRequiredWren = 1;
        /** @type LanguageFn */
        function wren(hljs) {
          const regex = hljs.regex;
          const IDENT_RE = /[a-zA-Z]\w*/;
          const KEYWORDS = [
            "as",
            "break",
            "class",
            "construct",
            "continue",
            "else",
            "for",
            "foreign",
            "if",
            "import",
            "in",
            "is",
            "return",
            "static",
            "var",
            "while"
          ];
          const LITERALS = [
            "true",
            "false",
            "null"
          ];
          const LANGUAGE_VARS = [
            "this",
            "super"
          ];
          const CORE_CLASSES = [
            "Bool",
            "Class",
            "Fiber",
            "Fn",
            "List",
            "Map",
            "Null",
            "Num",
            "Object",
            "Range",
            "Sequence",
            "String",
            "System"
          ];
          const OPERATORS = [
            "-",
            "~",
            /\*/,
            "%",
            /\.\.\./,
            /\.\./,
            /\+/,
            "<<",
            ">>",
            ">=",
            "<=",
            "<",
            ">",
            /\^/,
            /!=/,
            /!/,
            /\bis\b/,
            "==",
            "&&",
            "&",
            /\|\|/,
            /\|/,
            /\?:/,
            "="
          ];
          const FUNCTION = {
            relevance: 0,
            match: regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE, /(?=\s*[({])/),
            className: "title.function"
          };
          const FUNCTION_DEFINITION = {
            match: regex.concat(
              regex.either(
                regex.concat(/\b(?!(if|while|for|else|super)\b)/, IDENT_RE),
                regex.either(...OPERATORS)
              ),
              /(?=\s*\([^)]+\)\s*\{)/),
            className: "title.function",
            starts: { contains: [
              {
                begin: /\(/,
                end: /\)/,
                contains: [
                  {
                    relevance: 0,
                    scope: "params",
                    match: IDENT_RE
                  }
                ]
              }
            ] }
          };
          const CLASS_DEFINITION = {
            variants: [
              { match: [
                /class\s+/,
                IDENT_RE,
                /\s+is\s+/,
                IDENT_RE
              ] },
              { match: [
                /class\s+/,
                IDENT_RE
              ] }
            ],
            scope: {
              2: "title.class",
              4: "title.class.inherited"
            },
            keywords: KEYWORDS
          };
 
          const OPERATOR = {
            relevance: 0,
            match: regex.either(...OPERATORS),
            className: "operator"
          };
 
          const TRIPLE_STRING = {
            className: "string",
            begin: /"""/,
            end: /"""/
          };
 
          const PROPERTY = {
            className: "property",
            begin: regex.concat(/\./, regex.lookahead(IDENT_RE)),
            end: IDENT_RE,
            excludeBegin: true,
            relevance: 0
          };
 
          const FIELD = {
            relevance: 0,
            match: regex.concat(/\b_/, IDENT_RE),
            scope: "variable"
          };
 
          // CamelCase
          const CLASS_REFERENCE = {
            relevance: 0,
            match: /\b[A-Z]+[a-z]+([A-Z]+[a-z]+)*/,
            scope: "title.class",
            keywords: { _: CORE_CLASSES }
          };
 
          // TODO: add custom number modes
          const NUMBER = hljs.C_NUMBER_MODE;
 
          const SETTER = {
            match: [
              IDENT_RE,
              /\s*/,
              /=/,
              /\s*/,
              /\(/,
              IDENT_RE,
              /\)\s*\{/
            ],
            scope: {
              1: "title.function",
              3: "operator",
              6: "params"
            }
          };
 
          const COMMENT_DOCS = hljs.COMMENT(
            /\/\*\*/,
            /\*\//,
            { contains: [
              {
                match: /@[a-z]+/,
                scope: "doctag"
              },
              "self"
            ] }
          );
          const SUBST = {
            scope: "subst",
            begin: /%\(/,
            end: /\)/,
            contains: [
              NUMBER,
              CLASS_REFERENCE,
              FUNCTION,
              FIELD,
              OPERATOR
            ]
          };
          const STRING = {
            scope: "string",
            begin: /"/,
            end: /"/,
            contains: [
              SUBST,
              {
                scope: "char.escape",
                variants: [
                  { match: /\\\\|\\["0%abefnrtv]/ },
                  { match: /\\x[0-9A-F]{2}/ },
                  { match: /\\u[0-9A-F]{4}/ },
                  { match: /\\U[0-9A-F]{8}/ }
                ]
              }
            ]
          };
          SUBST.contains.push(STRING);
 
          const ALL_KWS = [
            ...KEYWORDS,
            ...LANGUAGE_VARS,
            ...LITERALS
          ];
          const VARIABLE = {
            relevance: 0,
            match: regex.concat(
              "\\b(?!",
              ALL_KWS.join("|"),
              "\\b)",
              /[a-zA-Z_]\w*(?:[?!]|\b)/
            ),
            className: "variable"
          };
 
          // TODO: reconsider this in the future
          const ATTRIBUTE = {
            // scope: "meta",
            scope: "comment",
            variants: [
              {
                begin: [
                  /#!?/,
                  /[A-Za-z_]+(?=\()/
                ],
                beginScope: {
                  // 2: "attr"
                },
                keywords: { literal: LITERALS },
                contains: [
                  // NUMBER,
                  // VARIABLE
                ],
                end: /\)/
              },
              {
                begin: [
                  /#!?/,
                  /[A-Za-z_]+/
                ],
                beginScope: {
                  // 2: "attr"
                },
                end: /$/
              }
            ]
          };
 
          return {
            name: "Wren",
            keywords: {
              keyword: KEYWORDS,
              "variable.language": LANGUAGE_VARS,
              literal: LITERALS
            },
            contains: [
              ATTRIBUTE,
              NUMBER,
              STRING,
              TRIPLE_STRING,
              COMMENT_DOCS,
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              CLASS_REFERENCE,
              CLASS_DEFINITION,
              SETTER,
              FUNCTION_DEFINITION,
              FUNCTION,
              OPERATOR,
              FIELD,
              PROPERTY,
              VARIABLE
            ]
          };
        }
 
        wren_1 = wren;
        return wren_1;
    }
 
    /*
    Language: Intel x86 Assembly
    Author: innocenat <innocenat@gmail.com>
    Description: x86 assembly language using Intel's mnemonic and NASM syntax
    Website: https://en.wikipedia.org/wiki/X86_assembly_language
    Category: assembler
    */
 
    var x86asm_1;
    var hasRequiredX86asm;
 
    function requireX86asm () {
        if (hasRequiredX86asm) return x86asm_1;
        hasRequiredX86asm = 1;
        function x86asm(hljs) {
          return {
            name: 'Intel x86 Assembly',
            case_insensitive: true,
            keywords: {
              $pattern: '[.%]?' + hljs.IDENT_RE,
              keyword:
                'lock rep repe repz repne repnz xaquire xrelease bnd nobnd '
                + 'aaa aad aam aas adc add and arpl bb0_reset bb1_reset bound bsf bsr bswap bt btc btr bts call cbw cdq cdqe clc cld cli clts cmc cmp cmpsb cmpsd cmpsq cmpsw cmpxchg cmpxchg486 cmpxchg8b cmpxchg16b cpuid cpu_read cpu_write cqo cwd cwde daa das dec div dmint emms enter equ f2xm1 fabs fadd faddp fbld fbstp fchs fclex fcmovb fcmovbe fcmove fcmovnb fcmovnbe fcmovne fcmovnu fcmovu fcom fcomi fcomip fcomp fcompp fcos fdecstp fdisi fdiv fdivp fdivr fdivrp femms feni ffree ffreep fiadd ficom ficomp fidiv fidivr fild fimul fincstp finit fist fistp fisttp fisub fisubr fld fld1 fldcw fldenv fldl2e fldl2t fldlg2 fldln2 fldpi fldz fmul fmulp fnclex fndisi fneni fninit fnop fnsave fnstcw fnstenv fnstsw fpatan fprem fprem1 fptan frndint frstor fsave fscale fsetpm fsin fsincos fsqrt fst fstcw fstenv fstp fstsw fsub fsubp fsubr fsubrp ftst fucom fucomi fucomip fucomp fucompp fxam fxch fxtract fyl2x fyl2xp1 hlt ibts icebp idiv imul in inc incbin insb insd insw int int01 int1 int03 int3 into invd invpcid invlpg invlpga iret iretd iretq iretw jcxz jecxz jrcxz jmp jmpe lahf lar lds lea leave les lfence lfs lgdt lgs lidt lldt lmsw loadall loadall286 lodsb lodsd lodsq lodsw loop loope loopne loopnz loopz lsl lss ltr mfence monitor mov movd movq movsb movsd movsq movsw movsx movsxd movzx mul mwait neg nop not or out outsb outsd outsw packssdw packsswb packuswb paddb paddd paddsb paddsiw paddsw paddusb paddusw paddw pand pandn pause paveb pavgusb pcmpeqb pcmpeqd pcmpeqw pcmpgtb pcmpgtd pcmpgtw pdistib pf2id pfacc pfadd pfcmpeq pfcmpge pfcmpgt pfmax pfmin pfmul pfrcp pfrcpit1 pfrcpit2 pfrsqit1 pfrsqrt pfsub pfsubr pi2fd pmachriw pmaddwd pmagw pmulhriw pmulhrwa pmulhrwc pmulhw pmullw pmvgezb pmvlzb pmvnzb pmvzb pop popa popad popaw popf popfd popfq popfw por prefetch prefetchw pslld psllq psllw psrad psraw psrld psrlq psrlw psubb psubd psubsb psubsiw psubsw psubusb psubusw psubw punpckhbw punpckhdq punpckhwd punpcklbw punpckldq punpcklwd push pusha pushad pushaw pushf pushfd pushfq pushfw pxor rcl rcr rdshr rdmsr rdpmc rdtsc rdtscp ret retf retn rol ror rdm rsdc rsldt rsm rsts sahf sal salc sar sbb scasb scasd scasq scasw sfence sgdt shl shld shr shrd sidt sldt skinit smi smint smintold smsw stc std sti stosb stosd stosq stosw str sub svdc svldt svts swapgs syscall sysenter sysexit sysret test ud0 ud1 ud2b ud2 ud2a umov verr verw fwait wbinvd wrshr wrmsr xadd xbts xchg xlatb xlat xor cmove cmovz cmovne cmovnz cmova cmovnbe cmovae cmovnb cmovb cmovnae cmovbe cmovna cmovg cmovnle cmovge cmovnl cmovl cmovnge cmovle cmovng cmovc cmovnc cmovo cmovno cmovs cmovns cmovp cmovpe cmovnp cmovpo je jz jne jnz ja jnbe jae jnb jb jnae jbe jna jg jnle jge jnl jl jnge jle jng jc jnc jo jno js jns jpo jnp jpe jp sete setz setne setnz seta setnbe setae setnb setnc setb setnae setcset setbe setna setg setnle setge setnl setl setnge setle setng sets setns seto setno setpe setp setpo setnp addps addss andnps andps cmpeqps cmpeqss cmpleps cmpless cmpltps cmpltss cmpneqps cmpneqss cmpnleps cmpnless cmpnltps cmpnltss cmpordps cmpordss cmpunordps cmpunordss cmpps cmpss comiss cvtpi2ps cvtps2pi cvtsi2ss cvtss2si cvttps2pi cvttss2si divps divss ldmxcsr maxps maxss minps minss movaps movhps movlhps movlps movhlps movmskps movntps movss movups mulps mulss orps rcpps rcpss rsqrtps rsqrtss shufps sqrtps sqrtss stmxcsr subps subss ucomiss unpckhps unpcklps xorps fxrstor fxrstor64 fxsave fxsave64 xgetbv xsetbv xsave xsave64 xsaveopt xsaveopt64 xrstor xrstor64 prefetchnta prefetcht0 prefetcht1 prefetcht2 maskmovq movntq pavgb pavgw pextrw pinsrw pmaxsw pmaxub pminsw pminub pmovmskb pmulhuw psadbw pshufw pf2iw pfnacc pfpnacc pi2fw pswapd maskmovdqu clflush movntdq movnti movntpd movdqa movdqu movdq2q movq2dq paddq pmuludq pshufd pshufhw pshuflw pslldq psrldq psubq punpckhqdq punpcklqdq addpd addsd andnpd andpd cmpeqpd cmpeqsd cmplepd cmplesd cmpltpd cmpltsd cmpneqpd cmpneqsd cmpnlepd cmpnlesd cmpnltpd cmpnltsd cmpordpd cmpordsd cmpunordpd cmpunordsd cmppd comisd cvtdq2pd cvtdq2ps cvtpd2dq cvtpd2pi cvtpd2ps cvtpi2pd cvtps2dq cvtps2pd cvtsd2si cvtsd2ss cvtsi2sd cvtss2sd cvttpd2pi cvttpd2dq cvttps2dq cvttsd2si divpd divsd maxpd maxsd minpd minsd movapd movhpd movlpd movmskpd movupd mulpd mulsd orpd shufpd sqrtpd sqrtsd subpd subsd ucomisd unpckhpd unpcklpd xorpd addsubpd addsubps haddpd haddps hsubpd hsubps lddqu movddup movshdup movsldup clgi stgi vmcall vmclear vmfunc vmlaunch vmload vmmcall vmptrld vmptrst vmread vmresume vmrun vmsave vmwrite vmxoff vmxon invept invvpid pabsb pabsw pabsd palignr phaddw phaddd phaddsw phsubw phsubd phsubsw pmaddubsw pmulhrsw pshufb psignb psignw psignd extrq insertq movntsd movntss lzcnt blendpd blendps blendvpd blendvps dppd dpps extractps insertps movntdqa mpsadbw packusdw pblendvb pblendw pcmpeqq pextrb pextrd pextrq phminposuw pinsrb pinsrd pinsrq pmaxsb pmaxsd pmaxud pmaxuw pminsb pminsd pminud pminuw pmovsxbw pmovsxbd pmovsxbq pmovsxwd pmovsxwq pmovsxdq pmovzxbw pmovzxbd pmovzxbq pmovzxwd pmovzxwq pmovzxdq pmuldq pmulld ptest roundpd roundps roundsd roundss crc32 pcmpestri pcmpestrm pcmpistri pcmpistrm pcmpgtq popcnt getsec pfrcpv pfrsqrtv movbe aesenc aesenclast aesdec aesdeclast aesimc aeskeygenassist vaesenc vaesenclast vaesdec vaesdeclast vaesimc vaeskeygenassist vaddpd vaddps vaddsd vaddss vaddsubpd vaddsubps vandpd vandps vandnpd vandnps vblendpd vblendps vblendvpd vblendvps vbroadcastss vbroadcastsd vbroadcastf128 vcmpeq_ospd vcmpeqpd vcmplt_ospd vcmpltpd vcmple_ospd vcmplepd vcmpunord_qpd vcmpunordpd vcmpneq_uqpd vcmpneqpd vcmpnlt_uspd vcmpnltpd vcmpnle_uspd vcmpnlepd vcmpord_qpd vcmpordpd vcmpeq_uqpd vcmpnge_uspd vcmpngepd vcmpngt_uspd vcmpngtpd vcmpfalse_oqpd vcmpfalsepd vcmpneq_oqpd vcmpge_ospd vcmpgepd vcmpgt_ospd vcmpgtpd vcmptrue_uqpd vcmptruepd vcmplt_oqpd vcmple_oqpd vcmpunord_spd vcmpneq_uspd vcmpnlt_uqpd vcmpnle_uqpd vcmpord_spd vcmpeq_uspd vcmpnge_uqpd vcmpngt_uqpd vcmpfalse_ospd vcmpneq_ospd vcmpge_oqpd vcmpgt_oqpd vcmptrue_uspd vcmppd vcmpeq_osps vcmpeqps vcmplt_osps vcmpltps vcmple_osps vcmpleps vcmpunord_qps vcmpunordps vcmpneq_uqps vcmpneqps vcmpnlt_usps vcmpnltps vcmpnle_usps vcmpnleps vcmpord_qps vcmpordps vcmpeq_uqps vcmpnge_usps vcmpngeps vcmpngt_usps vcmpngtps vcmpfalse_oqps vcmpfalseps vcmpneq_oqps vcmpge_osps vcmpgeps vcmpgt_osps vcmpgtps vcmptrue_uqps vcmptrueps vcmplt_oqps vcmple_oqps vcmpunord_sps vcmpneq_usps vcmpnlt_uqps vcmpnle_uqps vcmpord_sps vcmpeq_usps vcmpnge_uqps vcmpngt_uqps vcmpfalse_osps vcmpneq_osps vcmpge_oqps vcmpgt_oqps vcmptrue_usps vcmpps vcmpeq_ossd vcmpeqsd vcmplt_ossd vcmpltsd vcmple_ossd vcmplesd vcmpunord_qsd vcmpunordsd vcmpneq_uqsd vcmpneqsd vcmpnlt_ussd vcmpnltsd vcmpnle_ussd vcmpnlesd vcmpord_qsd vcmpordsd vcmpeq_uqsd vcmpnge_ussd vcmpngesd vcmpngt_ussd vcmpngtsd vcmpfalse_oqsd vcmpfalsesd vcmpneq_oqsd vcmpge_ossd vcmpgesd vcmpgt_ossd vcmpgtsd vcmptrue_uqsd vcmptruesd vcmplt_oqsd vcmple_oqsd vcmpunord_ssd vcmpneq_ussd vcmpnlt_uqsd vcmpnle_uqsd vcmpord_ssd vcmpeq_ussd vcmpnge_uqsd vcmpngt_uqsd vcmpfalse_ossd vcmpneq_ossd vcmpge_oqsd vcmpgt_oqsd vcmptrue_ussd vcmpsd vcmpeq_osss vcmpeqss vcmplt_osss vcmpltss vcmple_osss vcmpless vcmpunord_qss vcmpunordss vcmpneq_uqss vcmpneqss vcmpnlt_usss vcmpnltss vcmpnle_usss vcmpnless vcmpord_qss vcmpordss vcmpeq_uqss vcmpnge_usss vcmpngess vcmpngt_usss vcmpngtss vcmpfalse_oqss vcmpfalsess vcmpneq_oqss vcmpge_osss vcmpgess vcmpgt_osss vcmpgtss vcmptrue_uqss vcmptruess vcmplt_oqss vcmple_oqss vcmpunord_sss vcmpneq_usss vcmpnlt_uqss vcmpnle_uqss vcmpord_sss vcmpeq_usss vcmpnge_uqss vcmpngt_uqss vcmpfalse_osss vcmpneq_osss vcmpge_oqss vcmpgt_oqss vcmptrue_usss vcmpss vcomisd vcomiss vcvtdq2pd vcvtdq2ps vcvtpd2dq vcvtpd2ps vcvtps2dq vcvtps2pd vcvtsd2si vcvtsd2ss vcvtsi2sd vcvtsi2ss vcvtss2sd vcvtss2si vcvttpd2dq vcvttps2dq vcvttsd2si vcvttss2si vdivpd vdivps vdivsd vdivss vdppd vdpps vextractf128 vextractps vhaddpd vhaddps vhsubpd vhsubps vinsertf128 vinsertps vlddqu vldqqu vldmxcsr vmaskmovdqu vmaskmovps vmaskmovpd vmaxpd vmaxps vmaxsd vmaxss vminpd vminps vminsd vminss vmovapd vmovaps vmovd vmovq vmovddup vmovdqa vmovqqa vmovdqu vmovqqu vmovhlps vmovhpd vmovhps vmovlhps vmovlpd vmovlps vmovmskpd vmovmskps vmovntdq vmovntqq vmovntdqa vmovntpd vmovntps vmovsd vmovshdup vmovsldup vmovss vmovupd vmovups vmpsadbw vmulpd vmulps vmulsd vmulss vorpd vorps vpabsb vpabsw vpabsd vpacksswb vpackssdw vpackuswb vpackusdw vpaddb vpaddw vpaddd vpaddq vpaddsb vpaddsw vpaddusb vpaddusw vpalignr vpand vpandn vpavgb vpavgw vpblendvb vpblendw vpcmpestri vpcmpestrm vpcmpistri vpcmpistrm vpcmpeqb vpcmpeqw vpcmpeqd vpcmpeqq vpcmpgtb vpcmpgtw vpcmpgtd vpcmpgtq vpermilpd vpermilps vperm2f128 vpextrb vpextrw vpextrd vpextrq vphaddw vphaddd vphaddsw vphminposuw vphsubw vphsubd vphsubsw vpinsrb vpinsrw vpinsrd vpinsrq vpmaddwd vpmaddubsw vpmaxsb vpmaxsw vpmaxsd vpmaxub vpmaxuw vpmaxud vpminsb vpminsw vpminsd vpminub vpminuw vpminud vpmovmskb vpmovsxbw vpmovsxbd vpmovsxbq vpmovsxwd vpmovsxwq vpmovsxdq vpmovzxbw vpmovzxbd vpmovzxbq vpmovzxwd vpmovzxwq vpmovzxdq vpmulhuw vpmulhrsw vpmulhw vpmullw vpmulld vpmuludq vpmuldq vpor vpsadbw vpshufb vpshufd vpshufhw vpshuflw vpsignb vpsignw vpsignd vpslldq vpsrldq vpsllw vpslld vpsllq vpsraw vpsrad vpsrlw vpsrld vpsrlq vptest vpsubb vpsubw vpsubd vpsubq vpsubsb vpsubsw vpsubusb vpsubusw vpunpckhbw vpunpckhwd vpunpckhdq vpunpckhqdq vpunpcklbw vpunpcklwd vpunpckldq vpunpcklqdq vpxor vrcpps vrcpss vrsqrtps vrsqrtss vroundpd vroundps vroundsd vroundss vshufpd vshufps vsqrtpd vsqrtps vsqrtsd vsqrtss vstmxcsr vsubpd vsubps vsubsd vsubss vtestps vtestpd vucomisd vucomiss vunpckhpd vunpckhps vunpcklpd vunpcklps vxorpd vxorps vzeroall vzeroupper pclmullqlqdq pclmulhqlqdq pclmullqhqdq pclmulhqhqdq pclmulqdq vpclmullqlqdq vpclmulhqlqdq vpclmullqhqdq vpclmulhqhqdq vpclmulqdq vfmadd132ps vfmadd132pd vfmadd312ps vfmadd312pd vfmadd213ps vfmadd213pd vfmadd123ps vfmadd123pd vfmadd231ps vfmadd231pd vfmadd321ps vfmadd321pd vfmaddsub132ps vfmaddsub132pd vfmaddsub312ps vfmaddsub312pd vfmaddsub213ps vfmaddsub213pd vfmaddsub123ps vfmaddsub123pd vfmaddsub231ps vfmaddsub231pd vfmaddsub321ps vfmaddsub321pd vfmsub132ps vfmsub132pd vfmsub312ps vfmsub312pd vfmsub213ps vfmsub213pd vfmsub123ps vfmsub123pd vfmsub231ps vfmsub231pd vfmsub321ps vfmsub321pd vfmsubadd132ps vfmsubadd132pd vfmsubadd312ps vfmsubadd312pd vfmsubadd213ps vfmsubadd213pd vfmsubadd123ps vfmsubadd123pd vfmsubadd231ps vfmsubadd231pd vfmsubadd321ps vfmsubadd321pd vfnmadd132ps vfnmadd132pd vfnmadd312ps vfnmadd312pd vfnmadd213ps vfnmadd213pd vfnmadd123ps vfnmadd123pd vfnmadd231ps vfnmadd231pd vfnmadd321ps vfnmadd321pd vfnmsub132ps vfnmsub132pd vfnmsub312ps vfnmsub312pd vfnmsub213ps vfnmsub213pd vfnmsub123ps vfnmsub123pd vfnmsub231ps vfnmsub231pd vfnmsub321ps vfnmsub321pd vfmadd132ss vfmadd132sd vfmadd312ss vfmadd312sd vfmadd213ss vfmadd213sd vfmadd123ss vfmadd123sd vfmadd231ss vfmadd231sd vfmadd321ss vfmadd321sd vfmsub132ss vfmsub132sd vfmsub312ss vfmsub312sd vfmsub213ss vfmsub213sd vfmsub123ss vfmsub123sd vfmsub231ss vfmsub231sd vfmsub321ss vfmsub321sd vfnmadd132ss vfnmadd132sd vfnmadd312ss vfnmadd312sd vfnmadd213ss vfnmadd213sd vfnmadd123ss vfnmadd123sd vfnmadd231ss vfnmadd231sd vfnmadd321ss vfnmadd321sd vfnmsub132ss vfnmsub132sd vfnmsub312ss vfnmsub312sd vfnmsub213ss vfnmsub213sd vfnmsub123ss vfnmsub123sd vfnmsub231ss vfnmsub231sd vfnmsub321ss vfnmsub321sd rdfsbase rdgsbase rdrand wrfsbase wrgsbase vcvtph2ps vcvtps2ph adcx adox rdseed clac stac xstore xcryptecb xcryptcbc xcryptctr xcryptcfb xcryptofb montmul xsha1 xsha256 llwpcb slwpcb lwpval lwpins vfmaddpd vfmaddps vfmaddsd vfmaddss vfmaddsubpd vfmaddsubps vfmsubaddpd vfmsubaddps vfmsubpd vfmsubps vfmsubsd vfmsubss vfnmaddpd vfnmaddps vfnmaddsd vfnmaddss vfnmsubpd vfnmsubps vfnmsubsd vfnmsubss vfrczpd vfrczps vfrczsd vfrczss vpcmov vpcomb vpcomd vpcomq vpcomub vpcomud vpcomuq vpcomuw vpcomw vphaddbd vphaddbq vphaddbw vphadddq vphaddubd vphaddubq vphaddubw vphaddudq vphadduwd vphadduwq vphaddwd vphaddwq vphsubbw vphsubdq vphsubwd vpmacsdd vpmacsdqh vpmacsdql vpmacssdd vpmacssdqh vpmacssdql vpmacsswd vpmacssww vpmacswd vpmacsww vpmadcsswd vpmadcswd vpperm vprotb vprotd vprotq vprotw vpshab vpshad vpshaq vpshaw vpshlb vpshld vpshlq vpshlw vbroadcasti128 vpblendd vpbroadcastb vpbroadcastw vpbroadcastd vpbroadcastq vpermd vpermpd vpermps vpermq vperm2i128 vextracti128 vinserti128 vpmaskmovd vpmaskmovq vpsllvd vpsllvq vpsravd vpsrlvd vpsrlvq vgatherdpd vgatherqpd vgatherdps vgatherqps vpgatherdd vpgatherqd vpgatherdq vpgatherqq xabort xbegin xend xtest andn bextr blci blcic blsi blsic blcfill blsfill blcmsk blsmsk blsr blcs bzhi mulx pdep pext rorx sarx shlx shrx tzcnt tzmsk t1mskc valignd valignq vblendmpd vblendmps vbroadcastf32x4 vbroadcastf64x4 vbroadcasti32x4 vbroadcasti64x4 vcompresspd vcompressps vcvtpd2udq vcvtps2udq vcvtsd2usi vcvtss2usi vcvttpd2udq vcvttps2udq vcvttsd2usi vcvttss2usi vcvtudq2pd vcvtudq2ps vcvtusi2sd vcvtusi2ss vexpandpd vexpandps vextractf32x4 vextractf64x4 vextracti32x4 vextracti64x4 vfixupimmpd vfixupimmps vfixupimmsd vfixupimmss vgetexppd vgetexpps vgetexpsd vgetexpss vgetmantpd vgetmantps vgetmantsd vgetmantss vinsertf32x4 vinsertf64x4 vinserti32x4 vinserti64x4 vmovdqa32 vmovdqa64 vmovdqu32 vmovdqu64 vpabsq vpandd vpandnd vpandnq vpandq vpblendmd vpblendmq vpcmpltd vpcmpled vpcmpneqd vpcmpnltd vpcmpnled vpcmpd vpcmpltq vpcmpleq vpcmpneqq vpcmpnltq vpcmpnleq vpcmpq vpcmpequd vpcmpltud vpcmpleud vpcmpnequd vpcmpnltud vpcmpnleud vpcmpud vpcmpequq vpcmpltuq vpcmpleuq vpcmpnequq vpcmpnltuq vpcmpnleuq vpcmpuq vpcompressd vpcompressq vpermi2d vpermi2pd vpermi2ps vpermi2q vpermt2d vpermt2pd vpermt2ps vpermt2q vpexpandd vpexpandq vpmaxsq vpmaxuq vpminsq vpminuq vpmovdb vpmovdw vpmovqb vpmovqd vpmovqw vpmovsdb vpmovsdw vpmovsqb vpmovsqd vpmovsqw vpmovusdb vpmovusdw vpmovusqb vpmovusqd vpmovusqw vpord vporq vprold vprolq vprolvd vprolvq vprord vprorq vprorvd vprorvq vpscatterdd vpscatterdq vpscatterqd vpscatterqq vpsraq vpsravq vpternlogd vpternlogq vptestmd vptestmq vptestnmd vptestnmq vpxord vpxorq vrcp14pd vrcp14ps vrcp14sd vrcp14ss vrndscalepd vrndscaleps vrndscalesd vrndscaless vrsqrt14pd vrsqrt14ps vrsqrt14sd vrsqrt14ss vscalefpd vscalefps vscalefsd vscalefss vscatterdpd vscatterdps vscatterqpd vscatterqps vshuff32x4 vshuff64x2 vshufi32x4 vshufi64x2 kandnw kandw kmovw knotw kortestw korw kshiftlw kshiftrw kunpckbw kxnorw kxorw vpbroadcastmb2q vpbroadcastmw2d vpconflictd vpconflictq vplzcntd vplzcntq vexp2pd vexp2ps vrcp28pd vrcp28ps vrcp28sd vrcp28ss vrsqrt28pd vrsqrt28ps vrsqrt28sd vrsqrt28ss vgatherpf0dpd vgatherpf0dps vgatherpf0qpd vgatherpf0qps vgatherpf1dpd vgatherpf1dps vgatherpf1qpd vgatherpf1qps vscatterpf0dpd vscatterpf0dps vscatterpf0qpd vscatterpf0qps vscatterpf1dpd vscatterpf1dps vscatterpf1qpd vscatterpf1qps prefetchwt1 bndmk bndcl bndcu bndcn bndmov bndldx bndstx sha1rnds4 sha1nexte sha1msg1 sha1msg2 sha256rnds2 sha256msg1 sha256msg2 hint_nop0 hint_nop1 hint_nop2 hint_nop3 hint_nop4 hint_nop5 hint_nop6 hint_nop7 hint_nop8 hint_nop9 hint_nop10 hint_nop11 hint_nop12 hint_nop13 hint_nop14 hint_nop15 hint_nop16 hint_nop17 hint_nop18 hint_nop19 hint_nop20 hint_nop21 hint_nop22 hint_nop23 hint_nop24 hint_nop25 hint_nop26 hint_nop27 hint_nop28 hint_nop29 hint_nop30 hint_nop31 hint_nop32 hint_nop33 hint_nop34 hint_nop35 hint_nop36 hint_nop37 hint_nop38 hint_nop39 hint_nop40 hint_nop41 hint_nop42 hint_nop43 hint_nop44 hint_nop45 hint_nop46 hint_nop47 hint_nop48 hint_nop49 hint_nop50 hint_nop51 hint_nop52 hint_nop53 hint_nop54 hint_nop55 hint_nop56 hint_nop57 hint_nop58 hint_nop59 hint_nop60 hint_nop61 hint_nop62 hint_nop63',
              built_in:
                // Instruction pointer
                'ip eip rip '
                // 8-bit registers
                + 'al ah bl bh cl ch dl dh sil dil bpl spl r8b r9b r10b r11b r12b r13b r14b r15b '
                // 16-bit registers
                + 'ax bx cx dx si di bp sp r8w r9w r10w r11w r12w r13w r14w r15w '
                // 32-bit registers
                + 'eax ebx ecx edx esi edi ebp esp eip r8d r9d r10d r11d r12d r13d r14d r15d '
                // 64-bit registers
                + 'rax rbx rcx rdx rsi rdi rbp rsp r8 r9 r10 r11 r12 r13 r14 r15 '
                // Segment registers
                + 'cs ds es fs gs ss '
                // Floating point stack registers
                + 'st st0 st1 st2 st3 st4 st5 st6 st7 '
                // MMX Registers
                + 'mm0 mm1 mm2 mm3 mm4 mm5 mm6 mm7 '
                // SSE registers
                + 'xmm0  xmm1  xmm2  xmm3  xmm4  xmm5  xmm6  xmm7  xmm8  xmm9 xmm10  xmm11 xmm12 xmm13 xmm14 xmm15 '
                + 'xmm16 xmm17 xmm18 xmm19 xmm20 xmm21 xmm22 xmm23 xmm24 xmm25 xmm26 xmm27 xmm28 xmm29 xmm30 xmm31 '
                // AVX registers
                + 'ymm0  ymm1  ymm2  ymm3  ymm4  ymm5  ymm6  ymm7  ymm8  ymm9 ymm10  ymm11 ymm12 ymm13 ymm14 ymm15 '
                + 'ymm16 ymm17 ymm18 ymm19 ymm20 ymm21 ymm22 ymm23 ymm24 ymm25 ymm26 ymm27 ymm28 ymm29 ymm30 ymm31 '
                // AVX-512F registers
                + 'zmm0  zmm1  zmm2  zmm3  zmm4  zmm5  zmm6  zmm7  zmm8  zmm9 zmm10  zmm11 zmm12 zmm13 zmm14 zmm15 '
                + 'zmm16 zmm17 zmm18 zmm19 zmm20 zmm21 zmm22 zmm23 zmm24 zmm25 zmm26 zmm27 zmm28 zmm29 zmm30 zmm31 '
                // AVX-512F mask registers
                + 'k0 k1 k2 k3 k4 k5 k6 k7 '
                // Bound (MPX) register
                + 'bnd0 bnd1 bnd2 bnd3 '
                // Special register
                + 'cr0 cr1 cr2 cr3 cr4 cr8 dr0 dr1 dr2 dr3 dr8 tr3 tr4 tr5 tr6 tr7 '
                // NASM altreg package
                + 'r0 r1 r2 r3 r4 r5 r6 r7 r0b r1b r2b r3b r4b r5b r6b r7b '
                + 'r0w r1w r2w r3w r4w r5w r6w r7w r0d r1d r2d r3d r4d r5d r6d r7d '
                + 'r0h r1h r2h r3h '
                + 'r0l r1l r2l r3l r4l r5l r6l r7l r8l r9l r10l r11l r12l r13l r14l r15l '
 
                + 'db dw dd dq dt ddq do dy dz '
                + 'resb resw resd resq rest resdq reso resy resz '
                + 'incbin equ times '
                + 'byte word dword qword nosplit rel abs seg wrt strict near far a32 ptr',
 
              meta:
                '%define %xdefine %+ %undef %defstr %deftok %assign %strcat %strlen %substr %rotate %elif %else %endif '
                + '%if %ifmacro %ifctx %ifidn %ifidni %ifid %ifnum %ifstr %iftoken %ifempty %ifenv %error %warning %fatal %rep '
                + '%endrep %include %push %pop %repl %pathsearch %depend %use %arg %stacksize %local %line %comment %endcomment '
                + '.nolist '
                + '__FILE__ __LINE__ __SECT__  __BITS__ __OUTPUT_FORMAT__ __DATE__ __TIME__ __DATE_NUM__ __TIME_NUM__ '
                + '__UTC_DATE__ __UTC_TIME__ __UTC_DATE_NUM__ __UTC_TIME_NUM__  __PASS__ struc endstruc istruc at iend '
                + 'align alignb sectalign daz nodaz up down zero default option assume public '
 
                + 'bits use16 use32 use64 default section segment absolute extern global common cpu float '
                + '__utf16__ __utf16le__ __utf16be__ __utf32__ __utf32le__ __utf32be__ '
                + '__float8__ __float16__ __float32__ __float64__ __float80m__ __float80e__ __float128l__ __float128h__ '
                + '__Infinity__ __QNaN__ __SNaN__ Inf NaN QNaN SNaN float8 float16 float32 float64 float80m float80e '
                + 'float128l float128h __FLOAT_DAZ__ __FLOAT_ROUND__ __FLOAT__'
            },
            contains: [
              hljs.COMMENT(
                ';',
                '$',
                { relevance: 0 }
              ),
              {
                className: 'number',
                variants: [
                  // Float number and x87 BCD
                  {
                    begin: '\\b(?:([0-9][0-9_]*)?\\.[0-9_]*(?:[eE][+-]?[0-9_]+)?|'
                           + '(0[Xx])?[0-9][0-9_]*(\\.[0-9_]*)?(?:[pP](?:[+-]?[0-9_]+)?)?)\\b',
                    relevance: 0
                  },
 
                  // Hex number in $
                  {
                    begin: '\\$[0-9][0-9A-Fa-f]*',
                    relevance: 0
                  },
 
                  // Number in H,D,T,Q,O,B,Y suffix
                  { begin: '\\b(?:[0-9A-Fa-f][0-9A-Fa-f_]*[Hh]|[0-9][0-9_]*[DdTt]?|[0-7][0-7_]*[QqOo]|[0-1][0-1_]*[BbYy])\\b' },
 
                  // Number in X,D,T,Q,O,B,Y prefix
                  { begin: '\\b(?:0[Xx][0-9A-Fa-f_]+|0[DdTt][0-9_]+|0[QqOo][0-7_]+|0[BbYy][0-1_]+)\\b' }
                ]
              },
              // Double quote string
              hljs.QUOTE_STRING_MODE,
              {
                className: 'string',
                variants: [
                  // Single-quoted string
                  {
                    begin: '\'',
                    end: '[^\\\\]\''
                  },
                  // Backquoted string
                  {
                    begin: '`',
                    end: '[^\\\\]`'
                  }
                ],
                relevance: 0
              },
              {
                className: 'symbol',
                variants: [
                  // Global label and local label
                  { begin: '^\\s*[A-Za-z._?][A-Za-z0-9_$#@~.?]*(:|\\s+label)' },
                  // Macro-local label
                  { begin: '^\\s*%%[A-Za-z0-9_$#@~.?]*:' }
                ],
                relevance: 0
              },
              // Macro parameter
              {
                className: 'subst',
                begin: '%[0-9]+',
                relevance: 0
              },
              // Macro parameter
              {
                className: 'subst',
                begin: '%!\S+',
                relevance: 0
              },
              {
                className: 'meta',
                begin: /^\s*\.[\w_-]+/
              }
            ]
          };
        }
 
        x86asm_1 = x86asm;
        return x86asm_1;
    }
 
    /*
    Language: XL
    Author: Christophe de Dinechin <christophe@taodyne.com>
    Description: An extensible programming language, based on parse tree rewriting
    Website: http://xlr.sf.net
    */
 
    var xl_1;
    var hasRequiredXl;
 
    function requireXl () {
        if (hasRequiredXl) return xl_1;
        hasRequiredXl = 1;
        function xl(hljs) {
          const KWS = [
            "if",
            "then",
            "else",
            "do",
            "while",
            "until",
            "for",
            "loop",
            "import",
            "with",
            "is",
            "as",
            "where",
            "when",
            "by",
            "data",
            "constant",
            "integer",
            "real",
            "text",
            "name",
            "boolean",
            "symbol",
            "infix",
            "prefix",
            "postfix",
            "block",
            "tree"
          ];
          const BUILT_INS = [
            "in",
            "mod",
            "rem",
            "and",
            "or",
            "xor",
            "not",
            "abs",
            "sign",
            "floor",
            "ceil",
            "sqrt",
            "sin",
            "cos",
            "tan",
            "asin",
            "acos",
            "atan",
            "exp",
            "expm1",
            "log",
            "log2",
            "log10",
            "log1p",
            "pi",
            "at",
            "text_length",
            "text_range",
            "text_find",
            "text_replace",
            "contains",
            "page",
            "slide",
            "basic_slide",
            "title_slide",
            "title",
            "subtitle",
            "fade_in",
            "fade_out",
            "fade_at",
            "clear_color",
            "color",
            "line_color",
            "line_width",
            "texture_wrap",
            "texture_transform",
            "texture",
            "scale_?x",
            "scale_?y",
            "scale_?z?",
            "translate_?x",
            "translate_?y",
            "translate_?z?",
            "rotate_?x",
            "rotate_?y",
            "rotate_?z?",
            "rectangle",
            "circle",
            "ellipse",
            "sphere",
            "path",
            "line_to",
            "move_to",
            "quad_to",
            "curve_to",
            "theme",
            "background",
            "contents",
            "locally",
            "time",
            "mouse_?x",
            "mouse_?y",
            "mouse_buttons"
          ];
          const BUILTIN_MODULES = [
            "ObjectLoader",
            "Animate",
            "MovieCredits",
            "Slides",
            "Filters",
            "Shading",
            "Materials",
            "LensFlare",
            "Mapping",
            "VLCAudioVideo",
            "StereoDecoder",
            "PointCloud",
            "NetworkAccess",
            "RemoteControl",
            "RegExp",
            "ChromaKey",
            "Snowfall",
            "NodeJS",
            "Speech",
            "Charts"
          ];
          const LITERALS = [
            "true",
            "false",
            "nil"
          ];
          const KEYWORDS = {
            $pattern: /[a-zA-Z][a-zA-Z0-9_?]*/,
            keyword: KWS,
            literal: LITERALS,
            built_in: BUILT_INS.concat(BUILTIN_MODULES)
          };
 
          const DOUBLE_QUOTE_TEXT = {
            className: 'string',
            begin: '"',
            end: '"',
            illegal: '\\n'
          };
          const SINGLE_QUOTE_TEXT = {
            className: 'string',
            begin: '\'',
            end: '\'',
            illegal: '\\n'
          };
          const LONG_TEXT = {
            className: 'string',
            begin: '<<',
            end: '>>'
          };
          const BASED_NUMBER = {
            className: 'number',
            begin: '[0-9]+#[0-9A-Z_]+(\\.[0-9-A-Z_]+)?#?([Ee][+-]?[0-9]+)?'
          };
          const IMPORT = {
            beginKeywords: 'import',
            end: '$',
            keywords: KEYWORDS,
            contains: [ DOUBLE_QUOTE_TEXT ]
          };
          const FUNCTION_DEFINITION = {
            className: 'function',
            begin: /[a-z][^\n]*->/,
            returnBegin: true,
            end: /->/,
            contains: [
              hljs.inherit(hljs.TITLE_MODE, { starts: {
                endsWithParent: true,
                keywords: KEYWORDS
              } })
            ]
          };
          return {
            name: 'XL',
            aliases: [ 'tao' ],
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.C_BLOCK_COMMENT_MODE,
              DOUBLE_QUOTE_TEXT,
              SINGLE_QUOTE_TEXT,
              LONG_TEXT,
              FUNCTION_DEFINITION,
              IMPORT,
              BASED_NUMBER,
              hljs.NUMBER_MODE
            ]
          };
        }
 
        xl_1 = xl;
        return xl_1;
    }
 
    /*
    Language: XQuery
    Author: Dirk Kirsten <dk@basex.org>
    Contributor: Duncan Paterson
    Description: Supports XQuery 3.1 including XQuery Update 3, so also XPath (as it is a superset)
    Refactored to process xml constructor syntax and function-bodies. Added missing data-types, xpath operands, inbuilt functions, and query prologs
    Website: https://www.w3.org/XML/Query/
    Category: functional
    Audit: 2020
    */
 
    var xquery_1;
    var hasRequiredXquery;
 
    function requireXquery () {
        if (hasRequiredXquery) return xquery_1;
        hasRequiredXquery = 1;
        /** @type LanguageFn */
        function xquery(_hljs) {
          // see https://www.w3.org/TR/xquery/#id-terminal-delimitation
          const KEYWORDS = [
            "module",
            "schema",
            "namespace",
            "boundary-space",
            "preserve",
            "no-preserve",
            "strip",
            "default",
            "collation",
            "base-uri",
            "ordering",
            "context",
            "decimal-format",
            "decimal-separator",
            "copy-namespaces",
            "empty-sequence",
            "except",
            "exponent-separator",
            "external",
            "grouping-separator",
            "inherit",
            "no-inherit",
            "lax",
            "minus-sign",
            "per-mille",
            "percent",
            "schema-attribute",
            "schema-element",
            "strict",
            "unordered",
            "zero-digit",
            "declare",
            "import",
            "option",
            "function",
            "validate",
            "variable",
            "for",
            "at",
            "in",
            "let",
            "where",
            "order",
            "group",
            "by",
            "return",
            "if",
            "then",
            "else",
            "tumbling",
            "sliding",
            "window",
            "start",
            "when",
            "only",
            "end",
            "previous",
            "next",
            "stable",
            "ascending",
            "descending",
            "allowing",
            "empty",
            "greatest",
            "least",
            "some",
            "every",
            "satisfies",
            "switch",
            "case",
            "typeswitch",
            "try",
            "catch",
            "and",
            "or",
            "to",
            "union",
            "intersect",
            "instance",
            "of",
            "treat",
            "as",
            "castable",
            "cast",
            "map",
            "array",
            "delete",
            "insert",
            "into",
            "replace",
            "value",
            "rename",
            "copy",
            "modify",
            "update"
          ];
 
          // Node Types (sorted by inheritance)
          // atomic types (sorted by inheritance)
          const TYPES = [
            "item",
            "document-node",
            "node",
            "attribute",
            "document",
            "element",
            "comment",
            "namespace",
            "namespace-node",
            "processing-instruction",
            "text",
            "construction",
            "xs:anyAtomicType",
            "xs:untypedAtomic",
            "xs:duration",
            "xs:time",
            "xs:decimal",
            "xs:float",
            "xs:double",
            "xs:gYearMonth",
            "xs:gYear",
            "xs:gMonthDay",
            "xs:gMonth",
            "xs:gDay",
            "xs:boolean",
            "xs:base64Binary",
            "xs:hexBinary",
            "xs:anyURI",
            "xs:QName",
            "xs:NOTATION",
            "xs:dateTime",
            "xs:dateTimeStamp",
            "xs:date",
            "xs:string",
            "xs:normalizedString",
            "xs:token",
            "xs:language",
            "xs:NMTOKEN",
            "xs:Name",
            "xs:NCName",
            "xs:ID",
            "xs:IDREF",
            "xs:ENTITY",
            "xs:integer",
            "xs:nonPositiveInteger",
            "xs:negativeInteger",
            "xs:long",
            "xs:int",
            "xs:short",
            "xs:byte",
            "xs:nonNegativeInteger",
            "xs:unisignedLong",
            "xs:unsignedInt",
            "xs:unsignedShort",
            "xs:unsignedByte",
            "xs:positiveInteger",
            "xs:yearMonthDuration",
            "xs:dayTimeDuration"
          ];
 
          const LITERALS = [
            "eq",
            "ne",
            "lt",
            "le",
            "gt",
            "ge",
            "is",
            "self::",
            "child::",
            "descendant::",
            "descendant-or-self::",
            "attribute::",
            "following::",
            "following-sibling::",
            "parent::",
            "ancestor::",
            "ancestor-or-self::",
            "preceding::",
            "preceding-sibling::",
            "NaN"
          ];
 
          // functions (TODO: find regex for op: without breaking build)
          const BUILT_IN = {
            className: 'built_in',
            variants: [
              {
                begin: /\barray:/,
                end: /(?:append|filter|flatten|fold-(?:left|right)|for-each(?:-pair)?|get|head|insert-before|join|put|remove|reverse|size|sort|subarray|tail)\b/
              },
              {
                begin: /\bmap:/,
                end: /(?:contains|entry|find|for-each|get|keys|merge|put|remove|size)\b/
              },
              {
                begin: /\bmath:/,
                end: /(?:a(?:cos|sin|tan[2]?)|cos|exp(?:10)?|log(?:10)?|pi|pow|sin|sqrt|tan)\b/
              },
              {
                begin: /\bop:/,
                end: /\(/,
                excludeEnd: true
              },
              {
                begin: /\bfn:/,
                end: /\(/,
                excludeEnd: true
              },
              // do not highlight inbuilt strings as variable or xml element names
              { begin: /[^</$:'"-]\b(?:abs|accumulator-(?:after|before)|adjust-(?:date(?:Time)?|time)-to-timezone|analyze-string|apply|available-(?:environment-variables|system-properties)|avg|base-uri|boolean|ceiling|codepoints?-(?:equal|to-string)|collation-key|collection|compare|concat|contains(?:-token)?|copy-of|count|current(?:-)?(?:date(?:Time)?|time|group(?:ing-key)?|output-uri|merge-(?:group|key))?data|dateTime|days?-from-(?:date(?:Time)?|duration)|deep-equal|default-(?:collation|language)|distinct-values|document(?:-uri)?|doc(?:-available)?|element-(?:available|with-id)|empty|encode-for-uri|ends-with|environment-variable|error|escape-html-uri|exactly-one|exists|false|filter|floor|fold-(?:left|right)|for-each(?:-pair)?|format-(?:date(?:Time)?|time|integer|number)|function-(?:arity|available|lookup|name)|generate-id|has-children|head|hours-from-(?:dateTime|duration|time)|id(?:ref)?|implicit-timezone|in-scope-prefixes|index-of|innermost|insert-before|iri-to-uri|json-(?:doc|to-xml)|key|lang|last|load-xquery-module|local-name(?:-from-QName)?|(?:lower|upper)-case|matches|max|minutes-from-(?:dateTime|duration|time)|min|months?-from-(?:date(?:Time)?|duration)|name(?:space-uri-?(?:for-prefix|from-QName)?)?|nilled|node-name|normalize-(?:space|unicode)|not|number|one-or-more|outermost|parse-(?:ietf-date|json)|path|position|(?:prefix-from-)?QName|random-number-generator|regex-group|remove|replace|resolve-(?:QName|uri)|reverse|root|round(?:-half-to-even)?|seconds-from-(?:dateTime|duration|time)|snapshot|sort|starts-with|static-base-uri|stream-available|string-?(?:join|length|to-codepoints)?|subsequence|substring-?(?:after|before)?|sum|system-property|tail|timezone-from-(?:date(?:Time)?|time)|tokenize|trace|trans(?:form|late)|true|type-available|unordered|unparsed-(?:entity|text)?-?(?:public-id|uri|available|lines)?|uri-collection|xml-to-json|years?-from-(?:date(?:Time)?|duration)|zero-or-one)\b/ },
              {
                begin: /\blocal:/,
                end: /\(/,
                excludeEnd: true
              },
              {
                begin: /\bzip:/,
                end: /(?:zip-file|(?:xml|html|text|binary)-entry| (?:update-)?entries)\b/
              },
              {
                begin: /\b(?:util|db|functx|app|xdmp|xmldb):/,
                end: /\(/,
                excludeEnd: true
              }
            ]
          };
 
          const TITLE = {
            className: 'title',
            begin: /\bxquery version "[13]\.[01]"\s?(?:encoding ".+")?/,
            end: /;/
          };
 
          const VAR = {
            className: 'variable',
            begin: /[$][\w\-:]+/
          };
 
          const NUMBER = {
            className: 'number',
            begin: /(\b0[0-7_]+)|(\b0x[0-9a-fA-F_]+)|(\b[1-9][0-9_]*(\.[0-9_]+)?)|[0_]\b/,
            relevance: 0
          };
 
          const STRING = {
            className: 'string',
            variants: [
              {
                begin: /"/,
                end: /"/,
                contains: [
                  {
                    begin: /""/,
                    relevance: 0
                  }
                ]
              },
              {
                begin: /'/,
                end: /'/,
                contains: [
                  {
                    begin: /''/,
                    relevance: 0
                  }
                ]
              }
            ]
          };
 
          const ANNOTATION = {
            className: 'meta',
            begin: /%[\w\-:]+/
          };
 
          const COMMENT = {
            className: 'comment',
            begin: /\(:/,
            end: /:\)/,
            relevance: 10,
            contains: [
              {
                className: 'doctag',
                begin: /@\w+/
              }
            ]
          };
 
          // see https://www.w3.org/TR/xquery/#id-computedConstructors
          // mocha: computed_inbuilt
          // see https://www.regexpal.com/?fam=99749
          const COMPUTED = {
            beginKeywords: 'element attribute comment document processing-instruction',
            end: /\{/,
            excludeEnd: true
          };
 
          // mocha: direct_method
          const DIRECT = {
            begin: /<([\w._:-]+)(\s+\S*=('|").*('|"))?>/,
            end: /(\/[\w._:-]+>)/,
            subLanguage: 'xml',
            contains: [
              {
                begin: /\{/,
                end: /\}/,
                subLanguage: 'xquery'
              },
              'self'
            ]
          };
 
          const CONTAINS = [
            VAR,
            BUILT_IN,
            STRING,
            NUMBER,
            COMMENT,
            ANNOTATION,
            TITLE,
            COMPUTED,
            DIRECT
          ];
 
          return {
            name: 'XQuery',
            aliases: [
              'xpath',
              'xq'
            ],
            case_insensitive: false,
            illegal: /(proc)|(abstract)|(extends)|(until)|(#)/,
            keywords: {
              $pattern: /[a-zA-Z$][a-zA-Z0-9_:-]*/,
              keyword: KEYWORDS,
              type: TYPES,
              literal: LITERALS
            },
            contains: CONTAINS
          };
        }
 
        xquery_1 = xquery;
        return xquery_1;
    }
 
    /*
     Language: Zephir
     Description: Zephir, an open source, high-level language designed to ease the creation and maintainability of extensions for PHP with a focus on type and memory safety.
     Author: Oleg Efimov <efimovov@gmail.com>
     Website: https://zephir-lang.com/en
     Audit: 2020
     */
 
    var zephir_1;
    var hasRequiredZephir;
 
    function requireZephir () {
        if (hasRequiredZephir) return zephir_1;
        hasRequiredZephir = 1;
        /** @type LanguageFn */
        function zephir(hljs) {
          const STRING = {
            className: 'string',
            contains: [ hljs.BACKSLASH_ESCAPE ],
            variants: [
              hljs.inherit(hljs.APOS_STRING_MODE, { illegal: null }),
              hljs.inherit(hljs.QUOTE_STRING_MODE, { illegal: null })
            ]
          };
          const TITLE_MODE = hljs.UNDERSCORE_TITLE_MODE;
          const NUMBER = { variants: [
            hljs.BINARY_NUMBER_MODE,
            hljs.C_NUMBER_MODE
          ] };
          const KEYWORDS =
            // classes and objects
            'namespace class interface use extends '
            + 'function return '
            + 'abstract final public protected private static deprecated '
            // error handling
            + 'throw try catch Exception '
            // keyword-ish things their website does NOT seem to highlight (in their own snippets)
            // 'typeof fetch in ' +
            // operators/helpers
            + 'echo empty isset instanceof unset '
            // assignment/variables
            + 'let var new const self '
            // control
            + 'require '
            + 'if else elseif switch case default '
            + 'do while loop for continue break '
            + 'likely unlikely '
            // magic constants
            // https://github.com/phalcon/zephir/blob/master/Library/Expression/Constants.php
            + '__LINE__ __FILE__ __DIR__ __FUNCTION__ __CLASS__ __TRAIT__ __METHOD__ __NAMESPACE__ '
            // types - https://docs.zephir-lang.com/0.12/en/types
            + 'array boolean float double integer object resource string '
            + 'char long unsigned bool int uint ulong uchar '
            // built-ins
            + 'true false null undefined';
 
          return {
            name: 'Zephir',
            aliases: [ 'zep' ],
            keywords: KEYWORDS,
            contains: [
              hljs.C_LINE_COMMENT_MODE,
              hljs.COMMENT(
                /\/\*/,
                /\*\//,
                { contains: [
                  {
                    className: 'doctag',
                    begin: /@[A-Za-z]+/
                  }
                ] }
              ),
              {
                className: 'string',
                begin: /<<<['"]?\w+['"]?$/,
                end: /^\w+;/,
                contains: [ hljs.BACKSLASH_ESCAPE ]
              },
              {
                // swallow composed identifiers to avoid parsing them as keywords
                begin: /(::|->)+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*/ },
              {
                className: 'function',
                beginKeywords: 'function fn',
                end: /[;{]/,
                excludeEnd: true,
                illegal: /\$|\[|%/,
                contains: [
                  TITLE_MODE,
                  {
                    className: 'params',
                    begin: /\(/,
                    end: /\)/,
                    keywords: KEYWORDS,
                    contains: [
                      'self',
                      hljs.C_BLOCK_COMMENT_MODE,
                      STRING,
                      NUMBER
                    ]
                  }
                ]
              },
              {
                className: 'class',
                beginKeywords: 'class interface',
                end: /\{/,
                excludeEnd: true,
                illegal: /[:($"]/,
                contains: [
                  { beginKeywords: 'extends implements' },
                  TITLE_MODE
                ]
              },
              {
                beginKeywords: 'namespace',
                end: /;/,
                illegal: /[.']/,
                contains: [ TITLE_MODE ]
              },
              {
                beginKeywords: 'use',
                end: /;/,
                contains: [ TITLE_MODE ]
              },
              { begin: /=>/ // No markup, just a relevance booster
              },
              STRING,
              NUMBER
            ]
          };
        }
 
        zephir_1 = zephir;
        return zephir_1;
    }
 
    var hljs = core;
 
    hljs.registerLanguage('1c', require_1c());
    hljs.registerLanguage('abnf', requireAbnf());
    hljs.registerLanguage('accesslog', requireAccesslog());
    hljs.registerLanguage('actionscript', requireActionscript());
    hljs.registerLanguage('ada', requireAda());
    hljs.registerLanguage('angelscript', requireAngelscript());
    hljs.registerLanguage('apache', requireApache());
    hljs.registerLanguage('applescript', requireApplescript());
    hljs.registerLanguage('arcade', requireArcade());
    hljs.registerLanguage('arduino', requireArduino());
    hljs.registerLanguage('armasm', requireArmasm());
    hljs.registerLanguage('xml', requireXml());
    hljs.registerLanguage('asciidoc', requireAsciidoc());
    hljs.registerLanguage('aspectj', requireAspectj());
    hljs.registerLanguage('autohotkey', requireAutohotkey());
    hljs.registerLanguage('autoit', requireAutoit());
    hljs.registerLanguage('avrasm', requireAvrasm());
    hljs.registerLanguage('awk', requireAwk());
    hljs.registerLanguage('axapta', requireAxapta());
    hljs.registerLanguage('bash', requireBash());
    hljs.registerLanguage('basic', requireBasic());
    hljs.registerLanguage('bnf', requireBnf());
    hljs.registerLanguage('brainfuck', requireBrainfuck());
    hljs.registerLanguage('c', requireC());
    hljs.registerLanguage('cal', requireCal());
    hljs.registerLanguage('capnproto', requireCapnproto());
    hljs.registerLanguage('ceylon', requireCeylon());
    hljs.registerLanguage('clean', requireClean());
    hljs.registerLanguage('clojure', requireClojure());
    hljs.registerLanguage('clojure-repl', requireClojureRepl());
    hljs.registerLanguage('cmake', requireCmake());
    hljs.registerLanguage('coffeescript', requireCoffeescript());
    hljs.registerLanguage('coq', requireCoq());
    hljs.registerLanguage('cos', requireCos());
    hljs.registerLanguage('cpp', requireCpp());
    hljs.registerLanguage('crmsh', requireCrmsh());
    hljs.registerLanguage('crystal', requireCrystal());
    hljs.registerLanguage('csharp', requireCsharp());
    hljs.registerLanguage('csp', requireCsp());
    hljs.registerLanguage('css', requireCss());
    hljs.registerLanguage('d', requireD());
    hljs.registerLanguage('markdown', requireMarkdown());
    hljs.registerLanguage('dart', requireDart());
    hljs.registerLanguage('delphi', requireDelphi());
    hljs.registerLanguage('diff', requireDiff());
    hljs.registerLanguage('django', requireDjango());
    hljs.registerLanguage('dns', requireDns());
    hljs.registerLanguage('dockerfile', requireDockerfile());
    hljs.registerLanguage('dos', requireDos());
    hljs.registerLanguage('dsconfig', requireDsconfig());
    hljs.registerLanguage('dts', requireDts());
    hljs.registerLanguage('dust', requireDust());
    hljs.registerLanguage('ebnf', requireEbnf());
    hljs.registerLanguage('elixir', requireElixir());
    hljs.registerLanguage('elm', requireElm());
    hljs.registerLanguage('ruby', requireRuby());
    hljs.registerLanguage('erb', requireErb());
    hljs.registerLanguage('erlang-repl', requireErlangRepl());
    hljs.registerLanguage('erlang', requireErlang());
    hljs.registerLanguage('excel', requireExcel());
    hljs.registerLanguage('fix', requireFix());
    hljs.registerLanguage('flix', requireFlix());
    hljs.registerLanguage('fortran', requireFortran());
    hljs.registerLanguage('fsharp', requireFsharp());
    hljs.registerLanguage('gams', requireGams());
    hljs.registerLanguage('gauss', requireGauss());
    hljs.registerLanguage('gcode', requireGcode());
    hljs.registerLanguage('gherkin', requireGherkin());
    hljs.registerLanguage('glsl', requireGlsl());
    hljs.registerLanguage('gml', requireGml());
    hljs.registerLanguage('go', requireGo());
    hljs.registerLanguage('golo', requireGolo());
    hljs.registerLanguage('gradle', requireGradle());
    hljs.registerLanguage('graphql', requireGraphql());
    hljs.registerLanguage('groovy', requireGroovy());
    hljs.registerLanguage('haml', requireHaml());
    hljs.registerLanguage('handlebars', requireHandlebars());
    hljs.registerLanguage('haskell', requireHaskell());
    hljs.registerLanguage('haxe', requireHaxe());
    hljs.registerLanguage('hsp', requireHsp());
    hljs.registerLanguage('http', requireHttp());
    hljs.registerLanguage('hy', requireHy());
    hljs.registerLanguage('inform7', requireInform7());
    hljs.registerLanguage('ini', requireIni());
    hljs.registerLanguage('irpf90', requireIrpf90());
    hljs.registerLanguage('isbl', requireIsbl());
    hljs.registerLanguage('java', requireJava());
    hljs.registerLanguage('javascript', requireJavascript());
    hljs.registerLanguage('jboss-cli', requireJbossCli());
    hljs.registerLanguage('json', requireJson());
    hljs.registerLanguage('julia', requireJulia());
    hljs.registerLanguage('julia-repl', requireJuliaRepl());
    hljs.registerLanguage('kotlin', requireKotlin());
    hljs.registerLanguage('lasso', requireLasso());
    hljs.registerLanguage('latex', requireLatex());
    hljs.registerLanguage('ldif', requireLdif());
    hljs.registerLanguage('leaf', requireLeaf());
    hljs.registerLanguage('less', requireLess());
    hljs.registerLanguage('lisp', requireLisp());
    hljs.registerLanguage('livecodeserver', requireLivecodeserver());
    hljs.registerLanguage('livescript', requireLivescript());
    hljs.registerLanguage('llvm', requireLlvm());
    hljs.registerLanguage('lsl', requireLsl());
    hljs.registerLanguage('lua', requireLua());
    hljs.registerLanguage('makefile', requireMakefile());
    hljs.registerLanguage('mathematica', requireMathematica());
    hljs.registerLanguage('matlab', requireMatlab());
    hljs.registerLanguage('maxima', requireMaxima());
    hljs.registerLanguage('mel', requireMel());
    hljs.registerLanguage('mercury', requireMercury());
    hljs.registerLanguage('mipsasm', requireMipsasm());
    hljs.registerLanguage('mizar', requireMizar());
    hljs.registerLanguage('perl', requirePerl());
    hljs.registerLanguage('mojolicious', requireMojolicious());
    hljs.registerLanguage('monkey', requireMonkey());
    hljs.registerLanguage('moonscript', requireMoonscript());
    hljs.registerLanguage('n1ql', requireN1ql());
    hljs.registerLanguage('nestedtext', requireNestedtext());
    hljs.registerLanguage('nginx', requireNginx());
    hljs.registerLanguage('nim', requireNim());
    hljs.registerLanguage('nix', requireNix());
    hljs.registerLanguage('node-repl', requireNodeRepl());
    hljs.registerLanguage('nsis', requireNsis());
    hljs.registerLanguage('objectivec', requireObjectivec());
    hljs.registerLanguage('ocaml', requireOcaml());
    hljs.registerLanguage('openscad', requireOpenscad());
    hljs.registerLanguage('oxygene', requireOxygene());
    hljs.registerLanguage('parser3', requireParser3());
    hljs.registerLanguage('pf', requirePf());
    hljs.registerLanguage('pgsql', requirePgsql());
    hljs.registerLanguage('php', requirePhp());
    hljs.registerLanguage('php-template', requirePhpTemplate());
    hljs.registerLanguage('plaintext', requirePlaintext());
    hljs.registerLanguage('pony', requirePony());
    hljs.registerLanguage('powershell', requirePowershell());
    hljs.registerLanguage('processing', requireProcessing());
    hljs.registerLanguage('profile', requireProfile());
    hljs.registerLanguage('prolog', requireProlog());
    hljs.registerLanguage('properties', requireProperties());
    hljs.registerLanguage('protobuf', requireProtobuf());
    hljs.registerLanguage('puppet', requirePuppet());
    hljs.registerLanguage('purebasic', requirePurebasic());
    hljs.registerLanguage('python', requirePython());
    hljs.registerLanguage('python-repl', requirePythonRepl());
    hljs.registerLanguage('q', requireQ());
    hljs.registerLanguage('qml', requireQml());
    hljs.registerLanguage('r', requireR());
    hljs.registerLanguage('reasonml', requireReasonml());
    hljs.registerLanguage('rib', requireRib());
    hljs.registerLanguage('roboconf', requireRoboconf());
    hljs.registerLanguage('routeros', requireRouteros());
    hljs.registerLanguage('rsl', requireRsl());
    hljs.registerLanguage('ruleslanguage', requireRuleslanguage());
    hljs.registerLanguage('rust', requireRust());
    hljs.registerLanguage('sas', requireSas());
    hljs.registerLanguage('scala', requireScala());
    hljs.registerLanguage('scheme', requireScheme());
    hljs.registerLanguage('scilab', requireScilab());
    hljs.registerLanguage('scss', requireScss());
    hljs.registerLanguage('shell', requireShell());
    hljs.registerLanguage('smali', requireSmali());
    hljs.registerLanguage('smalltalk', requireSmalltalk());
    hljs.registerLanguage('sml', requireSml());
    hljs.registerLanguage('sqf', requireSqf());
    hljs.registerLanguage('sql', requireSql());
    hljs.registerLanguage('stan', requireStan());
    hljs.registerLanguage('stata', requireStata());
    hljs.registerLanguage('step21', requireStep21());
    hljs.registerLanguage('stylus', requireStylus());
    hljs.registerLanguage('subunit', requireSubunit());
    hljs.registerLanguage('swift', requireSwift());
    hljs.registerLanguage('taggerscript', requireTaggerscript());
    hljs.registerLanguage('yaml', requireYaml());
    hljs.registerLanguage('tap', requireTap());
    hljs.registerLanguage('tcl', requireTcl());
    hljs.registerLanguage('thrift', requireThrift());
    hljs.registerLanguage('tp', requireTp());
    hljs.registerLanguage('twig', requireTwig());
    hljs.registerLanguage('typescript', requireTypescript());
    hljs.registerLanguage('vala', requireVala());
    hljs.registerLanguage('vbnet', requireVbnet());
    hljs.registerLanguage('vbscript', requireVbscript());
    hljs.registerLanguage('vbscript-html', requireVbscriptHtml());
    hljs.registerLanguage('verilog', requireVerilog());
    hljs.registerLanguage('vhdl', requireVhdl());
    hljs.registerLanguage('vim', requireVim());
    hljs.registerLanguage('wasm', requireWasm());
    hljs.registerLanguage('wren', requireWren());
    hljs.registerLanguage('x86asm', requireX86asm());
    hljs.registerLanguage('xl', requireXl());
    hljs.registerLanguage('xquery', requireXquery());
    hljs.registerLanguage('zephir', requireZephir());
 
    hljs.HighlightJS = hljs;
    hljs.default = hljs;
    var lib = hljs;
 
    var HighlightJS = /*@__PURE__*/getDefaultExportFromCjs(lib);
 
    HighlightJS.registerLanguage('vue', () => ({}));
 
    const MD = new MarkdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: function (str, lang) {
        console.log(str);
        if(lang === 'vue') return str;
        let hljsResult = str;
        try {
          hljsResult = HighlightJS.highlight(str, {language: lang}).value;
        } catch (error) {
          hljsResult = str;
        }
        return hljsResult;
      }
    });
 
    let titleIds = [];
    MD.use(function addCustomAttribute(md) {
      md.core.ruler.after('inline', 'add_custom_attribute', function (state) {
        state.tokens.forEach((token, index) => {
          if (token.type === 'heading_open' && isTitleTag(token.tag)) {
            const titleUid = `__mdv${index}__`;
            const hex = str2hex(titleUid);
            const title = state.tokens[index + 1].content;
            titleIds.push({id: hex, title, level: new Array(Number(token.tag.replace('h', '') - 1)).fill('') });
            if(hex) token.attrPush(['id', `__${hex}__`]);
            if(hex) token.attrPush(['__mdv_title__', title]);
          }
        });
      });
    });
 
    MD.use(function catalogPlugin(md) {
      // 注册一个名为'custom_div'的新规则
      md.inline.ruler.push('custom_div', (state, silent) => {
        if (state.src.startsWith("[[toc]]", state.pos)) {
          if (!silent) {
            state.push('custom_div_open', 'div', 1);
            state.push('text', '', 0);
            state.push('custom_div_close', 'div', -1);
          }
          state.pos += 7; // 移动解析位置
          return true;
        }
        return false;
      });
 
      // 渲染规则
      md.renderer.rules.custom_div_open = () => genCatalogHtml({catalogMap: titleIds, top: window?.globalParams?.scrolltop ?? 0 });
      md.renderer.rules.custom_div_close = () => '<br />';
    });
 
    MD.core.ruler.before('block', 'custom_processing', function (state) {
      // const content = genCatalogHtml({catalogMap: titleIds, top: window?.globalParams?.scrolltop ?? 0 });
      titleIds = [];
      // state.tokens.push({
      //   type: 'html_block',
      //   content: content,
      //   block: true,
      //   level: 0,
      // });
    });
 
    const _fence = MD.renderer.rules.fence;
    const transformRules = (args) => {
      const [tokens, idx] = args;
      const token = tokens[idx];
      console.log(tokens);
      if(token.info.toUpperCase() === 'VUE') {
        return vueRules(args);
      } else {
        return _fence(...args);
      }
    };
 
    const vueRules = (args) => {
      const [tokens, idx] = args;
      const token = tokens[idx];
      const libs = getLibs(token.content);
      
      if(!!libs.length) {
        const { staticSource, registry } = window.__MD_VUE_OPTIONS__;
        if(!registry) return console.error('未设置仓库源！')
        libs.forEach(lib => {
          const { path } = lib;
          if(!staticSource.js.find(item => item.link === path)) {
            staticSource.js.push({isRegistry: true, link: `${path}`});
          }
          console.log(staticSource.js);
        });
      }
      
      window.__VUE_OPTIONS__ = window.__VUE_OPTIONS__ ? window.__VUE_OPTIONS__ : {};
      window.__VUE_OPTIONS__[`md_vue_${idx}`] = genVueOptions(`md_vue_${idx}`, token.content);
      
      return `<div id="md_vue_${idx}" time=${Date.now()} style="color: #ccc;">loading...</div>`;
    };
 
    MD.renderer.rules.fence = (...args) => {
      return transformRules(args);
    };
 
 
    const md2html = (htmlStr) => {
      return MD.render(htmlStr);
    };
 
    const TEMPLATE_REG = /<template>([\s\S]*)<\/template>/;
    const SCRIPT_REG = /<script>[\s\S]*export default([\s\S]*)<\/script>/;
    const STYLE_REG = /<style>([\s\S]*)<\/style>/;
 
    const splitVue = (vueStr) => {
      const template = vueStr.match(TEMPLATE_REG)?.[1];
      const script = vueStr.match(SCRIPT_REG)?.[1];
      const style = vueStr.match(STYLE_REG)?.[1];
      return {
        template,
        script,
        style
      }
    };
 
    // import Vue from "vue/dist/vue.common.dev";
    const genVueOptions = (id, content) => {
      const { template, script, style } = splitVue(content);
      try {
        const _script = eval(`(() => {
       const _script = ${script}
       return _script;
     })()`);;
        const vueOptions = {
          el: `#${id}`,
          template: `
         ${template}
       `,
          ..._script
        };
        return vueOptions;
      } catch (error) {
        console.log(error);
      }
    };
 
    const getLibs = function (inputStr) {
      const regex = /import\s+(?:\{([^}]+)\}|(\w+))\s+from\s+(['"])([^'"]+)\3;/g;
      const results = [];
 
      let match;
      while ((match = regex.exec(inputStr)) !== null) {
        const moduleList = (match[1] || match[2] || "")
          .split(",")
          .map((module) => module.trim())
          .filter((module) => !!module);
        const importPath = match[4];
        const importStatement = match[0];
        results.push({
          modules: moduleList,
          path: importPath,
          statement: importStatement,
        });
      }
      return results;
    };
 
    const str2link = function (inputStr, type) {
      let link = "";
      const blob = new Blob([inputStr], { type });
      link = URL.createObjectURL(blob);
      return link;
    };
 
    const genCatalogHtml = function ({catalogMap, top, right = 20}) {
      if(!catalogMap || catalogMap.length === 0) return '<b />'
      return `<div id="catalog-container"
             style="position:fixed;width:200px;
             max-height:20px;
             overflow:scroll;
             background-color:rgb(214, 203, 183);
             top:${top}px;
             right:${right}px;
             transform:translate(160px,50px);
             opacity:0.5;
             transition: opacity 0.3s ease 0s, transform 0.3s ease 0s, max-height 0.3s ease 0s;
             border-radius:10px;
             border:1px solid rgb(235,238,250);
             padding:5px;
             font-size:14px;
             overflow-x: hidden"
             onmouseover="this.style.opacity=1;this.style.transform='translate(0px, 50px)';this.style.maxHeight='500px';"
             onmouseout="this.style.opacity=0.5;this.style.transform='translate(160px, 50px)';this.style.maxHeight='20px';"
           >
   <div style="position: sticky;top:0;background:rgb(214, 203, 183);transform:translateY(-5px);padding: 4px 0 0;height:25px;">
     <b style="font-size: 16px;">目录</b>
   </div>
     ${
         catalogMap.map(item => {
             return `<div><a 
                       style="
                       text-decoration: none;
                       color: ${item.level.length === 0 ? 'inherit' : 'rgb(31, 26, 26)'};
                       font-weight: ${item.level.length === 0 ? '500' : '400'};
                       border-bottom: none;" href="#__${item.id}__">${item.level.map(() => '&nbsp;&nbsp;&nbsp;').join('')}${item.title}</a></div>`
         }).join('')
     }
 </div>`;
    };
 
    const bus = new Vue();
 
    const str2hex = (str) => {
      if (typeof str !== "string") return str;
      const hexArray = [];
      for (let i = 0; i < str.length; i++) {
        const charCode = str.charCodeAt(i);
        const hexValue = charCode.toString(16);
        hexArray.push(hexValue);
      }
      return hexArray.join('');
    };
 
    const isTitleTag = (tag) => {
        return /^h[1-6]$/.test(tag);
    };
 
    //
    //
    //
    //
 
    const breakpointEffect = StateEffect.define({
      map: (val, mapping) => ({ pos: mapping.mapPos(val.pos), on: val.on }),
    });
 
    const breakpointState = StateField.define({
      create() {
        return RangeSet.empty;
      },
      update(set, transaction) {
        set = set.map(transaction.changes);
        for (let e of transaction.effects) {
          if (e.is(breakpointEffect)) {
            if (e.value.on)
              set = set.update({ add: [breakpointMarker.range(e.value.pos)] });
            else set = set.update({ filter: (from) => from != e.value.pos });
          }
        }
        return set;
      },
    });
 
    function toggleBreakpoint(view, pos) {
      let breakpoints = view.state.field(breakpointState);
      let hasBreakpoint = false;
      breakpoints.between(pos, pos, () => {
        hasBreakpoint = true;
      });
      view.dispatch({
        effects: breakpointEffect.of({ pos, on: !hasBreakpoint }),
      });
    }
 
    const breakpointMarker = new (class extends GutterMarker {
      toDOM() {
        return document.createTextNode("*");
      }
    })();
 
    const breakpointGutter = [
      breakpointState,
      gutter({
        class: "cm-breakpoint-gutter",
        markers: (v) => v.state.field(breakpointState),
        initialSpacer: () => breakpointMarker,
        domEventHandlers: {
          mousedown(view, line) {
            toggleBreakpoint(view, line.from);
            return true;
          },
        },
      }),
      EditorView.baseTheme({
        ".cm-breakpoint-gutter .cm-gutterElement": {
          color: "red",
          paddingLeft: "5px",
          cursor: "default",
        },
      }),
    ];
 
    var script$c = {
      props: {
        val: {
          type: String,
          default: "",
        },
      },
      data() {
        return {
          temp_value: "",
          view: null,
        };
      },
      components: {},
      methods: {
        onChangeMdHandler(str) {
          this.$emit("change", str);
        },
        create() {
          let onUpdateExt = EditorView.updateListener.of((v) => {
            if (v.docChanged) {
              this.onChangeMdHandler(v.state.doc.toString());
            }
          });
          this.view = new EditorView({
            doc: this.temp_value,
            extensions: [
              // EditorView.focus,
              lineNumbers(),
              keymap.of(defaultKeymap),
              breakpointGutter,
              EditorView.lineWrapping,
              onUpdateExt,
            ],
            parent: this.$refs.editor,
          });
        },
        onKeydownHandler(event) {
          if (event.key === "Tab") {
            event.preventDefault(); // 阻止默认事件
            // const el = this.$refs.vTextarea;
            // const startPos = el.selectionStart;
            // const endPos = el.selectionEnd;
            // const currentValue = el.value;
            // const newValue =
            //   currentValue.substring(0, startPos) +
            //   "    " + // 4个空格
            //   currentValue.substring(endPos);
            // el.value = newValue;
            // el.setSelectionRange(startPos + 4, startPos + 4);
          }
        },
        topBarMenuTitle() {
          const { from, to, length, getSelectContent, updateCursorPostion } =
            this.viewContentHandler();
          const selectContent = getSelectContent();
          if (selectContent) {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `# ${selectContent}`, // 更新后的内容
              },
            });
          } else {
            this.view.dispatch({
              changes: {
                from: length,
                to: length,
                insert: "\n# 标题",
              },
            });
          }
        },
        topBarMenuBlod() {
          const { from, to, length, getSelectContent, updateCursorPostion } =
            this.viewContentHandler();
          const selectContent = getSelectContent();
          if (selectContent) {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `**${selectContent}**`, // 更新后的内容
              },
            });
          } else {
            this.view.dispatch({
              changes: {
                from: length,
                to: length,
                insert: "****",
              },
            });
          }
        },
        topBarMenuItalic() {
          const { from, to, length, getSelectContent, updateCursorPostion } =
            this.viewContentHandler();
          const selectContent = getSelectContent();
          if (selectContent) {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `*${selectContent}*`, // 更新后的内容
              },
            });
          } else {
            this.view.dispatch({
              changes: {
                from: length,
                to: length,
                insert: "**",
              },
            });
          }
 
          setTimeout(() => {
            updateCursorPostion(from + 1);
          }, 200);
        },
        topBarMenuLink() {
          const { from, to, length, getSelectContent } = this.viewContentHandler();
          const selectContent = getSelectContent();
          if (selectContent) {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `[${selectContent}](${selectContent})`, // 更新后的内容
              },
            });
          } else {
            this.view.dispatch({
              changes: {
                from: length,
                to: length,
                insert: `[描述](url)`, // 更新后的内容
              },
            });
          }
        },
        topBarMenuCode() {
          const { from, to, length, getSelectContent } = this.viewContentHandler();
 
          const selectContent = getSelectContent();
          if (selectContent) {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `\`\`\`${selectContent}\n\`\`\``, // 更新后的内容
              },
            });
          } else {
            this.view.dispatch({
              changes: {
                from: length,
                to: length,
                insert: `\`\`\`${selectContent}\n\`\`\``, // 更新后的内容
              },
            });
          }
        },
        topBarMenuCodeBlock() {
          const { from, to, getSelectContent } = this.viewContentHandler();
 
          const selectContent = getSelectContent();
 
          if (selectContent) {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `\`\`\`${selectContent}\n\`\`\``, // 更新后的内容
              },
            });
          } else {
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `\`\`\`vue
 <template>
   <div>{{ msg }}</div>
 </template>
 <script>
   export default {
     data() {
       return {
         msg: 'hello'
       }
     }
   }
 <\/script>
 \`\`\``, // 更新后的内容
              },
            });
          }
        },
        topBarMenuImage({ file }) {
          const uploadImageCallback = ({ url }) => {
            const { from, to } = this.viewContentHandler();
            this.view.dispatch({
              changes: {
                from,
                to,
                insert: `\n![${file.name}](${url})\n`, // 更新后的内容
              },
            });
          };
          bus.$emit("uploadImage", { file, uploadImageCallback });
        },
        viewContentHandler() {
          const baseAttr = {
            from: this.view.state.selection.main.from,
            to: this.view.state.selection.main.to,
            doc: this.view.state.doc.toString(),
            length: this.view.state.doc.length,
          };
          const baseHandler = {
            getSelectContent: () => baseAttr.doc.slice(baseAttr.from, baseAttr.to),
            updateCursorPostion: (index) => {
              const newState = this.view.state.update({
                changes: {
                  from: index,
                  to: index,
                  insert: [],
                },
              });
              console.log(newState.effects);
              console.log(newState.selection);
              this.view.dispatch({
                effects: newState.effects,
                selection: newState.selection,
              });
            },
          };
          return {
            ...baseAttr,
            ...baseHandler,
          };
        },
        pasteImageHandler() {
          document.querySelector('#editor').addEventListener("paste", (event) => {
            var items = event.clipboardData && event.clipboardData.items;
            var file = null;
            if (items && items.length) {
              for (var i = 0; i < items.length; i++) {
                if (items[i].type.indexOf("image") !== -1) {
                  file = items[i].getAsFile();
                  break;
                }
              }
            }
            file && this.topBarMenuImage({file});
          });
        }
      },
      created() {
        ["Title", "Blod", "Italic", "Link", "Image", "Code", "CodeBlock"].forEach(
          (type) => bus.$on(`topBarMenu:${type}`, this[`topBarMenu${type}`])
        );
      },
      mounted() {
        this.create();
        this.pasteImageHandler();
        document.querySelector("#editor > .cm-editor").style.height = "100%";
        document.querySelector("#editor .ͼ1 .cm-scroller").style["overflow-x"] =
          "unset";
        document.querySelector("#editor .ͼ1 .cm-scroller").style["overflow-y"] =
          "unset";
      },
      watch: {
        val: {
          immediate: true,
          handler: function (n) {
            this.temp_value = n;
          },
        },
      },
    };
 
    function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
        if (typeof shadowMode !== 'boolean') {
            createInjectorSSR = createInjector;
            createInjector = shadowMode;
            shadowMode = false;
        }
        // Vue.extend constructor export interop.
        const options = typeof script === 'function' ? script.options : script;
        // render functions
        if (template && template.render) {
            options.render = template.render;
            options.staticRenderFns = template.staticRenderFns;
            options._compiled = true;
            // functional template
            if (isFunctionalTemplate) {
                options.functional = true;
            }
        }
        // scopedId
        if (scopeId) {
            options._scopeId = scopeId;
        }
        let hook;
        if (moduleIdentifier) {
            // server build
            hook = function (context) {
                // 2.3 injection
                context =
                    context || // cached call
                        (this.$vnode && this.$vnode.ssrContext) || // stateful
                        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional
                // 2.2 with runInNewContext: true
                if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
                    context = __VUE_SSR_CONTEXT__;
                }
                // inject component styles
                if (style) {
                    style.call(this, createInjectorSSR(context));
                }
                // register component module identifier for async chunk inference
                if (context && context._registeredComponents) {
                    context._registeredComponents.add(moduleIdentifier);
                }
            };
            // used by ssr in case component is cached and beforeCreate
            // never gets called
            options._ssrRegister = hook;
        }
        else if (style) {
            hook = shadowMode
                ? function (context) {
                    style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
                }
                : function (context) {
                    style.call(this, createInjector(context));
                };
        }
        if (hook) {
            if (options.functional) {
                // register for functional component in vue file
                const originalRender = options.render;
                options.render = function renderWithStyleInjection(h, context) {
                    hook.call(context);
                    return originalRender(h, context);
                };
            }
            else {
                // inject component registration as beforeCreate hook
                const existing = options.beforeCreate;
                options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
            }
        }
        return script;
    }
 
    const isOldIE = typeof navigator !== 'undefined' &&
        /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
    function createInjector(context) {
        return (id, style) => addStyle(id, style);
    }
    let HEAD;
    const styles = {};
    function addStyle(id, css) {
        const group = isOldIE ? css.media || 'default' : id;
        const style = styles[group] || (styles[group] = { ids: new Set(), styles: [] });
        if (!style.ids.has(id)) {
            style.ids.add(id);
            let code = css.source;
            if (css.map) {
                // https://developer.chrome.com/devtools/docs/javascript-debugging
                // this makes source maps inside style tags work properly in Chrome
                code += '\n/*# sourceURL=' + css.map.sources[0] + ' */';
                // http://stackoverflow.com/a/26603875
                code +=
                    '\n/*# sourceMappingURL=data:application/json;base64,' +
                        btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) +
                        ' */';
            }
            if (!style.element) {
                style.element = document.createElement('style');
                style.element.type = 'text/css';
                if (css.media)
                    style.element.setAttribute('media', css.media);
                if (HEAD === undefined) {
                    HEAD = document.head || document.getElementsByTagName('head')[0];
                }
                HEAD.appendChild(style.element);
            }
            if ('styleSheet' in style.element) {
                style.styles.push(code);
                style.element.styleSheet.cssText = style.styles
                    .filter(Boolean)
                    .join('\n');
            }
            else {
                const index = style.ids.size - 1;
                const textNode = document.createTextNode(code);
                const nodes = style.element.childNodes;
                if (nodes[index])
                    style.element.removeChild(nodes[index]);
                if (nodes.length)
                    style.element.insertBefore(textNode, nodes[index]);
                else
                    style.element.appendChild(textNode);
            }
        }
    }
 
    /* script */
    const __vue_script__$c = script$c;
 
    /* template */
    var __vue_render__$c = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", {
        ref: "editor",
        attrs: { id: "editor" },
        on: { keydown: _vm.onKeydownHandler },
      })
    };
    var __vue_staticRenderFns__$c = [];
    __vue_render__$c._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$c = function (inject) {
        if (!inject) return
        inject("data-v-2643e5c8_0", { source: "#editor[data-v-2643e5c8] {\n  height: 100%;\n}\n", map: {"version":3,"sources":["index.vue"],"names":[],"mappings":"AAAA;EACE,YAAY;AACd","file":"index.vue","sourcesContent":["#editor {\n  height: 100%;\n}\n"]}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$c = "data-v-2643e5c8";
      /* module identifier */
      const __vue_module_identifier__$c = undefined;
      /* functional template */
      const __vue_is_functional_template__$c = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$c = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$c, staticRenderFns: __vue_staticRenderFns__$c },
        __vue_inject_styles__$c,
        __vue_script__$c,
        __vue_scope_id__$c,
        __vue_is_functional_template__$c,
        __vue_module_identifier__$c,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
 
    var script$b = {
      props: {
        value: {
          type: String,
          default: "",
        },
      },
      data() {
        return {};
      },
      components: {
        Editor: __vue_component__$c,
      },
      methods: {
        topBarMenuImage() {},
        change(mdStr) {
          this.$emit("change", mdStr);
          this.$emit("input", mdStr);
        },
      },
      mounted() {},
      watch: {},
    };
 
    /* script */
    const __vue_script__$b = script$b;
 
    /* template */
    var __vue_render__$b = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("Editor", { attrs: { val: _vm.value }, on: { change: _vm.change } })
    };
    var __vue_staticRenderFns__$b = [];
    __vue_render__$b._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$b = function (inject) {
        if (!inject) return
        inject("data-v-e4fcd82e_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"index.vue"}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$b = "data-v-e4fcd82e";
      /* module identifier */
      const __vue_module_identifier__$b = undefined;
      /* functional template */
      const __vue_is_functional_template__$b = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$b = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$b, staticRenderFns: __vue_staticRenderFns__$b },
        __vue_inject_styles__$b,
        __vue_script__$b,
        __vue_scope_id__$b,
        __vue_is_functional_template__$b,
        __vue_module_identifier__$b,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    const defaultStyle = `
 pre code.hljs {
     display:block;
     overflow-x:auto;
     padding:1em
 }
 
 code.hljs {
     padding:3px 5px
 }
 
 .hljs{
     color:#383a42;
     background:#fafafa
 }
 
 .hljs-comment,
 .hljs-quote {
     color:#a0a1a7;
     font-style:italic
 }
 
 .hljs-doctag,
 .hljs-formula,
 .hljs-keyword {
     color:#a626a4
 }
 
 .hljs-deletion,
 .hljs-name,
 .hljs-section,
 .hljs-selector-tag,
 .hljs-subst {
     color:#e45649
 }
 
 .hljs-literal {
     color:#0184bb
 }
 
 .hljs-addition,
 .hljs-attribute,
 .hljs-meta .hljs-string,
 .hljs-regexp,
 .hljs-string {
     color:#50a14f
 }
 
 .hljs-attr,
 .hljs-number,
 .hljs-selector-attr,
 .hljs-selector-class,
 .hljs-selector-pseudo,
 .hljs-template-variable,
 .hljs-type,
 .hljs-variable {
     color:#986801
 }
 
 .hljs-bullet,
 .hljs-link,
 .hljs-meta,
 .hljs-selector-id,
 .hljs-symbol,
 .hljs-title {
     color:#4078f2
 }
 
 .hljs-built_in,
 .hljs-class .hljs-title,
 .hljs-title.class_ {
     color:#c18401
 }
 
 .hljs-emphasis {
     font-style:italic
 }
 
 .hljs-strong {
     font-weight:700
 }
 
 .hljs-link {
     text-decoration:underline
 }
 
 
 
 
 
 
 /* TODO：渲染器的样式部分 不应该放在代码样式这 */
 body {
     max-width: 100%;
     overflow: hidden;
     margin: auto 20px;
 }
 p > img{
     max-width: 100% !important;
 }
 pre {
     backgroup-color: 
 }
 pre>code {
     font-size: 12px;
     padding: 15px 12px;
     margin: 0;
     word-break: normal;
     display: block;
     overflow-x: auto;
     color: #333;
     background: #f8f8f8;
 }
 code {
     color: red;
     background: #f8f8f8;
     border: 1px solid #eaeefb;
     border-radius: 3px;
     display: inline-block;
     padding: 0.065em 0.4em;
 }
 /* TODO：表格样式 */
 table {
     display: inline-block!important;
     font-size: 12px;
     width: auto;
     max-width: 100%;
     overflow: auto;
     border: 1px solid #f6f6f6;
 }
 
 thead {
     background: #f6f6f6;
     color: #000;
     text-align: left;
 }
 markdown-body td, th {
     padding: 12px 7px;
     line-height: 24px;
 }
 td {
     min-width: 120px;
 }
 td, th {
     padding: 12px 7px;
     line-height: 24px;
 }
 a {
     text-decoration: none;
     color: #0269c8;
     border-bottom: 1px solid #d1e9ff;
 }
 h2 {
     font-size: 22px;
     line-height: 34px;
     padding-bottom: 12px;
     border-bottom: 1px solid #ececec;
 }
 blockquote {
     color: #666;
     padding: 1px 23px;
     margin: 22px 0;
     border-left: 4px solid #cbcbcb;
     background-color: #f8f8f8;
   }
 
 
 ::-webkit-scrollbar {
   width: 10px;
   height: 10px;
 }
 
 ::-webkit-scrollbar-track {
   width: 6px;
   background: rgba(#101F1C, 0.1);
   -webkit-border-radius: 2em;
   -moz-border-radius: 2em;
   border-radius: 2em;
 }
 
 ::-webkit-scrollbar-thumb {
   background-color: rgba(144,147,153,.5);
   background-clip: padding-box;
   min-height: 28px;
   -webkit-border-radius: 2em;
   -moz-border-radius: 2em;
   border-radius: 2em;
   transition: background-color .3s;
   cursor: pointer;
 }
 
 ::-webkit-scrollbar-thumb:hover {
   background-color: rgba(144,147,153,.3);
 }
 
 `;
 
    const joinHtmlStr = function (content, createScriptFunc = () => {}) {
        return `
 <!DOCTYPE html>
 <html>
 <head>
     <base href="${window.location.origin}">
     ${createScriptFunc()}
 </head>
 <body>
     ${content}
 </body>
 </html>
 `
    };
 
    //
    //
    //
    //
    //
    //
 
    var script$a = {
      data() {
        return {
          _mdStr: '',
          htmlStr: '',
          iframeLink: '',
          iframeEl: null,
          iframeDoc: null,
          iframeHeight: null,
        };
      },
      props: {
        mdStr: {
          type: String,
        },
        scrolltop: {
          type: Number
        }
      },
      methods: {
        mountVueInstance() {
          this.iframeDoc = this.iframeEl?.contentDocument || this.iframeEl?.contentWindow?.document;
          const renderScriptEl = this.iframeDoc?.getElementById('__md_vue_render_script__');
          if (renderScriptEl) {
            renderScriptEl.parentElement.removeChild(renderScriptEl);
          }
          const script = this.iframeDoc?.createElement('script');
          script.id = '__md_vue_render_script__';
          script.textContent = `
         if(window.Vue) {
           for(let key in window.parent.__VUE_OPTIONS__) {
             new Vue(window.parent.__VUE_OPTIONS__[key]);
           }
         }
       `;
          this.iframeDoc.head.appendChild(script);
          this.iframeHeight = this.iframeDoc.body.offsetHeight;
        },
        createScripts() {
          if (!window.__MD_VUE_OPTIONS__) return
          const { _requireStaticMap, staticSource, registry } = window.__MD_VUE_OPTIONS__;
          const { __md_vue_vue__ } = _requireStaticMap;
          const { js, css } = staticSource;
          const jsScripts = [...js, { isRegistry: false, link: __md_vue_vue__ }].map(item => {
            return `<script src="${item.isRegistry ? `${registry}/${item.link}` : item.link}" ><\/script>`
          });
 
          const cssScripts = [...css, { isRegistry: false, link: str2link(defaultStyle, 'text/css') }].map(item => {
            return `<link href="${item.isRegistry ? `${registry}/${item.link}` : item.link}" rel="stylesheet" type="text/css"></link>`
          });
          console.log(cssScripts);
          const result = `${jsScripts.join('\n')}${cssScripts.join('\n')}`;
          return result;
 
        },
        loadIframe() {
          this.iframeLink = str2link(joinHtmlStr(this.htmlStr, this.createScripts), 'text/html');
          this.$refs.mdIframe.src = this.iframeLink;
          if (this.$refs.mdIframe.attachEvent) {
            this.$refs.mdIframe.attachEvent("onload", this.mountVueInstance);
          } else {
            this.$refs.mdIframe.onload = this.mountVueInstance;
          }
        },
        updateIframe() {
          this.iframeDoc = this.iframeEl?.contentDocument || this.iframeEl?.contentWindow?.document;
          this.iframeDoc.body.innerHTML = this.htmlStr;
        },
        renderHtml() {
          if (!this.iframeLink) {
            this.loadIframe();
          } else {
            this.updateIframe();
          }
        },
        mountParams(params) {
          window.globalParams = window.globalParams ? window.globalParams : {};
          window.globalParams = {
            ...window.globalParams,
            ...params
          };
       },
        mountCatalog() {
          this.iframeDoc.querySelector('#catalog-container').style.top = `${window.globalParams.scrolltop}px`;
        }
      },
      created() {
      },
      mounted() {
        this.iframeEl = this.$refs.mdIframe;
        this.iframeDoc = this.iframeEl.contentDocument || this.iframeEl.contentWindow.document;
        // this.mountScript();
      },
      watch: {
        mdStr: {
          immediate: true,
          handler: function (n) {
            this._mdStr = n;
            this.htmlStr = md2html(this._mdStr);
          }
        },
        htmlStr: {
          immediate: true,
          handler: function () {
            this.$nextTick(() => {
              this.renderHtml();
              this.mountVueInstance();
            }, 500);
          }
        },
        scrolltop: {
          immediate: true,
          handler: function (n = 0) {
            this.mountParams({scrolltop: n});
            this.mountCatalog();
          }
        }
      }
    };
 
    /* script */
    const __vue_script__$a = script$a;
 
    /* template */
    var __vue_render__$a = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "iframe-container" }, [
        _c("iframe", {
          ref: "mdIframe",
          style: _vm.iframeHeight
            ? "min-height:" + _vm.iframeHeight + "px;border:none;width:100%;"
            : "border:none;",
        }),
      ])
    };
    var __vue_staticRenderFns__$a = [];
    __vue_render__$a._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$a = function (inject) {
        if (!inject) return
        inject("data-v-5a7a7f0c_0", { source: ".render-wrapper[data-v-5a7a7f0c] {\n  word-break: break-word;\n}\n.iframe-container[data-v-5a7a7f0c] {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n}\n.iframe-container > iframe[data-v-5a7a7f0c] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n  word-break: break-word;\n}\n", map: {"version":3,"sources":["render.vue"],"names":[],"mappings":"AAAA;EACE,sBAAsB;AACxB;AACA;EACE,kBAAkB;EAClB,WAAW;EACX,YAAY;EACZ,YAAY;AACd;AACA;EACE,kBAAkB;EAClB,MAAM;EACN,OAAO;EACP,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,sBAAsB;AACxB","file":"render.vue","sourcesContent":[".render-wrapper {\n  word-break: break-word;\n}\n.iframe-container {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: none;\n}\n.iframe-container > iframe {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: none;\n  word-break: break-word;\n}\n"]}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$a = "data-v-5a7a7f0c";
      /* module identifier */
      const __vue_module_identifier__$a = undefined;
      /* functional template */
      const __vue_is_functional_template__$a = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$a = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$a, staticRenderFns: __vue_staticRenderFns__$a },
        __vue_inject_styles__$a,
        __vue_script__$a,
        __vue_scope_id__$a,
        __vue_is_functional_template__$a,
        __vue_module_identifier__$a,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$9 = {
      data() {
        return {
          timer: null,
          stop: {
            left: false,
            right: false,
          },
          leftScrollHeight: "",
          fixedScroll: '',
          rightScrollHeight: "",
          scrolltop: {
            left: 0,
            right: 0
          }
        };
      },
      computed: {},
      methods: {
        scrollHandler({ type }) {
          if (this.timer) clearTimeout(this.timer);
          if (this.clearFixedScrollTimer) {
            clearTimeout(this.clearFixedScrollTimer);
          }
          this.clearFixedScrollTimer = setTimeout(() => {
            this.fixedScroll = null;
            this.clearFixedScrollTimer = null;
          }, 100);
          if(this.fixedScroll && this.fixedScroll !== type) return
          this.fixedScroll = this.fixedScroll ?? type;
 
          const leftContainer = document.querySelector(".left");
          const rightContainer = document.querySelector(".right");
          this.scrolltop.right = rightContainer.scrollTop;
          this.scrolltop.left = leftContainer.scrollTop;
          this.timer = setTimeout(() => {
            switch (type) {
              case "left":
                leftContainer.scrollTop = Math.ceil(
                  leftContainer.scrollHeight *
                    (rightContainer.scrollTop / rightContainer.scrollHeight)
                );
                break;
              case "right":
                rightContainer.scrollTop = Math.ceil(
                  rightContainer.scrollHeight *
                    (leftContainer.scrollTop / leftContainer.scrollHeight)
                );
                break;
            }
          }, 5);
        },
      },
      mounted() {},
    };
 
    /* script */
    const __vue_script__$9 = script$9;
 
    /* template */
    var __vue_render__$9 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { ref: "wrapper", staticClass: "wrapper" }, [
        _c("div", { staticClass: "top" }, [_vm._t("top")], 2),
        _vm._v(" "),
        _c("div", { staticClass: "main" }, [
          _c(
            "div",
            {
              ref: "left",
              staticClass: "left",
              on: {
                scroll: function ($event) {
                  return _vm.scrollHandler({ type: "right" })
                },
              },
            },
            [_vm._t("edit", null, { scrolltop: _vm.scrolltop.left })],
            2
          ),
          _vm._v(" "),
          _c(
            "div",
            {
              ref: "right",
              staticClass: "right",
              on: {
                scroll: function ($event) {
                  return _vm.scrollHandler({ type: "left" })
                },
              },
            },
            [_vm._t("display", null, { scrolltop: _vm.scrolltop.right })],
            2
          ),
        ]),
      ])
    };
    var __vue_staticRenderFns__$9 = [];
    __vue_render__$9._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$9 = function (inject) {
        if (!inject) return
        inject("data-v-6534f422_0", { source: "\n.wrapper[data-v-6534f422] {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  width: 100%;\n}\n.top[data-v-6534f422],\n.top *[data-v-6534f422] {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  overflow: hidden; /* 隐藏整体滚动条 */\n}\n.top[data-v-6534f422] {\n  height: 30px; /* 顶部高度 */\n  background-color: #f2f2f2;\n}\n.main[data-v-6534f422] {\n  display: flex;\n  /* 左右布局的高度 */\n  height: calc(100% - 30px);\n  overflow: hidden; /* 隐藏左右布局的滚动条 */\n  -webkit-user-drag: none;\n}\n.left[data-v-6534f422],\n.right[data-v-6534f422] {\n  width: 50%; /* 左右布局各占50%宽度 */\n  overflow: auto; /* 启用滚动 */\n  border: 1px solid #ccc;\n  background-color: #ffffff;\n  height: calc(100% - 30px);\n}\n", map: {"version":3,"sources":["/Users/yixin/Desktop/vuepress-demo/markdown-vue/packages/layout/layout.vue"],"names":[],"mappings":";AA8EA;EACA,SAAA;EACA,UAAA;EACA,YAAA;EACA,WAAA;AACA;AACA;;EAEA,SAAA;EACA,UAAA;EACA,YAAA;EACA,gBAAA,EAAA,YAAA;AACA;AAEA;EACA,YAAA,EAAA,SAAA;EACA,yBAAA;AACA;AAEA;EACA,aAAA;EACA,YAAA;EACA,yBAAA;EACA,gBAAA,EAAA,eAAA;EACA,uBAAA;AACA;AAEA;;EAEA,UAAA,EAAA,gBAAA;EACA,cAAA,EAAA,SAAA;EACA,sBAAA;EACA,yBAAA;EACA,yBAAA;AACA","file":"layout.vue","sourcesContent":["<template>\n  <div ref=\"wrapper\" class=\"wrapper\">\n    <div class=\"top\">\n      <!-- 顶部内容 -->\n      <slot name=\"top\"></slot>\n    </div>\n    <div class=\"main\">\n      <div ref=\"left\" class=\"left\" @scroll=\"scrollHandler({ type: 'right' })\">\n        <!-- 左侧内容 -->\n        <slot name=\"edit\" :scrolltop=\"scrolltop.left\"/>\n      </div>\n      <div ref=\"right\" class=\"right\" @scroll=\"scrollHandler({ type: 'left' })\">\n        <!-- 右侧内容 -->\n        <slot name=\"display\" :scrolltop=\"scrolltop.right\"/>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      timer: null,\n      stop: {\n        left: false,\n        right: false,\n      },\n      leftScrollHeight: \"\",\n      fixedScroll: '',\n      rightScrollHeight: \"\",\n      scrolltop: {\n        left: 0,\n        right: 0\n      }\n    };\n  },\n  computed: {},\n  methods: {\n    scrollHandler({ type }) {\n      if (this.timer) clearTimeout(this.timer);\n      if (this.clearFixedScrollTimer) {\n        clearTimeout(this.clearFixedScrollTimer)\n      }\n      this.clearFixedScrollTimer = setTimeout(() => {\n        this.fixedScroll = null;\n        this.clearFixedScrollTimer = null;\n      }, 100);\n      if(this.fixedScroll && this.fixedScroll !== type) return\n      this.fixedScroll = this.fixedScroll ?? type;\n\n      const leftContainer = document.querySelector(\".left\");\n      const rightContainer = document.querySelector(\".right\");\n      this.scrolltop.right = rightContainer.scrollTop;\n      this.scrolltop.left = leftContainer.scrollTop;\n      this.timer = setTimeout(() => {\n        switch (type) {\n          case \"left\":\n            leftContainer.scrollTop = Math.ceil(\n              leftContainer.scrollHeight *\n                (rightContainer.scrollTop / rightContainer.scrollHeight)\n            );\n            break;\n          case \"right\":\n            rightContainer.scrollTop = Math.ceil(\n              rightContainer.scrollHeight *\n                (leftContainer.scrollTop / leftContainer.scrollHeight)\n            );\n            break;\n        }\n      }, 5);\n    },\n  },\n  mounted() {},\n};\n</script>\n\n<style scoped>\n.wrapper {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  width: 100%;\n}\n.top,\n.top * {\n  margin: 0;\n  padding: 0;\n  height: 100%;\n  overflow: hidden; /* 隐藏整体滚动条 */\n}\n\n.top {\n  height: 30px; /* 顶部高度 */\n  background-color: #f2f2f2;\n}\n\n.main {\n  display: flex;\n  /* 左右布局的高度 */\n  height: calc(100% - 30px);\n  overflow: hidden; /* 隐藏左右布局的滚动条 */\n  -webkit-user-drag: none;\n}\n\n.left,\n.right {\n  width: 50%; /* 左右布局各占50%宽度 */\n  overflow: auto; /* 启用滚动 */\n  border: 1px solid #ccc;\n  background-color: #ffffff;\n  height: calc(100% - 30px);\n}\n</style>\n"]}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$9 = "data-v-6534f422";
      /* module identifier */
      const __vue_module_identifier__$9 = undefined;
      /* functional template */
      const __vue_is_functional_template__$9 = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$9 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$9, staticRenderFns: __vue_staticRenderFns__$9 },
        __vue_inject_styles__$9,
        __vue_script__$9,
        __vue_scope_id__$9,
        __vue_is_functional_template__$9,
        __vue_module_identifier__$9,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$8 = {};
 
    /* script */
    const __vue_script__$8 = script$8;
 
    /* template */
    var __vue_render__$8 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M12 5v38M36 5v38M12 24h24",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$8 = [];
    __vue_render__$8._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$8 = undefined;
      /* scoped */
      const __vue_scope_id__$8 = "data-v-1209b781";
      /* module identifier */
      const __vue_module_identifier__$8 = undefined;
      /* functional template */
      const __vue_is_functional_template__$8 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$8 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$8, staticRenderFns: __vue_staticRenderFns__$8 },
        __vue_inject_styles__$8,
        __vue_script__$8,
        __vue_scope_id__$8,
        __vue_is_functional_template__$8,
        __vue_module_identifier__$8,
        false,
        undefined,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$7 = {};
 
    /* script */
    const __vue_script__$7 = script$7;
 
    /* template */
    var __vue_render__$7 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M24 24c5.506 0 9.969-4.477 9.969-10S29.506 4 24 4H11v20h13ZM28.031 44C33.537 44 38 39.523 38 34s-4.463-10-9.969-10H11v20h17.031Z",
                "clip-rule": "evenodd",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$7 = [];
    __vue_render__$7._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$7 = function (inject) {
        if (!inject) return
        inject("data-v-5c919b36_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"bold.vue"}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$7 = "data-v-5c919b36";
      /* module identifier */
      const __vue_module_identifier__$7 = undefined;
      /* functional template */
      const __vue_is_functional_template__$7 = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$7 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$7, staticRenderFns: __vue_staticRenderFns__$7 },
        __vue_inject_styles__$7,
        __vue_script__$7,
        __vue_scope_id__$7,
        __vue_is_functional_template__$7,
        __vue_module_identifier__$7,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$6 = {};
 
    /* script */
    const __vue_script__$6 = script$6;
 
    /* template */
    var __vue_render__$6 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M20 6h16M12 42h16M29 5.952 19 42",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$6 = [];
    __vue_render__$6._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$6 = function (inject) {
        if (!inject) return
        inject("data-v-303754c0_0", { source: "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"s.vue"}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$6 = "data-v-303754c0";
      /* module identifier */
      const __vue_module_identifier__$6 = undefined;
      /* functional template */
      const __vue_is_functional_template__$6 = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$6 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$6, staticRenderFns: __vue_staticRenderFns__$6 },
        __vue_inject_styles__$6,
        __vue_script__$6,
        __vue_scope_id__$6,
        __vue_is_functional_template__$6,
        __vue_module_identifier__$6,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$5 = {};
 
    /* script */
    const __vue_script__$5 = script$5;
 
    /* template */
    var __vue_render__$5 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "m26.24 16.373-9.14-9.14c-2.661-2.661-7.035-2.603-9.768.131-2.734 2.734-2.793 7.107-.131 9.768l7.935 7.936M32.903 23.003l7.935 7.935c2.661 2.662 2.603 7.035-.13 9.769-2.735 2.734-7.108 2.792-9.77.13l-9.14-9.14",
              },
            }),
            _vm._v(" "),
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M26.11 26.142c2.733-2.734 2.792-7.108.13-9.769M21.799 21.798c-2.734 2.734-2.792 7.108-.131 9.769",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$5 = [];
    __vue_render__$5._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$5 = undefined;
      /* scoped */
      const __vue_scope_id__$5 = undefined;
      /* module identifier */
      const __vue_module_identifier__$5 = undefined;
      /* functional template */
      const __vue_is_functional_template__$5 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$5 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$5, staticRenderFns: __vue_staticRenderFns__$5 },
        __vue_inject_styles__$5,
        __vue_script__$5,
        __vue_scope_id__$5,
        __vue_is_functional_template__$5,
        __vue_module_identifier__$5,
        false,
        undefined,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$4 = {};
 
    /* script */
    const __vue_script__$4 = script$4;
 
    /* template */
    var __vue_render__$4 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M5 10a2 2 0 0 1 2-2h34a2 2 0 0 1 2 2v28a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V10Z",
                "clip-rule": "evenodd",
              },
            }),
            _vm._v(" "),
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M14.5 18a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3Z",
                "clip-rule": "evenodd",
              },
            }),
            _vm._v(" "),
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "m15 24 5 4 6-7 17 13v4a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2v-4l10-10Z",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$4 = [];
    __vue_render__$4._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$4 = undefined;
      /* scoped */
      const __vue_scope_id__$4 = undefined;
      /* module identifier */
      const __vue_module_identifier__$4 = undefined;
      /* functional template */
      const __vue_is_functional_template__$4 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$4 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$4, staticRenderFns: __vue_staticRenderFns__$4 },
        __vue_inject_styles__$4,
        __vue_script__$4,
        __vue_scope_id__$4,
        __vue_is_functional_template__$4,
        __vue_module_identifier__$4,
        false,
        undefined,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$3 = {};
 
    /* script */
    const __vue_script__$3 = script$3;
 
    /* template */
    var __vue_render__$3 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M16 13 4 25.432 16 37M32 13l12 12.432L32 37",
              },
            }),
            _vm._v(" "),
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-width": "4",
                d: "m28 4-7 40",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$3 = [];
    __vue_render__$3._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$3 = undefined;
      /* scoped */
      const __vue_scope_id__$3 = undefined;
      /* module identifier */
      const __vue_module_identifier__$3 = undefined;
      /* functional template */
      const __vue_is_functional_template__$3 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$3 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$3, staticRenderFns: __vue_staticRenderFns__$3 },
        __vue_inject_styles__$3,
        __vue_script__$3,
        __vue_scope_id__$3,
        __vue_is_functional_template__$3,
        __vue_module_identifier__$3,
        false,
        undefined,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$2 = {};
 
    /* script */
    const __vue_script__$2 = script$2;
 
    /* template */
    var __vue_render__$2 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", [
        _c(
          "svg",
          {
            attrs: {
              xmlns: "http://www.w3.org/2000/svg",
              width: "1em",
              height: "1em",
              fill: "none",
              viewBox: "0 0 48 48",
            },
          },
          [
            _c("path", {
              attrs: {
                stroke: "currentColor",
                "stroke-linecap": "round",
                "stroke-linejoin": "round",
                "stroke-width": "4",
                d: "M16 4c-2 0-5 1-5 5v9c0 3-5 5-5 5s5 2 5 5v11c0 4 3 5 5 5M32 4c2 0 5 1 5 5v9c0 3 5 5 5 5s-5 2-5 5v11c0 4-3 5-5 5",
              },
            }),
          ]
        ),
      ])
    };
    var __vue_staticRenderFns__$2 = [];
    __vue_render__$2._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$2 = undefined;
      /* scoped */
      const __vue_scope_id__$2 = undefined;
      /* module identifier */
      const __vue_module_identifier__$2 = undefined;
      /* functional template */
      const __vue_is_functional_template__$2 = false;
      /* style inject */
      
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$2 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
        __vue_inject_styles__$2,
        __vue_script__$2,
        __vue_scope_id__$2,
        __vue_is_functional_template__$2,
        __vue_module_identifier__$2,
        false,
        undefined,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script$1 = {
      name: "editor-top-bar",
      components: {
        TitleSvg: __vue_component__$8,
        BlodSvg: __vue_component__$7,
        SSvg: __vue_component__$6,
        LinkSvg: __vue_component__$5,
        ImageSvg: __vue_component__$4,
        CodeSvg: __vue_component__$3,
        CodeBlockSvg: __vue_component__$2
      },
      data() {
        return {
          funcNames: ['Title', 'Blod', 'Italic', 'Link', 'Image', 'Code', 'CodeBlock']
        };
      },
      methods: {
        openFileUploader() {
          const uploadBtnEl = this.$refs['uploadBtnEl'];
          uploadBtnEl.click();
        },
        addMenusHandler(type) {
          bus.$emit(`topBarMenu:${type}`);
        },
        onFileChange(event) {
          const fileInput = event.target;
          const selectedFile = fileInput.files[0];
          bus.$emit('topBarMenu:Image', { file: selectedFile });
        },
      },
      mounted() {
        
      }
    };
 
    /* script */
    const __vue_script__$1 = script$1;
 
    /* template */
    var __vue_render__$1 = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c("div", { staticClass: "editor-top-bar" }, [
        _c(
          "div",
          {
            on: {
              click: function ($event) {
                return _vm.addMenusHandler("Title")
              },
            },
          },
          [_c("TitleSvg")],
          1
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            on: {
              click: function ($event) {
                return _vm.addMenusHandler("Blod")
              },
            },
          },
          [_c("BlodSvg")],
          1
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            on: {
              click: function ($event) {
                return _vm.addMenusHandler("Italic")
              },
            },
          },
          [_c("SSvg")],
          1
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            on: {
              click: function ($event) {
                return _vm.addMenusHandler("Link")
              },
            },
          },
          [_c("LinkSvg")],
          1
        ),
        _vm._v(" "),
        _c("div", { on: { click: _vm.openFileUploader } }, [_c("ImageSvg")], 1),
        _vm._v(" "),
        _c(
          "div",
          {
            on: {
              click: function ($event) {
                return _vm.addMenusHandler("Code")
              },
            },
          },
          [_c("CodeSvg")],
          1
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            on: {
              click: function ($event) {
                return _vm.addMenusHandler("CodeBlock")
              },
            },
          },
          [_c("span", { staticStyle: { "margin-top": "-4px" } }, [_vm._v("Vue")])]
        ),
        _vm._v(" "),
        _c("div", { staticStyle: { display: "none" } }, [
          _c("input", {
            ref: "uploadBtnEl",
            attrs: { type: "file" },
            on: { change: _vm.onFileChange },
          }),
        ]),
      ])
    };
    var __vue_staticRenderFns__$1 = [];
    __vue_render__$1._withStripped = true;
 
      /* style */
      const __vue_inject_styles__$1 = function (inject) {
        if (!inject) return
        inject("data-v-ace7ef36_0", { source: ".editor-top-bar[data-v-ace7ef36] {\n  display: flex;\n  align-items: center;\n}\n.editor-top-bar > div[data-v-ace7ef36] {\n  width: 30px;\n  text-align: center;\n  cursor: pointer;\n  border: 1px solid transparent;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 5px;\n}\n.editor-top-bar > div[data-v-ace7ef36]:hover {\n  border: 1px #ccc solid;\n}\n", map: {"version":3,"sources":["index.vue"],"names":[],"mappings":"AAAA;EACE,aAAa;EACb,mBAAmB;AACrB;AACA;EACE,WAAW;EACX,kBAAkB;EAClB,eAAe;EACf,6BAA6B;EAC7B,aAAa;EACb,mBAAmB;EACnB,uBAAuB;EACvB,gBAAgB;AAClB;AACA;EACE,sBAAsB;AACxB","file":"index.vue","sourcesContent":[".editor-top-bar {\n  display: flex;\n  align-items: center;\n}\n.editor-top-bar > div {\n  width: 30px;\n  text-align: center;\n  cursor: pointer;\n  border: 1px solid transparent;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding-top: 5px;\n}\n.editor-top-bar > div:hover {\n  border: 1px #ccc solid;\n}\n"]}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__$1 = "data-v-ace7ef36";
      /* module identifier */
      const __vue_module_identifier__$1 = undefined;
      /* functional template */
      const __vue_is_functional_template__$1 = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__$1 = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
        __vue_inject_styles__$1,
        __vue_script__$1,
        __vue_scope_id__$1,
        __vue_is_functional_template__$1,
        __vue_module_identifier__$1,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
 
    var script = {
      name: "vue-editor",
      components: {
        EditorTopBar: __vue_component__$1,
        AutoEditSdk: __vue_component__$b,
        Render: __vue_component__$a,
        Layout: __vue_component__$9
      },
      props: {
        value: {
          default: '',
          type: String
        },
        uploadAction: {
          default: () => {},
          type: Function
        }
      },
      data() {
        return {
          mdStr: this.value
        }
      },
      methods: {
        mdStrChange(value) {
          this.mdStr = value;
        },
        async uploadImage({ file, uploadImageCallback }) {
          const url = await this.uploadAction({ file });
          if(url) uploadImageCallback({url});
        },
        watchHandler() {
          bus.$on('uploadImage', (data) => {
            this.uploadImage(data);
          });
        }
      },
      mounted() {
        this.watchHandler();
      },
      watch: {
        mdStr: {
          immediate: true,
          handler: function (n) {
            this.$emit('input', n);
            this.$emit('change', n);
          }
        },
        value: {
          immediate: true,
          handler: function (n) {
            this.mdStr = n;
          }
        }
      }
    };
 
    /* script */
    const __vue_script__ = script;
 
    /* template */
    var __vue_render__ = function () {
      var _vm = this;
      var _h = _vm.$createElement;
      var _c = _vm._self._c || _h;
      return _c(
        "div",
        { attrs: { id: "vue-editor" } },
        [
          _c("Layout", {
            scopedSlots: _vm._u([
              {
                key: "top",
                fn: function () {
                  return [_c("editor-top-bar", { staticClass: "top-bar-part" })]
                },
                proxy: true,
              },
              {
                key: "edit",
                fn: function () {
                  return [
                    _c("AutoEditSdk", {
                      staticClass: "editor-part",
                      on: { mdStrChange: _vm.mdStrChange },
                      model: {
                        value: _vm.mdStr,
                        callback: function ($$v) {
                          _vm.mdStr = $$v;
                        },
                        expression: "mdStr",
                      },
                    }),
                  ]
                },
                proxy: true,
              },
              {
                key: "display",
                fn: function (display) {
                  return [
                    _c("Render", {
                      staticClass: "display-part",
                      attrs: { mdStr: _vm.mdStr, scrolltop: display.scrolltop },
                    }),
                  ]
                },
              },
            ]),
          }),
        ],
        1
      )
    };
    var __vue_staticRenderFns__ = [];
    __vue_render__._withStripped = true;
 
      /* style */
      const __vue_inject_styles__ = function (inject) {
        if (!inject) return
        inject("data-v-17277126_0", { source: "@import url('./common/css.css');\n#vue-editor[data-v-17277126] {\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  box-sizing: border-box;\n}\n", map: {"version":3,"sources":["vue-editor.vue"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B;EACE,WAAW;EACX,YAAY;EACZ,YAAY;EACZ,sBAAsB;AACxB","file":"vue-editor.vue","sourcesContent":["@import url('./common/css.css');\n#vue-editor {\n  width: 100%;\n  height: 100%;\n  padding: 5px;\n  box-sizing: border-box;\n}\n"]}, media: undefined });
 
      };
      /* scoped */
      const __vue_scope_id__ = "data-v-17277126";
      /* module identifier */
      const __vue_module_identifier__ = undefined;
      /* functional template */
      const __vue_is_functional_template__ = false;
      /* style inject SSR */
      
      /* style inject shadow dom */
      
 
      
      const __vue_component__ = /*#__PURE__*/normalizeComponent(
        { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
        __vue_inject_styles__,
        __vue_script__,
        __vue_scope_id__,
        __vue_is_functional_template__,
        __vue_module_identifier__,
        false,
        createInjector,
        undefined,
        undefined
      );
 
    // const script = document.createElement("script");
    // script.src="https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.common.dev.js";
    // window.document.body.appendChild(script);
 
    const VueEditor = {
        // markdownIt: vueEditor.mixins[0].data().markdownIt,
        vueEditor: __vue_component__,
        // LeftToolbar: require('./components/md-toolbar-left'),
        // RightToolbar: require('./components/md-toolbar-right'),
        install: function(Vue) {
            Vue.component('vue-editor', __vue_component__);
        }
    };
    window.VueEditorComp = __vue_component__;
 
    return VueEditor;
 
 }));
 